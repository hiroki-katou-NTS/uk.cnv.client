var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var util;
        (function (util) {
            var browser = /** @class */ (function () {
                function browser() {
                }
                Object.defineProperty(browser, "portrait", {
                    get: function () {
                        return !this.landscapse;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(browser, "landscapse", {
                    get: function () {
                        return window.innerWidth > window.innerHeight;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(browser, "mobile", {
                    get: function () {
                        var check = false;
                        (function (a) {
                            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) {
                                check = true;
                            }
                        })(navigator.userAgent || navigator.vendor || window.opera);
                        return check;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(browser, "tablet", {
                    get: function () {
                        var check = false;
                        (function (a) {
                            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) {
                                check = true;
                            }
                        })(navigator.userAgent || navigator.vendor || window.opera);
                        return check;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(browser, "mp", {
                    /**
                     * Mobile and portrait
                     */
                    get: function () {
                        return this.mobile && this.portrait;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(browser, "ml", {
                    /**
                     * Mobile and landscapse
                     */
                    get: function () {
                        return this.mobile && this.landscapse;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(browser, "ios", {
                    get: function () {
                        return /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(browser, "width", {
                    get: function () {
                        return window.innerWidth;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(browser, "height", {
                    get: function () {
                        return window.innerHeight;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(browser, "version", {
                    get: function () {
                        var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
                        if (/trident/i.test(M[1])) {
                            tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
                            return 'IE ' + (tem[1] || '');
                        }
                        if (M[1] === 'Chrome') {
                            tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
                            if (tem != null) {
                                return tem.slice(1).join(' ').replace('OPR', 'Opera');
                            }
                        }
                        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
                        // tslint:disable-next-line: no-conditional-assignment
                        if ((tem = ua.match(/version\/(\d+)/i)) != null) {
                            M.splice(1, 1, tem[1]);
                        }
                        return M.join(' ');
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(browser, "private", {
                    get: function () {
                        var d = $.Deferred();
                        var $wd = window, yes = function () { return d.resolve(true); }, // is in private mode
                        not = function () { return d.resolve(false); }, // not in private mode
                        testLocalStorage = function () {
                            try {
                                if (uk.localStorage.length) {
                                    not();
                                }
                                else {
                                    uk.localStorage.x = 1;
                                    uk.localStorage.removeItem('x');
                                    not();
                                }
                            }
                            catch (e) {
                                // Safari only enables cookie in private mode
                                // if cookie is disabled, then all client side storage is disabled
                                // if all client side storage is disabled, then there is no point
                                // in using private mode
                                navigator.cookieEnabled ? yes() : not();
                            }
                        };
                        // Chrome & Opera
                        if ($wd.webkitRequestFileSystem) {
                            $wd.webkitRequestFileSystem(1, 0, not, yes);
                            return d.promise();
                        }
                        // Firefox
                        if ('MozAppearance' in document.documentElement.style) {
                            if (indexedDB === null) {
                                yes();
                            }
                            else {
                                var db = indexedDB.open('test');
                                db.onerror = yes;
                                db.onsuccess = not;
                            }
                            return d.promise();
                        }
                        // Safari
                        var isSafari = navigator.userAgent.match(/Version\/([0-9\._]+).*Safari/);
                        if (isSafari) {
                            var version = parseInt(isSafari[1], 10);
                            if (version < 11) {
                                testLocalStorage();
                            }
                            try {
                                $wd.openDatabase(null, null, null, null);
                                not();
                            }
                            catch (_) {
                                yes();
                            }
                            return d.promise();
                        }
                        // IE10+ & Edge InPrivate
                        if (!$wd.indexedDB && ($wd.PointerEvent || $wd.MSPointerEvent)) {
                            yes();
                            return d.promise();
                        }
                        // default navigation mode
                        not();
                        return d.promise();
                    },
                    enumerable: true,
                    configurable: true
                });
                return browser;
            }());
            util.browser = browser;
        })(util = uk.util || (uk.util = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var b = nts.uk.util.browser;
b.private.then(function (v) {
    if (v) {
        if (b.ios && b.version === 'Safari 10') {
            document.body.innerHTML = '<div style="text-align: center; font-size: 2em; padding: 2em 1em;">現在ご利用の端末は、プライベートモードでは正常に動作しない可能性があります。\n通常モードで起動してください。</div>';
        }
    }
});
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var devices;
        (function (devices) {
            var WS_URI = "ws://127.0.0.1:18080/pasori/";
            var instance = null;
            var callback = null;
            var Felica = /** @class */ (function () {
                function Felica() {
                    var fc = this;
                    // create socket for connect to c# app
                    fc.socket = new WebSocket(WS_URI);
                    fc.socket.onopen = function $open(evt) {
                        if (callback) {
                            callback('open', undefined, undefined);
                        }
                    };
                    fc.socket.onclose = function $close(evt) {
                        if (callback) {
                            callback('close', undefined, undefined);
                        }
                    };
                    fc.socket.onmessage = function $message(evt) {
                        var json = JSON.parse(evt.data);
                        if (!callback || json.Category.toUpperCase() !== "FELICA") {
                            return;
                        }
                        // if message pass (send from felica app)
                        switch (json.Command) {
                            case 'S':
                                callback('status', json.ReaderConnected, undefined);
                                break;
                            case 'C':
                                callback('connect', undefined, undefined);
                                break;
                            case 'D':
                                callback('disconnect', undefined, undefined);
                                break;
                            case 'R':
                                callback('read', undefined, json.CardNo);
                                break;
                        }
                    };
                }
                return Felica;
            }());
            // export only create method for Felica class
            function felica(cb) {
                // if reconnect, close old connect
                if (instance && instance.socket.OPEN) {
                    instance.socket.close();
                }
                // register callback function
                callback = cb;
                // create new instance (and new socket connection)
                return instance = new Felica();
            }
            devices.felica = felica;
        })(devices = uk.devices || (uk.devices = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ntsNumber;
        (function (ntsNumber) {
            function isInteger(value, option) {
                if (option !== undefined && option.groupseperator !== undefined) {
                    var seperator = typeof option.groupseperator === 'function' ? option.groupseperator() : option.groupseperator;
                    value = isInteger(value) ? value : uk.text.replaceAll(value.toString(), seperator, '');
                }
                return !isNaN(value) && parseInt(value) == value && !isNaN(parseInt(value, 10));
            }
            function isDecimal(value, option) {
                if (option !== undefined) {
                    var seperator = typeof option.groupseperator === 'function' ? option.groupseperator() : option.groupseperator;
                    value = isDecimal(value) || seperator === undefined ? value : uk.text.replaceAll(value.toString(), seperator, '');
                }
                return !isNaN(value) && parseFloat(value) == value && !isNaN(parseFloat(value));
            }
            function isNumber(value, isDecimalValue, option, message) {
                if (isDecimalValue) {
                    if (message !== undefined)
                        message.id = 'MsgB_11';
                    return isDecimal(value, option);
                }
                else {
                    if (message !== undefined)
                        message.id = 'MsgB_8';
                    return isInteger(value, option);
                }
            }
            ntsNumber.isNumber = isNumber;
            function isHalfInt(value, message) {
                var val = parseFloat(value);
                if (message !== undefined)
                    message.id = 'MsgB_14';
                if (val !== NaN && (val * 2) % 1 === 0)
                    return true;
                return false;
            }
            ntsNumber.isHalfInt = isHalfInt;
            ntsNumber.trunc = (typeof Math.trunc === 'function') ? Math.trunc : function (value) { return value > 0 ? Math.floor(value) : Math.ceil(value); };
            function getDecimal(value, scale) {
                var scaleX = Math.pow(10, scale);
                return ntsNumber.trunc(value * scaleX) / scaleX;
            }
            ntsNumber.getDecimal = getDecimal;
            function formatNumber(value, formatOption) {
                if (value === undefined || value === null || value.toString().trim().lenth <= 0) {
                    return value;
                }
                switch (formatOption.formatId) {
                    case 'Number_Separated':
                        formatOption.grouplength = 3;
                        break;
                }
                var groupSeperator = formatOption.groupseperator ? formatOption.groupseperator : ',';
                var groupLength = formatOption.grouplength ? formatOption.grouplength : 0;
                var decimalSeperator = formatOption.decimalseperator ? formatOption.decimalseperator : ".";
                var decimalLength = formatOption.decimallength ? formatOption.decimallength : 0;
                var formattedValue = "";
                var stringValue = uk.text.replaceAll(value.toString().trim(), groupSeperator, '');
                var isMinus = stringValue.charAt(0) === '-';
                var values = isMinus ? stringValue.split('-')[1].split(decimalSeperator) : stringValue.split(decimalSeperator);
                isMinus = parseFloat(stringValue) < 0;
                if (groupLength > 0) {
                    var x = values[0].split('').reverse().join('');
                    for (var i = 0; i < x.length;) {
                        formattedValue += x.substr(i, groupLength) + (x.length > i + groupLength ? groupSeperator : "");
                        i += groupLength;
                    }
                    formattedValue = formattedValue.split('').reverse().join('');
                }
                else {
                    formattedValue = values[0];
                }
                if (formattedValue.indexOf("0") >= 0) {
                    formattedValue = uk.text.removeFromStart(uk.text.removeFromStart(formattedValue, '0'), groupSeperator);
                    if (formattedValue === "") {
                        formattedValue = 0;
                    }
                }
                if (values[1] === undefined || decimalLength > values[1].length) {
                    values[1] = uk.text.padRight(values[1] ? values[1] : "", '0', values[1] ? decimalLength : decimalLength + 1);
                }
                else {
                    values[1] = values[1].substr(0, decimalLength);
                }
                values[1] = uk.text.splitOrPadRight(values[1], decimalLength, '0');
                return (isMinus ? '-' : '') + formattedValue + (decimalLength <= 0 ? '' : decimalSeperator + values[1]);
            }
            ntsNumber.formatNumber = formatNumber;
            function applyFormat(format, target, formatter) {
                if (formatter === undefined)
                    formatter = getFormatter();
                switch (format) {
                    case 'Number_Separated':
                        return formatter.numberSeparate(target);
                }
            }
            ntsNumber.applyFormat = applyFormat;
            var NumberFormatter = /** @class */ (function () {
                function NumberFormatter() {
                }
                NumberFormatter.prototype.numberSeparate = function (target) {
                    var option = {
                        groupseperator: ',',
                        grouplength: 3,
                        formatId: 'Number_Separated'
                    };
                    if (isInteger(target, option)) {
                        return formatNumber(target, option);
                    }
                    return target;
                };
                NumberFormatter.prototype.isNumberFormat = function (format) {
                    return format === 'Number_Separated';
                };
                return NumberFormatter;
            }());
            ntsNumber.NumberFormatter = NumberFormatter;
            function getFormatter() {
                switch (systemLanguage) {
                    case 'ja':
                        return new NumberFormatter();
                    case 'en':
                        return null;
                }
            }
            ntsNumber.getFormatter = getFormatter;
        })(ntsNumber = uk.ntsNumber || (uk.ntsNumber = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var KeyCodes;
        (function (KeyCodes) {
            KeyCodes.Tab = 9;
            KeyCodes.Enter = 13;
            KeyCodes.Ctrl = 17;
            KeyCodes.NotValueKeys = [9, 16, 17, 18, 19, 20, 27, 33, 34, 35, 36, 37, 38, 39,
                40, 91, 92, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 144, 145];
        })(KeyCodes = uk.KeyCodes || (uk.KeyCodes = {}));
        var util;
        (function (util) {
            function compare(obj1, obj2) {
                for (var p in obj1) {
                    if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) {
                        return false;
                    }
                    switch (typeof (obj1[p])) {
                        case "object":
                            if (!compare(obj1[p], obj2[p]))
                                return false;
                            break;
                        case "function":
                            break;
                        default:
                            if (obj1[p] !== obj2[p]) {
                                return false;
                            }
                    }
                }
                for (var p in obj2) {
                    if (typeof (obj1[p]) == 'undefined')
                        return false;
                }
                return true;
            }
            util.compare = compare;
            /**
             * 常にtrueを返す関数が必要になったらこれ
             */
            function alwaysTrue() {
                return true;
            }
            util.alwaysTrue = alwaysTrue;
            /**
             * function find an item index in array
             * if key presented will perform find index of item in array which contain key equal to the 'item' parameter
             */
            function findIndex(arr, value, key) {
                for (var i = 0; i < arr.length; i++) {
                    var item = arr[i];
                    if (item[key] === value)
                        return i;
                }
                return -1;
            }
            util.findIndex = findIndex;
            /** function add item to array, this function is used in combine with visitDfs function
             * visitDfs(node, addToArray, childField, arr) will return flatArray by DFS order, start by node and following by each child belong to it.
             */
            function addToArray(node, arr) {
                arr.push(node);
            }
            /**
             * DFS algorithm function to iterate over an object with structre like tree
             */
            function visitDfs(node, func, childField, arr) {
                if (func) {
                    if (arr)
                        func(node, arr);
                    else
                        func(node);
                }
                var childs = node[childField];
                $.each(childs, function (child) {
                    visitDfs(childs[child], func, childField, arr);
                });
            }
            util.visitDfs = visitDfs;
            /**
             * return flatern array of array of tree-like objects
             */
            function flatArray(arr, childField) {
                var flatArr = [];
                if (!childField)
                    return arr;
                for (var i = 0; i < arr.length; i++) {
                    var item = arr[i];
                    visitDfs(item, addToArray, childField, flatArr);
                }
                return flatArr;
            }
            util.flatArray = flatArray;
            /**
             * return filtered array
             * @param {Array} array of items
             * @param {String} user input
             * @param {Array} array of fields used to search on
             * @param {String} if not null, search will perform in flatarray of arr
             */
            function searchArray(arr, searchTerm, fields, childField) {
                //if items is empty return empty array
                if (!arr) {
                    return [];
                }
                if (!(searchTerm instanceof String)) {
                    searchTerm = "" + searchTerm;
                }
                var flatArr = flatArray(arr, childField);
                var filter = searchTerm.toLowerCase();
                //if filter is empty return all the items
                if (!filter) {
                    return flatArr;
                }
                //filter data
                var filtered = flatArr.filter(function (item) {
                    var i = fields.length;
                    while (i--) {
                        var prop = fields[i];
                        var strProp = ("" + item[prop]).toLocaleLowerCase();
                        if (strProp.indexOf(filter) !== -1) {
                            return true;
                        }
                        ;
                    }
                    return false;
                });
                return filtered;
            }
            util.searchArray = searchArray;
            /**
             * SearchBox helper function to jump next search
             */
            function nextSelectionSearch(selected, arr, selectedKey, isArray) {
                var current = null;
                if (isArray) {
                    if (selected.length > 0)
                        current = selected[0];
                }
                else if (selected !== undefined && selected !== '' && selected !== null) {
                    current = selected;
                }
                if (arr.length > 0) {
                    if (current) {
                        for (var i = 0; i < arr.length - 1; i++) {
                            var item = arr[i];
                            if (item[selectedKey] === current)
                                return arr[i + 1][selectedKey];
                        }
                    }
                    if (selectedKey)
                        return arr[0][selectedKey];
                    return arr[0];
                }
                return undefined;
            }
            util.nextSelectionSearch = nextSelectionSearch;
            /**
             * Returns true if the target is null or undefined.
             */
            function isNullOrUndefined(target) {
                return target === null || target === undefined;
            }
            util.isNullOrUndefined = isNullOrUndefined;
            /**
             * Returns true if the target is null or undefined or blank.
             * @param  {any} [target] Target need to check
             * @return {boolean}      True for blank
             */
            function isNullOrEmpty(target) {
                return (target === undefined || target === null || target.length == 0);
            }
            util.isNullOrEmpty = isNullOrEmpty;
            /**
             * Generate random identifier string (UUIDv4)
             */
            function randomId() {
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0;
                    return ((c == 'x') ? r : (r & 0x3 | 0x8)).toString(16);
                });
            }
            util.randomId = randomId;
            /**
             * Returns true if current window is in frame.
             */
            function isInFrame() {
                return window.parent != window;
            }
            util.isInFrame = isInFrame;
            /**
             * valueMaybeEmptyがnullまたはundefinedの場合、defaultValueを返す。
             * そうでなければ、valueMaybeEmptyを返す。
             */
            function orDefault(valueMaybeEmpty, defaultValue) {
                return isNullOrUndefined(valueMaybeEmpty) ? defaultValue : valueMaybeEmpty;
            }
            util.orDefault = orDefault;
            function getConstraintMes(primitiveValues) {
                if (isNullOrEmpty(primitiveValues)) {
                    return "";
                }
                if (!Array.isArray(primitiveValues))
                    primitiveValues = [primitiveValues];
                var constraintText = "";
                _.forEach(primitiveValues, function (primitiveValue) {
                    var constraint = __viewContext.primitiveValueConstraints[primitiveValue];
                    switch (constraint.valueType) {
                        case 'String':
                            constraintText += (constraintText.length > 0) ? "/" : "";
                            constraintText += uk.text.getCharType(primitiveValue).buildConstraintText(constraint.maxLength);
                            break;
                        case 'Decimal':
                        case 'Integer':
                        case 'Date':
                        case 'Time':
                        case 'Clock':
                        case 'Duration': // ValidatorScriptではない。DynamicConstraintで使う？
                        case 'TimePoint': // ValidatorScriptではない。DynamicConstraintで使う？
                            constraintText += (constraintText.length > 0) ? "/" : "";
                            constraintText += constraint.min + "～" + constraint.max;
                            break;
                        default:
                            constraintText += 'ERROR';
                            break;
                    }
                });
                return constraintText;
            }
            util.getConstraintMes = getConstraintMes;
            function getConstraintLabel(primitiveValues) {
                var constraintText = getConstraintMes(primitiveValues);
                return "<span class='constraint-label'>(" + constraintText + ")</span>";
            }
            util.getConstraintLabel = getConstraintLabel;
            /**
             * Returns true if expects contains actual.
             */
            function isIn(actual, expects) {
                for (var i = 0; i < expects.length; i++) {
                    if (actual === expects[i])
                        return true;
                }
                return false;
            }
            util.isIn = isIn;
            ;
            function createTreeFromString(original, openChar, closeChar, seperatorChar, operatorChar) {
                var result = convertToTree(original, openChar, closeChar, seperatorChar, 1, operatorChar).result;
                //            result = moveToParentIfEmpty(result);
                return result;
            }
            util.createTreeFromString = createTreeFromString;
            function moveToParentIfEmpty(tree) {
                var result = [];
                _.forEach(tree, function (e) {
                    if (e.children.length > 0) {
                        e.children = moveToParentIfEmpty(e.children);
                        if (uk.text.isNullOrEmpty(e.value)) {
                            result = result.concat(e.children);
                        }
                        else {
                            result.push(e);
                        }
                    }
                    else {
                        result.push(e);
                    }
                });
                return result;
            }
            function convertToTree(original, openChar, closeChar, separatorChar, index, operatorChar) {
                var result = [];
                while (original.trim().length > 0) {
                    var firstOpenIndex = original.indexOf(openChar);
                    if (firstOpenIndex < 0) {
                        var values = original.split(separatorChar);
                        _.forEach(values, function (value) {
                            var data = splitByArray(value, operatorChar.slice());
                            _.each(data, function (v) {
                                var object = new TreeObject();
                                object.value = v;
                                object.children = [];
                                object.isOperator = operatorChar.indexOf(v) >= 0;
                                result.push(object);
                            });
                        });
                        return {
                            "result": result,
                            "index": index
                        };
                    }
                    else {
                        var object = new TreeObject();
                        object.value = original.substring(0, firstOpenIndex).trim();
                        object.index = index;
                        var closeIndex = findIndexOfCloseChar(original, openChar, closeChar, firstOpenIndex);
                        if (closeIndex >= 0) {
                            index++;
                            var res = convertToTree(original.substring(firstOpenIndex + 1, closeIndex).trim(), openChar, closeChar, separatorChar, index, operatorChar);
                            object.children = res.result;
                            index = res.index++;
                            result.push(object);
                            var firstSeperatorIndex = original.indexOf(separatorChar, closeIndex);
                            if (firstSeperatorIndex >= 0) {
                                original = original.substring(firstSeperatorIndex + 1, original.length).trim();
                            }
                            else {
                                return {
                                    "result": result,
                                    "index": index
                                };
                            }
                        }
                        else {
                            return {
                                "result": result,
                                "index": index
                            };
                        }
                    }
                }
                return {
                    "result": result,
                    "index": index
                };
            }
            function splitByArray(original, operatorChar) {
                var temp = [];
                var result = [];
                if (original.trim().length <= 0) {
                    return temp;
                }
                if (operatorChar.length <= 0) {
                    return [original];
                }
                var operator = operatorChar.shift();
                while (original.trim().length > 0) {
                    var index = original.indexOf(operator);
                    if (index >= 0) {
                        temp.push(original.substring(0, index).trim());
                        temp.push(original.substring(index, index + 1).trim());
                        original = original.substring(index + 1, original.length).trim();
                    }
                    else {
                        temp.push(original);
                        break;
                    }
                }
                _.each(temp, function (value) {
                    result = result.concat(splitByArray(value, operatorChar));
                });
                return result;
            }
            function findIndexOfCloseChar(original, openChar, closeChar, firstOpenIndex) {
                var openCount = 0;
                var closeCount = 0;
                for (var i = firstOpenIndex; i < original.length; i++) {
                    if (original.charAt(i) === openChar) {
                        openCount++;
                    }
                    else if (original.charAt(i) === closeChar) {
                        closeCount++;
                    }
                    if (openCount > 0 && openCount === closeCount) {
                        return i;
                    }
                }
                return -1;
            }
            var TreeObject = /** @class */ (function () {
                function TreeObject(value, children, index, isOperator) {
                    var self = this;
                    self.value = value;
                    self.children = children;
                    self.index = index;
                    self.isOperator = isOperator;
                }
                return TreeObject;
            }());
            util.TreeObject = TreeObject;
            /**
             * Like Java Optional
             */
            var optional;
            (function (optional) {
                function of(value) {
                    return new Optional(value);
                }
                optional.of = of;
                function empty() {
                    return new Optional(null);
                }
                optional.empty = empty;
                var Optional = /** @class */ (function () {
                    function Optional(value) {
                        this.value = orDefault(value, null);
                    }
                    Optional.prototype.ifPresent = function (consumer) {
                        if (this.isPresent()) {
                            consumer(this.value);
                        }
                        return this;
                    };
                    Optional.prototype.ifEmpty = function (action) {
                        if (!this.isPresent()) {
                            action();
                        }
                        return this;
                    };
                    Optional.prototype.map = function (mapper) {
                        return this.isPresent() ? of(mapper(this.value)) : empty();
                    };
                    Optional.prototype.isPresent = function () {
                        return this.value !== null;
                    };
                    Optional.prototype.get = function () {
                        if (!this.isPresent()) {
                            throw new Error('not present');
                        }
                        return this.value;
                    };
                    Optional.prototype.orElse = function (stead) {
                        return this.isPresent() ? this.value : stead;
                    };
                    Optional.prototype.orElseThrow = function (errorBuilder) {
                        if (!this.isPresent()) {
                            throw errorBuilder();
                        }
                    };
                    return Optional;
                }());
                optional.Optional = Optional;
            })(optional = util.optional || (util.optional = {}));
            var Range = /** @class */ (function () {
                function Range(start, end) {
                    if (start > end) {
                        throw new Error('start is larger than end');
                    }
                    this.start = start;
                    this.end = end;
                }
                Range.prototype.contains = function (value) {
                    return this.start <= value && value <= this.end;
                };
                Range.prototype.greaterThan = function (value) {
                    return value < this.start;
                };
                Range.prototype.greaterThanOrEqualTo = function (value) {
                    return value <= this.start;
                };
                Range.prototype.lessThan = function (value) {
                    return this.end < value;
                };
                Range.prototype.lessThanOrEqualTo = function (value) {
                    return this.end <= value;
                };
                Range.prototype.distanceFrom = function (value) {
                    if (this.greaterThan(value)) {
                        return value - this.start;
                    }
                    else if (this.lessThan(value)) {
                        return value - this.end;
                    }
                    else {
                        return 0;
                    }
                };
                return Range;
            }());
            util.Range = Range;
            var value;
            (function (value) {
                function reset($controls, defaultVal, immediateApply) {
                    var resetEvent = new CustomEvent(DefaultValue.RESET_EVT, {
                        detail: {
                            value: defaultVal,
                            immediateApply: immediateApply === undefined ? true : immediateApply
                        }
                    });
                    _.forEach($controls, function (control) {
                        control.dispatchEvent(resetEvent);
                    });
                }
                value.reset = reset;
                var DefaultValue = /** @class */ (function () {
                    function DefaultValue() {
                    }
                    DefaultValue.prototype.onReset = function ($control, koValue) {
                        var self = this;
                        $control.addClass("reset-element");
                        $control.on(DefaultValue.RESET_EVT, function (e) {
                            var param = e.detail;
                            self.asDefault($(this), koValue, param.value, param.immediateApply);
                        });
                        return this;
                    };
                    DefaultValue.prototype.applyReset = function ($control, koValue) {
                        var defaultVal = _.cloneDeep($control.data("default"));
                        var isDirty = defaultVal !== koValue();
                        if ($control.ntsError("hasError"))
                            $control.ntsError("clear");
                        if (defaultVal !== undefined && isDirty)
                            setTimeout(function () { return koValue(defaultVal); }, 0);
                        return { isDirty: isDirty };
                    };
                    DefaultValue.prototype.asDefault = function ($control, koValue, defaultValue, immediateApply) {
                        var defaultVal = defaultValue !== undefined ? defaultValue : koValue();
                        $control.data("default", defaultVal);
                        if (immediateApply)
                            this.applyReset($control, koValue);
                    };
                    DefaultValue.RESET_EVT = "reset";
                    return DefaultValue;
                }());
                value.DefaultValue = DefaultValue;
            })(value = util.value || (util.value = {}));
            var accessor;
            (function (accessor) {
                function defineInto(obj) {
                    return new AccessorDefine(obj);
                }
                accessor.defineInto = defineInto;
                var AccessorDefine = /** @class */ (function () {
                    function AccessorDefine(obj) {
                        this.obj = obj;
                    }
                    AccessorDefine.prototype.get = function (name, func) {
                        Object.defineProperty(this.obj, name, { get: func, configurable: true });
                        return this;
                    };
                    return AccessorDefine;
                }());
                accessor.AccessorDefine = AccessorDefine;
            })(accessor = util.accessor || (util.accessor = {}));
            var exception;
            (function (exception_1) {
                function isBundledBusinessErrors(exception) {
                    return !isNullOrUndefined(exception) && ($.isArray(exception["errors"])
                        && exception["businessException"]);
                }
                exception_1.isBundledBusinessErrors = isBundledBusinessErrors;
                function isErrorToReject(res) {
                    return !isNullOrUndefined(res) && (res.businessException || res.optimisticLock);
                }
                exception_1.isErrorToReject = isErrorToReject;
                function isBusinessError(res) {
                    return !isNullOrUndefined(res) && (res.businessException);
                }
                exception_1.isBusinessError = isBusinessError;
            })(exception = util.exception || (util.exception = {}));
        })(util = uk.util || (uk.util = {}));
        var WebStorageWrapper = /** @class */ (function () {
            function WebStorageWrapper(nativeStorage) {
                this.nativeStorage = nativeStorage;
            }
            WebStorageWrapper.prototype.key = function (index) {
                return this.nativeStorage && this.nativeStorage.key(index);
            };
            WebStorageWrapper.prototype.setItem = function (key, value) {
                if (value === undefined) {
                    return;
                }
                this.nativeStorage && this.nativeStorage.setItem(key, value);
            };
            WebStorageWrapper.prototype.setItemAsJson = function (key, value) {
                this.setItem(key, JSON.stringify(value));
            };
            WebStorageWrapper.prototype.containsKey = function (key) {
                return this.getItem(key).isPresent();
            };
            ;
            WebStorageWrapper.prototype.getItem = function (key) {
                var value = this.nativeStorage && this.nativeStorage.getItem(key) || null;
                if (value === null || value === undefined || value === 'undefined') {
                    return util.optional.empty();
                }
                return util.optional.of(value);
            };
            WebStorageWrapper.prototype.getItemAndRemove = function (key) {
                var item = this.getItem(key);
                this.removeItem(key);
                return item;
            };
            WebStorageWrapper.prototype.removeItem = function (key) {
                this.nativeStorage && this.nativeStorage.removeItem(key);
            };
            WebStorageWrapper.prototype.clear = function () {
                this.nativeStorage && this.nativeStorage.clear();
            };
            return WebStorageWrapper;
        }());
        uk.WebStorageWrapper = WebStorageWrapper;
        /**
         * Utilities about jquery deferred
         */
        var deferred;
        (function (deferred) {
            /**
             * Repeats a task with jQuery Deferred
             */
            function repeat(configurator) {
                var conf = repeater.createConfiguration();
                configurator(conf);
                return repeater.begin(conf);
            }
            deferred.repeat = repeat;
            var repeater;
            (function (repeater) {
                function begin(conf) {
                    return conf.run();
                }
                repeater.begin = begin;
                function createConfiguration() {
                    return new Configuration();
                }
                repeater.createConfiguration = createConfiguration;
                var Configuration = /** @class */ (function () {
                    function Configuration() {
                        this.pauseMilliseconds = 0;
                        this.runAfter = 0;
                    }
                    Configuration.prototype.task = function (taskFunction) {
                        this.taskFunction = taskFunction;
                        return this;
                    };
                    Configuration.prototype.while = function (whileCondition) {
                        this.whileCondition = whileCondition;
                        return this;
                    };
                    Configuration.prototype.pause = function (pauseMilliseconds) {
                        this.pauseMilliseconds = pauseMilliseconds;
                        return this;
                    };
                    Configuration.prototype.after = function (runAfterMilliseconds) {
                        this.runAfter = runAfterMilliseconds;
                        return this;
                    };
                    Configuration.prototype.run = function () {
                        var _this = this;
                        var dfd = $.Deferred();
                        if (this.runAfter > 0) {
                            setTimeout(function () { return _this.repeat(dfd); }, this.runAfter);
                        }
                        else {
                            this.repeat(dfd);
                        }
                        return dfd.promise();
                    };
                    Configuration.prototype.repeat = function (dfd) {
                        var _this = this;
                        this.taskFunction().done(function (res) {
                            if (_this.whileCondition(res)) {
                                setTimeout(function () { return _this.repeat(dfd); }, _this.pauseMilliseconds);
                            }
                            else {
                                dfd.resolve(res);
                            }
                        }).fail(function (res) {
                            dfd.reject(res);
                        });
                    };
                    return Configuration;
                }());
            })(repeater = deferred.repeater || (deferred.repeater = {}));
        })(deferred = uk.deferred || (uk.deferred = {}));
        var resource;
        (function (resource) {
            var names = window['names'] || {};
            var messages = window['messages'] || {};
            function getText(code, params) {
                var text = names[code];
                if (!_.isNil(text)) {
                    text = formatParams(text, params);
                    text = formatCompCustomizeResource(text);
                    return text.replace(/\\r\\n/g, '\r\n');
                }
                return code;
            }
            resource.getText = getText;
            function getMessage(messageId, params) {
                var message = messages[messageId];
                if (!message) {
                    var responseText_1 = "";
                    nts.uk.request.syncAjax("com", "i18n/resources/rawcontent/" + messageId).done(function (res) {
                        responseText_1 = res;
                    }).fail(function () {
                    });
                    message = responseText_1;
                    messages[messageId] = message;
                }
                message = formatParams(message, params);
                message = formatCompCustomizeResource(message);
                return message.replace(/\\r\\n/g, '\r\n');
            }
            resource.getMessage = getMessage;
            function getMessageObj(messageId, params) {
                return {
                    message: getMessage(messageId, params),
                    messageId: messageId
                };
            }
            resource.getMessageObj = getMessageObj;
            function formatCompCustomizeResource(message) {
                var compDependceParamRegex = /{#(\w*)}/;
                var matches;
                while (matches = compDependceParamRegex.exec(message)) {
                    var code = matches[1];
                    var text_1 = getText(code);
                    message = message.replace(compDependceParamRegex, text_1);
                }
                return message;
            }
            function formatParams(message, args) {
                if (args == null || args.length == 0)
                    return message;
                var paramRegex = /{([0-9])+(:\w+)?}/;
                var matches;
                var timeFormatter = uk.time.getFormatter();
                var numberFormatter = uk.ntsNumber.getFormatter();
                while (matches = paramRegex.exec(message)) {
                    var code = matches[1];
                    var text_2 = args[parseInt(code)];
                    //                if(text!=undefined && text.indexOf("#")==0){
                    //                    text = getText(text.substring(1))
                    //                }
                    var param = matches[2];
                    if (param !== undefined) {
                        var format_1 = param.substring(1);
                        if (numberFormatter !== undefined && numberFormatter.isNumberFormat(format_1)) {
                            text_2 = uk.ntsNumber.applyFormat(format_1, text_2, numberFormatter);
                        }
                        else if (timeFormatter !== undefined) {
                            text_2 = uk.time.applyFormat(format_1, text_2, timeFormatter);
                        }
                    }
                    message = message.replace(paramRegex, text_2);
                }
                return message;
            }
            function getControlName(name) {
                var hashIdx = name.indexOf("#");
                if (hashIdx !== 0)
                    return name;
                var names = name.substring(hashIdx + 2, name.length - 1).split(",");
                if (names.length > 1) {
                    var params_1 = new Array();
                    _.forEach(names, function (n, idx) {
                        if (idx === 0)
                            return true;
                        params_1.push(getText(n.trim()));
                    });
                    return getText(names[0], params_1);
                }
                return getText(names[0]);
            }
            resource.getControlName = getControlName;
        })(resource = uk.resource || (uk.resource = {}));
        uk.sessionStorage = new WebStorageWrapper(window.sessionStorage);
        uk.localStorage = new WebStorageWrapper(window.localStorage);
        var characteristics;
        (function (characteristics) {
            /**
             * Now, "characteristic data" is saved in Local Storage.
             * In the future, the data may be saved in DB using Ajax.
             * So these APIs have jQuery Deferred Interface to support asynchronous.
             */
            var delayToEmulateAjax = 100;
            function convertObjectToArray(key) {
                var result = [];
                for (var p in key) {
                    result.push([p, key[p]]);
                }
                result.sort(function (a, b) {
                    return (a > b) ? 1 : (a < b) ? -1 : 0;
                });
                return result.toString();
            }
            function saveByObjectKey(key, value) {
                return save(convertObjectToArray(key), value);
            }
            characteristics.saveByObjectKey = saveByObjectKey;
            function restoreByObjectKey(key) {
                return restore(convertObjectToArray(key));
            }
            characteristics.restoreByObjectKey = restoreByObjectKey;
            function save(key, value) {
                var dfd = $.Deferred();
                setTimeout(function () {
                    uk.localStorage.setItemAsJson(createKey(key), value);
                    dfd.resolve();
                }, delayToEmulateAjax);
                return dfd.promise();
            }
            characteristics.save = save;
            function restore(key) {
                var dfd = $.Deferred();
                setTimeout(function () {
                    var value = uk.localStorage.getItem(createKey(key))
                        .map(function (v) { return JSON.parse(v); }).orElse(undefined);
                    dfd.resolve(value);
                }, delayToEmulateAjax);
                return dfd.promise();
            }
            characteristics.restore = restore;
            function remove(key) {
                var dfd = $.Deferred();
                setTimeout(function () {
                    uk.localStorage.removeItem(createKey(key));
                    dfd.resolve();
                }, delayToEmulateAjax);
                return dfd.promise();
            }
            characteristics.remove = remove;
            function createKey(key) {
                return 'nts.uk.characteristics.' + key;
            }
        })(characteristics = uk.characteristics || (uk.characteristics = {}));
        var types;
        (function (types_1) {
            function matchArguments(values, types) {
                if (values.length !== types.length) {
                    return false;
                }
                for (var i = 0; i < values.length; i++) {
                    if (typeof values[i] !== types[i])
                        return false;
                }
                return true;
            }
            types_1.matchArguments = matchArguments;
        })(types = uk.types || (uk.types = {}));
        var cookie;
        (function (cookie) {
            function get(name) {
                var value = asMap()[name];
                return util.optional.of(value);
            }
            cookie.get = get;
            function remove(name, attr) {
                document.cookie = name + "=; path=" + attr.path + "; max-age=0";
            }
            cookie.remove = remove;
            function asMap() {
                var map = {};
                document.cookie.split(";")
                    .forEach(function (item) {
                    var positionOfDelimiter = item.indexOf("=");
                    var name = item.slice(0, positionOfDelimiter).trim();
                    map[name] = item.slice(positionOfDelimiter + 1);
                });
                return map;
            }
            cookie.asMap = asMap;
        })(cookie = uk.cookie || (uk.cookie = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var format;
        (function (format) {
            var NoFormatter = /** @class */ (function () {
                function NoFormatter() {
                }
                NoFormatter.prototype.format = function (source) {
                    return source;
                };
                return NoFormatter;
            }());
            format.NoFormatter = NoFormatter;
        })(format = uk.format || (uk.format = {}));
        var text;
        (function (text_3) {
            var regexp = {
                allHalfNumeric: /^\d*$/,
                allHalfAlphabet: /^[a-zA-Z]*$/,
                allHalfAlphanumeric: /^[a-zA-Z0-9]*$/,
                allHalfKatakanaReg: /^[ｱ-ﾝｧ-ｫｬ-ｮｯｦ ﾞﾟ｡.ｰ､･'-]*$/,
                allFullKatakanaReg: /^[ァ-ー　。．ー、・’－ヴヽヾ]*$/,
                allHiragana: /^[ぁ-ん　ー ]*$/,
                workplaceCode: /^[a-zA-Z0-9_-]{1,10}$/,
                employeeCode: /^[a-zA-Z0-9 ]*$/
            };
            /**
             * 文字列の半角文字数を数える（Unicode用）
             * @param text 解析対象の文字列
             */
            function countHalf(text) {
                var count = 0;
                for (var i = 0; i < text.length; i++) {
                    var c = text.charCodeAt(i);
                    // 0x20 ～ 0x80: 半角記号と半角英数字
                    // 0xff61 ～ 0xff9f: 半角カタカナ
                    if ((0x20 <= c && c <= 0x7e) || (0xff61 <= c && c <= 0xff9f)) {
                        count += 1;
                    }
                    else {
                        count += 2;
                    }
                }
                return count;
            }
            text_3.countHalf = countHalf;
            function limitText(str, maxlength, index) {
                var idx = nts.uk.util.isNullOrUndefined(index) ? 0 : index;
                return str.substring(idx, findIdxFullHafl(str, maxlength, idx));
            }
            text_3.limitText = limitText;
            function findIdxFullHafl(text, max, index) {
                var count = 0;
                for (var i = index; i < text.length; i++) {
                    var c = text.charCodeAt(i);
                    var charLength = 2;
                    // 0x20 ～ 0x80: 半角記号と半角英数字
                    // 0xff61 ～ 0xff9f: 半角カタカナ
                    if ((0x20 <= c && c <= 0x7e) || (0xff61 <= c && c <= 0xff9f)) {
                        charLength = 1;
                    }
                    if (charLength + count <= max) {
                        count += charLength;
                    }
                    else {
                        return i;
                    }
                }
                return text.length - index;
            }
            function toOneByteAlphaNumberic(text) {
                return text.replace(/[！-～　]/g, function (s) {
                    if (s === "　") {
                        return String.fromCharCode(s.charCodeAt(0) - 12256);
                    }
                    return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
                });
            }
            text_3.toOneByteAlphaNumberic = toOneByteAlphaNumberic;
            function toTwoByteAlphaNumberic(text) {
                return text.replace(/[\!-\~ ]/g, function (s) {
                    if (s === " ") {
                        return String.fromCharCode(s.charCodeAt(0) + 12256);
                    }
                    return String.fromCharCode(s.charCodeAt(0) + 0xFEE0);
                });
            }
            text_3.toTwoByteAlphaNumberic = toTwoByteAlphaNumberic;
            function katakanaToHiragana(text) {
                text = text.replace(/[ァ-ヴ]/g, function (s) {
                    return String.fromCharCode(s.charCodeAt(0) - 0x60);
                }).replace(/ﾞ/g, '゛').replace(/ﾟ/g, '゜')
                    .replace(/(う゛)/g, 'ゔ').replace(/ヷ/g, 'わ゛')
                    .replace(/ヸ/g, 'ゐ゛').replace(/ヹ/g, 'ゑ゛')
                    .replace(/ヺ/g, 'を゛').replace(/(ヽ゛)/g, 'ゞ')
                    .replace(/ヽ/g, 'ゝ').replace(/ヾ/g, 'ゞ');
                return text;
            }
            text_3.katakanaToHiragana = katakanaToHiragana;
            function hiraganaToKatakana(text, opt) {
                text = text.replace(/[ぁ-ゔ]/g, function (s) {
                    return String.fromCharCode(s.charCodeAt(0) + 0x60);
                }).replace(/ﾞ/g, '゛').replace(/ﾟ/g, '゜')
                    .replace(/(ウ゛)/g, 'ヴ').replace(/(ワ゛)/g, 'ヷ')
                    .replace(/(ヰ゛)/g, 'ヸ').replace(/(ヱ゛)/g, 'ヹ')
                    .replace(/(ヲ゛)/g, 'ヺ').replace(/(ゝ゛)/g, 'ヾ')
                    .replace(/ゝ/g, 'ヽ').replace(/ゞ/g, 'ヾ');
                if (opt !== false) {
                    text = text.replace(/ゕ/g, 'ヵ').replace(/ゖ/g, 'ヶ');
                }
                return text;
            }
            text_3.hiraganaToKatakana = hiraganaToKatakana;
            /**
             * 半角カタカナを全角カタカナに変換
             *
             * @param {String} str 変換したい文字列
             */
            function oneByteKatakanaToTwoByte(text) {
                var katakanaMap = {
                    'ｶﾞ': 'ガ', 'ｷﾞ': 'ギ', 'ｸﾞ': 'グ', 'ｹﾞ': 'ゲ', 'ｺﾞ': 'ゴ',
                    'ｻﾞ': 'ザ', 'ｼﾞ': 'ジ', 'ｽﾞ': 'ズ', 'ｾﾞ': 'ゼ', 'ｿﾞ': 'ゾ',
                    'ﾀﾞ': 'ダ', 'ﾁﾞ': 'ヂ', 'ﾂﾞ': 'ヅ', 'ﾃﾞ': 'デ', 'ﾄﾞ': 'ド',
                    'ﾊﾞ': 'バ', 'ﾋﾞ': 'ビ', 'ﾌﾞ': 'ブ', 'ﾍﾞ': 'ベ', 'ﾎﾞ': 'ボ',
                    'ﾊﾟ': 'パ', 'ﾋﾟ': 'ピ', 'ﾌﾟ': 'プ', 'ﾍﾟ': 'ペ', 'ﾎﾟ': 'ポ',
                    'ｳﾞ': 'ヴ', 'ﾜﾞ': 'ヷ', 'ｦﾞ': 'ヺ',
                    'ｱ': 'ア', 'ｲ': 'イ', 'ｳ': 'ウ', 'ｴ': 'エ', 'ｵ': 'オ',
                    'ｶ': 'カ', 'ｷ': 'キ', 'ｸ': 'ク', 'ｹ': 'ケ', 'ｺ': 'コ',
                    'ｻ': 'サ', 'ｼ': 'シ', 'ｽ': 'ス', 'ｾ': 'セ', 'ｿ': 'ソ',
                    'ﾀ': 'タ', 'ﾁ': 'チ', 'ﾂ': 'ツ', 'ﾃ': 'テ', 'ﾄ': 'ト',
                    'ﾅ': 'ナ', 'ﾆ': 'ニ', 'ﾇ': 'ヌ', 'ﾈ': 'ネ', 'ﾉ': 'ノ',
                    'ﾊ': 'ハ', 'ﾋ': 'ヒ', 'ﾌ': 'フ', 'ﾍ': 'ヘ', 'ﾎ': 'ホ',
                    'ﾏ': 'マ', 'ﾐ': 'ミ', 'ﾑ': 'ム', 'ﾒ': 'メ', 'ﾓ': 'モ',
                    'ﾔ': 'ヤ', 'ﾕ': 'ユ', 'ﾖ': 'ヨ',
                    'ﾗ': 'ラ', 'ﾘ': 'リ', 'ﾙ': 'ル', 'ﾚ': 'レ', 'ﾛ': 'ロ',
                    'ﾜ': 'ワ', 'ｦ': 'ヲ', 'ﾝ': 'ン',
                    'ｧ': 'ァ', 'ｨ': 'ィ', 'ｩ': 'ゥ', 'ｪ': 'ェ', 'ｫ': 'ォ',
                    'ｯ': 'ッ', 'ｬ': 'ャ', 'ｭ': 'ュ', 'ｮ': 'ョ',
                    '｡': '。', '､': '、', 'ｰ': 'ー', '｢': '「', '｣': '」', '･': '・'
                };
                var expression = new RegExp('(' + Object.keys(katakanaMap).join('|') + ')', 'g');
                return text.replace(expression, function (match) {
                    return katakanaMap[match];
                }).replace(/ﾞ/g, '゛').replace(/ﾟ/g, '゜');
            }
            text_3.oneByteKatakanaToTwoByte = oneByteKatakanaToTwoByte;
            function anyChar(text) {
                return {
                    probe: true,
                    messageId: 'MsgB_3'
                };
            }
            text_3.anyChar = anyChar;
            /**
             * 文字列が半角数字のみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allHalfNumeric(text) {
                return {
                    probe: regexp.allHalfNumeric.test(text),
                    messageId: 'MsgB_5'
                };
            }
            text_3.allHalfNumeric = allHalfNumeric;
            /**
             * 文字列が半角英字のみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allHalfAlphabet(text) {
                return {
                    probe: regexp.allHalfAlphabet.test(text),
                    messageId: 'NO_MESSAGE'
                };
            }
            text_3.allHalfAlphabet = allHalfAlphabet;
            /**
             * 文字列が半角英数字のみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allHalfAlphanumeric(text) {
                return {
                    probe: regexp.allHalfAlphanumeric.test(text),
                    messageId: 'MsgB_6'
                };
            }
            text_3.allHalfAlphanumeric = allHalfAlphanumeric;
            /**
             * 文字列が半角カナのみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allHalfKatakana(text) {
                return {
                    probe: regexp.allHalfKatakanaReg.test(text),
                    messageId: 'NO_MESSAGE'
                };
            }
            text_3.allHalfKatakana = allHalfKatakana;
            /**
             * 文字列が全角カナのみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allFullKatakana(text) {
                return {
                    probe: regexp.allFullKatakanaReg.test(text),
                    messageId: 'MsgB_7'
                };
            }
            text_3.allFullKatakana = allFullKatakana;
            /**
             * 文字列が半角文字のみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allHalf(text) {
                return {
                    probe: text.length === countHalf(text),
                    messageId: 'MsgB_4'
                };
            }
            text_3.allHalf = allHalf;
            /**
             * 文字列が平仮名のみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allHiragana(text) {
                return {
                    probe: regexp.allHiragana.test(text),
                    messageId: 'NO_MESSAGE'
                };
            }
            text_3.allHiragana = allHiragana;
            /**
             * 文字列がカタカナのみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allKatakana(text) {
                return {
                    probe: regexp.allFullKatakanaReg.test(text),
                    messageId: 'NO_MESSAGE'
                };
            }
            text_3.allKatakana = allKatakana;
            /**
             * Determines if text is half integer
             * @param text text to check
             */
            function halfInt(text) {
                var val = parseFloat(text);
                var probe = false;
                if (val !== NaN && (val * 2) % 1 === 0)
                    probe = true;
                return {
                    probe: probe,
                    messageId: 'MsgB_14'
                };
            }
            text_3.halfInt = halfInt;
            /**
             * Determinies if text is workplace code
             * @param text text to check
             */
            function workplaceCode(text) {
                return {
                    probe: regexp.workplaceCode.test(text),
                    messageId: 'MsgB_6'
                };
            }
            text_3.workplaceCode = workplaceCode;
            function employeeCode(text) {
                return {
                    probe: regexp.employeeCode.test(text),
                    messageId: 'MsgB_6'
                };
            }
            text_3.employeeCode = employeeCode;
            /**
             * 文字列中のHTML記号をサニタイズする
             * @param text 変換対象の文字列
             */
            function htmlEncode(text) {
                var element = document.createElement('pre');
                if (typeof element.textContent !== 'undefined') {
                    element.textContent = text;
                }
                else {
                    element.innerText = text;
                }
                return element.innerHTML;
            }
            text_3.htmlEncode = htmlEncode;
            /**
             * 1文字目のみ小文字に変換する
             * @param text 変換対象の文字列
             */
            function toLowerCaseFirst(text) {
                return text.charAt(0).toLowerCase() + text.slice(1);
            }
            text_3.toLowerCaseFirst = toLowerCaseFirst;
            ;
            /**
             * 1文字目のみ大文字に変換する
             * @param text 変換対象の文字列
             */
            function toUpperCaseFirst(text) {
                return text.charAt(0).toUpperCase() + text.slice(1);
            }
            text_3.toUpperCaseFirst = toUpperCaseFirst;
            /**
             * Convert lower case text to upper case one
             * @param text text to convert
             */
            function toUpperCase(text) {
                return text.replace(/[a-z]/g, function (c) {
                    return String.fromCharCode(c.charCodeAt(0) - 0x20);
                });
            }
            text_3.toUpperCase = toUpperCase;
            /**
            * 指定された文字列が、null、undefined、Emptyか判定する
            * @param text 判定対象の文字列
            */
            function isNullOrEmpty(text) {
                var result = true;
                if (text !== null && text !== undefined) {
                    var convertValue = String(text);
                    result = convertValue.length === 0;
                }
                return result;
            }
            text_3.isNullOrEmpty = isNullOrEmpty;
            /**
            * 指定した文字列の各書式項目を、対応するオブジェクトの値と等価のテキストに置換する
            * @param text 書式文字列
            * @param args 置換の文字列（配列可）
            */
            function format(format) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                var replaceFunction = undefined;
                if (typeof args === 'object') {
                    replaceFunction = function (m, k) { return args[k]; };
                }
                else {
                    var workArgs = arguments;
                    replaceFunction = function (m, k) { return workArgs[Number(k) + 1]; };
                }
                return format.replace(/\{(\w+)\}/g, replaceFunction);
            }
            text_3.format = format;
            /**
            * 変換文字列の先頭に、文字数分の指定文字列を追加する
            * @param text 変換対象の文字列
            * @param paddingChar 指定文字列
            * @param length 文字数
            */
            function padLeft(text, paddingChar, length) {
                return charPadding(text, paddingChar, true, length);
            }
            text_3.padLeft = padLeft;
            /**
            * 変換文字列の末尾に、文字数分の指定文字列を追加する
            * @param text 変換対象の文字列
            * @param paddingChar 指定文字列
            * @param length 文字数
            */
            function padRight(text, paddingChar, length) {
                return charPadding(text, paddingChar, false, length);
            }
            text_3.padRight = padRight;
            /**
            * 指定した文字列に、指定した文字列数分、指定文字列を追加する
            * @param text 変換対象の文字列
            * @param paddingChar 埋める文字列
            * @param isPadLeft 左埋めフラグ（false：右埋め）
            * @param length 文字数
            */
            function charPadding(text, paddingChar, isPadLeft, length) {
                var result;
                if (countHalf(paddingChar) !== 1) {
                    throw new Error('paddingChar "' + paddingChar + '" is not single character');
                }
                var lengthOfSource = countHalf(text);
                var shortage = length - lengthOfSource;
                if (shortage <= 0) {
                    return text;
                }
                var pad = new Array(shortage + 1).join(paddingChar);
                if (isPadLeft) {
                    return pad + text;
                }
                else {
                    return text + pad;
                }
            }
            text_3.charPadding = charPadding;
            function replaceAll(originalString, find, replace) {
                return originalString.split(find).join(replace);
            }
            text_3.replaceAll = replaceAll;
            function removeFromStart(originalString, charSet) {
                if (originalString.length === charSet.length) {
                    return (originalString === charSet) ? "" : originalString;
                }
                var i = findLastContinousIndex(originalString, charSet, 0, true);
                return originalString.substr(i, originalString.length - i);
            }
            text_3.removeFromStart = removeFromStart;
            function removeFromEnd(originalString, charSet) {
                if (originalString.length === charSet.length) {
                    return (originalString === charSet) ? "" : originalString;
                }
                var i = findLastContinousIndex(originalString, charSet, originalString.length, false);
                return originalString.substr(0, i);
            }
            text_3.removeFromEnd = removeFromEnd;
            function findLastContinousIndex(originalString, charSet, startIndex, fromStart) {
                if (originalString.substring(startIndex, fromStart ? (startIndex + charSet.length) : (startIndex - charSet.length)) !== charSet) {
                    return startIndex;
                }
                else {
                    return findLastContinousIndex(originalString, charSet, fromStart ? (startIndex + charSet.length) : (startIndex - charSet.length), fromStart);
                }
            }
            /**
             * Type of characters
             */
            var CharType = /** @class */ (function () {
                function CharType(viewName, width, validator) {
                    this.viewName = viewName;
                    this.width = width;
                    this.validator = validator;
                }
                CharType.prototype.validate = function (text) {
                    var result = new uk.ui.validation.ValidationResult();
                    var validateResult = this.validator(text);
                    if (validateResult === true || validateResult.probe) {
                        result.isValid = true;
                        result.errorMessage = validateResult.messageId;
                        result.errorCode = validateResult.messageId;
                    }
                    else {
                        result.fail(validateResult.messageId, validateResult.messageId);
                    }
                    return result;
                };
                CharType.prototype.buildConstraintText = function (maxLength) {
                    return this.viewName + this.getViewLength(maxLength) + '文字';
                };
                CharType.prototype.getViewLength = function (length) {
                    return Math.floor(length / (this.width * 2));
                };
                return CharType;
            }());
            text_3.CharType = CharType;
            var charTypes = {
                AnyHalfWidth: new CharType('半角', 0.5, nts.uk.text.allHalf),
                AlphaNumeric: new CharType('半角英数字', 0.5, nts.uk.text.allHalfAlphanumeric),
                Alphabet: new CharType('半角英字', 0.5, nts.uk.text.allHalfAlphabet),
                Numeric: new CharType('半角数字', 0.5, nts.uk.text.allHalfNumeric),
                Any: new CharType('全角', 1, nts.uk.text.anyChar),
                Kana: new CharType('カナ', 1, nts.uk.text.allFullKatakana),
                HalfInt: new CharType('半整数', 0.5, nts.uk.text.halfInt),
                WorkplaceCode: new CharType('半角英数字', 0.5, nts.uk.text.workplaceCode),
                EmployeeCode: new CharType('半角英数字', 0.5, nts.uk.text.employeeCode)
            };
            function getCharType(primitiveValueName) {
                var constraint = __viewContext.primitiveValueConstraints[primitiveValueName];
                if (constraint === undefined)
                    return null;
                if (primitiveValueName === "WorkplaceCode" && !constraint.charType) {
                    constraint.charType = "WorkplaceCode";
                }
                else if (constraint.charType === undefined)
                    constraint.charType = "Any";
                var charType = charTypes[constraint.charType];
                if (charType === undefined) {
                    throw new Error('invalid charTypeName: ' + constraint.charType);
                }
                return charType;
            }
            text_3.getCharType = getCharType;
            function getCharTypeByType(charTypeName) {
                var charType = charTypes[charTypeName];
                if (charType === undefined) {
                    throw new Error('invalid charTypeName: ' + charTypeName);
                }
                return charType;
            }
            text_3.getCharTypeByType = getCharTypeByType;
            /**
             * Format for EmployeeCode
             * @return {String}  EmployeeCode
             */
            function formatCode(code, filldirection, fillcharacter, length) {
                if (filldirection === "left")
                    return padLeft(code, fillcharacter, length);
                else
                    return padRight(code, fillcharacter, length);
            }
            text_3.formatCode = formatCode;
            function splitOrPadRight(originalString, length, char) {
                if (originalString === undefined || length > originalString.length) {
                    originalString = text.padRight(originalString ? originalString : "", char ? char : " ", length);
                }
                else {
                    originalString = originalString.substr(0, length);
                }
                return originalString;
            }
            text_3.splitOrPadRight = splitOrPadRight;
            function addSeperation(amount) {
                var leng = amount.indexOf(".") > -1 ? amount.indexOf(".") : amount.length;
                if (leng < 4)
                    return amount;
                var result = amount.substring(leng);
                var num = parseInt(amount.substring(0, leng));
                var times = Math.floor(leng / 3);
                for (var i = 0; i < times; i++) {
                    var block = num % 1000;
                    if (i > 0)
                        result = padLeft("" + block, "0", 3) + "," + result;
                    else
                        result = padLeft("" + block, "0", 3) + result;
                    num = Math.floor(num / 1000);
                }
                result = num % 1000 + "," + result;
                return result;
            }
            function formatCurrency(amount, locale) {
                var result = addSeperation("" + amount);
                if (locale == 'en' || locale == 'EN')
                    return "￥" + result;
                return result + "円";
            }
            text_3.formatCurrency = formatCurrency;
            function reverseDirection(direction) {
                if (direction === "left")
                    return "right";
                else if (direction === "right")
                    return "left";
                else if (direction === "top")
                    return "bottom";
                else if (direction === "bottom")
                    return "top";
            }
            text_3.reverseDirection = reverseDirection;
            function getISOFormat(format) {
                format = uk.util.orDefault(format, "ISO");
                if (format.toLowerCase() === "iso")
                    return "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]";
                if (format.toLowerCase() === "date")
                    return "YYYY/MM/DD";
                if (format.toLowerCase() === "yearmonth")
                    return "YYYY/MM";
                if (format.toLowerCase() === "time")
                    return "HH:mm";
                if (format.toLowerCase() === "datetime")
                    return "YYYY/MM/DD HH:mm";
                format = format.replace(/y/g, "Y");
                return format;
            }
            text_3.getISOFormat = getISOFormat;
            var StringFormatter = /** @class */ (function () {
                function StringFormatter(args) {
                    this.args = args;
                }
                StringFormatter.prototype.format = function (source) {
                    var constraintName = this.args.constraintName;
                    var autofill = this.args.editorOption.autofill;
                    if (!uk.util.isNullOrEmpty(source)) {
                        if (autofill === true || constraintName === "EmployeeCode") {
                            var constraint = this.args.constraint;
                            var filldirection = this.args.editorOption.filldirection;
                            var fillcharacter = this.args.editorOption.fillcharacter;
                            var length = (constraint && constraint.maxLength) ? constraint.maxLength : 10;
                            return formatCode(source, filldirection, fillcharacter, length);
                        }
                    }
                    return source;
                };
                return StringFormatter;
            }());
            text_3.StringFormatter = StringFormatter;
            var NumberFormatter = /** @class */ (function () {
                function NumberFormatter(option) {
                    this.option = option;
                }
                NumberFormatter.prototype.format = function (source) {
                    return nts.uk.util.isNullOrEmpty(source) ? (!nts.uk.util.isNullOrEmpty(this.option.option.defaultValue)
                        ? this.option.option.defaultValue : source)
                        : uk.ntsNumber.formatNumber(source, this.option.option);
                };
                return NumberFormatter;
            }());
            text_3.NumberFormatter = NumberFormatter;
            var TimeFormatter = /** @class */ (function () {
                function TimeFormatter(option) {
                    this.option = option;
                }
                TimeFormatter.prototype.format = function (source) {
                    if (nts.uk.util.isNullOrEmpty(source)) {
                        return "";
                    }
                    var result;
                    if (this.option.mode === "time") {
                        if (this.option.inputFormat.indexOf("s") >= 0) {
                            result = uk.time.parseTimeWithSecond(source, true);
                        }
                        else {
                            result = uk.time.parseTime(source, true);
                        }
                    }
                    else {
                        if (this.option.inputFormat === "yearmonth") {
                            result = uk.time.parseYearMonth(source);
                        }
                        else {
                            result = moment(source, "YYYYMMDD");
                            if (result.isValid()) {
                                var format = getISOFormat(this.option.inputFormat);
                                return result.format(format);
                            }
                            return source;
                        }
                    }
                    if (result.success)
                        return result.format();
                    return source;
                };
                return TimeFormatter;
            }());
            text_3.TimeFormatter = TimeFormatter;
            var TimeWithDayFormatter = /** @class */ (function () {
                function TimeWithDayFormatter(option) {
                    this.option = option;
                }
                TimeWithDayFormatter.prototype.format = function (source) {
                    if (nts.uk.util.isNullOrEmpty(source) || !isFinite(source)) {
                        return source;
                    }
                    var timeWithDayAttr = uk.time.minutesBased.clock.dayattr.create(source);
                    return this.option.timeWithDay ? timeWithDayAttr.fullText : timeWithDayAttr.shortText;
                };
                return TimeWithDayFormatter;
            }());
            text_3.TimeWithDayFormatter = TimeWithDayFormatter;
            var NumberUnit = /** @class */ (function () {
                function NumberUnit(unitID, unitText, position, language) {
                    this.unitID = unitID;
                    this.unitText = unitText;
                    this.position = position;
                    this.language = language;
                }
                return NumberUnit;
            }());
            text_3.NumberUnit = NumberUnit;
            var units = {
                "JPY": {
                    "ja": new NumberUnit("JPY", "円", "right", "ja"),
                    "en": new NumberUnit("JPY", "\u00A5", "left", "en")
                },
                "PERCENT": {
                    "ja": new NumberUnit("PERCENT", "%", "right", "ja"),
                    "en": new NumberUnit("PERCENT", "%", "right", "en")
                },
                "DAYS": {
                    "ja": new NumberUnit("DAYS", "日", "right", "ja")
                },
                "MONTHS": {
                    "ja": new NumberUnit("MONTHS", "ヶ月", "right", "ja")
                },
                "YEARS": {
                    "ja": new NumberUnit("YEARS", "年", "right", "ja")
                },
                "FIS_MONTH": {
                    "ja": new NumberUnit("FIS_MONTH", "月度", "right", "ja")
                },
                "FIS_YEAR": {
                    "ja": new NumberUnit("FIS_YEAR", "年度", "right", "ja")
                },
                "TIMES": {
                    "ja": new NumberUnit("TIMES", "回", "right", "ja")
                },
                "AGE": {
                    "ja": new NumberUnit("AGE", "歳", "right", "ja")
                }
            };
            function getNumberUnit(unitId) {
                //TODO: get system language. Default: japanese
                return units[unitId][systemLanguage];
            }
            text_3.getNumberUnit = getNumberUnit;
        })(text = uk.text || (uk.text = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time_1) {
            var MINUTES_IN_DAY = 24 * 60;
            var defaultInputFormat = [
                "YYYY/M/D",
                "YYYY-M-D",
                "YYYYMMDD",
                "YYYY/M",
                "YYYY-M",
                "YYYYMM",
                "H:mm",
                "H:mm:ss",
                "Hmm",
                "YYYY"
            ];
            var dotW = ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"];
            function getYearMonthJapan(year, month) {
                if (month)
                    return year + "年 " + month + " 月";
                return year;
            }
            function today() {
                var todayDate = "";
                nts.uk.request.syncAjax("com", "server/time/today/").done(function (res) {
                    todayDate = res;
                }).fail(function () {
                });
                return moment.utc(todayDate, "yyyy/MM/dd");
            }
            time_1.today = today;
            function now() {
                var nowDateTime = "";
                nts.uk.request.syncAjax("com", "server/time/now/").done(function (res) {
                    nowDateTime = res;
                }).fail(function () {
                });
                return moment.utc(nowDateTime);
            }
            time_1.now = now;
            var JapanYear = /** @class */ (function () {
                function JapanYear(empire, year) {
                    this.empire = empire;
                    this.year = year;
                }
                JapanYear.prototype.getEmpire = function () {
                    return this.empire;
                };
                JapanYear.prototype.getYear = function () {
                    return this.year;
                };
                JapanYear.prototype.toString = function () {
                    return "" + this.empire + this.year + "\u5E74";
                };
                return JapanYear;
            }());
            time_1.JapanYear = JapanYear;
            var JapanYearMonth = /** @class */ (function (_super) {
                __extends(JapanYearMonth, _super);
                function JapanYearMonth(empire, year, month) {
                    var _this = _super.call(this, empire, year) || this;
                    _this.month = month;
                    return _this;
                }
                JapanYearMonth.prototype.getMonth = function () {
                    return this.month;
                };
                JapanYearMonth.prototype.toString = function () {
                    return "" + this.empire + this.year + "\u5E74" + this.month;
                };
                return JapanYearMonth;
            }(JapanYear));
            time_1.JapanYearMonth = JapanYearMonth;
            var JapanDate = /** @class */ (function (_super) {
                __extends(JapanDate, _super);
                function JapanDate(empire, year, month, date) {
                    var _this = _super.call(this, empire, year, month) || this;
                    _this.date = date;
                    return _this;
                }
                JapanDate.prototype.getDate = function () {
                    return this.date;
                };
                JapanDate.prototype.toString = function () {
                    return "" + this.empire + this.year + "\u5E74" + this.month + "\u6708" + this.date + "\u65E5";
                };
                return JapanDate;
            }(JapanYearMonth));
            time_1.JapanDate = JapanDate;
            /**
             *
             * @param value ["YYYY/M/D", "YYYY-M-D", "YYYYMMDD"]
             */
            function dateInJapanEmpire(value) {
                if (!nts.uk.ntsNumber.isNumber(value) && _.isEmpty(value)) {
                    return undefined;
                }
                if (value.toString().length <= 7) {
                    return undefined;
                }
                var correspondingMoment = getCorrespondingMoment(value);
                var empire = getEmpire(correspondingMoment);
                if (empire === null) {
                    return undefined;
                }
                var japanYearNumber = correspondingMoment.year() - moment.utc(empire.start).year() + 1;
                return new JapanDate(empire.name, japanYearNumber, correspondingMoment.month() + 1, correspondingMoment.date());
            }
            time_1.dateInJapanEmpire = dateInJapanEmpire;
            /**
             *
             * @param value ["YYYY", "YYYY/M", "YYYY-M", "YYYYMM", "YYYY/M/D", "YYYY-M-D", "YYYYMMDD"]
             */
            function yearInJapanEmpire(value) {
                if (!nts.uk.ntsNumber.isNumber(value) && _.isEmpty(value)) {
                    return undefined;
                }
                var correspondingMoment = getCorrespondingMoment(value);
                var empire = getEmpire(correspondingMoment);
                if (empire === null) {
                    return undefined;
                }
                var japanYearNumber = correspondingMoment.year() - moment.utc(empire.start).year() + 1;
                return new JapanYear(empire.name, japanYearNumber);
            }
            time_1.yearInJapanEmpire = yearInJapanEmpire;
            /**
             *
             * @param date ["YYYY/M", "YYYY-M", "YYYYMM", "YYYY/M/D", "YYYY-M-D", "YYYYMMDD"]
             */
            function yearmonthInJapanEmpire(value) {
                if (!nts.uk.ntsNumber.isNumber(value) && _.isEmpty(value)) {
                    return undefined;
                }
                if (value.toString().length <= 4) {
                    // YYYY
                    return undefined;
                }
                var correspondingMoment = getCorrespondingMoment(value);
                var empire = getEmpire(correspondingMoment);
                if (empire === null) {
                    return undefined;
                }
                var japanYearNumber = correspondingMoment.year() - moment.utc(empire.start).year() + 1;
                return new JapanYearMonth(empire.name, japanYearNumber, correspondingMoment.month() + 1);
            }
            time_1.yearmonthInJapanEmpire = yearmonthInJapanEmpire;
            /**
             */
            function getCorrespondingMoment(value) {
                // toString all type
                value = value.toString();
                var dateString = null;
                if (value.length <= 4) {
                    // "YYYY"
                    dateString = value + "1231";
                }
                else if (value.length <= 7) {
                    // ["YYYY/M", "YYYY-M", "YYYYMM"]
                    var momentValue = moment.utc(value, ["YYYY/M", "YYYY-M", "YYYYMM"]);
                    var month = momentValue.month() + 1;
                    dateString = "" + momentValue.year() + (month >= 10 ? month : '0' + month) + momentValue.daysInMonth();
                }
                else {
                    // ["YYYY/M/D", "YYYY-M-D", "YYYYMMDD"]
                    dateString = value;
                }
                return moment.utc(dateString, ["YYYY/M/D", "YYYY-M-D", "YYYYMMDD"]);
            }
            /**
             *
             * @param momentObject Moment
             *
             * Returns the matched Empire, else null.
             */
            function getEmpire(momentObject) {
                var corresEmpire = _.find(__viewContext.env.japaneseEras, function (empire) {
                    var startEra = moment.utc(empire.start);
                    var endEraYear = moment.utc(empire.end);
                    if (startEra.isSameOrBefore(momentObject) && momentObject.isSameOrBefore(endEraYear)) {
                        return true;
                    }
                });
                return corresEmpire === undefined ? null : corresEmpire;
            }
            /**
            * Format by pattern
            * @param  {number} [seconds]	  Input seconds
            * @param  {string} [formatOption] Format option
            * @return {string}				Formatted duration
            */
            function formatSeconds(seconds, formatOption) {
                seconds = parseInt(String(seconds));
                var ss = uk.text.padLeft(String(seconds % 60), '0', 2);
                var minutes = Math.floor(seconds / 60);
                var mm = uk.text.padLeft(String(minutes % 60), '0', 2);
                var hours = uk.ntsNumber.trunc(seconds / 60 / 60);
                var h = String(hours);
                // TODO: use formatOption
                return "h:mm:ss"
                    .replace(/h/g, h)
                    .replace(/mm/g, mm)
                    .replace(/ss/g, ss);
            }
            time_1.formatSeconds = formatSeconds;
            /**
            * Format date
            * @param  {Date}   date	 date
            * @param  {String} [format] format
            * @return {String}		  formatted date
            */
            function formatDate(date, format) {
                if (!format)
                    format = 'yyyy-MM-dd hh:mm:ss.SSS';
                format = format.replace(/yyyy/g, date.getFullYear());
                format = format.replace(/yy/g, ('0' + (date.getFullYear() % 100)).slice(-2));
                format = format.replace(/MM/g, ('0' + (date.getMonth() + 1)).slice(-2));
                format = format.replace(/dd/g, ('0' + date.getDate()).slice(-2));
                if (format.indexOf("DDD") != -1) {
                    var daystr = "(" + dotW[date.getDay()] + ")";
                    format = format.replace("DDD", daystr);
                }
                else if (format.indexOf("D") != -1) {
                    var daystr = "(" + dotW[date.getDay()].substring(0, 1) + ")";
                    format = format.replace("D", daystr);
                }
                format = format.replace(/hh/g, ('0' + date.getHours()).slice(-2));
                format = format.replace(/mm/g, ('0' + date.getMinutes()).slice(-2));
                format = format.replace(/ss/g, ('0' + date.getSeconds()).slice(-2));
                if (format.match(/S/g)) {
                    var milliSeconds = ('00' + date.getMilliseconds()).slice(-3);
                    var length = format.match(/S/g).length;
                    for (var i = 0; i < length; i++)
                        format = format.replace(/S/, milliSeconds.substring(i, i + 1));
                }
                return format;
            }
            time_1.formatDate = formatDate;
            /**
            * Format YearMonth
            * @param  {Number} [yearMonth]	Input Yearmonth
            * @return {String}				Formatted YearMonth
            */
            function formatYearMonth(yearMonth) {
                var result;
                var num = parseInt(String(yearMonth));
                var year = String(Math.floor(num / 100));
                var month = uk.text.charPadding(String(num % 100), '0', true, 2);
                result = year + '/' + month;
                return result;
            }
            time_1.formatYearMonth = formatYearMonth;
            /**
            * Format MonthDay
            * @param  {any} [monthDay]  Input MonthDay
            * @return {string}          Formatted MonthDay
            */
            function formatMonthDayLocalized(monthDay) {
                monthDay = String(monthDay);
                monthDay = uk.text.padLeft(monthDay, '0', 4);
                return moment.utc(monthDay, "MMDD").format("MMMDo");
            }
            time_1.formatMonthDayLocalized = formatMonthDayLocalized;
            /**
            * Format by pattern
            * @param  {Date}   [date]		 Input date
            * @param  {String} [inputFormat]  Input format
            * @param  {String} [outputFormat] Output format
            * @return {String}				Formatted date
            */
            function formatPattern(date, inputFormat, outputFormat) {
                outputFormat = uk.text.getISOFormat(outputFormat);
                var inputFormats = (inputFormat) ? inputFormat : defaultInputFormat;
                return moment(date, inputFormats).format(outputFormat);
            }
            time_1.formatPattern = formatPattern;
            var ParseResult = /** @class */ (function () {
                function ParseResult(success) {
                    this.success = success;
                }
                return ParseResult;
            }());
            time_1.ParseResult = ParseResult;
            var ResultParseTime = /** @class */ (function (_super) {
                __extends(ResultParseTime, _super);
                function ResultParseTime(success, minus, hours, minutes, msg) {
                    var _this = _super.call(this, success) || this;
                    _this.minus = minus;
                    _this.hours = hours;
                    _this.minutes = minutes;
                    _this.msg = msg || "MsgB_15";
                    return _this;
                }
                ResultParseTime.succeeded = function (minus, hours, minutes) {
                    return new ResultParseTime(true, minus, hours, minutes);
                };
                ResultParseTime.failed = function () {
                    return new ResultParseTime(false);
                };
                ResultParseTime.prototype.format = function () {
                    if (!this.success)
                        return "";
                    return (this.minus ? '-' : '') + this.hours + ':' + uk.text.padLeft(String(this.minutes), '0', 2);
                };
                ResultParseTime.prototype.toValue = function () {
                    if (!this.success)
                        return 0;
                    return (this.minus ? -1 : 1) * (this.hours * 60 + this.minutes);
                };
                ResultParseTime.prototype.getMsg = function () { return this.msg; };
                return ResultParseTime;
            }(ParseResult));
            time_1.ResultParseTime = ResultParseTime;
            function parseTime(time, isMinutes) {
                if (time === undefined || time === null) {
                    return ResultParseTime.failed();
                }
                if (isMinutes) {
                    var hoursX = uk.ntsNumber.trunc(time / 60);
                    time = (time < 0 && hoursX == 0 ? "-" : "") + hoursX + uk.text.padLeft((Math.abs(time - hoursX * 60)).toString(), '0', 2);
                }
                if (!(time instanceof String)) {
                    time = time.toString();
                }
                if (time.length < 1 || time.split(':').length > 2 || time.split('-').length > 2
                    || time.lastIndexOf('-') > 0 || (time.length == 1 && !uk.ntsNumber.isNumber(time.charAt(0)))) {
                    return ResultParseTime.failed();
                }
                var minusNumber = time.charAt(0) === '-';
                if (minusNumber) {
                    time = time.split('-')[1];
                }
                var minutes;
                var hours;
                if (time.indexOf(':') > -1) {
                    var times = time.split(':');
                    minutes = times[1];
                    hours = times[0];
                }
                else {
                    time = uk.ntsNumber.trunc(time);
                    time = uk.text.padLeft(time, "0", time.length > 4 ? time.length : 4);
                    minutes = time.substr(-2, 2);
                    hours = time.substr(0, time.length - 2);
                }
                if (!uk.ntsNumber.isNumber(minutes, false) || parseInt(minutes) > 59 || !uk.ntsNumber.isNumber(hours, false)) {
                    return ResultParseTime.failed();
                }
                return ResultParseTime.succeeded(minusNumber, parseInt(hours), parseInt(minutes));
            }
            time_1.parseTime = parseTime;
            var ResultParseTimeWithSecond = /** @class */ (function (_super) {
                __extends(ResultParseTimeWithSecond, _super);
                function ResultParseTimeWithSecond(success, minus, hours, minutes, second, msg) {
                    var _this = _super.call(this, success, minus, hours, minutes, msg) || this;
                    _this.second = second;
                    return _this;
                }
                ResultParseTimeWithSecond.succeeded = function (minus, hours, minutes, second) {
                    return new ResultParseTimeWithSecond(true, minus, hours, minutes, second);
                };
                ResultParseTimeWithSecond.failed = function () {
                    return new ResultParseTimeWithSecond(false);
                };
                ResultParseTimeWithSecond.prototype.format = function () {
                    if (!this.success)
                        return "";
                    return (this.minus ? '-' : '') + this.hours + ':' + uk.text.padLeft(String(this.minutes), '0', 2)
                        + ':' + uk.text.padLeft(String(this.second), '0', 2);
                };
                ResultParseTimeWithSecond.prototype.toValue = function () {
                    if (!this.success)
                        return 0;
                    return (this.minus ? -1 : 1) * (this.hours * 60 * 60 + this.minutes * 60 + this.second);
                };
                ResultParseTimeWithSecond.prototype.getMsg = function () { return this.msg; };
                return ResultParseTimeWithSecond;
            }(ResultParseTime));
            time_1.ResultParseTimeWithSecond = ResultParseTimeWithSecond;
            function parseTimeWithSecond(time, isMinutes) {
                if (time === undefined || time === null) {
                    return ResultParseTimeWithSecond.failed();
                }
                if (isMinutes) {
                    var totalMinuteX = uk.ntsNumber.trunc(time / 60);
                    var secondX = uk.ntsNumber.trunc(time % 60);
                    var minuteX = uk.ntsNumber.trunc(totalMinuteX % 60);
                    var hoursX = uk.ntsNumber.trunc(totalMinuteX / 60);
                    time = (time < 0 ? "-" : "") + hoursX + ":" + uk.text.padLeft(minuteX.toString(), '0', 2)
                        + ":" + uk.text.padLeft(secondX.toString(), '0', 2);
                }
                if (!(time instanceof String)) {
                    time = time.toString();
                }
                if (time.length < 1 || time.split(':').length > 3 || time.split('-').length > 2
                    || time.lastIndexOf('-') > 0 || (time.length == 1 && !uk.ntsNumber.isNumber(time.charAt(0)))) {
                    return ResultParseTimeWithSecond.failed();
                }
                var minusNumber = time.charAt(0) === '-';
                if (minusNumber) {
                    time = time.split('-')[1];
                }
                var minutes;
                var hours;
                var seconds;
                if (time.indexOf(':') > -1) {
                    var times = time.split(':');
                    seconds = times[2];
                    minutes = times[1];
                    hours = times[0];
                }
                else {
                    time = uk.ntsNumber.trunc(time);
                    time = uk.text.padLeft(time, "0", time.length > 6 ? time.length : 6);
                    var mAS = time.substr(-2, 4);
                    seconds = mAS.substr(-2, 2);
                    minutes = mAS.substr(0, 2);
                    hours = time.substr(0, time.length - 4);
                }
                if (!uk.ntsNumber.isNumber(minutes, false) || parseInt(minutes) > 59 || !uk.ntsNumber.isNumber(hours, false)
                    || !uk.ntsNumber.isNumber(seconds, false) || parseInt(seconds) > 59) {
                    return ResultParseTimeWithSecond.failed();
                }
                return ResultParseTimeWithSecond.succeeded(minusNumber, parseInt(hours), parseInt(minutes), parseInt(seconds));
            }
            time_1.parseTimeWithSecond = parseTimeWithSecond;
            var ResultParseYearMonth = /** @class */ (function (_super) {
                __extends(ResultParseYearMonth, _super);
                function ResultParseYearMonth(success, msg, year, month) {
                    var _this = _super.call(this, success) || this;
                    _this.year = year;
                    _this.month = month;
                    _this.msg = msg || "must yyyymm or yyyy/mm format: year in [1900-9999] and month in [1-12] ";
                    return _this;
                }
                ResultParseYearMonth.succeeded = function (year, month) {
                    return new ResultParseYearMonth(true, "", year, month);
                };
                ResultParseYearMonth.failed = function (msg) {
                    return new ResultParseYearMonth(false, msg);
                };
                ResultParseYearMonth.prototype.format = function () {
                    if (!this.success) {
                        return "";
                    }
                    return this.year + '/' + uk.text.padLeft(String(this.month), '0', 2);
                };
                ResultParseYearMonth.prototype.toValue = function () {
                    if (!this.success) {
                        return 0;
                    }
                    return (this.year * 100 + this.month);
                };
                ResultParseYearMonth.prototype.getMsg = function () { return this.msg; };
                return ResultParseYearMonth;
            }(ParseResult));
            time_1.ResultParseYearMonth = ResultParseYearMonth;
            function parseYearMonth(yearMonth) {
                if (yearMonth === undefined || yearMonth === null) {
                    return ResultParseYearMonth.failed("yearmonth can not empty!");
                }
                if (!(yearMonth instanceof String)) {
                    yearMonth = yearMonth.toString();
                }
                var stringLengh = yearMonth.length;
                yearMonth = yearMonth.replace("/", "");
                yearMonth = yearMonth.replace("/", "");
                var checkNum = yearMonth.replace(/[0-9]/g, "");
                if (checkNum.length > 0)
                    return ResultParseYearMonth.failed("yearmonth must contain digits and slashes only!");
                if (yearMonth.length != 6 && yearMonth.length != 5)
                    return ResultParseYearMonth.failed("wrong yearmonth format: must be yyyy/mm or yyyymm");
                var year = parseInt(yearMonth.substring(0, 4));
                var month = parseInt(yearMonth.substring(4));
                if (year < 1900 || year > 9999)
                    return ResultParseYearMonth.failed("wrong year: year must in range 1900-9999");
                if (month < 1 || month > 12)
                    return ResultParseYearMonth.failed("wrong month: month must in range 1-12");
                return ResultParseYearMonth.succeeded(year, month);
            }
            time_1.parseYearMonth = parseYearMonth;
            var ResultParseTimeOfTheDay = /** @class */ (function (_super) {
                __extends(ResultParseTimeOfTheDay, _super);
                function ResultParseTimeOfTheDay(success, msg, hour, minute) {
                    var _this = _super.call(this, success) || this;
                    _this.hour = hour;
                    _this.minute = minute;
                    _this.msg = msg || nts.uk.resource.getMessage("MsgB_18");
                    return _this;
                }
                ResultParseTimeOfTheDay.succeeded = function (hour, minute) {
                    return new ResultParseTimeOfTheDay(true, "", hour, minute);
                };
                ResultParseTimeOfTheDay.failed = function (msg) {
                    return new ResultParseTimeOfTheDay(false, msg);
                };
                ResultParseTimeOfTheDay.prototype.format = function () {
                    if (!this.success) {
                        return "";
                    }
                    return this.hour + ':' + uk.text.padLeft(String(this.minute), '0', 2);
                };
                ResultParseTimeOfTheDay.prototype.toValue = function () {
                    if (!this.success) {
                        return 0;
                    }
                    return (this.hour * 100 + this.minute);
                };
                ResultParseTimeOfTheDay.prototype.getMsg = function () { return this.msg; };
                return ResultParseTimeOfTheDay;
            }(ParseResult));
            time_1.ResultParseTimeOfTheDay = ResultParseTimeOfTheDay;
            function parseTimeOfTheDay(timeOfDay) {
                if (timeOfDay === undefined || timeOfDay === null) {
                    return ResultParseTimeOfTheDay.failed("time of the day cannot be empty!");
                }
                if (!(timeOfDay instanceof String)) {
                    timeOfDay = timeOfDay.toString();
                }
                timeOfDay = timeOfDay.replace(":", "");
                var checkNum = timeOfDay.replace(/[0-9]/g, "");
                var stringLength = timeOfDay.length;
                if (checkNum.length > 0)
                    return ResultParseTimeOfTheDay.failed(nts.uk.resource.getMessage("MsgB_18"));
                if (stringLength < 3 || stringLength > 4)
                    return ResultParseTimeOfTheDay.failed(nts.uk.resource.getMessage("MsgB_18"));
                var hour = parseInt(timeOfDay.substring(0, stringLength - 2));
                var minute = parseInt(timeOfDay.substring(stringLength - 2));
                //console.log(checkNum.substring(0,stringLength-2));
                if (hour < 0 || hour > 23)
                    return ResultParseTimeOfTheDay.failed(nts.uk.resource.getMessage("MsgB_18"));
                if (minute < 0 || minute > 59)
                    return ResultParseTimeOfTheDay.failed(nts.uk.resource.getMessage("MsgB_18"));
                return ResultParseTimeOfTheDay.succeeded(hour, minute);
            }
            time_1.parseTimeOfTheDay = parseTimeOfTheDay;
            var ResultParseYearMonthDate = /** @class */ (function (_super) {
                __extends(ResultParseYearMonthDate, _super);
                function ResultParseYearMonthDate(success, msg, year, month, date) {
                    var _this = _super.call(this, success) || this;
                    _this.year = year;
                    _this.month = month;
                    _this.date = date;
                    _this.msg = msg || nts.uk.resource.getMessage("MsgB_18");
                    return _this;
                }
                ResultParseYearMonthDate.succeeded = function (year, month, date) {
                    return new ResultParseYearMonthDate(true, "", year, month, date);
                };
                ResultParseYearMonthDate.failed = function (msg) {
                    return new ResultParseYearMonthDate(false, msg);
                };
                ResultParseYearMonthDate.prototype.format = function () {
                    if (!this.success) {
                        return "";
                    }
                    return this.year + '/' + uk.text.padLeft(String(this.month), '0', 2) + uk.text.padLeft(String(this.date), '0', 2);
                };
                ResultParseYearMonthDate.prototype.toValue = function () {
                    if (!this.success) {
                        return 0;
                    }
                    return (this.year * 10000 + this.month * 100 + this.date);
                };
                ResultParseYearMonthDate.prototype.getMsg = function () { return this.msg; };
                return ResultParseYearMonthDate;
            }(ParseResult));
            time_1.ResultParseYearMonthDate = ResultParseYearMonthDate;
            function parseYearMonthDate(yearMonthDate) {
                if (yearMonthDate === undefined || yearMonthDate === null) {
                    return ResultParseYearMonthDate.failed("full date can not empty!");
                }
                if (!(yearMonthDate instanceof String)) {
                    yearMonthDate = yearMonthDate.toString();
                }
                yearMonthDate = yearMonthDate.replace("/", "");
                yearMonthDate = yearMonthDate.replace("/", "");
                var checkNum = yearMonthDate.replace(/[0-9]/g, "");
                if (checkNum.length !== 0)
                    return ResultParseYearMonthDate.failed("full date must contain digits and slashes only");
                if (yearMonthDate.length != 8)
                    return ResultParseYearMonthDate.failed("full date format must be yyyy/mm/dd or yyyymmdd");
                var year = parseInt(yearMonthDate.substring(0, 4));
                if (year < 1900 || year > 9999) {
                    return ResultParseYearMonthDate.failed("invalid: year must in range 1900-9999");
                }
                var month = parseInt(yearMonthDate.substring(4, 6));
                if (month < 1 || month > 12)
                    return ResultParseYearMonthDate.failed("invalid: month must in range 1-12");
                var date = parseInt(yearMonthDate.substring(6));
                var maxDate = 30;
                switch (month) {
                    case 2:
                        if (year % 400 == 0) {
                            maxDate = 29;
                        }
                        else if (year % 4 == 0 && year % 25 != 0) {
                            maxDate = 29;
                        }
                        else {
                            maxDate = 28;
                        }
                        break;
                    case 1:
                    case 3:
                    case 5:
                    case 7:
                    case 8:
                    case 10:
                    case 12:
                        maxDate = 31;
                        break;
                    default:
                        maxDate = 30;
                        break;
                }
                if (date < 1 || date > maxDate)
                    return ResultParseYearMonthDate.failed("invalid: month = " + month + ", so your date must in range 1-" + maxDate);
                return ResultParseYearMonthDate.succeeded(year, month, date);
            }
            time_1.parseYearMonthDate = parseYearMonthDate;
            var MomentResult = /** @class */ (function (_super) {
                __extends(MomentResult, _super);
                function MomentResult(momentObject, outputFormat) {
                    var _this = _super.call(this, true) || this;
                    _this.min = moment.utc("1900/01/01", "YYYY/MM/DD", true);
                    _this.max = moment.utc("9999/12/31", "YYYY/MM/DD", true);
                    _this.momentObject = momentObject;
                    _this.outputFormat = uk.text.getISOFormat(outputFormat);
                    return _this;
                }
                MomentResult.prototype.succeeded = function () {
                    this.success = true;
                };
                MomentResult.prototype.failed = function (msg) {
                    this.msg = (msg) ? msg : "Invalid format";
                    this.success = false;
                };
                MomentResult.prototype.failedWithMessegeId = function (msgID, params) {
                    this.msgID = msgID;
                    this.params = params;
                    this.success = false;
                };
                MomentResult.prototype.format = function () {
                    if (!this.success)
                        return "";
                    return this.momentObject.format(this.outputFormat);
                };
                MomentResult.prototype.toValue = function () {
                    if (!this.success)
                        return null;
                    return this.momentObject;
                };
                MomentResult.prototype.systemMin = function () {
                    return this.min;
                };
                MomentResult.prototype.systemMax = function () {
                    return this.max;
                };
                MomentResult.prototype.toNumber = function (outputFormat) {
                    var dateFormats = ["YYYY/MM/DD", "YYYY-MM-DD", "YYYYMMDD", "date"];
                    var yearMonthFormats = ["YYYY/MM", "YYYY-MM", "YYYYMM", "yearmonth"];
                    if (!this.success)
                        return null;
                    if (dateFormats.indexOf(outputFormat) != -1) {
                        return this.momentObject.year() * 10000 + (this.momentObject.month() + 1) * 100 + this.momentObject.date();
                    }
                    else if (yearMonthFormats.indexOf(outputFormat) != -1) {
                        return this.momentObject.year() * 100 + (this.momentObject.month() + 1);
                    }
                    else if (outputFormat === "time") {
                        return this.momentObject.hours() * 60 + this.momentObject.minutes();
                    }
                    else {
                        return parseInt(this.momentObject.format(outputFormat).replace(/[^\d]/g, ""));
                    }
                };
                MomentResult.prototype.getMsg = function () { return this.msg; };
                MomentResult.prototype.getEmsg = function (name) {
                    if (this.msgID === undefined) {
                        return this.msg;
                    }
                    else {
                        if (name !== undefined) {
                            this.params.unshift(name);
                        }
                        return nts.uk.resource.getMessage(this.msgID, this.params);
                    }
                };
                MomentResult.prototype.getMsgID = function () { return this.msgID === undefined ? "" : this.msgID; };
                return MomentResult;
            }(ParseResult));
            time_1.MomentResult = MomentResult;
            function parseMoment(datetime, outputFormat, inputFormat) {
                var inputFormats = (inputFormat) ? findSame(inputFormat) : findFormat(outputFormat);
                var momentObject = moment.utc(datetime, inputFormats, true);
                var result = new MomentResult(momentObject, outputFormat);
                if (momentObject.isValid() && (momentObject.isSameOrBefore(result.systemMax()) && momentObject.isSameOrAfter(result.systemMin()))) {
                    result.succeeded();
                }
                else {
                    var parsedFormat = momentObject.creationData().format;
                    var isHasYear = (nts.uk.util.isNullOrEmpty(outputFormat) ? false : outputFormat.indexOf("Y") >= 0) || parsedFormat.indexOf("Y") >= 0;
                    var isHasMonth = (nts.uk.util.isNullOrEmpty(outputFormat) ? false : outputFormat.indexOf("M") >= 0) || parsedFormat.indexOf("M") >= 0;
                    var isHasDay = (nts.uk.util.isNullOrEmpty(outputFormat) ? false : outputFormat.indexOf("D") >= 0) || parsedFormat.indexOf("D") >= 0;
                    if (isHasDay && isHasMonth && isHasYear) {
                        result.failedWithMessegeId("MsgB_18", [result.systemMin().format("YYYY/MM/DD"), result.systemMax().format("YYYY/MM/DD")]);
                    }
                    else if (isHasMonth && isHasYear) {
                        result.failedWithMessegeId("MsgB_19", [result.systemMin().format("YYYY/MM"), result.systemMax().format("YYYY/MM")]);
                    }
                    else {
                        result.failedWithMessegeId("MsgB_20", [result.systemMin().format("YYYY"), result.systemMax().format("YYYY")]);
                    }
                }
                return result;
            }
            time_1.parseMoment = parseMoment;
            function findSame(format) {
                var result = [], splited = format.split(" "), isHasYear = _.indexOf(splited[0], "Y") >= 0, isHasMonth = _.indexOf(splited[0], "M") >= 0, isHasDay = _.indexOf(splited[0], "D") >= 0, separator = splited[0].replace(/Y/g, "").replace(/M/g, "").replace(/D/g, "").charAt(0), years = isHasYear ? ["YYYY", ""] : [""], months = isHasMonth ? ["M", "MM"] : [""], days = isHasDay ? ["D", "DD"] : [""], separators = ["", separator], isTime = _.size(splited) > 1;
                result.push(format);
                _.forEach(years, function (y) {
                    _.forEach(months, function (m) {
                        _.forEach(days, function (d) {
                            var r = [];
                            if (!_.isEmpty(y)) {
                                r.push(y);
                            }
                            if (!_.isEmpty(m)) {
                                r.push(m);
                            }
                            if (!_.isEmpty(d)) {
                                r.push(d);
                            }
                            if (!_.isEmpty(r)) {
                                _.forEach(separators, function (s) {
                                    if (isTime) {
                                        result.push(_.join([_.join(r, s), splited[1]], ' '));
                                    }
                                    else {
                                        result.push(_.join(r, s));
                                    }
                                });
                            }
                        });
                    });
                });
                //        result.push(format.replace(/\//g, ""));
                //        result.push(format.replace("MM", "M"));
                //        result.push(format.replace("DD", "D"));
                //        result.push(format.replace("MM", "M").replace("DD", "D"));
                //        result.push(format.replace(/:/g, ""));
                //        result.push(format.replace(/\//g, "").replace(/:/g, ""));
                return result;
            }
            function findFormat(format) {
                if (nts.uk.util.isNullOrEmpty(format)) {
                    return defaultInputFormat;
                }
                if (format === "yearmonth") {
                    format = "YM";
                    format = "YM";
                }
                var uniqueFormat = _.uniq(format.split(""));
                var formats = _.filter(defaultInputFormat, function (dfFormat) {
                    return _.find(uniqueFormat, function (opFormat) {
                        return dfFormat.indexOf(opFormat) >= 0;
                    }) !== undefined;
                });
                return nts.uk.util.isNullOrEmpty(formats) ? defaultInputFormat : formats;
            }
            function UTCDate(year, month, date, hours, minutes, seconds, milliseconds) {
                // Return local time in UTC
                if (uk.util.isNullOrUndefined(year)) {
                    var currentDate = new Date();
                    year = currentDate.getUTCFullYear();
                    month = (uk.util.isNullOrUndefined(month)) ? currentDate.getUTCMonth() : month;
                    date = (uk.util.isNullOrUndefined(date)) ? currentDate.getUTCDate() : date;
                    hours = (uk.util.isNullOrUndefined(hours)) ? currentDate.getUTCHours() : hours;
                    minutes = (uk.util.isNullOrUndefined(minutes)) ? currentDate.getUTCMinutes() : minutes;
                    seconds = (uk.util.isNullOrUndefined(seconds)) ? currentDate.getUTCSeconds() : seconds;
                    milliseconds = (uk.util.isNullOrUndefined(milliseconds)) ? currentDate.getUTCMilliseconds() : milliseconds;
                    return new Date(Date.UTC(year, month, date, hours, minutes, seconds, milliseconds));
                }
                // Return input time in UTC
                else {
                    month = (uk.util.isNullOrUndefined(month)) ? 0 : month;
                    date = (uk.util.isNullOrUndefined(date)) ? 1 : date;
                    hours = (uk.util.isNullOrUndefined(hours)) ? 0 : hours;
                    minutes = (uk.util.isNullOrUndefined(minutes)) ? 0 : minutes;
                    seconds = (uk.util.isNullOrUndefined(seconds)) ? 1 : seconds;
                    milliseconds = (uk.util.isNullOrUndefined(milliseconds)) ? 0 : milliseconds;
                    return new Date(Date.UTC(year, month, date, hours, minutes, seconds, milliseconds));
                }
            }
            time_1.UTCDate = UTCDate;
            var DateTimeFormatter = /** @class */ (function () {
                function DateTimeFormatter() {
                    this.shortYmdPattern = /^\d{4}\/\d{1,2}\/\d{1,2}$/;
                    this.shortYmdwPattern = /^\d{4}\/\d{1,2}\/\d{1,2}\(\w+\)$/;
                    this.shortYmPattern = /^\d{4}\/\d{1,2}$/;
                    this.shortMdPattern = /^\d{1,2}\/\d{1,2}$/;
                    this.longYmdPattern = /^\d{4}年\d{1,2}月d{1,2}日$/;
                    this.longYmdwPattern = /^\d{4}年\d{1,2}月d{1,2}日\(\w+\)$/;
                    this.longFPattern = /^\d{4}年度$/;
                    this.longJmdPattern = /^\w{2}\d{1,3}年\d{1,2}月d{1,2}日$/;
                    this.longJmPattern = /^\w{2}\d{1,3}年\d{1,2}月$/;
                    this.fullDateTimeShortPattern = /^\d{4}\/\d{1,2}\/\d{1,2} \d+:\d{2}:\d{2}$/;
                    this.timeShortHmsPattern = /^\d+:\d{2}:\d{2}$/;
                    this.timeShortHmPattern = /^\d+:\d{2}$/;
                    this.days = ['日', '月', '火', '水', '木', '金', '土'];
                }
                DateTimeFormatter.prototype.shortYmd = function (date) {
                    var d = this.dateOf(date);
                    if (this.shortYmdPattern.test(d))
                        return this.format(d);
                };
                DateTimeFormatter.prototype.shortYmdw = function (date) {
                    var d = this.dateOf(date);
                    if (this.shortYmdwPattern.test(d))
                        return d;
                    if (this.shortYmdPattern.test(d)) {
                        var dayStr = this.days[new Date(d).getDay()];
                        return this.format(d) + '(' + dayStr + ')';
                    }
                };
                DateTimeFormatter.prototype.shortYm = function (date) {
                    var d = this.format(this.dateOf(date));
                    if (this.shortYmPattern.test(d))
                        return d;
                    if (this.shortYmdPattern.test(d)) {
                        var end = d.lastIndexOf("/");
                        if (end !== -1)
                            return d.substring(0, end);
                    }
                };
                DateTimeFormatter.prototype.shortMd = function (date) {
                    var d = this.format(this.dateOf(date));
                    if (this.shortMdPattern.test(d))
                        return d;
                    if (this.shortYmdPattern.test(d)) {
                        var start = d.indexOf("/");
                        if (start !== -1)
                            return d.substring(start + 1);
                    }
                };
                DateTimeFormatter.prototype.longYmd = function (date) {
                    var d = this.dateOf(date);
                    if (this.longYmdPattern.test(d))
                        return d;
                    if (this.shortYmdPattern.test(d)) {
                        var mDate = new Date(d);
                        return this.toLongJpDate(mDate);
                    }
                };
                DateTimeFormatter.prototype.longYmdw = function (date) {
                    var d = this.dateOf(date);
                    if (this.longYmdwPattern.test(d))
                        return d;
                    if (this.shortYmdPattern.test(d)) {
                        var mDate = new Date(d);
                        return this.toLongJpDate(mDate) + '(' + this.days[mDate.getDay()] + ')';
                    }
                };
                DateTimeFormatter.prototype.toLongJpDate = function (d) {
                    return d.getFullYear() + '年' + (d.getMonth() + 1) + '月' + d.getDate() + '日';
                };
                DateTimeFormatter.prototype.longF = function (date) {
                    var d = this.dateOf(date);
                    if (this.longFPattern.test(d))
                        return d;
                    if (this.shortYmdPattern.test(d)) {
                        var mDate = new Date(d);
                        return this.fiscalYearOf(mDate) + '年度';
                    }
                };
                DateTimeFormatter.prototype.longJmd = function (date) {
                    var d = this.dateOf(date);
                    if (this.longJmdPattern.test(d))
                        return d;
                    return this.fullJapaneseDateOf(d);
                };
                DateTimeFormatter.prototype.longJm = function (date) {
                    var d = this.dateOf(date);
                    if (this.longJmPattern.test(d))
                        return d;
                    var jpDate = this.fullJapaneseDateOf(d);
                    var start = jpDate.indexOf("月");
                    if (start !== -1) {
                        return jpDate.substring(0, start + 1);
                    }
                };
                DateTimeFormatter.prototype.fullJapaneseDateOf = function (date) {
                    if (this.shortYmdPattern.test(date)) {
                        var d = new Date(date);
                        return d.toLocaleDateString("ja-JP-u-ca-japanese", { era: 'short' });
                    }
                    return date;
                };
                DateTimeFormatter.prototype.fiscalYearOf = function (date) {
                    if (date < new Date(date.getFullYear(), 3, 1))
                        return date.getFullYear() - 1;
                    return date.getFullYear();
                };
                DateTimeFormatter.prototype.dateOf = function (dateTime) {
                    if (this.fullDateTimeShortPattern.test(dateTime)) {
                        return dateTime.split(" ")[0];
                    }
                    return dateTime;
                };
                DateTimeFormatter.prototype.timeOf = function (dateTime) {
                    if (this.fullDateTimeShortPattern.test(dateTime)) {
                        return dateTime.split(" ")[1];
                    }
                    return dateTime;
                };
                DateTimeFormatter.prototype.timeShortHm = function (time) {
                    var t = this.timeOf(time);
                    if (this.timeShortHmPattern.test(t))
                        return t;
                    if (this.timeShortHmsPattern.test(t)) {
                        return t.substring(0, t.lastIndexOf(":"));
                    }
                };
                DateTimeFormatter.prototype.timeShortHms = function (time) {
                    var t = this.timeOf(time);
                    if (this.timeShortHmsPattern.test(t))
                        return t;
                };
                DateTimeFormatter.prototype.clockShortHm = function (time) {
                    return this.timeShortHm(time);
                };
                DateTimeFormatter.prototype.fullDateTimeShort = function (dateTime) {
                    if (this.fullDateTimeShortPattern.test(dateTime))
                        return dateTime;
                };
                DateTimeFormatter.prototype.format = function (date) {
                    return date; //new Date(date).toLocaleDateString("ja-JP");
                };
                return DateTimeFormatter;
            }());
            time_1.DateTimeFormatter = DateTimeFormatter;
            function getFormatter() {
                switch (systemLanguage) {
                    case 'ja':
                        return new DateTimeFormatter();
                    case 'en':
                        return null;
                }
            }
            time_1.getFormatter = getFormatter;
            function applyFormat(format, dateTime, formatter) {
                if (formatter === undefined)
                    formatter = getFormatter();
                switch (format) {
                    case 'Short_YMD':
                        return formatter.shortYmd(dateTime);
                    case 'Short_YMDW':
                        return formatter.shortYmdw(dateTime);
                    case 'Short_YM':
                        return formatter.shortYm(dateTime);
                    case 'Short_MD':
                        return formatter.shortMd(dateTime);
                    case 'Long_YMD':
                        return formatter.longYmd(dateTime);
                    case 'Long_YMDW':
                        return formatter.longYmdw(dateTime);
                    case 'Long_F':
                        return formatter.longF(dateTime);
                    case 'Long_JMD':
                        return formatter.longJmd(dateTime);
                    case 'Long_JM':
                        return formatter.longJm(dateTime);
                    case 'Time_Short_HM':
                        return formatter.timeShortHm(dateTime);
                    case 'Time_Short_HMS':
                        return formatter.timeShortHms(dateTime);
                    case 'Clock_Short_HM':
                        return formatter.clockShortHm(dateTime);
                    case 'DateTime_Short_YMDHMS':
                        return formatter.fullDateTimeShort(dateTime);
                }
            }
            time_1.applyFormat = applyFormat;
            function isEndOfMonth(value, format) {
                var currentDate = moment(value, format);
                if (currentDate.isValid()) {
                    return currentDate.daysInMonth() === currentDate.date();
                }
                return false;
            }
            time_1.isEndOfMonth = isEndOfMonth;
            function convertJapaneseDateToGlobal(japaneseDate) {
                var inputDate = _.clone(japaneseDate);
                var endEraSymbolIndex = -1;
                var currentEra;
                var eraAcceptFormats = ["YYMMDD", "YY/MM/DD", "YY/M/DD", "YY/MM/D", "YY/M/D", "Y/MM/DD", "Y/M/DD", "Y/MM/D", "Y/M/D"];
                for (var _i = 0, _a = __viewContext.env.japaneseEras; _i < _a.length; _i++) {
                    var i = _a[_i];
                    if (inputDate.indexOf(i.name) >= 0) {
                        endEraSymbolIndex = inputDate.indexOf(i.name) + i.name.length;
                        currentEra = i;
                        break;
                    }
                    else if (inputDate.indexOf(i.symbol) >= 0) {
                        endEraSymbolIndex = inputDate.indexOf(i.symbol) + i.symbol.length;
                        currentEra = i;
                        break;
                    }
                }
                if (endEraSymbolIndex > -1) {
                    var startEraDate = moment(currentEra.start, "YYYY-MM-DD");
                    var inputEraDate = inputDate.substring(endEraSymbolIndex);
                    var tempEra = moment.utc(inputEraDate, eraAcceptFormats, true);
                    if (tempEra.isValid()) {
                        return startEraDate.add(parseInt(tempEra.format("YY")) - 1, "Y")
                            .set({ 'month': tempEra.month(), "date": tempEra.date() })
                            .format("YYYY/MM/DD");
                    }
                }
                return japaneseDate;
            }
            time_1.convertJapaneseDateToGlobal = convertJapaneseDateToGlobal;
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time) {
            var format;
            (function (format) {
                var DATE_FORMATS = {
                    Short_YMD: "yyyy/M/d",
                    Short_YMDW: "yyyy/M/d(D)",
                    Short_YM: "yyyy/M",
                    Short_MD: "M/d",
                    Short_D: "d",
                    Short_W: "D",
                    Short_MDW: "M/d(D)",
                    Long_YMD: "yyyy年M月d日",
                    Long_YMDW: "yyyy年M月d日(D)",
                    Long_YM: "yyyy年M月",
                    Long_MD: "M月d日",
                    Long_F: "yyyy年度"
                };
                function byId(formatId, value) {
                    switch (formatId) {
                        case "Clock_Short_HM":
                        case "ClockDay_Short_HM":
                            return time.minutesBased.clock.create(value).formatById(formatId);
                        case "Time_Short_HM":
                            return time.minutesBased.duration.create(value).formatById(formatId);
                        default:
                            throw new Error("not supported: " + formatId + " of " + value);
                    }
                }
                format.byId = byId;
            })(format = time.format || (time.format = {}));
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time) {
            var minutesBased;
            (function (minutesBased) {
                minutesBased.MINUTES_IN_DAY = 24 * 60;
                function createBase(timeAsMinutes) {
                    if (!isFinite(timeAsMinutes)) {
                        throw new Error("invalid value: " + timeAsMinutes);
                    }
                    var mat = new Number(timeAsMinutes);
                    uk.util.accessor.defineInto(mat)
                        .get("asMinutes", function () { return timeAsMinutes; })
                        .get("isNegative", function () { return timeAsMinutes < 0; })
                        .get("minutePart", function () { return Math.abs(timeAsMinutes) % 60; })
                        .get("minutePartText", function () { return uk.text.padLeft(mat.minutePart.toString(), "0", 2); })
                        .get("typeName", function () { return "MinutesBasedTime"; });
                    return mat;
                }
                minutesBased.createBase = createBase;
            })(minutesBased = time.minutesBased || (time.minutesBased = {}));
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time) {
            var minutesBased;
            (function (minutesBased) {
                var duration;
                (function (duration_1) {
                    var ResultParseMiuntesBasedDuration = /** @class */ (function (_super) {
                        __extends(ResultParseMiuntesBasedDuration, _super);
                        function ResultParseMiuntesBasedDuration(success, minus, hours, minutes, msg) {
                            var _this = _super.call(this, success) || this;
                            _this.minus = minus;
                            _this.hours = hours;
                            _this.minutes = minutes;
                            _this.msg = msg || "MsgB_15";
                            return _this;
                        }
                        ResultParseMiuntesBasedDuration.prototype.format = function () {
                            if (!this.success)
                                return "";
                            return (this.minus ? '-' : '') + this.hours + ':' + uk.text.padLeft(String(this.minutes), '0', 2);
                        };
                        ResultParseMiuntesBasedDuration.prototype.toValue = function () {
                            if (!this.success)
                                return NaN;
                            return (this.minus ? -1 : 1) * (this.hours * 60 + this.minutes);
                        };
                        ResultParseMiuntesBasedDuration.prototype.getMsg = function () {
                            return this.msg;
                        };
                        ResultParseMiuntesBasedDuration.succeeded = function (minus, hours, minutes) {
                            return new ResultParseMiuntesBasedDuration(true, minus, hours, minutes);
                        };
                        ResultParseMiuntesBasedDuration.failed = function () {
                            return new ResultParseMiuntesBasedDuration(false);
                        };
                        return ResultParseMiuntesBasedDuration;
                    }(time.ParseResult));
                    duration_1.ResultParseMiuntesBasedDuration = ResultParseMiuntesBasedDuration;
                    function parseString(source) {
                        var isNegative = source.indexOf('-') === 0;
                        var hourPart;
                        var minutePart;
                        if (source.indexOf(':') !== -1) {
                            var parts = source.split(':');
                            if (parts.length !== 2) {
                                return ResultParseMiuntesBasedDuration.failed();
                            }
                            hourPart = Math.abs(Number(parts[0]));
                            minutePart = Number(parts[1]);
                            if (!nts.uk.ntsNumber.isNumber(hourPart, false, undefined, undefined)
                                || !nts.uk.ntsNumber.isNumber(minutePart, false, undefined, undefined)) {
                                return ResultParseMiuntesBasedDuration.failed();
                            }
                        }
                        else {
                            var integerized = Number(source);
                            if (isNaN(integerized)) {
                                return ResultParseMiuntesBasedDuration.failed();
                            }
                            var regularized = Math.abs(integerized);
                            if (!nts.uk.ntsNumber.isNumber(regularized, false, undefined, undefined)) {
                                return ResultParseMiuntesBasedDuration.failed();
                            }
                            hourPart = Math.floor(regularized / 100);
                            minutePart = regularized % 100;
                        }
                        if (!isFinite(hourPart) || !isFinite(minutePart)) {
                            return ResultParseMiuntesBasedDuration.failed();
                        }
                        if (minutePart >= 60) {
                            return ResultParseMiuntesBasedDuration.failed();
                        }
                        return ResultParseMiuntesBasedDuration.succeeded(isNegative, hourPart, minutePart);
                    }
                    duration_1.parseString = parseString;
                    function create(timeAsMinutes) {
                        var duration = minutesBased.createBase(timeAsMinutes);
                        uk.util.accessor.defineInto(duration)
                            .get("typeName", function () { return "DurationMinutesBasedTime"; })
                            .get("asHoursDouble", function () { return timeAsMinutes / 60; })
                            .get("asHoursInt", function () { return uk.ntsNumber.trunc(duration.asHoursDouble); })
                            .get("text", function () { return createText(duration); });
                        duration.formatById = function (formatId) {
                            switch (formatId) {
                                default: return createText(duration);
                            }
                        };
                        return duration;
                    }
                    duration_1.create = create;
                    function createText(duration) {
                        return (duration.isNegative ? "-" : "")
                            + duration.asHoursInt + ":" + duration.minutePartText;
                    }
                })(duration = minutesBased.duration || (minutesBased.duration = {}));
            })(minutesBased = time.minutesBased || (time.minutesBased = {}));
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time) {
            var minutesBased;
            (function (minutesBased) {
                var clock;
                (function (clock_1) {
                    var DayAttr;
                    (function (DayAttr) {
                        DayAttr[DayAttr["THE_PREVIOUS_DAY"] = 0] = "THE_PREVIOUS_DAY";
                        DayAttr[DayAttr["THE_PRESENT_DAY"] = 1] = "THE_PRESENT_DAY";
                        DayAttr[DayAttr["THE_NEXT_DAY"] = 2] = "THE_NEXT_DAY";
                        DayAttr[DayAttr["TWO_DAY_LATER"] = 3] = "TWO_DAY_LATER";
                    })(DayAttr = clock_1.DayAttr || (clock_1.DayAttr = {}));
                    (function (DayAttr) {
                        function fromValue(value) {
                            switch (value) {
                                case 0: return DayAttr.THE_PREVIOUS_DAY;
                                case 1: return DayAttr.THE_PRESENT_DAY;
                                case 2: return DayAttr.THE_NEXT_DAY;
                                case 3: return DayAttr.TWO_DAY_LATER;
                                default: new Error("invalid value: " + value);
                            }
                        }
                        DayAttr.fromValue = fromValue;
                        function fromDaysOffset(daysOffset) {
                            switch (daysOffset) {
                                case -1: return DayAttr.THE_PREVIOUS_DAY;
                                case 0: return DayAttr.THE_PRESENT_DAY;
                                case 1: return DayAttr.THE_NEXT_DAY;
                                case 2: return DayAttr.TWO_DAY_LATER;
                                default: new Error("invalid daysOffset: " + daysOffset);
                            }
                        }
                        DayAttr.fromDaysOffset = fromDaysOffset;
                        function toDaysOffset(dayAttr) {
                            switch (dayAttr) {
                                case DayAttr.THE_PREVIOUS_DAY: return -1;
                                case DayAttr.THE_PRESENT_DAY: return 0;
                                case DayAttr.THE_NEXT_DAY: return 1;
                                case DayAttr.TWO_DAY_LATER: return 2;
                                default: new Error("invalid dayAttr: " + dayAttr);
                            }
                        }
                        DayAttr.toDaysOffset = toDaysOffset;
                        function toText(dayAttr) {
                            switch (dayAttr) {
                                case DayAttr.THE_PREVIOUS_DAY: return "前日";
                                case DayAttr.THE_PRESENT_DAY: return "当日";
                                case DayAttr.THE_NEXT_DAY: return "翌日";
                                case DayAttr.TWO_DAY_LATER: return "翌々日";
                                default: new Error("invalid dayAttr: " + dayAttr);
                            }
                        }
                        DayAttr.toText = toText;
                    })(DayAttr = clock_1.DayAttr || (clock_1.DayAttr = {}));
                    function create() {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        var timeAsMinutes = parseAsClock(args);
                        var clock = minutesBased.createBase(timeAsMinutes);
                        var positivizedMinutes = function () { return (timeAsMinutes >= 0)
                            ? timeAsMinutes
                            : timeAsMinutes + (1 + Math.floor(-timeAsMinutes / minutesBased.MINUTES_IN_DAY)) * minutesBased.MINUTES_IN_DAY; };
                        var daysOffset = function () { return uk.ntsNumber.trunc(clock.isNegative ? (timeAsMinutes + 1) / minutesBased.MINUTES_IN_DAY - 1
                            : timeAsMinutes / minutesBased.MINUTES_IN_DAY); };
                        var positiveMinutes = positivizedMinutes();
                        var minuteStr = String(positiveMinutes);
                        var pointIndex = minuteStr.indexOf('.');
                        var minutePart;
                        if (pointIndex > -1) {
                            var fraction = minuteStr.substring(pointIndex + 1);
                            positiveMinutes = Math.floor(positiveMinutes);
                            minuteStr = String(positiveMinutes % 60) + "." + fraction;
                            minutePart = Number(minuteStr);
                        }
                        else {
                            minutePart = positivizedMinutes() % 60;
                        }
                        uk.util.accessor.defineInto(clock)
                            .get("typeName", function () { return "ClockMinutesBasedTime"; })
                            .get("daysOffset", daysOffset)
                            .get("hourPart", function () { return Math.floor((positivizedMinutes() % minutesBased.MINUTES_IN_DAY) / 60); })
                            .get("minutePart", function () { return minutePart; })
                            .get("dayAttr", function () { return DayAttr.fromDaysOffset(daysOffset()); })
                            .get("clockTextInDay", function () { return format.clockTextInDay(clock); });
                        clock.formatById = function (formatId) {
                            return format.byId(formatId, clock);
                        };
                        return clock;
                    }
                    clock_1.create = create;
                    function parseAsClock(args) {
                        var result;
                        if (uk.types.matchArguments(args, ["number"])) {
                            result = args[0];
                        }
                        else if (uk.types.matchArguments(args, ["number", "number", "number"])) {
                            var daysOffset = args[0];
                            var hourPart = args[1];
                            var minutePart = args[2];
                            result = daysOffset * minutesBased.MINUTES_IN_DAY + hourPart * 60 + minutePart;
                        }
                        return result;
                    }
                    var format;
                    (function (format) {
                        function byId(formatId, clock) {
                            switch (formatId) {
                                case "Clock_Short_HM":
                                    return short.make(clock);
                                case "ClockDay_Short_HM":
                                    return long.make(clock);
                            }
                        }
                        format.byId = byId;
                        function clockTextInDay(clock) {
                            return clock.hourPart + ":" + clock.minutePartText;
                        }
                        format.clockTextInDay = clockTextInDay;
                        var short;
                        (function (short) {
                            function make(clock) {
                                return sign(clock) + hours(clock) + ":" + clock.minutePartText;
                            }
                            short.make = make;
                            function sign(clock) {
                                return clock.daysOffset < 0 ? "-" : "";
                            }
                            function hours(clock) {
                                return clock.daysOffset < 0 ? clock.hourPart : clock.daysOffset * 24 + clock.hourPart;
                            }
                        })(short || (short = {}));
                        var long;
                        (function (long) {
                            function make(clock) {
                                return DayAttr.toText(clock.dayAttr) + clock.clockTextInDay;
                            }
                            long.make = make;
                        })(long || (long = {}));
                    })(format || (format = {}));
                })(clock = minutesBased.clock || (minutesBased.clock = {}));
            })(minutesBased = time.minutesBased || (time.minutesBased = {}));
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time) {
            var minutesBased;
            (function (minutesBased) {
                var clock;
                (function (clock) {
                    // このファイルはminutesbased_clockに統合したい
                    var dayattr;
                    (function (dayattr) {
                        dayattr.MAX_VALUE = create(4319);
                        dayattr.MIN_VALUE = create(-720);
                        var DayAttr;
                        (function (DayAttr) {
                            DayAttr[DayAttr["THE_PREVIOUS_DAY"] = 0] = "THE_PREVIOUS_DAY";
                            DayAttr[DayAttr["THE_PRESENT_DAY"] = 1] = "THE_PRESENT_DAY";
                            DayAttr[DayAttr["THE_NEXT_DAY"] = 2] = "THE_NEXT_DAY";
                            DayAttr[DayAttr["TWO_DAY_LATER"] = 3] = "TWO_DAY_LATER";
                        })(DayAttr = dayattr.DayAttr || (dayattr.DayAttr = {}));
                        function getDayAttrText(dayAttr) {
                            switch (dayAttr) {
                                case DayAttr.THE_PREVIOUS_DAY: return "前日";
                                case DayAttr.THE_PRESENT_DAY: return "当日";
                                case DayAttr.THE_NEXT_DAY: return "翌日";
                                case DayAttr.TWO_DAY_LATER: return "翌々日";
                                default: throw new Error("invalid value: " + dayAttr);
                            }
                        }
                        function getDaysOffset(dayAttr) {
                            switch (dayAttr) {
                                case DayAttr.THE_PREVIOUS_DAY: return -1;
                                case DayAttr.THE_PRESENT_DAY: return 0;
                                case DayAttr.THE_NEXT_DAY: return 1;
                                case DayAttr.TWO_DAY_LATER: return 2;
                                default: throw new Error("invalid value: " + dayAttr);
                            }
                        }
                        var ResultParseTimeWithDayAttr = /** @class */ (function () {
                            function ResultParseTimeWithDayAttr(success, asMinutes) {
                                this.success = success;
                                this.asMinutes = asMinutes;
                            }
                            ResultParseTimeWithDayAttr.succeeded = function (asMinutes) {
                                return new ResultParseTimeWithDayAttr(true, asMinutes);
                            };
                            ResultParseTimeWithDayAttr.failed = function () {
                                return new ResultParseTimeWithDayAttr(false);
                            };
                            return ResultParseTimeWithDayAttr;
                        }());
                        dayattr.ResultParseTimeWithDayAttr = ResultParseTimeWithDayAttr;
                        function parseString(source) {
                            var foundAttr = cutDayAttrTextIfExists(source);
                            if (foundAttr.found) {
                                // full text (ex) 翌日2:30
                                var daysOffset = getDaysOffset(foundAttr.attr);
                                var parsedAsDuration = minutesBased.duration.parseString(foundAttr.clockPartText);
                                if (!parsedAsDuration.success) {
                                    return ResultParseTimeWithDayAttr.failed();
                                }
                                var asMinutes = parsedAsDuration.toValue() + minutesBased.MINUTES_IN_DAY * daysOffset;
                                return ResultParseTimeWithDayAttr.succeeded(asMinutes);
                            }
                            else {
                                var parsedAsDuration = minutesBased.duration.parseString(source);
                                if (!parsedAsDuration.success) {
                                    return ResultParseTimeWithDayAttr.failed();
                                }
                                if (parsedAsDuration.minus) {
                                    var asClock = -(parsedAsDuration.toValue()) - minutesBased.MINUTES_IN_DAY;
                                    if (asClock >= 0) {
                                        return ResultParseTimeWithDayAttr.failed();
                                    }
                                    return ResultParseTimeWithDayAttr.succeeded(asClock);
                                }
                                else {
                                    return ResultParseTimeWithDayAttr.succeeded(parsedAsDuration.toValue());
                                }
                            }
                        }
                        dayattr.parseString = parseString;
                        function create(minutesFromZeroOclock) {
                            var timeWithDayAttr = (clock.create(minutesFromZeroOclock));
                            uk.util.accessor.defineInto(timeWithDayAttr)
                                .get("dayAttr", function () { return getDayAttrFromDaysOffset(timeWithDayAttr.daysOffset); })
                                .get("fullText", function () { return timeWithDayAttr.formatById("ClockDay_Short_HM"); })
                                .get("shortText", function () { return timeWithDayAttr.formatById("Clock_Short_HM"); });
                            return timeWithDayAttr;
                        }
                        dayattr.create = create;
                        function getDayAttrFromDaysOffset(daysOffset) {
                            switch (daysOffset) {
                                case -1: return DayAttr.THE_PREVIOUS_DAY;
                                case 0: return DayAttr.THE_PRESENT_DAY;
                                case 1: return DayAttr.THE_NEXT_DAY;
                                case 2: return DayAttr.TWO_DAY_LATER;
                                default: throw new Error("invalid value: " + daysOffset);
                            }
                        }
                        var DAY_ATTR_TEXTS = [
                            { value: DayAttr.THE_PREVIOUS_DAY },
                            { value: DayAttr.THE_PRESENT_DAY },
                            { value: DayAttr.THE_NEXT_DAY },
                            { value: DayAttr.TWO_DAY_LATER }
                        ];
                        DAY_ATTR_TEXTS.forEach(function (e) { return e.text = getDayAttrText(e.value); });
                        function cutDayAttrTextIfExists(source) {
                            var foundAttr = _.find(DAY_ATTR_TEXTS, function (e) { return source.indexOf(e.text) === 0; });
                            var result = {
                                found: foundAttr !== undefined
                            };
                            if (result.found) {
                                result.attrText = foundAttr.text;
                                result.attr = foundAttr.value;
                                result.clockPartText = source.slice(foundAttr.text.length);
                            }
                            else {
                                result.clockPartText = source;
                            }
                            return result;
                        }
                    })(dayattr = clock.dayattr || (clock.dayattr = {}));
                })(clock = minutesBased.clock || (minutesBased.clock = {}));
            })(minutesBased = time.minutesBased || (time.minutesBased = {}));
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time) {
            var secondsBased;
            (function (secondsBased) {
                secondsBased.SECOND_IN_MINUTE = 60;
                secondsBased.MINUTE_IN_HOUR = 60;
                secondsBased.HOUR_IN_DAY = 24;
                secondsBased.SECOND_IN_HOUR = secondsBased.MINUTE_IN_HOUR * secondsBased.SECOND_IN_MINUTE;
                secondsBased.SECOND_IN_DAY = secondsBased.HOUR_IN_DAY * secondsBased.SECOND_IN_HOUR;
                function createBase(timeAsSeconds) {
                    if (!isFinite(timeAsSeconds)) {
                        throw new Error("invalid value: " + timeAsSeconds);
                    }
                    var mat = new Number(timeAsSeconds);
                    uk.util.accessor.defineInto(mat)
                        .get("asSeconds", function () { return timeAsSeconds; })
                        .get("asMinutes", function () { return uk.ntsNumber.trunc(Math.abs(timeAsSeconds) / secondsBased.SECOND_IN_MINUTE); })
                        .get("isNegative", function () { return timeAsSeconds < 0; })
                        .get("minutePart", function () { return mat.asMinutes % secondsBased.MINUTE_IN_HOUR; })
                        .get("minutePartText", function () { return uk.text.padLeft(mat.minutePart.toString(), "0", 2); })
                        .get("secondPart", function () { return Math.abs(timeAsSeconds) % secondsBased.SECOND_IN_MINUTE; })
                        .get("secondPartText", function () { return uk.text.padLeft(mat.secondPart.toString(), "0", 2); })
                        .get("typeName", function () { return "SecondsBasedTime"; });
                    return mat;
                }
                secondsBased.createBase = createBase;
            })(secondsBased = time.secondsBased || (time.secondsBased = {}));
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time) {
            var secondsBased;
            (function (secondsBased) {
                var duration;
                (function (duration_2) {
                    var ResultParseSecondsBasedDuration = /** @class */ (function (_super) {
                        __extends(ResultParseSecondsBasedDuration, _super);
                        function ResultParseSecondsBasedDuration(success, minus, hours, minutes, seconds, msg) {
                            var _this = _super.call(this, success) || this;
                            _this.minus = minus;
                            _this.hours = hours;
                            _this.minutes = minutes;
                            _this.seconds = seconds;
                            _this.msg = msg || "MsgB_15";
                            return _this;
                        }
                        ResultParseSecondsBasedDuration.prototype.format = function () {
                            if (!this.success)
                                return "";
                            return (this.minus ? '-' : '') + this.hours + ':' + uk.text.padLeft(String(this.minutes), '0', 2)
                                + ':' + uk.text.padLeft(String(this.seconds), '0', 2);
                        };
                        ResultParseSecondsBasedDuration.prototype.toValue = function () {
                            if (!this.success)
                                return NaN;
                            return (this.minus ? -1 : 1) * (this.hours * 60 * 60 + this.minutes * 60 + this.seconds);
                        };
                        ResultParseSecondsBasedDuration.prototype.getMsg = function () {
                            return this.msg;
                        };
                        ResultParseSecondsBasedDuration.succeeded = function (minus, hours, minutes, seconds) {
                            return new ResultParseSecondsBasedDuration(true, minus, hours, minutes, seconds);
                        };
                        ResultParseSecondsBasedDuration.failed = function () {
                            return new ResultParseSecondsBasedDuration(false);
                        };
                        return ResultParseSecondsBasedDuration;
                    }(time.ParseResult));
                    duration_2.ResultParseSecondsBasedDuration = ResultParseSecondsBasedDuration;
                    function parseString(source) {
                        var isNegative = source.indexOf('-') === 0;
                        var hourPart;
                        var minutePart;
                        var secondPart;
                        if (isNegative) {
                            return ResultParseSecondsBasedDuration.failed();
                        }
                        if (source.indexOf(':') !== -1) {
                            var parts = source.split(':');
                            if (parts.length !== 3) {
                                return ResultParseSecondsBasedDuration.failed();
                            }
                            hourPart = Math.abs(Number(parts[0]));
                            minutePart = Number(parts[1]);
                            secondPart = Number(parts[2]);
                            if (!nts.uk.ntsNumber.isNumber(hourPart, false, undefined, undefined)
                                || !nts.uk.ntsNumber.isNumber(minutePart, false, undefined, undefined)
                                || !nts.uk.ntsNumber.isNumber(secondPart, false, undefined, undefined)) {
                                return ResultParseSecondsBasedDuration.failed();
                            }
                        }
                        else {
                            var integerized = Number(source);
                            if (isNaN(integerized)) {
                                return ResultParseSecondsBasedDuration.failed();
                            }
                            var regularized = Math.abs(integerized);
                            if (!nts.uk.ntsNumber.isNumber(regularized, false, undefined, undefined)) {
                                return ResultParseSecondsBasedDuration.failed();
                            }
                            hourPart = Math.floor(regularized / 10000);
                            minutePart = Math.floor((regularized % 10000) / 100);
                            secondPart = Math.floor(regularized % 100);
                        }
                        if (!isFinite(hourPart) || !isFinite(minutePart) || !isFinite(secondPart)) {
                            return ResultParseSecondsBasedDuration.failed();
                        }
                        if (minutePart >= 60 || secondPart >= 60) {
                            return ResultParseSecondsBasedDuration.failed();
                        }
                        var result = ResultParseSecondsBasedDuration.succeeded(isNegative, hourPart, minutePart, secondPart);
                        var values = result.toValue();
                        var maxValue = 24 * 60 * 60;
                        if (values >= maxValue) {
                            return ResultParseSecondsBasedDuration.failed();
                        }
                        return result;
                    }
                    duration_2.parseString = parseString;
                    function create(timeAsSeconds) {
                        var duration = secondsBased.createBase(timeAsSeconds);
                        uk.util.accessor.defineInto(duration)
                            .get("typeName", function () { return "DurationSecondsBasedTime"; })
                            .get("asHoursDouble", function () { return timeAsSeconds / (60 * 60); })
                            .get("asHoursInt", function () { return uk.ntsNumber.trunc(duration.asHoursDouble); })
                            .get("text", function () { return createText(duration); });
                        duration.formatById = function (formatId) {
                            switch (formatId) {
                                default: return createText(duration);
                            }
                        };
                        return duration;
                    }
                    duration_2.create = create;
                    function createText(duration) {
                        return (duration.isNegative ? "-" : "")
                            + duration.asHoursInt + ":" + duration.minutePartText + ":" + duration.secondPartText;
                    }
                })(duration = secondsBased.duration || (secondsBased.duration = {}));
            })(secondsBased = time.secondsBased || (time.secondsBased = {}));
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time) {
            var secondsBased;
            (function (secondsBased) {
                var clock;
                (function (clock_2) {
                    function create() {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        var timeAsSeconds = parseAsClock(args);
                        var clock = secondsBased.createBase(timeAsSeconds);
                        var positivizedSeconds = function () { return (timeAsSeconds >= 0)
                            ? timeAsSeconds
                            : timeAsSeconds + (1 + Math.floor(-timeAsSeconds / secondsBased.SECOND_IN_DAY)) * secondsBased.SECOND_IN_DAY; };
                        var daysOffset = function () { return uk.ntsNumber.trunc(clock.isNegative ? (timeAsSeconds + 1) / secondsBased.SECOND_IN_DAY - 1
                            : timeAsSeconds / secondsBased.SECOND_IN_DAY); };
                        var positiveSeconds = positivizedSeconds();
                        var secondStr = String(positiveSeconds);
                        var pointIndex = secondStr.indexOf('.');
                        var secondPart;
                        if (pointIndex > -1) {
                            var fraction = secondStr.substring(pointIndex + 1);
                            positiveSeconds = Math.floor(positiveSeconds);
                            secondStr = String(positiveSeconds % secondsBased.SECOND_IN_MINUTE) + "." + fraction;
                            secondPart = Number(secondStr);
                        }
                        else {
                            secondPart = positivizedSeconds() % secondsBased.SECOND_IN_MINUTE;
                        }
                        uk.util.accessor.defineInto(clock)
                            .get("typeName", function () { return "ClockSecondsBasedTime"; })
                            .get("daysOffset", daysOffset)
                            .get("secondPart", function () { return secondPart; })
                            .get("minutePart", function () { return uk.ntsNumber.trunc((positivizedSeconds() % secondsBased.SECOND_IN_DAY) / secondsBased.SECOND_IN_MINUTE); })
                            .get("hourPart", function () { return uk.ntsNumber.trunc(clock.minutePart / secondsBased.MINUTE_IN_HOUR); })
                            .get("clockTextInDay", function () { return format.clockTextInDay(clock); });
                        clock.formatById = function (formatId) {
                            return format.byId(formatId, clock);
                        };
                        return clock;
                    }
                    clock_2.create = create;
                    function parseAsClock(args) {
                        var result;
                        if (uk.types.matchArguments(args, ["number"])) {
                            result = args[0];
                        }
                        else if (uk.types.matchArguments(args, ["number", "number", "number", "number"])) {
                            var daysOffset = args[0];
                            var hourPart = args[1];
                            var minutePart = args[2];
                            var secondPart = args[3];
                            result = daysOffset * secondsBased.SECOND_IN_DAY + hourPart * secondsBased.SECOND_IN_HOUR + minutePart * secondsBased.SECOND_IN_MINUTE + secondPart;
                        }
                        return result;
                    }
                    var format;
                    (function (format) {
                        function byId(formatId, clock) {
                            switch (formatId) {
                                case "Clock_Short_HMS":
                                    return short.make(clock);
                                default:
                                    return "";
                            }
                        }
                        format.byId = byId;
                        function clockTextInDay(clock) {
                            return clock.hourPart + ":" + clock.minutePartText + ":" + clock.secondPartText;
                        }
                        format.clockTextInDay = clockTextInDay;
                        var short;
                        (function (short) {
                            function make(clock) {
                                return sign(clock) + hours(clock) + ":" + clock.minutePartText + ":" + clock.secondPartText;
                            }
                            short.make = make;
                            function sign(clock) {
                                return clock.daysOffset < 0 ? "-" : "";
                            }
                            function hours(clock) {
                                return clock.daysOffset < 0 ? clock.hourPart : clock.daysOffset * 24 + clock.hourPart;
                            }
                        })(short || (short = {}));
                    })(format || (format = {}));
                })(clock = secondsBased.clock || (secondsBased.clock = {}));
            })(secondsBased = time.secondsBased || (time.secondsBased = {}));
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var request;
        (function (request) {
            var csrf;
            (function (csrf) {
                var STORAGE_KEY_CSRF_TOKEN = "nts.uk.request.csrf.STORAGE_KEY_CSRF_TOKEN";
                uk.cookie.get("nts.arc.CSRF_TOKEN")
                    .ifPresent(function (csrfToken) {
                    uk.sessionStorage.setItem(STORAGE_KEY_CSRF_TOKEN, csrfToken);
                });
                function getToken() {
                    return uk.sessionStorage.getItem(STORAGE_KEY_CSRF_TOKEN).orElse("");
                }
                csrf.getToken = getToken;
            })(csrf || (csrf = {}));
            request.STORAGE_KEY_TRANSFER_DATA = "nts.uk.request.STORAGE_KEY_TRANSFER_DATA";
            request.WEB_APP_NAME = {
                comjs: 'nts.uk.com.js.web',
                com: 'nts.uk.com.web',
                pr: 'nts.uk.pr.web',
                at: 'nts.uk.at.web',
                hr: 'nts.uk.hr.web',
                cloud: 'nts.uk.cloud.web'
            };
            var QueryString = /** @class */ (function () {
                function QueryString() {
                    this.items = {};
                }
                QueryString.parseUrl = function (url) {
                    var instance = new QueryString();
                    var queryString = url.split('?')[1];
                    if (queryString) {
                        var queryEntries = queryString.split('&');
                        for (var i = 0; i < queryEntries.length; i++) {
                            var entryParts = queryEntries[i].split('=');
                            instance.set(entryParts[0], entryParts[1]);
                        }
                    }
                    return instance;
                };
                QueryString.build = function (entriesObj) {
                    var instance = new QueryString();
                    for (var key in entriesObj) {
                        instance.set(key, entriesObj[key]);
                    }
                    return instance;
                };
                QueryString.prototype.get = function (key) {
                    return this.items[key];
                };
                QueryString.prototype.set = function (key, value) {
                    if (key === null || key === undefined || key === '') {
                        return;
                    }
                    this.items[key] = value;
                };
                QueryString.prototype.remove = function (key) {
                    delete this.items[key];
                };
                QueryString.prototype.mergeFrom = function (otherObj) {
                    for (var otherKey in otherObj.items) {
                        this.set(otherKey, otherObj.items[otherKey]);
                    }
                };
                QueryString.prototype.count = function () {
                    var count = 0;
                    for (var key in this.items) {
                        count++;
                    }
                    return count;
                };
                QueryString.prototype.hasItems = function () {
                    return this.count() !== 0;
                };
                QueryString.prototype.serialize = function () {
                    var entryStrings = [];
                    for (var key in this.items) {
                        entryStrings.push(key + '=' + this.items[key]);
                    }
                    return entryStrings.join('&');
                };
                return QueryString;
            }());
            request.QueryString = QueryString;
            /**
             * URL and QueryString
             */
            var Locator = /** @class */ (function () {
                function Locator(url) {
                    this.rawUrl = url.split('?')[0];
                    this.queryString = QueryString.parseUrl(url);
                }
                Locator.prototype.serialize = function () {
                    if (this.queryString.hasItems()) {
                        return this.rawUrl + '?' + this.queryString.serialize();
                    }
                    else {
                        return this.rawUrl;
                    }
                };
                Locator.prototype.mergeRelativePath = function (relativePath) {
                    var stack = this.rawUrl.split('/');
                    var parts = relativePath.split('?')[0].split('/');
                    var queryStringToAdd = QueryString.parseUrl(relativePath);
                    // 最後のファイル名は除外
                    // (最後がフォルダ名でしかも / で終わっていない場合は考慮しない)
                    stack.pop();
                    // relativePathの先頭が '/' の場合、それを取り除く
                    if (parts[0] === '') {
                        parts.shift();
                    }
                    for (var i = 0; i < parts.length; i++) {
                        if (parts[i] === '.')
                            continue;
                        if (parts[i] === '..')
                            stack.pop();
                        else
                            stack.push(parts[i]);
                    }
                    var queryStringParts = queryStringToAdd.hasItems()
                        ? '?' + queryStringToAdd.serialize()
                        : '';
                    return new Locator(stack.join('/') + queryStringParts);
                };
                return Locator;
            }());
            request.Locator = Locator;
            function writeDynamicConstraint(codes) {
                var dfd = $.Deferred();
                ajax("constraint/getlist", codes).done(function (data) {
                    if (nts.uk.util.isNullOrUndefined(__viewContext.primitiveValueConstraints)) {
                        __viewContext.primitiveValueConstraints = {};
                    }
                    _.forEach(data, function (item) {
                        __viewContext.primitiveValueConstraints[item.itemCode] = item;
                    });
                    dfd.resolve(data);
                }).fail(function (error) {
                    dfd.reject(error);
                });
                return dfd.promise();
            }
            request.writeDynamicConstraint = writeDynamicConstraint;
            var subSession;
            (function (subSession) {
                var SubSessionIdKey = "nts.uk.request.subSessionId.";
                var SecondsToKeepSubSession = 30;
                var SecondsIntervalToReportAlive = 3;
                if (uk.util.isInFrame()) {
                    subSession.currentId = parent.window.nts.uk.request.subSession.currentId;
                }
                else {
                    subSession.currentId = uk.util.randomId();
                }
                // keep alive sub sessions
                function keepAliveSubSessionId() {
                    window.localStorage.setItem(SubSessionIdKey + subSession.currentId, +new Date());
                }
                keepAliveSubSessionId();
                setInterval(keepAliveSubSessionId, SecondsIntervalToReportAlive * 1000);
                function getAliveIds() {
                    var aliveIds = [];
                    var deadIds = [];
                    for (var i = 0;; i++) {
                        var key = window.localStorage.key(i);
                        if (key == null)
                            break;
                        if (key.indexOf(SubSessionIdKey) !== 0)
                            continue;
                        var id = key.slice(SubSessionIdKey.length);
                        var lastReportTime = window.localStorage.getItem(SubSessionIdKey + id);
                        var duration = +new Date() - lastReportTime;
                        if (duration <= SecondsToKeepSubSession * 1000) {
                            aliveIds.push(id);
                        }
                        else {
                            deadIds.push(id);
                        }
                    }
                    // prune dead IDs
                    deadIds.forEach(function (deadId) {
                        window.localStorage.removeItem(SubSessionIdKey + deadId);
                    });
                    return aliveIds;
                }
                subSession.getAliveIds = getAliveIds;
            })(subSession = request.subSession || (request.subSession = {}));
            function ajax(webAppId, path, data, options, restoresSession) {
                if (typeof arguments[1] !== 'string') {
                    return ajax.apply(null, _.concat(location.currentAppId, arguments));
                }
                var dfd = $.Deferred();
                options = options || {};
                restoresSession = restoresSession !== false;
                if (typeof data === 'object') {
                    data = JSON.stringify(data);
                }
                var webserviceLocator = location.siteRoot
                    .mergeRelativePath(request.WEB_APP_NAME[webAppId] + '/')
                    .mergeRelativePath(location.ajaxRootDir)
                    .mergeRelativePath(path);
                var countRetryByDeadLock = 0;
                function ajaxFunc() {
                    $.ajax({
                        type: options.method || 'POST',
                        contentType: options.contentType || 'application/json',
                        url: webserviceLocator.serialize(),
                        dataType: options.dataType || 'json',
                        data: data,
                        headers: {
                            'PG-Path': location.current.serialize(),
                            "X-CSRF-TOKEN": csrf.getToken(),
                            "X-SubSessionId": subSession.currentId,
                            "X-AliveSubSessionIds": subSession.getAliveIds()
                        }
                    }).done(function (res) {
                        if (nts.uk.util.exception.isErrorToReject(res)) {
                            dfd.reject(res);
                        }
                        else if (res !== undefined && res.commandResult === true) {
                            dfd.resolve(res.value);
                        }
                        else {
                            dfd.resolve(res);
                        }
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        // デッドロックの場合、待機時間を少しずつ増やしながらリトライ（とりあえず10回までとする）
                        if (jqXHR.responseJSON && jqXHR.responseJSON.deadLock === true && countRetryByDeadLock < 10) {
                            countRetryByDeadLock++;
                            setTimeout(ajaxFunc, 300 + countRetryByDeadLock * 100);
                            return;
                        }
                        AjaxErrorHandlers.main(jqXHR, textStatus, errorThrown);
                    });
                }
                if (restoresSession && webAppId != nts.uk.request.location.currentAppId) {
                    doTaskShareingSesion(webAppId, ajaxFunc);
                }
                else {
                    ajaxFunc();
                }
                return dfd.promise();
            }
            request.ajax = ajax;
            function syncAjax(webAppId, path, data, options) {
                if (typeof arguments[1] !== 'string') {
                    return syncAjax.apply(null, _.concat(location.currentAppId, arguments));
                }
                var dfd = $.Deferred();
                options = options || {};
                if (typeof data === 'object') {
                    data = JSON.stringify(data);
                }
                var webserviceLocator = location.siteRoot
                    .mergeRelativePath(request.WEB_APP_NAME[webAppId] + '/')
                    .mergeRelativePath(location.ajaxRootDir)
                    .mergeRelativePath(path);
                function ajaxFunc() {
                    $.ajax({
                        type: options.method || 'POST',
                        contentType: options.contentType || 'application/json',
                        url: webserviceLocator.serialize(),
                        dataType: options.dataType || 'json',
                        data: data,
                        async: false,
                        headers: {
                            'PG-Path': location.current.serialize(),
                            "X-CSRF-TOKEN": csrf.getToken(),
                            "X-SubSessionId": subSession.currentId,
                            "X-AliveSubSessionIds": subSession.getAliveIds()
                        },
                        success: function (res) {
                            if (nts.uk.util.exception.isErrorToReject(res)) {
                                dfd.reject(res);
                            }
                            else if (res !== undefined && res.commandResult === true) {
                                dfd.resolve(res.value);
                            }
                            else {
                                dfd.resolve(res);
                            }
                        },
                        error: function (xhr, status, error) {
                            AjaxErrorHandlers.main(xhr, status, error);
                        }
                    });
                }
                if (webAppId != nts.uk.request.location.currentAppId) {
                    doTaskShareingSesion(webAppId, ajaxFunc);
                }
                else {
                    ajaxFunc();
                }
                return dfd.promise();
            }
            request.syncAjax = syncAjax;
            var AjaxErrorHandlers;
            (function (AjaxErrorHandlers) {
                function main(xhr, status, error) {
                    switch (xhr.status) {
                        case 401:
                            handle401(xhr);
                            break;
                        case 403:
                            handle403(xhr);
                            break;
                        default:
                            handleUnknownError(xhr, status, error);
                            break;
                    }
                }
                AjaxErrorHandlers.main = main;
                function handle401(xhr) {
                    var res = xhr.responseJSON;
                    // res.sessionTimeout || res.csrfError
                    specials.errorPages.sessionTimeout();
                }
                function handle403(xhr) {
                    specials.errorPages.stopUse();
                }
                function handleUnknownError(xhr, status, error) {
                    console.log("request failed");
                    console.log(arguments);
                    specials.errorPages.systemError(xhr.responseJSON);
                }
            })(AjaxErrorHandlers || (AjaxErrorHandlers = {}));
            function doTaskShareingSesion(webAppId, task) {
                login.keepSerializedSession()
                    .then(function () {
                    return login.restoreSessionTo(webAppId);
                })
                    .then(function () {
                    task();
                });
            }
            function uploadFile(data, option) {
                return $.ajax({
                    url: "/nts.uk.com.web/webapi/ntscommons/arc/filegate/upload",
                    type: 'POST',
                    data: data,
                    cache: false,
                    contentType: false,
                    processData: false
                });
            }
            request.uploadFile = uploadFile;
            function exportFile(path, data, options) {
                var dfd = $.Deferred();
                ajax(path, data, options)
                    .then(function (res) {
                    return uk.deferred.repeat(function (conf) { return conf
                        .task(function () { return specials.getAsyncTaskInfo(res.taskId); })
                        .while(function (info) { return info.pending || info.running; })
                        .pause(1000); });
                })
                    .done(function (res) {
                    if (res.failed || res.status == "ABORTED") {
                        dfd.reject(res.error);
                    }
                    else {
                        specials.donwloadFile(res.id);
                        dfd.resolve(res);
                    }
                })
                    .fail(function (res) {
                    if (res && (res.failed || res.status == "ABORTED")) {
                        if (res.error && res.error.businessException === false) {
                            specials.errorPages.systemError();
                            return;
                        }
                    }
                    dfd.reject(res);
                });
                return dfd.promise();
            }
            request.exportFile = exportFile;
            function exportLog(data) {
                var dfd = $.Deferred();
                request.ajax("logcollector/extract", data).done(function (res) {
                    if (res.failed || res.status == "ABORTED") {
                        dfd.reject(res.error);
                    }
                    var taskId = res.id;
                    uk.deferred.repeat(function (conf) { return conf.task(function () {
                        return nts.uk.request.asyncTask.getInfo(taskId).done(function (res) {
                            if (res.succeeded) {
                                setTimeout(function () {
                                    specials.donwloadFile(taskId);
                                    dfd.resolve(null);
                                }, 100);
                            }
                            else {
                                if (res.failed) {
                                    dfd.reject(res);
                                }
                            }
                        });
                    }).while(function (info) { return info.pending || info.running; }).pause(1000); });
                }).fail(function (res) {
                    dfd.reject(res);
                });
                return dfd.promise();
            }
            request.exportLog = exportLog;
            function downloadFileWithTask(taskId, data, options) {
                var dfd = $.Deferred();
                var checkTask = function () {
                    specials.getAsyncTaskInfo(taskId).done(function (res) {
                        if (res.status == "PENDING" || res.status == "RUNNING") {
                            setTimeout(function () {
                                checkTask();
                            }, 1000);
                        }
                        else if (res.failed || res.status == "ABORTED") {
                            dfd.reject(res.error);
                        }
                        else {
                            specials.donwloadFile(res.id);
                            dfd.resolve(res);
                        }
                    }).fail(function (res) {
                        dfd.reject(res);
                    });
                };
                checkTask();
                return dfd.promise();
            }
            request.downloadFileWithTask = downloadFileWithTask;
            var asyncTask;
            (function (asyncTask) {
                function getInfo(taskId) {
                    return ajax('/ntscommons/arc/task/async/info/' + taskId);
                }
                asyncTask.getInfo = getInfo;
                function requestToCancel(taskId) {
                    return ajax('/ntscommons/arc/task/async/requesttocancel/' + taskId);
                }
                asyncTask.requestToCancel = requestToCancel;
            })(asyncTask = request.asyncTask || (request.asyncTask = {}));
            var file;
            (function (file) {
                function donwload(fileId) {
                    var dfd = $.Deferred();
                    $.fileDownload(pathToGet(fileId), {
                        successCallback: function (url) {
                            dfd.resolve();
                        },
                        failCallback: function (responseHtml, url) {
                            var responseError = $(responseHtml);
                            var error = JSON.parse(responseError.text());
                            dfd.reject(error);
                        }
                    });
                    return dfd.promise();
                }
                file.donwload = donwload;
                function liveViewUrl(fileId, entryName) {
                    var liveViewPath = "/webapi/shr/infra/file/storage/liveview/";
                    var locator = location.siteRoot
                        .mergeRelativePath(request.WEB_APP_NAME.com + '/')
                        .mergeRelativePath(liveViewPath);
                    if (arguments.length === 1) {
                        return locator.mergeRelativePath(fileId).serialize();
                    }
                    else if (arguments.length === 2) {
                        return locator.mergeRelativePath(fileId + "/").mergeRelativePath(entryName).serialize();
                    }
                }
                file.liveViewUrl = liveViewUrl;
                function remove(fileId) {
                    return ajax("com", "/shr/infra/file/storage/delete/" + fileId);
                }
                file.remove = remove;
                function isExist(fileId) {
                    return ajax("com", "/shr/infra/file/storage/isexist/" + fileId);
                }
                file.isExist = isExist;
                function pathToGet(fileId) {
                    return resolvePath('/webapi/shr/infra/file/storage/get/' + fileId);
                }
                file.pathToGet = pathToGet;
            })(file = request.file || (request.file = {}));
            function liveView(fileId) {
                return file.liveViewUrl(fileId);
            }
            request.liveView = liveView;
            var specials;
            (function (specials) {
                function getAsyncTaskInfo(taskId) {
                    return asyncTask.getInfo(taskId);
                }
                specials.getAsyncTaskInfo = getAsyncTaskInfo;
                function donwloadFile(fileId) {
                    return file.donwload(fileId);
                }
                specials.donwloadFile = donwloadFile;
                function deleteFile(fileId) {
                    return file.remove(fileId);
                }
                specials.deleteFile = deleteFile;
                function isFileExist(fileId) {
                    return file.isExist(fileId);
                }
                specials.isFileExist = isFileExist;
                var errorPages;
                (function (errorPages) {
                    function systemError(error) {
                        if ($(".nts-system-error-dialog").length !== 0) {
                            return;
                        }
                        uk.ui.windows.setShared("errorInfo", error);
                        var sub = uk.ui.windows.sub.modal("com", "/view/common/error/system/index.xhtml", {
                            resizable: true
                        });
                        sub.$dialog.addClass("nts-system-error-dialog");
                    }
                    errorPages.systemError = systemError;
                    function sessionTimeout() {
                        jump('com', '/view/common/error/sessiontimeout/index.xhtml');
                    }
                    errorPages.sessionTimeout = sessionTimeout;
                    function stopUse() {
                        jump('com', '/view/common/error/stopuse/index.xhtml');
                    }
                    errorPages.stopUse = stopUse;
                })(errorPages = specials.errorPages || (specials.errorPages = {}));
            })(specials = request.specials || (request.specials = {}));
            function jumpToNewWindow(webAppId, path, data) {
                // handle overload
                if (typeof arguments[1] !== 'string') {
                    jumpToNewWindow.apply(null, _.concat(nts.uk.request.location.currentAppId, arguments));
                    return;
                }
                if (data === undefined) {
                    uk.sessionStorage.removeItem(uk.request.STORAGE_KEY_TRANSFER_DATA);
                }
                else {
                    uk.sessionStorage.setItemAsJson(uk.request.STORAGE_KEY_TRANSFER_DATA, data);
                }
                var resolvedPath = nts.uk.request.location.siteRoot
                    .mergeRelativePath(nts.uk.request.WEB_APP_NAME[webAppId] + '/')
                    .mergeRelativePath(path).serialize();
                if (webAppId !== nts.uk.request.location.currentAppId) {
                    login.keepSerializedSession()
                        .then(function () {
                        return login.restoreSessionTo(webAppId);
                    })
                        .then(function () {
                        // open new tab (like current tab)
                        var wd = window.open(resolvedPath, '_blank');
                        wd.focus();
                        // remove storage on current tab
                        nts.uk.sessionStorage.removeItem(uk.request.STORAGE_KEY_TRANSFER_DATA);
                    });
                }
                else {
                    // open new tab (like current tab)
                    var wd = window.open(resolvedPath, '_blank');
                    wd.focus();
                    // remove storage on current tab
                    nts.uk.sessionStorage.removeItem(uk.request.STORAGE_KEY_TRANSFER_DATA);
                }
            }
            request.jumpToNewWindow = jumpToNewWindow;
            function jumpFromDialogOrFrame(webAppId, path, data) {
                // handle overload
                if (typeof arguments[1] !== 'string') {
                    jumpFromDialogOrFrame.apply(null, _.concat(nts.uk.request.location.currentAppId, arguments));
                    return;
                }
                window.top.nts.uk.request.jump(webAppId, path, data);
            }
            request.jumpFromDialogOrFrame = jumpFromDialogOrFrame;
            function jump(webAppId, path, data) {
                uk.ui.block.invisible();
                // handle overload
                if (typeof arguments[1] !== 'string') {
                    jump.apply(null, _.concat(nts.uk.request.location.currentAppId, arguments));
                    return;
                }
                if (webAppId != nts.uk.request.location.currentAppId) {
                    jumpToOtherWebApp.apply(this, arguments);
                    return;
                }
                if (data === undefined) {
                    uk.sessionStorage.removeItem(request.STORAGE_KEY_TRANSFER_DATA);
                }
                else {
                    uk.sessionStorage.setItemAsJson(request.STORAGE_KEY_TRANSFER_DATA, data);
                }
                window.location.href = resolvePath(path);
            }
            request.jump = jump;
            function jumpToOtherWebApp(webAppId, path, data) {
                var resolvedPath = nts.uk.request.location.siteRoot
                    .mergeRelativePath(nts.uk.request.WEB_APP_NAME[webAppId] + '/')
                    .mergeRelativePath(path).serialize();
                if (data === undefined) {
                    uk.sessionStorage.removeItem(request.STORAGE_KEY_TRANSFER_DATA);
                }
                else {
                    uk.sessionStorage.setItemAsJson(request.STORAGE_KEY_TRANSFER_DATA, data);
                }
                login.keepSerializedSession()
                    .then(function () {
                    return login.restoreSessionTo(webAppId);
                })
                    .then(function () {
                    window.location.href = resolvedPath;
                });
            }
            function jumpToMenu(path) {
                var end = path.charAt(0) === '/' ? path.indexOf("/", 1) : path.indexOf("/");
                var appName = path.substring(0, end);
                var appId;
                switch (appName) {
                    case request.WEB_APP_NAME.com:
                    case "/" + request.WEB_APP_NAME.com:
                        appId = "com";
                        break;
                    case request.WEB_APP_NAME.pr:
                    case "/" + request.WEB_APP_NAME.pr:
                        appId = "pr";
                        break;
                    case request.WEB_APP_NAME.at:
                    case "/" + request.WEB_APP_NAME.at:
                        appId = "at";
                        break;
                }
                var d = new Date();
                d.setTime(d.getTime() + (10 * 60 * 1000));
                //        $.cookie('startfrommenu', "true", { expires: d });
                document.cookie = "startfrommenu=true";
                jump(appId, path.substr(end));
            }
            request.jumpToMenu = jumpToMenu;
            var login;
            (function (login) {
                var STORAGE_KEY_USED_LOGIN_PAGE = "nts.uk.request.login.STORAGE_KEY_USED_LOGIN_PAGE";
                var STORAGE_KEY_SERIALIZED_SESSION = "nts.uk.request.login.STORAGE_KEY_SERIALIZED_SESSION";
                function keepUsedLoginPage(url) {
                    if (arguments.length === 2) {
                        var loginLocator = location.siteRoot
                            .mergeRelativePath(request.WEB_APP_NAME[arguments[0]] + '/')
                            .mergeRelativePath(arguments[1]);
                        keepUsedLoginPage.apply(null, [loginLocator.serialize()]);
                        return;
                    }
                    if (url === undefined) {
                        keepUsedLoginPage(location.current.serialize());
                        return;
                    }
                    uk.sessionStorage.setItem(STORAGE_KEY_USED_LOGIN_PAGE, url);
                }
                login.keepUsedLoginPage = keepUsedLoginPage;
                function jumpToUsedLoginPage() {
                    uk.sessionStorage.getItem(STORAGE_KEY_USED_LOGIN_PAGE).ifPresent(function (path) {
                        window.location.href = path;
                    }).ifEmpty(function () {
                        request.jump('com', '/view/ccg/007/d/index.xhtml');
                    });
                }
                login.jumpToUsedLoginPage = jumpToUsedLoginPage;
                function jumpToUsedSSOLoginPage() {
                    uk.sessionStorage.getItem(STORAGE_KEY_USED_LOGIN_PAGE).ifPresent(function (path) {
                        window.location.href = path;
                    }).ifEmpty(function () {
                        request.jump('com', '/view/ccg/007/d/index.xhtml?signon=on');
                    });
                }
                login.jumpToUsedSSOLoginPage = jumpToUsedSSOLoginPage;
                function keepSerializedSession() {
                    var dfd = $.Deferred();
                    dfd.resolve();
                    //            request.ajax("/shr/web/session/serialize").done(res => {
                    //                uk.sessionStorage.setItem(STORAGE_KEY_SERIALIZED_SESSION, res);
                    //                dfd.resolve();
                    //            });
                    //
                    return dfd.promise();
                }
                login.keepSerializedSession = keepSerializedSession;
                function restoreSessionTo(webAppId) {
                    var dfd = $.Deferred();
                    dfd.resolve();
                    return dfd.promise();
                    //            let serializedTicket = uk.sessionStorage.getItem(STORAGE_KEY_SERIALIZED_SESSION).get();
                    //            return (<any>request).ajax(webAppId, "/shr/web/session/restore", serializedTicket, null, false);
                }
                login.restoreSessionTo = restoreSessionTo;
            })(login = request.login || (request.login = {}));
            function jumpToTopPage() {
                jumpToMenu('nts.uk.com.web/view/ccg/008/a/index.xhtml');
            }
            request.jumpToTopPage = jumpToTopPage;
            function resolvePath(path) {
                var destination;
                if (path.charAt(0) === '/') {
                    destination = location.appRoot.mergeRelativePath(path);
                }
                else {
                    destination = location.current.mergeRelativePath(path);
                }
                return destination.serialize();
            }
            request.resolvePath = resolvePath;
            var location;
            (function (location) {
                location.current = new Locator(window.location.href);
                location.appRoot = location.current.mergeRelativePath(__viewContext.rootPath);
                location.siteRoot = location.appRoot.mergeRelativePath('../');
                location.ajaxRootDir = 'webapi/';
                var currentAppName = _.takeRight(location.appRoot.serialize().split('/'), 2)[0];
                for (var id in request.WEB_APP_NAME) {
                    if (currentAppName === request.WEB_APP_NAME[id]) {
                        location.currentAppId = id;
                        break;
                    }
                }
            })(location = request.location || (request.location = {}));
            ;
        })(request = uk.request || (uk.request = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            /** Event to notify document ready to initialize UI. */
            ui.documentReady = $.Callbacks();
            /** Event to notify ViewModel built to bind. */
            ui.viewModelBuilt = $.Callbacks();
            /** Event to notify ViewModel applied bindings. */
            ui.viewModelApplied = $.Callbacks();
            // Kiban ViewModel
            var KibanViewModel = /** @class */ (function () {
                function KibanViewModel(dialogOptions) {
                    var _this = this;
                    this.systemName = ko.observable("");
                    this.programName = ko.observable("");
                    this.title = ko.computed(function () {
                        //                let pgName = this.programName();
                        //                if (pgName === "" || pgName === undefined || pgName === null) {
                        return _this.systemName();
                        //                }
                        //                return this.programName() + " - " + this.systemName();
                    });
                    this.errorDialogViewModel = new nts.uk.ui.errors.ErrorsViewModel(dialogOptions);
                }
                return KibanViewModel;
            }());
            ui.KibanViewModel = KibanViewModel;
            var init;
            (function (init) {
                var _start;
                __viewContext.ready = function (callback) {
                    _start = callback;
                };
                __viewContext.bind = function (contentViewModel, dialogOptions) {
                    var kiban = new KibanViewModel(dialogOptions);
                    ui._viewModel = {
                        content: contentViewModel,
                        kiban: kiban,
                        errors: {
                            isEmpty: ko.computed(function () { return !kiban.errorDialogViewModel.occurs(); })
                        }
                    };
                    kiban.title.subscribe(function (newTitle) {
                        document.title = newTitle;
                    });
                    kiban.systemName(__viewContext.env.systemName);
                    ui.viewModelBuilt.fire(ui._viewModel);
                    ko.applyBindings(ui._viewModel);
                    ui.viewModelApplied.fire(ui._viewModel);
                    // off event reset for class reset-not-apply
                    $(".reset-not-apply").find(".reset-element").off("reset");
                    nts.uk.cookie.remove("startfrommenu", { path: "/" });
                    //avoid page content overlap header and function area
                    var content_height = 20;
                    if ($("#header").length != 0) {
                        content_height += $("#header").outerHeight(); //header height+ content area botton padding,top padding
                    }
                    if ($("#functions-area").length != 0) {
                        content_height += $("#functions-area").outerHeight(); //top function area height
                    }
                    if ($("#functions-area-bottom").length != 0) {
                        content_height += $("#functions-area-bottom").outerHeight(); //bottom function area height
                    }
                    $("#contents-area").css("height", "calc(100vh - " + content_height + "px)");
                    //            if($("#functions-area-bottom").length!=0){
                    //            }
                };
                var startP = function () {
                    _.defer(function () {
                        _start.call(__viewContext);
                    });
                    // Menu
                    if ($(document).find("#header").length > 0) {
                        ui.menu.request();
                    }
                    else if (!uk.util.isInFrame() && !__viewContext.noHeader) {
                        var header = "<div id='header'><div id='menu-header'>"
                            + "<div id='logo-area' class='cf'>"
                            + "<div id='logo'>勤次郎</div>"
                            + "<div id='user-info' class='cf'>"
                            + "<div id='company' class='cf' />"
                            + "<div id='user' class='cf' />"
                            + "</div></div>"
                            + "<div id='nav-area' class='cf' />"
                            + "<div id='pg-area' class='cf' />"
                            + "</div></div>";
                        $("#master-wrapper").prepend(header);
                        ui.menu.request();
                    }
                };
                var noSessionWebScreens = [
                    "/view/sample/",
                    "/view/common/error/",
                    "/view/spr/index.xhtml",
                    "/view/ccg/007/",
                    "/view/kdw/003/a/index.xhtml",
                    "/view/ccg/033/index.xhtml"
                ];
                var cantCall = function () {
                    return !_.some(noSessionWebScreens, function (w) { return uk.request.location.current.rawUrl.indexOf(w) > -1; })
                        || uk.request.location.current.rawUrl.indexOf("/view/sample/component/editor/text-editor.xhtml") > -1;
                };
                var getEmployeeSetting = function () {
                    var dfd = $.Deferred(), es = nts.uk.sessionStorage.getItem("nts.uk.session.EMPLOYEE_SETTING");
                    if (es.isPresent()) {
                        dfd.resolve(JSON.parse(es.get()));
                    }
                    else {
                        uk.request.ajax("com", "/bs/employee/setting/code/find").done(function (constraints) {
                            nts.uk.sessionStorage.setItemAsJson("nts.uk.session.EMPLOYEE_SETTING", constraints);
                            dfd.resolve(constraints);
                        });
                    }
                    return dfd.promise();
                };
                var loadEmployeeCodeConstraints = function () {
                    var self = this, dfd = $.Deferred();
                    getEmployeeSetting().done(function (res) {
                        var formatOption = {
                            autofill: true
                        };
                        if (res.ceMethodAttr === 0) {
                            formatOption.filldirection = "left";
                            formatOption.fillcharacter = "0";
                        }
                        else if (res.ceMethodAttr === 1) {
                            formatOption.filldirection = "right";
                            formatOption.fillcharacter = "0";
                        }
                        else if (res.ceMethodAttr === 2) {
                            formatOption.filldirection = "left";
                            formatOption.fillcharacter = " ";
                        }
                        else {
                            formatOption.filldirection = "right";
                            formatOption.fillcharacter = " ";
                        }
                        // if not have primitive, create new
                        if (!__viewContext.primitiveValueConstraints) {
                            __viewContext.primitiveValueConstraints = {
                                EmployeeCode: {
                                    valueType: "String",
                                    charType: "AlphaNumeric",
                                    maxLength: res.numberOfDigits,
                                    formatOption: formatOption
                                }
                            };
                        }
                        else {
                            // extend primitive constraint
                            _.extend(__viewContext.primitiveValueConstraints, {
                                EmployeeCode: {
                                    valueType: "String",
                                    charType: "AlphaNumeric",
                                    maxLength: res.numberOfDigits,
                                    formatOption: formatOption
                                }
                            });
                        }
                        dfd.resolve();
                    }).fail(function (res) {
                        dfd.reject();
                    });
                    return dfd.promise();
                };
                $(function () {
                    __viewContext.noHeader = (__viewContext.noHeader === true) || $("body").hasClass("no-header");
                    ui.documentReady.fire();
                    __viewContext.transferred = uk.sessionStorage.getItem(uk.request.STORAGE_KEY_TRANSFER_DATA)
                        .map(function (v) { return JSON.parse(v); });
                    if ($(".html-loading").length <= 0) {
                        startP();
                        return;
                    }
                    var dfd = [];
                    _.forEach($(".html-loading"), function (e) {
                        var $container = $(e);
                        var dX = $.Deferred();
                        $container.load($container.attr("link"), function () {
                            dX.resolve();
                        });
                        dfd.push(dX);
                        dX.promise();
                    });
                    $.when.apply($, dfd).then(function (data, textStatus, jqXHR) {
                        $('.html-loading').contents().unwrap();
                        startP();
                    });
                });
                $(function () {
                    var lastPause = new Date();
                    $(window).keydown(function (e) {
                        if (e.keyCode !== 19)
                            return;
                        var now = new Date();
                        if (now - lastPause < 500) {
                            ui.dialog.version();
                        }
                        lastPause = new Date();
                    });
                });
            })(init || (init = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var menu;
            (function (menu) {
                var DATA_TITLEITEM_PGID = "pgid";
                var DATA_TITLEITEM_PGNAME = "pgname";
                var MENU_SET_KEY = "nts.uk.session.MENU_SET";
                var COMPANY_KEY = "nts.uk.session.COMPANY";
                var PROGRAM_KEY = "nts.uk.session.PROGRAM";
                /** Showing item */
                var showingItem;
                /**
                 * Menu item.
                 */
                var MenuItem = /** @class */ (function () {
                    function MenuItem(name, path) {
                        this.name = name;
                        this.path = path;
                    }
                    return MenuItem;
                }());
                /**
                 * Create menu selection.
                 */
                function createMenuSelect($menuNav, menuSet) {
                    var $cate = $("<li class='category'/>").addClass("menu-select").appendTo($menuNav);
                    var $cateName = $("<div class='category-name'/>").html("&#9776;").appendTo($cate);
                    var $menuItems = $("<ul class='menu-items'/>").appendTo($cate);
                    $menuItems.append($("<li class='menu-item'/>").text(ui.toBeResource.selectMenu));
                    $menuItems.append($("<hr/>").css({ margin: "5px 0px" }));
                    _.forEach(menuSet, function (item, i) {
                        $menuItems.append($("<li class='menu-item'/>")
                            .data("code", item.companyId + ":" + item.webMenuCode)
                            .text(item.webMenuName).on(constants.CLICK, function () {
                            uk.localStorage.setItem(constants.MENU, $(this).data("code"));
                            $menuNav.find(".category:eq(0)").off();
                            $menuNav.find(".category:gt(0)").remove();
                            generate($menuNav, item);
                            _.defer(function () {
                                showingItem = undefined;
                            });
                        }));
                    });
                    $menuItems.append("<br/>");
                }
                /**
                 * Request.
                 */
                function request() {
                    $("#logo").on(constants.CLICK, function () {
                        uk.request.jumpToTopPage();
                    });
                    displayUserInfo();
                    getMenuSet().done(function (menuSet) {
                        var $menuNav = $("<ul/>").attr("id", "menu-nav").appendTo($("#nav-area"));
                        if (!menuSet || menuSet.length === 0)
                            return;
                        createMenuSelect($menuNav, menuSet);
                        var menuCode = uk.localStorage.getItem(constants.MENU);
                        if (menuCode.isPresent()) {
                            var parts_1 = menuCode.get().split(":");
                            var selectedMenu = _.find(menuSet, function (m) {
                                return m.companyId === parts_1[0] && m.webMenuCode === parts_1[1];
                            });
                            !uk.util.isNullOrUndefined(selectedMenu) ? generate($menuNav, selectedMenu)
                                : generate($menuNav, menuSet[0]);
                        }
                        else {
                            generate($menuNav, menuSet[0]);
                        }
                    });
                    getProgram();
                }
                menu.request = request;
                /**
                 * Get menu set.
                 */
                function getMenuSet() {
                    var dfd = $.Deferred();
                    var menuSetOpt = nts.uk.sessionStorage.getItem(MENU_SET_KEY);
                    if (menuSetOpt.isPresent()) {
                        dfd.resolve(JSON.parse(menuSetOpt.get()));
                    }
                    else {
                        nts.uk.request.ajax(constants.APP_ID, constants.MenuDataPath).done(function (menuSet) {
                            nts.uk.sessionStorage.setItemAsJson(MENU_SET_KEY, menuSet);
                            dfd.resolve(menuSet);
                        });
                    }
                    return dfd.promise();
                }
                /**
                 * Generate.
                 */
                function generate($menuNav, menuSet) {
                    _.forEach(menuSet.menuBar, function (category) {
                        var $cate = $("<li class='category'/>").appendTo($menuNav);
                        if (category.selectedAttr === 1) {
                            $cate.addClass("direct").data("path", category.link).on(constants.CLICK, function () {
                                uk.request.jumpToMenu(category.link);
                            });
                        }
                        var $cateName = $("<div class='category-name'/>")
                            .css({ background: category.backgroundColor, color: category.textColor || "#FFF" })
                            .text(category.menuBarName).appendTo($cate);
                        var $menuItems = $("<ul class='menu-items'/>").appendTo($cate);
                        if (category.items && category.items.length > 0) {
                            _.forEach(category.items, function (item) {
                                $menuItems.append($("<li class='menu-item' path='" + item.path + "'/>").text(item.name));
                            });
                        }
                        else if (category.titleMenu && category.titleMenu.length > 0) {
                            titleMenu.createTitles($menuItems, category.titleMenu);
                        }
                    });
                    init();
                }
                /**
                 * Get company.
                 */
                function getCompany() {
                    var dfd = $.Deferred();
                    var companyOpt = nts.uk.sessionStorage.getItem(COMPANY_KEY);
                    if (companyOpt.isPresent()) {
                        dfd.resolve(JSON.parse(companyOpt.get()));
                    }
                    else {
                        nts.uk.request.ajax(constants.APP_ID, constants.Companies).done(function (companies) {
                            nts.uk.sessionStorage.setItemAsJson(COMPANY_KEY, companies);
                            dfd.resolve(companies);
                        });
                    }
                    return dfd.promise();
                }
                /**
                 * Display user info.
                 */
                function displayUserInfo() {
                    var $userInfo = $("#user-info");
                    var $company = $userInfo.find("#company");
                    var $user = $userInfo.find("#user");
                    var $userName;
                    var notThen = function ($container, target, op) {
                        if (!$container.is(target) && $container.has(target).length === 0) {
                            op();
                        }
                    };
                    getCompany().done(function (companies) {
                        if (!companies || companies.length === 0)
                            return;
                        var $companyName = $("<span/>").attr("id", "company-name");
                        nts.uk.request.ajax(constants.APP_ID, constants.Company).done(function (companyId) {
                            var comp = _.find(companies, function (c) {
                                return c.companyId === companyId;
                            });
                            if (comp)
                                $companyName.text(comp.companyName).appendTo($company);
                        });
                        var $companySelect = $("<div/>").addClass("company-select cf");
                        $companySelect.appendTo($company);
                        $("<div/>").addClass("ui-icon ui-icon-caret-1-s").appendTo($companySelect);
                        var $companyList = $("<ul class='menu-items company-list'/>").appendTo($companySelect);
                        var listCompany = function (comps) {
                            _.forEach(comps, function (comp, i) {
                                var $compItem = $("<li class='menu-item company-item'/>").text(comp.companyName).appendTo($companyList);
                                $compItem.on(constants.CLICK, function () {
                                    nts.uk.request.ajax(constants.APP_ID, constants.ChangeCompany, comp.companyId)
                                        .done(function (data) {
                                        $companyName.text(comp.companyName);
                                        $userName.text(data.personName);
                                        $companyList.css("right", $user.outerWidth() + 30);
                                        if (!nts.uk.util.isNullOrEmpty(data.msgResult)) {
                                            nts.uk.ui.dialog.info({ messageId: data.msgResult }).then(function () {
                                                uk.request.jumpToTopPage();
                                            });
                                        }
                                        else {
                                            uk.request.jumpToTopPage();
                                        }
                                    }).fail(function (msg) {
                                        nts.uk.ui.dialog.alertError(msg.messageId);
                                        $companyList.empty();
                                        nts.uk.request.ajax(constants.APP_ID, constants.Companies).done(function (compList) {
                                            listCompany(compList);
                                        });
                                    });
                                });
                            });
                        };
                        listCompany(companies);
                        $companySelect.on(constants.CLICK, function () {
                            if ($companyList.css("display") === "none") {
                                $companyList.fadeIn(100);
                                return;
                            }
                            $companyList.fadeOut(100);
                        });
                        nts.uk.request.ajax(constants.APP_ID, constants.UserName).done(function (userName) {
                            var $userImage = $("<div/>").attr("id", "user-image").addClass("ui-icon ui-icon-person").appendTo($user);
                            $userImage.css("margin-right", "6px").on(constants.CLICK, function () {
                                // TODO: Jump to personal profile.
                            });
                            $userName = $("<span/>").attr("id", "user-name").text(userName).appendTo($user);
                            nts.uk.request.ajax(constants.APP_ID, constants.ShowManual).done(function (show) {
                                var $userSettings = $("<div/>").addClass("user-settings cf").appendTo($user);
                                $("<div class='ui-icon ui-icon-caret-1-s'/>").appendTo($userSettings);
                                var userOptions;
                                if (show)
                                    userOptions = [/*new MenuItem(toBeResource.settingPersonal),*/ new MenuItem(ui.toBeResource.manual), new MenuItem(ui.toBeResource.logout)];
                                else
                                    userOptions = [/*new MenuItem(toBeResource.settingPersonal),*/ new MenuItem(ui.toBeResource.logout)];
                                var $userOptions = $("<ul class='menu-items user-options'/>").appendTo($userSettings);
                                _.forEach(userOptions, function (option, i) {
                                    var $li = $("<li class='menu-item'/>").text(option.name);
                                    $userOptions.append($li);
                                    //                        if (i === 0) {
                                    //                            $li.on(constants.CLICK, function() {
                                    //                                // TODO: Jump to personal information settings.
                                    //                            });
                                    //                            return;
                                    //                        }
                                    if (userOptions.length === 2 && i === 0) {
                                        $li.on(constants.CLICK, function () {
                                            // jump to index page of manual
                                            var path = __viewContext.env.pathToManual.replace("{PGID}", "index");
                                            window.open(path);
                                        });
                                        return;
                                    }
                                    nts.uk.characteristics.restore("loginMode").done(function (mode) {
                                        if (mode) {
                                            $li.remove();
                                        }
                                        else {
                                            $li.on(constants.CLICK, function () {
                                                // TODO: Jump to login screen and request logout to server
                                                nts.uk.request.ajax(constants.APP_ID, constants.Logout).done(function () {
                                                    nts.uk.cookie.remove("nts.uk.sescon", { path: "/" });
                                                    nts.uk.sessionStorage.removeItem(MENU_SET_KEY);
                                                    nts.uk.sessionStorage.removeItem(PROGRAM_KEY);
                                                    nts.uk.sessionStorage.removeItem(COMPANY_KEY);
                                                    nts.uk.sessionStorage.removeItem("nts.uk.session.EMPLOYEE_SETTING");
                                                    nts.uk.request.login.jumpToUsedLoginPage();
                                                });
                                            });
                                        }
                                    });
                                });
                                $companyList.css("right", $user.outerWidth() + 30);
                                $userSettings.on(constants.CLICK, function () {
                                    if ($userOptions.css("display") === "none") {
                                        $userOptions.fadeIn(100);
                                        return;
                                    }
                                    $userOptions.fadeOut(100);
                                });
                                $(document).on(constants.CLICK, function (evt) {
                                    notThen($companySelect, evt.target, function () {
                                        $companyList.fadeOut(100);
                                    });
                                    notThen($userSettings, evt.target, function () {
                                        $userOptions.fadeOut(100);
                                    });
                                });
                            });
                        });
                    });
                }
                menu.displayUserInfo = displayUserInfo;
                /**
                 * Get session program.
                 */
                function getSessionProgram() {
                    var dfd = $.Deferred();
                    nts.uk.request.ajax(constants.APP_ID, constants.PG).done(function (pg) {
                        dfd.resolve(pg);
                    });
                    return dfd.promise();
                }
                /**
                 * Get program.
                 */
                function getProgram() {
                    initPgArea();
                    getSessionProgram().done(function (pg) {
                        var programName = "";
                        var queryString = __viewContext.program.queryString;
                        if (queryString) {
                            var program = _.find(pg, function (p) {
                                return p.param === queryString;
                            });
                            if (program) {
                                programName = program.name;
                            }
                        }
                        else if (programName === "" && pg && pg.length > 1) {
                            var pgParam_1 = uk.localStorage.getItem("UKProgramParam");
                            if (pgParam_1.isPresent()) {
                                var program = _.find(pg, function (p) {
                                    return p.param === pgParam_1.get();
                                });
                                if (program)
                                    programName = program.name;
                                uk.localStorage.removeItem("UKProgramParam");
                            }
                        }
                        else if (pg && pg.length === 1) {
                            programName = pg[0].name;
                        }
                        // show program name on title of browser
                        if (_.isNil(ui._viewModel)) {
                            ui.viewModelBuilt.add(function () {
                                ui._viewModel.kiban.programName(programName);
                            });
                        }
                        else {
                            ui._viewModel.kiban.programName(programName);
                        }
                        $("#pg-name").text(programName);
                    });
                }
                function initPgArea() {
                    var $pgArea = $("#pg-area");
                    $("<div/>").attr("id", "pg-name").appendTo($pgArea);
                    var $manualArea = $("<div/>").attr("id", "manual").appendTo($pgArea);
                    //            let $manualBtn = $("<button class='manual-button'/>").text("?").appendTo($manualArea);
                    //            $manualBtn.on(constants.CLICK, function() {
                    //                var path = __viewContext.env.pathToManual.replace("{PGID}", __viewContext.program.programId);
                    //                window.open(path);
                    //            });
                    var $tglBtn = $("<div class='tgl cf'/>").appendTo($manualArea);
                    $tglBtn.append($("<div class='ui-icon ui-icon-caret-1-s'/>"));
                    $tglBtn.on(constants.CLICK, function () {
                        // TODO
                    });
                }
                /**
                 * Init.
                 */
                function init() {
                    var $navArea = $("#nav-area");
                    var $menuItems = $("#menu-nav li.category:not(.direct)");
                    /**
                     * Close item.
                     */
                    function closeItem() {
                        var $item = $("#menu-nav li.category:eq(" + showingItem + ")");
                        $item.find(".category-name").removeClass("opening");
                        $item.find("ul, div.title-menu").fadeOut(100);
                    }
                    /**
                     * Open item.
                     */
                    function openItem($item) {
                        $item.find(".category-name").addClass("opening");
                        $item.find("ul, div.title-menu").fadeIn(100);
                    }
                    $(document).on(constants.CLICK, function (evt) {
                        if (!$navArea.is(evt.target) && $navArea.has(evt.target).length === 0
                            && !uk.util.isNullOrUndefined(showingItem)) {
                            closeItem();
                            showingItem = undefined;
                        }
                    });
                    $menuItems.hover(function () {
                        var $item = $(this);
                        var ith = $item.index();
                        if (uk.util.isNullOrUndefined(showingItem) || showingItem === ith)
                            return;
                        closeItem();
                        setTimeout(function () {
                            openItem($item);
                        }, 14);
                        showingItem = ith;
                    });
                    $menuItems.on(constants.CLICK, function (event) {
                        var $item = $(this);
                        showingItem = $item.index();
                        if ($item.find(".category-name").hasClass("opening") && showingItem === 0) {
                            closeItem();
                            return;
                        }
                        openItem($item);
                    });
                    $(".menu-item").on(constants.CLICK, function () {
                        var path = $(this).data('path');
                        if (path)
                            nts.uk.request.jump(path);
                    });
                }
                var titleMenu;
                (function (titleMenu) {
                    titleMenu.WIDTH = 192;
                    titleMenu.FR = 20;
                    /**
                     * Create titles.
                     */
                    function createTitles($category, titles) {
                        var $title = $("<div/>").addClass("title-menu").appendTo($category);
                        var width = 0, height, maxHeight = 0;
                        _.forEach(titles, function (t, i) {
                            height = 60;
                            var left = titleMenu.WIDTH * i + 3;
                            if (i > 0) {
                                left += titleMenu.FR * i;
                            }
                            if (i === titles.length - 1) {
                                width = left + titleMenu.WIDTH + 7;
                            }
                            var $titleDiv = $("<div/>").addClass("title-div").css({ left: left }).appendTo($title);
                            var $titleName = $("<div/>").addClass("title-name").text(t.titleMenuName)
                                .css({ background: t.backgroundColor, color: t.textColor }).appendTo($titleDiv);
                            var $titleImage = $("<img/>").addClass("title-image").hide();
                            $titleDiv.append($titleImage);
                            if (!_.isNull(t.imageFile) && !_.isUndefined(t.imageFile) && !_.isEmpty(t.imageFile)) {
                                var fqpImage = nts.uk.request.file.pathToGet(t.imageFile);
                                // TODO: Show image
                                $titleImage.attr("src", fqpImage).show();
                                //                    $titleImage.attr("src", "../../catalog/images/valentine-bg.jpg").show();
                                height += 80;
                            }
                            if (t.treeMenu && t.treeMenu.length > 0) {
                                _.forEach(t.treeMenu, function (item, i) {
                                    if (item.menuAttr === 1) {
                                        $titleDiv.append($("<hr/>").css({ margin: "14px 0px" }));
                                        height += 30;
                                        return;
                                    }
                                    var nameToShow = item.displayName || item.defaultName;
                                    var $item = $("<li class='title-item'/>")
                                        .data("path", !uk.util.isNullOrUndefined(item.queryString) ? (item.url + "?" + item.queryString) : item.url)
                                        .data(DATA_TITLEITEM_PGID, item.programId + item.screenId)
                                        .data(DATA_TITLEITEM_PGNAME, nameToShow)
                                        .text(nameToShow);
                                    $item.on(constants.CLICK, function () {
                                        var path = $(this).data("path");
                                        if (path && path.indexOf("http") !== 0) {
                                            uk.request.jumpToMenu(path);
                                            return;
                                        }
                                        window.location.href = path;
                                    });
                                    $titleDiv.append($item);
                                    height += (34 + (Math.ceil($item.text().length / 12) - 1) * 20);
                                });
                            }
                            maxHeight = Math.max(maxHeight, height);
                        });
                        maxHeight += 20;
                        $title.css({ height: maxHeight + "px", width: width + "px" });
                    }
                    titleMenu.createTitles = createTitles;
                })(titleMenu || (titleMenu = {}));
                $(function () {
                    var showsName = true;
                    $(window)
                        .onkey("down", uk.KeyCodes.Ctrl, function () {
                        if (!showsName || $(".category-name.opening").length === 0)
                            return;
                        $(".title-item").each(function () {
                            $(this).text($(this).data(DATA_TITLEITEM_PGID));
                        });
                        showsName = false;
                    })
                        .onkey("up", uk.KeyCodes.Ctrl, function () {
                        if (showsName)
                            return;
                        $(".title-item").each(function () {
                            $(this).text($(this).data(DATA_TITLEITEM_PGNAME));
                        });
                        showsName = true;
                    });
                });
                var constants;
                (function (constants) {
                    constants.APP_ID = "com";
                    constants.MENU = "UK-Menu";
                    constants.CLICK = "click";
                    constants.MenuDataPath = "/sys/portal/webmenu/finddetails";
                    constants.Company = "/sys/portal/webmenu/currentCompany";
                    constants.Companies = "sys/portal/webmenu/companies";
                    constants.ChangeCompany = "sys/portal/webmenu/changeCompany";
                    constants.UserName = "sys/portal/webmenu/username";
                    constants.ShowManual = "sys/portal/webmenu/showmanual";
                    constants.Logout = "sys/portal/webmenu/logout";
                    constants.PG = "sys/portal/webmenu/program";
                })(constants || (constants = {}));
            })(menu = ui.menu || (ui.menu = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var notify;
            (function (notify) {
                var error;
                (function (error) {
                    ui.viewModelApplied.add(function () {
                        var $functionsArea = $('#functions-area');
                        var $functionsAreaBottom = $('#functions-area-bottom');
                        if ($functionsArea.length > 0) {
                            _.defer(function () {
                                $('#func-notifier-errors').position({ my: 'left+5 top-5', at: 'left bottom', of: $('#functions-area') });
                            });
                        }
                        else if ($functionsAreaBottom.length > 0) {
                            // TODO: Defer in case dialog not showing yet. Should fix by using CSS for position, JQuery position is unstable
                            _.defer(function () {
                                $('#func-notifier-errors').position({ my: 'left+5 top+48', at: 'left top', of: $('#functions-area-bottom') });
                            });
                        }
                        else {
                            return;
                        }
                    });
                })(error || (error = {}));
            })(notify = ui.notify || (ui.notify = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var validation;
            (function (validation) {
                var util = nts.uk.util;
                var NoValidator = /** @class */ (function () {
                    function NoValidator() {
                    }
                    NoValidator.prototype.validate = function (inputText, option) {
                        var result = new ValidationResult();
                        result.isValid = true;
                        result.parsedValue = inputText;
                        return result;
                    };
                    return NoValidator;
                }());
                validation.NoValidator = NoValidator;
                var ValidationResult = /** @class */ (function () {
                    function ValidationResult() {
                        this.errorMessage = 'error message';
                    }
                    ValidationResult.prototype.fail = function (errorMessage, errorCode) {
                        this.errorCode = errorCode;
                        this.errorMessage = errorMessage;
                        this.isValid = false;
                    };
                    ValidationResult.prototype.success = function (parsedValue) {
                        this.parsedValue = parsedValue;
                        this.isValid = true;
                    };
                    return ValidationResult;
                }());
                validation.ValidationResult = ValidationResult;
                var DepartmentCodeValidator = /** @class */ (function () {
                    function DepartmentCodeValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        this.charType = uk.text.getCharType(primitiveValueName);
                        this.required = option.required;
                    }
                    DepartmentCodeValidator.prototype.validate = function (inputText, option) {
                        var result = new ValidationResult();
                        // Check Required
                        if (util.isNullOrEmpty(inputText)) {
                            if (this.required !== undefined && this.required !== false) {
                                result.fail(nts.uk.resource.getMessage('MsgB_1', [this.name]), 'MsgB_1');
                                return result;
                            }
                            result.success(inputText);
                            return result;
                        }
                        //let validateResult;
                        // Check CharType
                        result = checkCharType(inputText, this.charType);
                        if (!result.isValid)
                            return result;
                        // Check Constraint
                        if (this.constraint !== undefined && this.constraint !== null) {
                            if (this.constraint.maxLength !== undefined && uk.text.countHalf(inputText) > this.constraint.maxLength) {
                                var maxLength = this.constraint.maxLength;
                                result.fail(nts.uk.resource.getMessage(result.errorMessage, [this.name, maxLength]), result.errorCode);
                                return result;
                            }
                            if (!util.isNullOrUndefined(option) && option.isCheckExpression === true) {
                                if (!uk.text.isNullOrEmpty(this.constraint.stringExpression) && !this.constraint.stringExpression.test(inputText)) {
                                    result.fail('This field is not valid with pattern!', '');
                                    return result;
                                }
                            }
                        }
                        result.success(inputText);
                        return result;
                    };
                    return DepartmentCodeValidator;
                }());
                validation.DepartmentCodeValidator = DepartmentCodeValidator;
                function checkCharType(inputText, charType) {
                    var result = new ValidationResult();
                    var validateResult;
                    if (!util.isNullOrUndefined(charType)) {
                        inputText = autoConvertText(inputText, charType);
                        validateResult = charType.validate(inputText);
                        if (!validateResult.isValid) {
                            result.fail(nts.uk.resource.getMessage(validateResult.errorMessage, [this.name, !util.isNullOrUndefined(this.constraint)
                                    ? (!util.isNullOrUndefined(this.constraint.maxLength)
                                        ? this.constraint.maxLength : 9999) : 9999]), validateResult.errorCode);
                            return result;
                        }
                        return validateResult;
                    }
                    result.success(inputText);
                    return result;
                }
                function autoConvertText(inputText, charType) {
                    if (charType.viewName === ui.toBeResource.alphaNumeric) {
                        inputText = uk.text.toUpperCase(inputText);
                    }
                    else if (charType.viewName === ui.toBeResource.katakana) {
                        inputText = uk.text.oneByteKatakanaToTwoByte(inputText);
                    }
                    else if (charType.viewName === ui.toBeResource.kana) {
                        inputText = uk.text.hiraganaToKatakana(uk.text.oneByteKatakanaToTwoByte(inputText));
                    }
                    return inputText;
                }
                var WorkplaceCodeValidator = /** @class */ (function () {
                    function WorkplaceCodeValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        this.charType = uk.text.getCharType(primitiveValueName);
                        this.required = option.required;
                    }
                    WorkplaceCodeValidator.prototype.validate = function (inputText, option) {
                        var result = new ValidationResult();
                        // Check Required
                        if (util.isNullOrEmpty(inputText)) {
                            if (this.required !== undefined && this.required !== false) {
                                result.fail(nts.uk.resource.getMessage('MsgB_1', [this.name]), 'MsgB_1');
                                return result;
                            }
                            result.success(inputText);
                            return result;
                        }
                        // Check CharType
                        result = checkCharType(inputText, this.charType);
                        if (!result.isValid)
                            return result;
                        // Check Constraint
                        if (this.constraint !== undefined && this.constraint !== null) {
                            if (this.constraint.maxLength !== undefined && uk.text.countHalf(inputText) > this.constraint.maxLength) {
                                var maxLength = this.constraint.maxLength;
                                result.fail(nts.uk.resource.getMessage(result.errorMessage, [this.name, maxLength]), result.errorCode);
                                return result;
                            }
                            if (!util.isNullOrUndefined(option) && option.isCheckExpression === true) {
                                if (!uk.text.isNullOrEmpty(this.constraint.stringExpression) && !this.constraint.stringExpression.test(inputText)) {
                                    result.fail('This field is not valid with pattern!', '');
                                    return result;
                                }
                            }
                        }
                        return result;
                    };
                    return WorkplaceCodeValidator;
                }());
                validation.WorkplaceCodeValidator = WorkplaceCodeValidator;
                var PostCodeValidator = /** @class */ (function () {
                    function PostCodeValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        this.charType = uk.text.getCharType(primitiveValueName);
                        this.required = option.required;
                    }
                    PostCodeValidator.prototype.validate = function (inputText, option) {
                        var result = new ValidationResult();
                        // Check Required
                        if (util.isNullOrEmpty(inputText)) {
                            if (this.required !== undefined && this.required !== false) {
                                result.fail(nts.uk.resource.getMessage('MsgB_1', [this.name]), 'MsgB_1');
                                return result;
                            }
                            result.success(inputText);
                            return result;
                        }
                        //let validateResult;
                        // Check CharType
                        result = checkCharType(inputText, this.charType);
                        if (!result.isValid)
                            return result;
                        // Check Constraint
                        if (this.constraint !== undefined && this.constraint !== null) {
                            if (this.constraint.maxLength !== undefined && uk.text.countHalf(inputText) > this.constraint.maxLength) {
                                var maxLength = this.constraint.maxLength;
                                result.fail(nts.uk.resource.getMessage(result.errorMessage, [this.name, maxLength]), result.errorCode);
                                return result;
                            }
                            if (!util.isNullOrUndefined(option) && option.isCheckExpression === true) {
                                if (!uk.text.isNullOrEmpty(this.constraint.stringExpression) && !this.constraint.stringExpression.test(inputText)) {
                                    result.fail(nts.uk.resource.getMessage('Msg_1424', [this.name]), 'Msg_1424');
                                    return result;
                                }
                            }
                        }
                        result.success(inputText);
                        return result;
                    };
                    return PostCodeValidator;
                }());
                validation.PostCodeValidator = PostCodeValidator;
                var PunchCardNoValidator = /** @class */ (function () {
                    function PunchCardNoValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        this.charType = uk.text.getCharType(primitiveValueName);
                        this.required = option.required;
                    }
                    PunchCardNoValidator.prototype.validate = function (inputText, option) {
                        var result = new ValidationResult();
                        // Check Required
                        if (util.isNullOrEmpty(inputText)) {
                            if (this.required !== undefined && this.required !== false) {
                                result.fail(nts.uk.resource.getMessage('MsgB_1', [this.name]), 'MsgB_1');
                                return result;
                            }
                            result.success(inputText);
                            return result;
                        }
                        //let validateResult;
                        // Check Constraint
                        if (this.constraint !== undefined && this.constraint !== null) {
                            if (!util.isNullOrUndefined(option) && option.isCheckExpression === true) {
                                if (!uk.text.isNullOrEmpty(this.constraint.stringExpression) && !this.constraint.stringExpression.test(inputText)) {
                                    result.fail(nts.uk.resource.getMessage('Msg_1285', [this.name]), 'Msg_1285');
                                    return result;
                                }
                            }
                        }
                        // Check CharType
                        result = checkCharType(inputText, this.charType);
                        if (!result.isValid)
                            return result;
                        if (!_.isNil(this.constraint) && this.constraint.maxLength !== undefined && uk.text.countHalf(inputText) > this.constraint.maxLength) {
                            var maxLength = this.constraint.maxLength;
                            result.fail(nts.uk.resource.getMessage(result.errorMessage, [this.name, maxLength]), result.errorCode);
                            return result;
                        }
                        result.success(inputText);
                        return result;
                    };
                    return PunchCardNoValidator;
                }());
                validation.PunchCardNoValidator = PunchCardNoValidator;
                var EmployeeCodeValidator = /** @class */ (function () {
                    function EmployeeCodeValidator(name, options) {
                        var self = this;
                        this.name = name;
                        this.constraint = getConstraint("EmployeeCode");
                        this.charType = uk.text.getCharTypeByType("EmployeeCode");
                        this.options = options;
                    }
                    EmployeeCodeValidator.prototype.validate = function (inputText) {
                        var self = this;
                        var result = new ValidationResult();
                        if (util.isNullOrEmpty(inputText)) {
                            if (self.options.required) {
                                result.fail(nts.uk.resource.getMessage('MsgB_1', [this.name]), 'MsgB_1');
                                return result;
                            }
                            result.success(inputText);
                            return result;
                        }
                        result = checkCharType.call(self, inputText, self.charType);
                        if (!result.isValid)
                            return result;
                        if (self.constraint && !util.isNullOrUndefined(self.constraint.maxLength)
                            && self.constraint.maxLength < uk.text.countHalf(inputText)) {
                            result.fail(nts.uk.resource.getMessage(result.errorMessage, [self.name, self.constraint.maxLength]), result.errorCode);
                            return result;
                        }
                        result.success(inputText);
                        return result;
                    };
                    return EmployeeCodeValidator;
                }());
                validation.EmployeeCodeValidator = EmployeeCodeValidator;
                var StringValidator = /** @class */ (function () {
                    function StringValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        if (nts.uk.util.isNullOrUndefined(this.constraint)) {
                            this.constraint = {};
                        }
                        this.charType = uk.text.getCharType(primitiveValueName);
                        this.required = (!nts.uk.util.isNullOrUndefined(option.required) && option.required) || this.constraint.required;
                    }
                    StringValidator.prototype.validate = function (inputText, option) {
                        var result = new ValidationResult();
                        // Check Required
                        if (util.isNullOrEmpty(inputText)) {
                            if (this.required !== undefined && this.required !== false) {
                                result.fail(nts.uk.resource.getMessage('MsgB_1', [this.name]), 'MsgB_1');
                                return result;
                            }
                            result.success(inputText);
                            return result;
                        }
                        var validateResult;
                        // Check CharType
                        if (!util.isNullOrUndefined(this.charType)) {
                            if (this.charType.viewName === ui.toBeResource.alphaNumeric) {
                                inputText = uk.text.toUpperCase(inputText);
                            }
                            else if (this.charType.viewName === ui.toBeResource.katakana) {
                                inputText = uk.text.oneByteKatakanaToTwoByte(inputText);
                            }
                            else if (this.charType.viewName === ui.toBeResource.kana) {
                                inputText = uk.text.hiraganaToKatakana(uk.text.oneByteKatakanaToTwoByte(inputText));
                            }
                            validateResult = this.charType.validate(inputText);
                            if (!validateResult.isValid) {
                                result.fail(nts.uk.resource.getMessage(validateResult.errorMessage, [this.name, (!util.isNullOrUndefined(this.constraint.maxLength)
                                        ? this.charType.getViewLength(this.constraint.maxLength) : 9999)]), validateResult.errorCode);
                                return result;
                            }
                        }
                        else {
                            validateResult = result;
                        }
                        // Check Constraint
                        if (this.constraint.maxLength !== undefined && uk.text.countHalf(inputText) > this.constraint.maxLength) {
                            var maxLength = this.constraint.maxLength;
                            if (this.constraint.charType == "Any" || this.constraint.charType === "Kana")
                                maxLength = nts.uk.text.getCharTypeByType("Any").getViewLength(maxLength);
                            result.fail(nts.uk.resource.getMessage(validateResult.errorMessage, [this.name, maxLength]), validateResult.errorCode);
                            return result;
                        }
                        if (!util.isNullOrUndefined(option) && option.isCheckExpression === true) {
                            if (!uk.text.isNullOrEmpty(this.constraint.stringExpression) && !this.constraint.stringExpression.test(inputText)) {
                                result.fail('This field is not valid with pattern!', '');
                                return result;
                            }
                        }
                        result.success(inputText);
                        return result;
                    };
                    return StringValidator;
                }());
                validation.StringValidator = StringValidator;
                var NumberValidator = /** @class */ (function () {
                    function NumberValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        if (util.isNullOrUndefined(this.constraint)) {
                            this.constraint = {};
                        }
                        this.option = option;
                    }
                    NumberValidator.prototype.validate = function (inputText) {
                        var result = new ValidationResult();
                        var isDecimalNumber = false;
                        if (this.option !== undefined) {
                            if (nts.uk.util.isNullOrUndefined(inputText) || inputText.trim().length <= 0) {
                                if ((this.option['required'] === true || this.constraint["required"] === true) && nts.uk.util.isNullOrEmpty(this.option['defaultValue'])) {
                                    result.fail(nts.uk.resource.getMessage('MsgB_1', [this.name]), 'MsgB_1');
                                    return result;
                                }
                                else {
                                    result.success(this.option['defaultValue']);
                                    return result;
                                }
                            }
                            isDecimalNumber = (this.option.decimallength > 0);
                            inputText = uk.text.replaceAll(inputText.toString(), this.option.groupseperator, '');
                        }
                        inputText = inputText.trim();
                        var message = {};
                        var validateFail = false, max = 99999999, min = 0, mantissaMaxLength;
                        if (this.constraint.valueType === "HalfInt") {
                            if (!uk.ntsNumber.isHalfInt(inputText, message))
                                validateFail = true;
                        }
                        else if (!uk.ntsNumber.isNumber(inputText, isDecimalNumber, undefined, message)) {
                            validateFail = true;
                        }
                        var value = isDecimalNumber ?
                            uk.ntsNumber.getDecimal(inputText, this.option.decimallength) : parseInt(inputText);
                        if (!util.isNullOrUndefined(this.constraint.max)) {
                            max = this.constraint.max;
                            if (value > this.constraint.max)
                                validateFail = true;
                        }
                        if (!util.isNullOrUndefined(this.constraint.min)) {
                            min = this.constraint.min;
                            if (value < this.constraint.min)
                                validateFail = true;
                        }
                        if (!util.isNullOrUndefined(this.constraint.mantissaMaxLength)) {
                            mantissaMaxLength = this.constraint.mantissaMaxLength;
                            var parts = inputText.split(".");
                            if (parts[1] !== undefined && parts[1].length > mantissaMaxLength)
                                validateFail = true;
                        }
                        if (!(/^-?\d*(\.\d+)?$/).test(inputText)) {
                            validateFail = true;
                        }
                        if (validateFail) {
                            result.fail(nts.uk.resource.getMessage(message.id, [this.name, min, max, mantissaMaxLength]), message.id);
                        }
                        else {
                            var formated = value.toString() === "0" ? "0" : uk.text.removeFromStart(inputText, "0");
                            if (formated.indexOf(".") >= 0) {
                                formated = uk.text.removeFromEnd(formated, "0");
                            }
                            if (formated.charAt(0) === ".") {
                                formated = "0" + formated;
                            }
                            if (formated.charAt(formated.length - 1) === ".") {
                                formated = formated.substr(0, formated.length - 1);
                            }
                            result.success(formated);
                        }
                        return result;
                    };
                    return NumberValidator;
                }());
                validation.NumberValidator = NumberValidator;
                var TimeValidator = /** @class */ (function () {
                    function TimeValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        if (nts.uk.util.isNullOrUndefined(this.constraint)) {
                            this.constraint = {};
                            if (option && option.min && option.max) {
                                this.constraint.min = option.min;
                                this.constraint.max = option.max;
                            }
                        }
                        this.outputFormat = (option && option.outputFormat) ? option.outputFormat : "";
                        this.inputFormat = (option && option.inputFormat) ? option.inputFormat : "";
                        this.required = ((option && option.required) ? option.required : false) || this.constraint.required === true;
                        this.valueType = (option && option.valueType) ? option.valueType : "string";
                        this.mode = (option && option.mode) ? option.mode : "";
                        this.acceptJapaneseCalendar = (option && option.acceptJapaneseCalendar) ? option.acceptJapaneseCalendar : true;
                        this.defaultValue = (option && option.defaultValue) ? option.defaultValue : "";
                    }
                    TimeValidator.prototype.validate = function (inputText) {
                        var result = new ValidationResult();
                        // Check required
                        if (util.isNullOrEmpty(inputText) && !util.isNullOrEmpty(this.defaultValue)) {
                            inputText = this.defaultValue;
                        }
                        else if (util.isNullOrEmpty(inputText)) {
                            if (this.required === true) {
                                result.fail(nts.uk.resource.getMessage('MsgB_1', [this.name]), 'MsgB_1');
                                return result;
                            }
                            else {
                                result.success(null);
                                return result;
                            }
                        }
                        if (this.acceptJapaneseCalendar) {
                            inputText = uk.time.convertJapaneseDateToGlobal(inputText);
                        }
                        var maxStr, minStr, max, min;
                        // Time duration
                        if (this.mode === "time") {
                            var timeParse, isSecondBase = this.outputFormat.indexOf("s") >= 0, mesId = isSecondBase ? "MsgB_17" : "MsgB_15";
                            if (isSecondBase) {
                                timeParse = uk.time.secondsBased.duration.parseString(inputText);
                            }
                            else {
                                timeParse = uk.time.minutesBased.duration.parseString(inputText);
                            }
                            if (timeParse.success) {
                                result.success(timeParse.toValue());
                            }
                            else {
                                var msgId = timeParse.getMsg();
                                var msg = nts.uk.resource.getMessage(msgId, [this.name, this.constraint.min, this.constraint.max]);
                                result.fail(msg, msgId);
                                return result;
                            }
                            if (!util.isNullOrUndefined(this.constraint.max)) {
                                maxStr = this.constraint.max;
                                if (isSecondBase) {
                                    max = uk.time.secondsBased.duration.parseString(maxStr);
                                }
                                else {
                                    max = uk.time.minutesBased.duration.parseString(maxStr);
                                }
                                if (timeParse.success && (max.toValue() < timeParse.toValue())) {
                                    var msg = nts.uk.resource.getMessage(mesId, [this.name, this.constraint.min, this.constraint.max]);
                                    result.fail(msg, mesId);
                                    return result;
                                }
                            }
                            if (!util.isNullOrUndefined(this.constraint.min)) {
                                minStr = this.constraint.min;
                                if (isSecondBase) {
                                    min = uk.time.secondsBased.duration.parseString(minStr);
                                }
                                else {
                                    min = uk.time.minutesBased.duration.parseString(minStr);
                                }
                                if (timeParse.success && (min.toValue() > timeParse.toValue())) {
                                    var msg = nts.uk.resource.getMessage(mesId, [this.name, this.constraint.min, this.constraint.max]);
                                    result.fail(msg, mesId);
                                    return result;
                                }
                            }
                            if (!result.isValid && this.constraint.valueType === "Time") {
                                result.fail(nts.uk.resource.getMessage(mesId, [this.name, minStr, maxStr]), mesId);
                            }
                            return result;
                        }
                        var isMinuteTime = this.outputFormat === "time" ? inputText.charAt(0) === "-" : false;
                        if (isMinuteTime) {
                            inputText = inputText.substring(1, inputText.length);
                        }
                        var parseResult = uk.time.parseMoment(inputText, this.outputFormat, this.inputFormat);
                        // Parse
                        if (parseResult.success) {
                            if (this.valueType === "string")
                                result.success(parseResult.format());
                            else if (this.valueType === "number") {
                                result.success(parseResult.toNumber(this.outputFormat));
                            }
                            else if (this.valueType === "date") {
                                result.success(parseResult.toValue().toDate());
                            }
                            else if (this.valueType === "moment") {
                                result.success(parseResult.toValue());
                            }
                            else {
                                result.success(parseResult.format());
                            }
                        }
                        else {
                            result.fail(parseResult.getEmsg(this.name), parseResult.getMsgID());
                            return result;
                        }
                        // Time clock
                        if (this.outputFormat === "time") {
                            var inputMoment = parseResult.toNumber(this.outputFormat) * (isMinuteTime ? -1 : 1);
                            if (!util.isNullOrUndefined(this.constraint.max)) {
                                maxStr = this.constraint.max;
                                var maxMoment = moment.duration(maxStr);
                                if (parseResult.success && (maxMoment.hours() * 60 + maxMoment.minutes()) < inputMoment) {
                                    result.fail(nts.uk.resource.getMessage("MsgB_16", [this.name, minStr, maxStr]), "MsgB_16");
                                    return result;
                                }
                            }
                            if (!util.isNullOrUndefined(this.constraint.min)) {
                                minStr = this.constraint.min;
                                var minMoment = moment.duration(minStr);
                                if (parseResult.success && (minMoment.hours() * 60 + minMoment.minutes()) > inputMoment) {
                                    result.fail(nts.uk.resource.getMessage("MsgB_16", [this.name, minStr, maxStr]), "MsgB_16");
                                    return result;
                                }
                            }
                            if (!result.isValid && this.constraint.valueType === "Clock") {
                                result.fail(nts.uk.resource.getMessage("MsgB_16", [this.name, minStr, maxStr]), "MsgB_16");
                            }
                        }
                        return result;
                    };
                    return TimeValidator;
                }());
                validation.TimeValidator = TimeValidator;
                var TimeWithDayValidator = /** @class */ (function () {
                    function TimeWithDayValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        if (nts.uk.util.isNullOrUndefined(this.constraint)) {
                            this.constraint = {};
                        }
                        this.required = (option && option.required) ? option.required : false;
                    }
                    TimeWithDayValidator.prototype.validate = function (inputText) {
                        var result = new ValidationResult();
                        // Check required
                        if (util.isNullOrEmpty(inputText)) {
                            if (this.required === true) {
                                result.fail(nts.uk.resource.getMessage('MsgB_1', [this.name]), 'MsgB_1');
                                return result;
                            }
                            else {
                                result.success("");
                                return result;
                            }
                        }
                        var minValue = uk.time.minutesBased.clock.dayattr.MIN_VALUE;
                        var maxValue = uk.time.minutesBased.clock.dayattr.MAX_VALUE;
                        if (!util.isNullOrUndefined(this.constraint.min)) {
                            var minS = uk.time.minutesBased.clock.dayattr.parseString(this.constraint.min);
                            if (minS.success) {
                                minValue = uk.time.minutesBased.clock.dayattr.create(minS.asMinutes);
                            }
                            minValue = uk.time.minutesBased.clock.dayattr.create(uk.time.minutesBased.clock.dayattr.parseString(this.constraint.min).asMinutes);
                        }
                        if (!util.isNullOrUndefined(this.constraint.max)) {
                            var maxS = uk.time.minutesBased.clock.dayattr.parseString(this.constraint.max);
                            if (maxS.success) {
                                maxValue = uk.time.minutesBased.clock.dayattr.create(maxS.asMinutes);
                            }
                        }
                        var parsed = uk.time.minutesBased.clock.dayattr.parseString(inputText);
                        if (!parsed.success || parsed.asMinutes !== Math.round(parsed.asMinutes)
                            || parsed.asMinutes < minValue || parsed.asMinutes > maxValue) {
                            result.fail(nts.uk.resource.getMessage("MsgB_16", [this.name, minValue.fullText, maxValue.fullText]), "MsgB_16");
                        }
                        else {
                            result.success(parsed.asMinutes);
                        }
                        return result;
                    };
                    return TimeWithDayValidator;
                }());
                validation.TimeWithDayValidator = TimeWithDayValidator;
                function getConstraint(primitiveValueName) {
                    var constraint = __viewContext.primitiveValueConstraints[primitiveValueName];
                    if (constraint === undefined)
                        return null;
                    else
                        return __viewContext.primitiveValueConstraints[primitiveValueName];
                }
                validation.getConstraint = getConstraint;
                function writeConstraint(constraintName, constraint) {
                    __viewContext.primitiveValueConstraints[constraintName] = constraint;
                }
                validation.writeConstraint = writeConstraint;
                function writeConstraints(constraints) {
                    _.forEach(constraints, function (constraint) {
                        __viewContext.primitiveValueConstraints[constraint.itemCode] = constraint;
                    });
                }
                validation.writeConstraints = writeConstraints;
            })(validation = ui.validation || (ui.validation = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var errors;
            (function (errors_1) {
                var ErrorsViewModel = /** @class */ (function () {
                    function ErrorsViewModel(dialogOptions) {
                        var _this = this;
                        this.title = ui.toBeResource.errorList;
                        this.errors = ko.observableArray([]);
                        this.errors.extend({ rateLimit: 1 });
                        this.gridErrors = ko.observableArray([]);
                        this.displayErrors = !uk.util.isNullOrUndefined(dialogOptions) && dialogOptions.forGrid ? this.gridErrors : this.errors;
                        this.option = ko.observable(ko.mapping.fromJS(new ui.option.ErrorDialogOption(dialogOptions)));
                        this.occurs = ko.computed(function () { return _this.errors().length !== 0 || _this.gridErrors().length !== 0; });
                        this.allResolved = $.Callbacks();
                        this.allCellsResolved = $.Callbacks();
                        this.option().show.extend({ notify: "always" });
                        this.errors.subscribe(function () {
                            if (_this.errors().length === 0) {
                                _this.allResolved.fire();
                            }
                        });
                        this.allResolved.add(function () {
                            _this.hide();
                        });
                        // Grid
                        this.gridErrors.subscribe(function () {
                            if (_this.gridErrors().length === 0) {
                                _this.allCellsResolved.fire();
                            }
                        });
                        this.allCellsResolved.add(function () {
                            _this.hide();
                        });
                    }
                    ErrorsViewModel.prototype.closeButtonClicked = function () {
                        this.option().show(false);
                    };
                    ErrorsViewModel.prototype.open = function () {
                        this.option().show(true);
                    };
                    ErrorsViewModel.prototype.hide = function () {
                        this.option().show(false);
                    };
                    ErrorsViewModel.prototype.addError = function (error) {
                        var _this = this;
                        var duplicate = _.filter(this.errors(), function (e) { return e.$control.is(error.$control)
                            && (typeof error.message === "string" ? e.messageText === error.message : e.messageText === error.messageText); });
                        if (duplicate.length == 0) {
                            if (typeof error.message === "string") {
                                error.messageText = error.message;
                            }
                            else {
                                // Business Exception
                                if (error.message.message) {
                                    error.messageText = error.message.message;
                                    error.errorCode = error.message.messageId != null && error.message.messageId.length > 0 ? error.message.messageId : "";
                                }
                                else {
                                    if (error.$control.length > 0) {
                                        var controlNameId = error.$control.eq(0).attr("data-name");
                                        if (controlNameId) {
                                            var params = _.concat(nts.uk.resource.getText(controlNameId), error.message.messageParams);
                                            error.messageText = nts.uk.resource.getMessage(error.message.messageId, params);
                                        }
                                        else {
                                            error.messageText = nts.uk.resource.getMessage(error.message.messageId, error.message.messageParams);
                                        }
                                    }
                                    else {
                                        error.messageText = nts.uk.resource.getMessage(error.message.messageId);
                                    }
                                    error.errorCode = error.message.messageId;
                                }
                            }
                            // if exist, push error to list
                            if (document.body.contains(error.$control[0])) {
                                this.errors.push(error);
                            }
                        }
                        // remove all error not match with any control
                        setTimeout(function () {
                            _this.errors.remove(function (e) { return !document.body.contains(e.$control[0]); });
                        }, 100);
                    };
                    ErrorsViewModel.prototype.hasError = function () {
                        return this.errors().length > 0;
                    };
                    ErrorsViewModel.prototype.clearError = function () {
                        $(".error").children().each(function (index, element) {
                            if ($(element).data("hasError"))
                                $(element).data("hasError", false);
                        });
                        $(".error").removeClass('error');
                        this.errors.removeAll();
                    };
                    ErrorsViewModel.prototype.removeErrorByElement = function ($element) {
                        this.errors.remove(function (error) {
                            return error.$control.is($element);
                        });
                    };
                    ErrorsViewModel.prototype.removeErrorByCode = function ($element, errorCode) {
                        this.errors.remove(function (error) {
                            return error.$control.is($element) && error.errorCode === errorCode;
                        });
                    };
                    ErrorsViewModel.prototype.removeKibanError = function ($element) {
                        this.errors.remove(function (error) {
                            return error.$control.is($element) && error.businessError == false;
                        });
                    };
                    ErrorsViewModel.prototype.getErrorByElement = function ($element) {
                        return _.filter(this.errors(), function (e) {
                            return e.$control.is($element);
                        });
                    };
                    // Grid errors
                    ErrorsViewModel.prototype.addCellError = function (error) {
                        var self = this;
                        var exists = _.filter(this.gridErrors(), function (err) {
                            return self.sameCells(error, err);
                        });
                        if (exists.length > 0)
                            return;
                        this.gridErrors.push(error);
                    };
                    ErrorsViewModel.prototype.removeCellError = function ($grid, rowId, columnKey) {
                        this.gridErrors.remove(function (err) {
                            return err.grid.is($grid) && err.rowId === rowId && err.columnKey === columnKey;
                        });
                    };
                    ErrorsViewModel.prototype.gridHasError = function () {
                        return this.gridErrors().length > 0;
                    };
                    ErrorsViewModel.prototype.clearGridErrors = function () {
                        this.gridErrors.removeAll();
                    };
                    ErrorsViewModel.prototype.sameCells = function (one, other) {
                        if (!one.grid.is(other.grid))
                            return false;
                        if (one.rowId !== other.rowId)
                            return false;
                        if (one.columnKey !== other.columnKey)
                            return false;
                        return true;
                    };
                    ErrorsViewModel.prototype.stashMemento = function () {
                        var memento = new ErrorViewModelMemento();
                        memento.setErrors(ko.unwrap(this.errors));
                        memento.setGridErrors(ko.unwrap(this.gridErrors));
                        memento.option = ko.unwrap(this.option);
                        memento.allResolved = this.allResolved;
                        memento.allCellsResolved = this.allCellsResolved;
                        memento.setErrorElements();
                        this.clearError();
                        return memento;
                    };
                    ErrorsViewModel.prototype.restoreFrom = function (memento) {
                        this.errors(memento.errors);
                        this.gridErrors(memento.gridErrors);
                        this.option(memento.option);
                        this.allResolved = memento.allResolved;
                        this.allCellsResolved = memento.allCellsResolved;
                        memento.restoreErrorElements();
                    };
                    return ErrorsViewModel;
                }());
                errors_1.ErrorsViewModel = ErrorsViewModel;
                var ErrorViewModelMemento = /** @class */ (function () {
                    function ErrorViewModelMemento() {
                    }
                    ErrorViewModelMemento.prototype.setErrors = function (errors) {
                        var _this = this;
                        if (!_.isArray(errors)) {
                            return;
                        }
                        this.errors = [];
                        errors.forEach(function (e) {
                            _this.errors.push(e);
                        });
                    };
                    ErrorViewModelMemento.prototype.setGridErrors = function (gridErrors) {
                        var _this = this;
                        if (!_.isArray(gridErrors)) {
                            return;
                        }
                        this.gridErrors = [];
                        gridErrors.forEach(function (e) {
                            _this.gridErrors.push(e);
                        });
                    };
                    ErrorViewModelMemento.prototype.setErrorElements = function () {
                        this.errorElements = $(".error").removeClass("error");
                    };
                    ErrorViewModelMemento.prototype.restoreErrorElements = function () {
                        this.errorElements.addClass("error");
                    };
                    return ErrorViewModelMemento;
                }());
                errors_1.ErrorViewModelMemento = ErrorViewModelMemento;
                var ErrorHeader = /** @class */ (function () {
                    function ErrorHeader(name, text, width, visible) {
                        this.name = name;
                        this.text = text;
                        this.width = width;
                        this.visible = visible;
                    }
                    return ErrorHeader;
                }());
                errors_1.ErrorHeader = ErrorHeader;
                /**
                 *  Public API
                **/
                function errorsViewModel() {
                    return nts.uk.ui._viewModel.kiban.errorDialogViewModel;
                }
                errors_1.errorsViewModel = errorsViewModel;
                function show() {
                    errorsViewModel().open();
                }
                errors_1.show = show;
                function hide() {
                    errorsViewModel().hide();
                }
                errors_1.hide = hide;
                function add(error) {
                    errorsViewModel().addError(error);
                    error.$control.data(nts.uk.ui.DATA_HAS_ERROR, true);
                    (error.$control.data(nts.uk.ui.DATA_SET_ERROR_STYLE) || function () { error.$control.parent().addClass('error'); })();
                }
                errors_1.add = add;
                function hasError() {
                    return errorsViewModel().hasError();
                }
                errors_1.hasError = hasError;
                function clearAll() {
                    if (nts.uk.ui._viewModel !== undefined)
                        errorsViewModel().clearError();
                }
                errors_1.clearAll = clearAll;
                function removeByElement($control) {
                    errorsViewModel().removeErrorByElement($control);
                    $control.data(nts.uk.ui.DATA_HAS_ERROR, false);
                    ($control.data(nts.uk.ui.DATA_CLEAR_ERROR_STYLE) || function () { $control.parent().removeClass('error'); })();
                }
                errors_1.removeByElement = removeByElement;
                function removeByCode($control, errorCode) {
                    errorsViewModel().removeErrorByCode($control, errorCode);
                    var remainErrors = getErrorByElement($control);
                    if (nts.uk.util.isNullOrEmpty(remainErrors)) {
                        $control.data(nts.uk.ui.DATA_HAS_ERROR, false);
                        ($control.data(nts.uk.ui.DATA_CLEAR_ERROR_STYLE) || function () { $control.parent().removeClass('error'); })();
                    }
                }
                errors_1.removeByCode = removeByCode;
                function removeCommonError($control) {
                    errorsViewModel().removeKibanError($control);
                    var remainErrors = getErrorByElement($control);
                    if (nts.uk.util.isNullOrEmpty(remainErrors)) {
                        $control.data(nts.uk.ui.DATA_HAS_ERROR, false);
                        ($control.data(nts.uk.ui.DATA_CLEAR_ERROR_STYLE) || function () { $control.parent().removeClass('error'); })();
                    }
                }
                errors_1.removeCommonError = removeCommonError;
                function getErrorByElement($element) {
                    return errorsViewModel().getErrorByElement($element);
                }
                errors_1.getErrorByElement = getErrorByElement;
                // Grid errors
                function addCell(error) {
                    errorsViewModel().addCellError(error);
                }
                errors_1.addCell = addCell;
                function removeCell($grid, rowId, columnKey) {
                    errorsViewModel().removeCellError($grid, rowId, columnKey);
                }
                errors_1.removeCell = removeCell;
                function gridHasError() {
                    return errorsViewModel().gridHasError();
                }
                errors_1.gridHasError = gridHasError;
                function clearAllGridErrors() {
                    if (nts.uk.ui._viewModel !== undefined)
                        errorsViewModel().clearGridErrors();
                }
                errors_1.clearAllGridErrors = clearAllGridErrors;
                function getErrorList() {
                    return errorsViewModel().displayErrors();
                }
                errors_1.getErrorList = getErrorList;
            })(errors = ui.errors || (ui.errors = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var toBeResource;
            (function (toBeResource) {
                toBeResource.yes = "はい";
                toBeResource.no = "いいえ";
                toBeResource.cancel = "キャンセル";
                toBeResource.close = "閉じる";
                toBeResource.info = "情報";
                toBeResource.warn = "警告";
                toBeResource.error = "エラー";
                toBeResource.confirm = "確認";
                toBeResource.unset = "未設定";
                toBeResource.errorContent = "エラー内容";
                toBeResource.errorCode = "エラーコード";
                toBeResource.errorList = "エラー一覧";
                toBeResource.errorPoint = "エラー箇所";
                toBeResource.errorDetail = "エラー詳細";
                toBeResource.tab = "タブ";
                toBeResource.plzWait = "お待ちください";
                toBeResource.targetNotFound = "対象データがありません"; // FND_E_SEARCH_NOHITと統合したい
                toBeResource.clear = "解除";
                toBeResource.searchBox = "検索テキストボックス";
                toBeResource.addNewRow = "新規行の追加";
                toBeResource.deleteRow = "行の削除";
                toBeResource.selectMenu = "メニュー選択";
                toBeResource.manual = "マニュアル";
                toBeResource.logout = "ログアウト";
                toBeResource.settingPersonal = "個人情報の設定";
                toBeResource.weekDaysShort = ["日", "月", "火", "水", "木", "金", "土"];
                toBeResource.searchByCodeName = "コード・名称で検索・・・";
                toBeResource.search = "検索";
                toBeResource.filter = "絞り込み";
                toBeResource.code = "コード";
                toBeResource.codeAndName = "コード／名称";
                toBeResource.alphaNumeric = "半角英数字";
                toBeResource.katakana = "カタカナ";
                toBeResource.kana = "カナ";
                toBeResource.otherColors = "その他の色";
                toBeResource.hide = "隠す";
                toBeResource.decide = "確定";
                toBeResource.refer = "参照";
                toBeResource.selectViewArea = "表示エリアを選択する";
                toBeResource.showInsideAreaToMain = "のエリア内をメイン画面に表示します。";
                toBeResource.dragAndDropToChangeArea = "マウスのドラッグ＆ドロップでエリアを変更できます。";
                toBeResource.invalidImageData = "不正な画像データです。";
                toBeResource.legendExample = "凡例";
            })(toBeResource = ui.toBeResource || (ui.toBeResource = {}));
            function localize(textId) {
                return textId;
            }
            ui.localize = localize;
            function writeViewConstraint(constraint) {
                if (nts.uk.util.isNullOrUndefined(__viewContext.primitiveValueConstraints)) {
                    __viewContext.primitiveValueConstraints = {};
                }
                __viewContext.primitiveValueConstraints[constraint.itemCode] = constraint;
            }
            ui.writeViewConstraint = writeViewConstraint;
            ui.confirmSave = function (dirtyChecker) {
                var frame = ui.windows.getSelf();
                if (frame.$dialog === undefined || frame.$dialog === null) {
                    confirmSaveWindow(dirtyChecker);
                }
                else {
                    confirmSaveDialog(dirtyChecker, frame.$dialog);
                }
            };
            function confirmSaveWindow(dirtyChecker) {
                var beforeunloadHandler = function (e) {
                    if (dirtyChecker.isDirty()) {
                        return "ban co muon save hok?";
                        //return nts.ui.message('Com_0000105');
                    }
                };
                confirmSaveEnable(beforeunloadHandler);
            }
            function confirmSaveDialog(dirtyChecker, dialog) {
                //dialog* any;
                var beforeunloadHandler = function (e) {
                    if (dirtyChecker.isDirty()) {
                        e.preventDefault();
                        nts.uk.ui.dialog.confirm("Are you sure you want to leave the page?")
                            .ifYes(function () {
                            dirtyChecker.reset();
                            dialog.dialog("close");
                        }).ifNo(function () {
                        });
                        //return nts.ui.message('Com_0000105');
                    }
                };
                confirmSaveEnableDialog(beforeunloadHandler, dialog);
            }
            function confirmSaveEnableDialog(beforeunloadHandler, dialog) {
                dialog.on("dialogbeforeclose", beforeunloadHandler);
            }
            ui.confirmSaveEnableDialog = confirmSaveEnableDialog;
            ;
            function confirmSaveDisableDialog(dialog) {
                dialog.on("dialogbeforeclose", function () { });
            }
            ui.confirmSaveDisableDialog = confirmSaveDisableDialog;
            ;
            function confirmSaveEnable(beforeunloadHandler) {
                $(window).bind('beforeunload', beforeunloadHandler);
            }
            ui.confirmSaveEnable = confirmSaveEnable;
            ;
            function confirmSaveDisable() {
                $(window).unbind('beforeunload');
            }
            ui.confirmSaveDisable = confirmSaveDisable;
            ;
            /**
             * Block UI Module
             * Using for blocking UI when action in progress
             */
            var block;
            (function (block) {
                function invisible() {
                    var rect = calcRect();
                    $.blockUI({
                        message: null,
                        overlayCSS: { opacity: 0 },
                        css: {
                            width: rect.width,
                            left: rect.left
                        }
                    });
                }
                block.invisible = invisible;
                function grayout() {
                    var rect = calcRect();
                    $.blockUI({
                        message: '<div class="block-ui-message">' + toBeResource.plzWait + '</div>',
                        fadeIn: 200,
                        css: {
                            width: rect.width,
                            left: rect.left
                        }
                    });
                }
                block.grayout = grayout;
                function clear() {
                    $.unblockUI({
                        fadeOut: 200
                    });
                }
                block.clear = clear;
                function calcRect() {
                    var width = 220;
                    var left = ($(window).width() - width) / 2;
                    return {
                        width: width,
                        left: left
                    };
                }
            })(block = ui.block || (ui.block = {}));
            var DirtyChecker = /** @class */ (function () {
                function DirtyChecker(targetViewModelObservable) {
                    this.targetViewModel = targetViewModelObservable;
                    this.initialState = this.getCurrentState();
                }
                DirtyChecker.prototype.getCurrentState = function () {
                    return ko.toJSON(this.targetViewModel());
                };
                DirtyChecker.prototype.reset = function () {
                    this.initialState = this.getCurrentState();
                };
                DirtyChecker.prototype.isDirty = function () {
                    return this.initialState !== this.getCurrentState();
                };
                return DirtyChecker;
            }());
            ui.DirtyChecker = DirtyChecker;
            var smallExtensions;
            (function (smallExtensions) {
                $(function () {
                    $(document).on('mouseenter', '.limited-label', function (e) {
                        var $label = $(e.target);
                        // Check if contents is overflow
                        if (isOverflow($label)) {
                            var $view_1 = $('<div />').addClass('limited-label-view')
                                .text($label.text() || $label.val())
                                .appendTo('body')
                                .position({
                                my: 'left top',
                                at: 'left bottom',
                                of: $label,
                                collision: 'flipfit'
                            });
                            if ($label.attr("disabled")) {
                                var id_1 = "#" + $label.attr("id");
                                $(document).on('mouseleave.limitedlabel', id_1, function () {
                                    $(document).off('mouseleave.limitedlabel', id_1);
                                    $view_1.remove();
                                });
                                return;
                            }
                            $label.bind('mouseleave.limitedlabel', function () {
                                $label.unbind('mouseleave.limitedlabel');
                                $view_1.remove();
                            });
                            $label.on('remove', function () {
                                $view_1.remove();
                            });
                        }
                    });
                });
                function isOverflow($label) {
                    if ($label[0].nodeName === "INPUT"
                        && (window.navigator.userAgent.indexOf("MSIE") > -1
                            || !!window.navigator.userAgent.match(/trident/i))) {
                        var $div = $("<div/>").appendTo($(document.body));
                        var style = $label[0].currentStyle;
                        if (style) {
                            for (var p in style) {
                                $div[0].style[p] = style[p];
                            }
                        }
                        $div.html($label.val());
                        var width = $div.outerWidth();
                        var scrollWidth = $div[0].scrollWidth;
                        $div.remove();
                        return width < scrollWidth;
                    }
                    return $label[0].offsetWidth < $label[0].scrollWidth;
                }
            })(smallExtensions || (smallExtensions = {}));
            var keyboardStream;
            (function (keyboardStream) {
                var _lastKey = {
                    code: undefined,
                    time: undefined
                };
                function lastKey() {
                    return {
                        code: _lastKey.code,
                        time: _lastKey.time
                    };
                }
                keyboardStream.lastKey = lastKey;
                function wasKeyDown(keyCode, millisToExpire) {
                    return _lastKey.code === keyCode
                        && (+new Date() - +_lastKey.time <= millisToExpire);
                }
                keyboardStream.wasKeyDown = wasKeyDown;
                $(function () {
                    $(window).on("keydown", function (e) {
                        _lastKey.code = e.keyCode;
                        _lastKey.time = new Date();
                    });
                });
            })(keyboardStream = ui.keyboardStream || (ui.keyboardStream = {}));
            var buttonExtension;
            (function (buttonExtension) {
                // ボタンの上部分をクリックすると、ボタンの範囲からマウスカーソルが外れてしまい、
                // clickイベントが発生しなくなる不具合がある。
                // ダミーのdivを生成し、そこでmouseupイベントを拾うことで不具合を回避。
                $(function () {
                    $("body").on("mousedown", "button", function (e) {
                        var $button = $(e.target);
                        var $dammy = $("<div>")
                            .css({
                            background: "transparent",
                            position: "absolute",
                            width: $button.outerWidth(),
                            height: parseInt($button.css("top"), 10),
                            cursor: "pointer",
                            opacity: 100
                        })
                            .appendTo("body")
                            .position({
                            my: "left bottom",
                            at: "left top",
                            of: e.target
                        })
                            .on("mouseup", function (eup) {
                            $dammy.remove();
                            $button.click();
                        });
                        $(window).on("mouseup.dammyevent", function () {
                            $dammy.remove();
                            $(window).off("mouseup.dammyevent");
                        });
                    });
                });
            })(buttonExtension || (buttonExtension = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var windows;
            (function (windows) {
                windows.iframeNameCounter = 0;
                // this is used for "name" attr of iframe for sub window
                function createIframeName() {
                    windows.iframeNameCounter++;
                    return "window_" + windows.iframeNameCounter;
                }
                var MAIN_WINDOW_ID = 'MAIN_WINDOW';
                var DEFAULT_DIALOG_OPTIONS = {
                    autoOpen: false,
                    draggable: true,
                    resizable: false,
                    dialogClass: "no-close"
                };
                /**
                 * Main or Sub Window(dialog)
                 */
                var ScreenWindow = /** @class */ (function () {
                    function ScreenWindow(id, isRoot, parent) {
                        this.globalContext = null;
                        this.$dialog = null;
                        this.$iframe = null;
                        this.onClosedHandler = $.noop;
                        this.onOpenedHandler = $.noop;
                        this.id = id;
                        this.isRoot = isRoot;
                        this.parent = parent;
                    }
                    ScreenWindow.createMainWindow = function () {
                        return new ScreenWindow(MAIN_WINDOW_ID, true, null);
                    };
                    ScreenWindow.createSubWindow = function (parent) {
                        return new ScreenWindow(uk.util.randomId(), false, parent);
                    };
                    ScreenWindow.prototype.setGlobal = function (globalContext) {
                        this.globalContext = globalContext;
                    };
                    ScreenWindow.prototype.setTitle = function (newTitle) {
                        if (this.isRoot) {
                            this.globalContext.title = newTitle;
                        }
                        else {
                            this.$dialog.dialog('option', { title: newTitle });
                        }
                    };
                    ScreenWindow.prototype.setHeight = function (height) {
                        if (!isNaN(height)) {
                            this.$dialog.dialog('option', {
                                height: height
                            });
                            this.$dialog.resize();
                        }
                    };
                    ScreenWindow.prototype.setWidth = function (width) {
                        if (!isNaN(width)) {
                            this.$dialog.dialog('option', {
                                width: width
                            });
                            this.$dialog.resize();
                        }
                    };
                    ScreenWindow.prototype.setSize = function (height, width) {
                        if (!isNaN(width) && !isNaN(height)) {
                            this.$dialog.dialog('option', {
                                width: width,
                                height: height
                            });
                            this.$dialog.resize();
                        }
                    };
                    ScreenWindow.prototype.setupAsDialog = function (path, options) {
                        var _this = this;
                        var self = this;
                        options.close = function () {
                            _this.dispose();
                        };
                        this.build$dialog(options);
                        this.$iframe.bind('load', function () {
                            _this.globalContext.nts.uk.ui.windows.selfId = _this.id;
                            var dialogName = _this.globalContext.__viewContext["program"]["programName"];
                            var title = nts.uk.util.isNullOrEmpty(dialogName) ? "" : dialogName;
                            var showCloseButton = _this.globalContext.dialogCloseButton === true;
                            var width = options.width || _this.globalContext.dialogSize.width;
                            var height = options.height || _this.globalContext.dialogSize.height;
                            var autoResize = _this.globalContext.autoResize == undefined ? true : _this.globalContext.autoResize;
                            _this.$dialog.data('__size__', { width: width, height: height });
                            width = (window.innerWidth <= width) ? window.innerWidth - 30 : width;
                            height = (window.innerHeight <= height) ? window.innerHeight - 30 : height;
                            _this.$dialog.dialog('option', {
                                width: width,
                                height: height,
                                title: title,
                                resizable: options.resizable,
                                open: function () {
                                    var $dialog = $(this);
                                    if (!showCloseButton) {
                                        $dialog.closest(".ui-dialog").addClass("no-close-btn");
                                    }
                                    $dialog.dialogPositionControl();
                                    //                            if ($(this).parent().height() >= $("#contents-area").height()) {
                                    //                                $(this).dialog("option", "position", {
                                    //                                    my: "center top",
                                    //                                    at: "center top",
                                    //                                    of: $("#contents-area"),
                                    //                                    collision: "none"
                                    //                                })
                                    //                                $(this).parent().css("position", "absolute");
                                    //                            }
                                    var $dialogDocument = $(this).parent();
                                    var $dialogContentDoc = $(this.lastElementChild.contentDocument);
                                    // catch press tab key in close button of dialog.
                                    $dialogDocument.on("keydown", ":tabbable", function (evt) {
                                        var code = evt.which || evt.keyCode || -1;
                                        if (code.toString() === "9") {
                                            var focusableElements = _.sortBy($dialogContentDoc.find(":tabbable"), function (o) { return parseInt($(o).attr("tabindex")); });
                                            if ($(evt.target).hasClass("ui-dialog-titlebar-close") && evt.shiftKey === false) {
                                                focusableElements.first().focus();
                                                evt.preventDefault();
                                            }
                                            else if ($(evt.target).hasClass("ui-dialog-titlebar-close") && evt.shiftKey === true) {
                                                focusableElements.last().focus();
                                                evt.preventDefault();
                                            }
                                        }
                                    });
                                    // catch press tab key for component in dialog.
                                    $dialogContentDoc.on("keydown", ":tabbable", function (evt) {
                                        var code = evt.which || evt.keyCode || -1;
                                        if (code.toString() === "9") {
                                            var focusableElements = _.sortBy($dialogContentDoc.find(":tabbable"), function (o) { return parseInt($(o).attr("tabindex")); });
                                            if ($(evt.target).is(focusableElements.last()) && evt.shiftKey === false) {
                                                focusableElements.first().focus();
                                                evt.preventDefault();
                                            }
                                            else if ($(evt.target).is(focusableElements.first()) && evt.shiftKey === true) {
                                                focusableElements.last().focus();
                                                evt.preventDefault();
                                            }
                                        }
                                    });
                                    setTimeout(function () {
                                        self.onOpenedHandler();
                                    }, 100);
                                },
                                beforeClose: function () {
                                    //return dialogWindow.__viewContext.dialog.beforeClose();
                                }
                            }).dialog('open');
                            //remove focus on tab key press on the close button on jquery dialog
                            $('.ui-dialog-titlebar-close').attr('tabindex', '-1');
                            if (_this.parent !== null)
                                _this.parent.globalContext.nts.uk.ui.block.clear();
                            //                    var widget= this.$dialog.dialog("widget");
                            //                    widget.draggable("option","containment",false);
                            if (autoResize) {
                                window.addEventListener('resize', function (evt) { return _this.resizeDialog(evt.target, _this.$dialog); });
                            }
                        });
                        this.globalContext.location.href = path;
                    };
                    ScreenWindow.prototype.build$dialog = function (options) {
                        this.$dialog = $('<div/>')
                            .css({
                            padding: '0px',
                            overflow: 'hidden'
                        })
                            .appendTo($('body'))
                            .dialog(options);
                        this.$iframe = $('<iframe/>')
                            .attr('name', createIframeName())
                            .css({
                            width: '100%',
                            height: '100%'
                        }).appendTo(this.$dialog);
                        this.setGlobal(this.$iframe[0].contentWindow);
                    };
                    ScreenWindow.prototype.onClosed = function (callback) {
                        this.onClosedHandler = function () {
                            //var dataModel = ko.dataFor(this.$dialog[0]);
                            //dataModel.kiban.errorDialogViewModel.errors([]);
                            //dataModel.kiban.errorDialogViewModel.errors.valueHasMutated();
                            callback();
                            windows.container.localShared = {};
                        };
                    };
                    ScreenWindow.prototype.onOpened = function (callback) {
                        this.onOpenedHandler = function () {
                            callback();
                        };
                    };
                    ScreenWindow.prototype.close = function () {
                        if (this.isRoot) {
                            window.close();
                        }
                        else {
                            this.$dialog.dialog('close');
                        }
                    };
                    ScreenWindow.prototype.dispose = function () {
                        var _this = this;
                        _.defer(function () { return _this.onClosedHandler(); });
                        window.parent.$("body").trigger("dialogclosed", { dialogId: this.id });
                        // delay 2 seconds to avoid IE error when any JS is running in destroyed iframe
                        setTimeout(function () {
                            _this.$iframe.remove();
                            _this.$dialog.remove();
                            _this.$dialog = null;
                            _this.$iframe = null;
                            _this.globalContext = null;
                            _this.parent = null;
                            _this.onClosedHandler = null;
                            //                    this.id = null;
                        }, 2000);
                    };
                    ScreenWindow.prototype.resizeDialog = function (target, $dialog) {
                        if (!$dialog) {
                            return;
                        }
                        var data = $dialog.data('__size__');
                        // resize width
                        if (target.innerWidth <= data.width) {
                            $dialog.dialog('option', 'width', target.innerWidth - 30);
                        }
                        else {
                            $dialog.dialog('option', 'width', data.width);
                        }
                        // resize height
                        if (target.innerHeight <= data.height) {
                            $dialog.dialog('option', 'height', target.innerHeight - 30);
                        }
                        else {
                            $dialog.dialog('option', 'height', data.height);
                        }
                        // resize error's position
                        this.changePositionOfError($dialog);
                        // resize combo-box-dropdown's positions
                        setTimeout(this.changePositionComboBoxDropDown.bind(this, $dialog), 500);
                    };
                    ScreenWindow.prototype.changePositionOfError = function ($dialog) {
                        var $iframeDoc = $($dialog.find("iframe")[0].contentWindow.document);
                        var $functionsAreaBottom = $iframeDoc.find('#functions-area-bottom');
                        if ($functionsAreaBottom.length > 0) {
                            // Defer in case dialog not showing yet. Should fix by using CSS for position, JQuery position is unstable
                            _.defer(function () {
                                $iframeDoc.find('#func-notifier-errors')
                                    .position({ my: 'left+5 top+48', at: 'left top', of: $functionsAreaBottom });
                            });
                        }
                    };
                    ScreenWindow.prototype.changePositionComboBoxDropDown = function ($dialog) {
                        var $iframeDoc = $($dialog.find("iframe")[0].contentWindow.document);
                        var $dropDownElements = $iframeDoc.find('.ui-igcombo-dropdown.ui-igcombo-no-border');
                        if ($dropDownElements.length <= 0) {
                            return;
                        }
                        $dropDownElements.each(function () {
                            $(this).css({
                                top: '-99999px',
                                left: '-99999px'
                            });
                        });
                    };
                    return ScreenWindow;
                }());
                windows.ScreenWindow = ScreenWindow;
                /**
                 * All ScreenWindows are managed by this container.
                 * this instance is singleton in one browser-tab.
                 */
                var ScreenWindowContainer = /** @class */ (function () {
                    function ScreenWindowContainer() {
                        this.windows = {};
                        this.windows[windows.selfId] = ScreenWindow.createMainWindow();
                        this.windows[windows.selfId].setGlobal(window);
                        this.shared = {};
                        this.localShared = {};
                    }
                    /**
                     * All dialog object is in MainWindow.
                     */
                    ScreenWindowContainer.prototype.createDialog = function (path, options, parentId) {
                        var parentwindow = this.windows[parentId];
                        var subWindow = ScreenWindow.createSubWindow(parentwindow);
                        this.windows[subWindow.id] = subWindow;
                        options = $.extend({}, DEFAULT_DIALOG_OPTIONS, options);
                        subWindow.setupAsDialog(path, options);
                        return subWindow;
                    };
                    ScreenWindowContainer.prototype.createDialogNotOpen = function (path, options, parentId) {
                        var parentwindow = this.windows[parentId];
                        var subWindow = ScreenWindow.createSubWindow(parentwindow);
                        this.windows[subWindow.id] = subWindow;
                        return subWindow;
                    };
                    ScreenWindowContainer.prototype.mergeOption = function (options) {
                        return $.extend({}, DEFAULT_DIALOG_OPTIONS, options);
                    };
                    ScreenWindowContainer.prototype.getShared = function (key) {
                        return this.localShared[key] !== undefined ? this.localShared[key] : this.shared[key];
                    };
                    ScreenWindowContainer.prototype.setShared = function (key, data, isRoot, persist) {
                        var transferData;
                        // Null or Undefined
                        if (uk.util.isNullOrUndefined(data)) {
                            transferData = data;
                        }
                        // Data or KO data
                        else if (!_.isFunction(data) || ko.isObservable(data)) {
                            transferData = JSON.parse(JSON.stringify(ko.unwrap(data))); // Complete remove reference by object
                        }
                        // Callback function
                        else {
                            transferData = data;
                        }
                        if (persist || isRoot) {
                            this.shared[key] = transferData;
                        }
                        else {
                            this.localShared[key] = transferData;
                        }
                    };
                    ScreenWindowContainer.prototype.close = function (id) {
                        var target = this.windows[id];
                        delete this.windows[id];
                        target.close();
                    };
                    return ScreenWindowContainer;
                }());
                windows.ScreenWindowContainer = ScreenWindowContainer;
                function rgc() {
                    return windows.container.windows[MAIN_WINDOW_ID].globalContext;
                }
                windows.rgc = rgc;
                if (uk.util.isInFrame()) {
                    var parent = window.parent;
                    windows.container = (parent.nts.uk.ui.windows.container);
                }
                else {
                    windows.selfId = MAIN_WINDOW_ID;
                    windows.container = new ScreenWindowContainer();
                }
                function getShared(key) {
                    return windows.container.getShared(key);
                }
                windows.getShared = getShared;
                function setShared(key, data, persist) {
                    windows.container.setShared(key, data, windows.getSelf().isRoot, persist);
                }
                windows.setShared = setShared;
                function getSelf() {
                    return windows.container.windows[windows.selfId];
                }
                windows.getSelf = getSelf;
                function close(windowId) {
                    windowId = uk.util.orDefault(windowId, windows.selfId);
                    windows.container.close(windowId);
                }
                windows.close = close;
                var sub;
                (function (sub) {
                    function modal(webAppId, path, options) {
                        if (typeof arguments[1] !== 'string') {
                            return modal.apply(null, _.concat(nts.uk.request.location.currentAppId, arguments));
                        }
                        return dialog(webAppId, path, true, options);
                    }
                    sub.modal = modal;
                    function modeless(webAppId, path, options) {
                        if (typeof arguments[1] !== 'string') {
                            return modeless.apply(null, _.concat(nts.uk.request.location.currentAppId, arguments));
                        }
                        return dialog(webAppId, path, false, options);
                    }
                    sub.modeless = modeless;
                    function dialog(webAppId, path, modal, options) {
                        options = options || {};
                        options.modal = modal;
                        if (webAppId == nts.uk.request.location.currentAppId) {
                            path = nts.uk.request.resolvePath(path);
                            return open(path, options);
                        }
                        else {
                            path = nts.uk.request.location.siteRoot
                                .mergeRelativePath(nts.uk.request.WEB_APP_NAME[webAppId] + '/')
                                .mergeRelativePath(path).serialize();
                            var dialog_1 = createDialog(path, options);
                            uk.request.login.keepSerializedSession()
                                .then(function () {
                                return uk.request.login.restoreSessionTo(webAppId);
                            })
                                .then(function () {
                                dialog_1.setupAsDialog(path, windows.container.mergeOption(options));
                            });
                            return dialog_1;
                        }
                    }
                    function open(path, options) {
                        nts.uk.ui.block.invisible();
                        return windows.container.createDialog(path, options, windows.selfId);
                    }
                    sub.open = open;
                    function createDialog(path, options) {
                        nts.uk.ui.block.invisible();
                        return windows.container.createDialogNotOpen(path, options, windows.selfId);
                    }
                    sub.createDialog = createDialog;
                })(sub = windows.sub || (windows.sub = {}));
            })(windows = ui.windows || (ui.windows = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_1) {
            var PS = window.parent;
            /**
             * Dialog Module
             * Using for display info or confirm dialog
             */
            var dialog;
            (function (dialog) {
                function getMaxZIndex() {
                    var overlayElements = PS.$(".ui-widget-overlay");
                    var max = 12000;
                    if (overlayElements.length > 0) {
                        var zIndexs = _.map(overlayElements, function (element) { return parseInt($(element).css("z-index")); });
                        var temp = _.max(zIndexs);
                        max = temp > max ? temp : max;
                    }
                    return max;
                }
                dialog.getMaxZIndex = getMaxZIndex;
                function createNoticeDialog(message, buttons, header) {
                    var $control = $('<div/>').addClass('control').addClass("pre");
                    var text;
                    if (typeof message === "object") {
                        //business exception
                        if (message.message) {
                            text = message.message;
                            if (message.messageId) {
                                $control.append(message.messageId);
                            }
                        }
                        else {
                            text = nts.uk.resource.getMessage(message.messageId, message.messageParams);
                            $control.append(message.messageId);
                        }
                    }
                    else {
                        text = message;
                    }
                    text = text.replace(/\n/g, '<br />');
                    var $this = PS.$('<div/>').addClass('notice-dialog')
                        .append($('<div/>').addClass('text').append(text))
                        .append($control)
                        .appendTo('body')
                        .dialog({
                        dialogClass: "no-close-btn",
                        width: 'auto',
                        modal: true,
                        minWidth: 300,
                        maxWidth: 800,
                        maxHeight: 400,
                        closeOnEscape: false,
                        buttons: buttons,
                        open: function () {
                            $(this).closest('.ui-dialog').css('z-index', getMaxZIndex() + 2);
                            $('.ui-widget-overlay').last().css('z-index', getMaxZIndex() + 1);
                            var $buttons = $(this).parent().find('.ui-dialog-buttonset > button')
                                .removeClass('ui-button ui-corner-all ui-widget');
                            if ($buttons.filter(".proceed").length === 1) {
                                $buttons.filter(".proceed").focus();
                            }
                            else if ($buttons.filter(".danger").length === 1) {
                                $buttons.not(".danger").focus();
                            }
                            else {
                                $buttons.eq(0).focus();
                            }
                            //add header icon if it has
                            if (header && header.icon) {
                                var $headerContainer = $("<div'></div>").addClass("ui-dialog-titlebar-container");
                                $headerContainer.append($("<img>").attr("src", header.icon).addClass("ui-dialog-titlebar-icon"));
                                $headerContainer.append($(this).parent().find(".ui-dialog-title"));
                                $(this).parent().children(".ui-dialog-titlebar").prepend($headerContainer);
                            }
                        },
                        close: function (event) {
                            PS.$(this).dialog('destroy');
                            PS.$(event.target).remove();
                        }
                    });
                    $this.dialogPositionControl();
                    //add header text if it has
                    if (header && header.text) {
                        $this.dialog("option", "title", header.text);
                    }
                    return $this;
                }
                function version() {
                    var versinText = "AP version: ...";
                    var $this = PS.$('<div/>').addClass('version-dialog')
                        .append($('<div/>').addClass('text').append(versinText))
                        .appendTo('body')
                        .dialog({});
                }
                dialog.version = version;
                function simpleDialog(message, option) {
                    var then = $.noop;
                    var $dialog = PS.$('<div/>').hide();
                    $(function () {
                        $dialog.appendTo('body').dialog({
                            autoOpen: false
                        });
                    });
                    setTimeout(function () {
                        var $this = createNoticeDialog(message, [{
                                text: ui_1.toBeResource.close,
                                "class": "large",
                                click: function () {
                                    $this.dialog('close');
                                    then();
                                }
                            }], { text: option.title });
                    }, 0);
                    return {
                        then: function (callback) {
                            then = callback;
                        }
                    };
                }
                function info(message) {
                    return simpleDialog(message, { title: ui_1.toBeResource.info });
                }
                dialog.info = info;
                function caution(message) {
                    return simpleDialog(message, { title: ui_1.toBeResource.warn });
                }
                dialog.caution = caution;
                function error(message) {
                    return simpleDialog(message, { title: ui_1.toBeResource.error });
                }
                dialog.error = error;
                function alertError(message) {
                    return error(message);
                }
                dialog.alertError = alertError;
                function alert(message) {
                    return error(message);
                }
                dialog.alert = alert;
                ;
                function confirm(message, option) {
                    var handleYes = $.noop;
                    var handleNo = $.noop;
                    var handleCancel = $.noop;
                    var handleThen = $.noop;
                    var hasNoButton = true;
                    var hasCancelButton = false;
                    var option = option || {
                        buttonStyles: { yes: "danger" }
                    };
                    var handlers = {
                        ifYes: function (handler) {
                            handleYes = handler;
                            return handlers;
                        },
                        ifCancel: function (handler) {
                            hasNoButton = false;
                            hasCancelButton = true;
                            handleCancel = handler;
                            return handlers;
                        },
                        ifNo: function (handler) {
                            hasNoButton = true;
                            handleNo = handler;
                            return handlers;
                        },
                        then: function (handler) {
                            handleThen = handler;
                            return handlers;
                        }
                    };
                    setTimeout(function () {
                        var buttons = [];
                        // yes button
                        buttons.push({
                            text: ui_1.toBeResource.yes,
                            "class": "yes large " + (option.buttonStyles.yes || ""),
                            click: function () {
                                $this.dialog('close');
                                handleYes();
                                handleThen();
                            }
                        });
                        // no button
                        if (hasNoButton) {
                            buttons.push({
                                text: ui_1.toBeResource.no,
                                "class": "no large " + (option.buttonStyles.no || ""),
                                click: function () {
                                    $this.dialog('close');
                                    handleNo();
                                    handleThen();
                                }
                            });
                        }
                        // cancel button
                        if (hasCancelButton) {
                            buttons.push({
                                text: ui_1.toBeResource.cancel,
                                "class": "cancel large",
                                click: function () {
                                    $this.dialog('close');
                                    handleCancel();
                                    handleThen();
                                }
                            });
                        }
                        var $this = createNoticeDialog(message, buttons, { text: ui_1.toBeResource.confirm });
                    });
                    return handlers;
                }
                dialog.confirm = confirm;
                ;
                function confirmDanger(message) {
                    return confirm(message);
                }
                dialog.confirmDanger = confirmDanger;
                function confirmProceed(message) {
                    return confirm(message, { buttonStyles: { yes: "proceed" } });
                }
                dialog.confirmProceed = confirmProceed;
                function addError(errorBody, error, idx) {
                    var row = $("<tr/>");
                    row.append("<td style='display: none;'>" + idx + "/td><td>" + error["message"] + "</td><td>" + error["messageId"] + "</td>");
                    var nameId = error["supplements"]["NameID"];
                    if (!uk.util.isNullOrUndefined(nameId)) {
                        row.click(function (evt, ui) {
                            var element = $("body").find('[NameID="' + nameId + '"]');
                            var tab = element.closest("[role='tabpanel']");
                            while (!uk.util.isNullOrEmpty(tab)) {
                                var tabId = tab.attr("id");
                                tab.siblings(":first").children("li[aria-controls='" + tabId + "']").children("a").click();
                                tab = tab.parent().closest("[role='tabpanel']");
                            }
                            element.focus();
                            var $dialogContainer = errorBody.closest(".bundled-errors-alert").closest("[role='dialog']");
                            var $self = nts.uk.ui.windows.getSelf();
                            var additonalTop = 0;
                            var additonalLeft = 0;
                            if (!$self.isRoot) {
                                var $currentDialog = $self.$dialog.closest("[role='dialog']");
                                var $currentHeadBar = $currentDialog.find(".ui-dialog-titlebar");
                                var currentDialogOffset = $currentDialog.offset();
                                additonalTop = currentDialogOffset.top + $currentHeadBar.height();
                                additonalLeft = currentDialogOffset.left;
                            }
                            var currentControlOffset = element.offset();
                            var doc = document.documentElement;
                            var scrollX = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
                            var scrollY = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
                            var top = additonalTop + currentControlOffset.top + element.outerHeight() - scrollY;
                            //                    let top = additonalTop + currentControlOffset.top  + element.outerHeight() - window.scrollY;
                            var left = additonalLeft + currentControlOffset.left - scrollX;
                            //                    let left = additonalLeft + currentControlOffset.left - window.scrollX;
                            var $errorDialogOffset = $dialogContainer.offset();
                            var maxLeft = $errorDialogOffset.left + $dialogContainer.width();
                            var maxTop = $errorDialogOffset.top + $dialogContainer.height();
                            if ($errorDialogOffset.top < top && top < maxTop) {
                                $dialogContainer.css("top", top + 15);
                            }
                            if (($errorDialogOffset.left < left && left < maxLeft)) {
                                $dialogContainer.css("left", left);
                            }
                        });
                    }
                    row.appendTo(errorBody);
                }
                function getRoot() {
                    var self = nts.uk.ui.windows.getSelf();
                    while (!self.isRoot) {
                        self = self.parent;
                    }
                    return $(self.globalContext.document).find("body");
                }
                function bundledErrors(errors) {
                    var then = $.noop;
                    var id = uk.util.randomId();
                    var container = $("<div id='" + id + "' class='bundled-errors-alert'/>"), functionArea = $("<div id='functions-area-bottom'/>"), errorBoard = $("<div id='error-board'>    <table> <thead> <tr>    <th style='width: auto;'>"
                        + ui_1.toBeResource.errorContent + "</th><th style='display: none;'/>    <th style='width: 150px;'>"
                        + ui_1.toBeResource.errorCode + "</th>   </tr>   </thead>    <tbody/>    </table> </div>"), closeButton = $("<button class='ntsButton ntsClose large'/>");
                    var errorBody = errorBoard.find("tbody");
                    if ($.isArray(errors["errors"])) {
                        _.forEach(errors["errors"], function (error, idx) {
                            addError(errorBody, error, idx + 1);
                        });
                    }
                    else {
                        return alertError(errors);
                    }
                    var dialogInfo = nts.uk.ui.windows.getSelf();
                    closeButton.appendTo(functionArea);
                    functionArea.appendTo(container);
                    errorBoard.appendTo(container);
                    container.appendTo(getRoot());
                    setTimeout(function () {
                        container.dialog({
                            title: ui_1.toBeResource.errorList,
                            dialogClass: "no-close-btn",
                            modal: false,
                            resizable: false,
                            width: 450,
                            maxHeight: 500,
                            closeOnEscape: false,
                            open: function () {
                                errorBoard.css({ "overflow": "auto", "max-height": "300px", "margin-bottom": "65px" });
                                functionArea.css({ "left": "0px" });
                                closeButton.text(ui_1.toBeResource.close).click(function (evt) {
                                    container.dialog("destroy");
                                    container.remove();
                                    then();
                                });
                                container.ntsDialogEx("centerUp", dialogInfo);
                            },
                            close: function (event) {
                            }
                        }).dialogPositionControl();
                    }, 0);
                    if (!dialogInfo.isRoot) {
                        var normalClose = dialogInfo.onClosedHandler;
                        var onCloseAuto = function () {
                            normalClose();
                            if (container.dialog("isOpen")) {
                                container.dialog("close");
                            }
                        };
                        dialogInfo.onClosedHandler = onCloseAuto;
                    }
                    return {
                        then: function (callback) {
                            then = callback;
                        }
                    };
                }
                dialog.bundledErrors = bundledErrors;
                ;
            })(dialog = ui_1.dialog || (ui_1.dialog = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            /**
             * Utilities for IgniteUI
             */
            var ig;
            (function (ig) {
                var grid;
                (function (grid) {
                    function getScrollContainer($grid) {
                        var $scroll = $grid.igGrid("scrollContainer");
                        if ($scroll.length === 1)
                            return $scroll;
                        return $("#" + $grid.attr("id") + "_scrollContainer");
                    }
                    grid.getScrollContainer = getScrollContainer;
                    function getRowIdFrom($anyElementInRow) {
                        return $anyElementInRow.closest('tr').attr('data-id');
                    }
                    grid.getRowIdFrom = getRowIdFrom;
                    function getRowIndexFrom($anyElementInRow) {
                        return parseInt($anyElementInRow.closest('tr').attr('data-row-idx'), 10);
                    }
                    grid.getRowIndexFrom = getRowIndexFrom;
                    function expose(targetRow, $grid) {
                        var $scroll = getScrollContainer($grid);
                        $scroll.exposeVertically(targetRow.element);
                    }
                    grid.expose = expose;
                    var virtual;
                    (function (virtual) {
                        function getDisplayContainer(gridId) {
                            return $('#' + gridId + '_displayContainer');
                        }
                        virtual.getDisplayContainer = getDisplayContainer;
                        function getVisibleRows(gridId) {
                            return $('#' + gridId + ' > tbody > tr:visible');
                        }
                        virtual.getVisibleRows = getVisibleRows;
                        function getFirstVisibleRow(gridId) {
                            var top = getDisplayContainer(gridId).scrollTop();
                            var visibleRows = getVisibleRows(gridId);
                            for (var i = 0; i < visibleRows.length; i++) {
                                var $row = $(visibleRows[i]);
                                if (visibleRows[i].offsetTop + $row.height() > top) {
                                    return $row;
                                }
                            }
                        }
                        virtual.getFirstVisibleRow = getFirstVisibleRow;
                        function getLastVisibleRow(gridId) {
                            var $displayContainer = getDisplayContainer(gridId);
                            var bottom = $displayContainer.scrollTop() + $displayContainer.height();
                            return getVisibleRows(gridId).filter(function () {
                                return this.offsetTop < bottom;
                            }).last();
                        }
                        virtual.getLastVisibleRow = getLastVisibleRow;
                        function expose(targetRow, $grid) {
                            if (targetRow.index === undefined) {
                                $grid.igGrid("virtualScrollTo", dataSource.getIndexOfKey(targetRow.id, $grid) + 1);
                                return;
                            }
                            var rowHeight = targetRow.element.outerHeight();
                            var targetTop = targetRow.index * rowHeight;
                            var targetBottom = targetTop + rowHeight;
                            var $scroll = getScrollContainer($grid);
                            var viewHeight = $scroll.height();
                            var viewTop = $scroll.scrollTop();
                            var viewBottom = viewTop + viewHeight;
                            if (viewTop <= targetTop && targetBottom <= viewBottom) {
                                return;
                            }
                            // when specify 1, top row will be shown.
                            $grid.igGrid("virtualScrollTo", targetRow.index + 1);
                        }
                        virtual.expose = expose;
                    })(virtual = grid.virtual || (grid.virtual = {}));
                    var dataSource;
                    (function (dataSource) {
                        function getIndexOfKey(targetKey, $grid) {
                            var option = $grid.igGrid("option");
                            return _.findIndex(option.dataSource, function (s) { return s[option.primaryKey].toString() === targetKey.toString(); });
                        }
                        dataSource.getIndexOfKey = getIndexOfKey;
                    })(dataSource = grid.dataSource || (grid.dataSource = {}));
                    var header;
                    (function (header) {
                        function getCell(gridId, columnKey) {
                            var $headers = $('#' + gridId).igGrid("headersTable");
                            return $headers.find('#' + gridId + '_' + columnKey);
                        }
                        header.getCell = getCell;
                        function getLabel(gridId, columnKey) {
                            return getCell(gridId, columnKey).find('span');
                        }
                        header.getLabel = getLabel;
                    })(header = grid.header || (grid.header = {}));
                })(grid = ig.grid || (ig.grid = {}));
                var tree;
                (function (tree) {
                    var grid;
                    (function (grid) {
                        function expandTo(targetKey, $treeGrid) {
                            var option = $treeGrid.igTreeGrid("option");
                            var ancestorKeys = dataSource.collectAncestorKeys(targetKey, option.dataSource, option.primaryKey, option.childDataKey);
                            if (ancestorKeys === null) {
                                return;
                            }
                            var expand = function (currentIndex) {
                                if (currentIndex >= ancestorKeys.length)
                                    return;
                                $treeGrid.igTreeGrid("expandRow", ancestorKeys[currentIndex]);
                                setTimeout(function () { expand(currentIndex + 1); }, 0);
                            };
                            expand(0);
                            setTimeout(function () {
                                scrollTo(targetKey, $treeGrid);
                            }, 1);
                        }
                        grid.expandTo = expandTo;
                        function scrollTo(targetKey, $treeGrid) {
                            var $scroll = $treeGrid.igTreeGrid("scrollContainer");
                            var $targetNode = $treeGrid.find("tr[data-id='" + targetKey + "']").first();
                            if ($targetNode.length === 0)
                                return;
                            $scroll.exposeVertically($targetNode);
                        }
                        grid.scrollTo = scrollTo;
                    })(grid = tree.grid || (tree.grid = {}));
                    var dataSource;
                    (function (dataSource_1) {
                        function collectAncestorKeys(targetKey, dataSource, primaryKey, childDataKey) {
                            if (typeof dataSource === "undefined") {
                                return null;
                            }
                            for (var i = 0, len = dataSource.length; i < len; i++) {
                                var currentData = dataSource[i];
                                if (currentData[primaryKey] === targetKey) {
                                    return [targetKey];
                                }
                                var children = currentData[childDataKey];
                                var results = collectAncestorKeys(targetKey, children, primaryKey, childDataKey);
                                if (results !== null) {
                                    results.unshift(currentData[primaryKey]);
                                    return results;
                                }
                            }
                            return null;
                        }
                        dataSource_1.collectAncestorKeys = collectAncestorKeys;
                    })(dataSource = tree.dataSource || (tree.dataSource = {}));
                })(tree = ig.tree || (ig.tree = {}));
            })(ig = ui.ig || (ui.ig = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_2) {
            var option;
            (function (option_1) {
                var DialogOption = /** @class */ (function () {
                    function DialogOption() {
                        this.show = false;
                    }
                    return DialogOption;
                }());
                option_1.DialogOption = DialogOption;
                var ConfirmDialogOption = /** @class */ (function (_super) {
                    __extends(ConfirmDialogOption, _super);
                    function ConfirmDialogOption(option) {
                        var _this = _super.call(this) || this;
                        // Default value
                        _this.modal = (option && option.modal !== undefined) ? option.modal : true;
                        _this.buttons = [];
                        // Add OK Button
                        _this.buttons.push({
                            text: "OK",
                            "class": "yes",
                            size: "large",
                            color: "proceed",
                            click: function (viewmodel, ui) {
                                viewmodel.okButtonClicked();
                                $(ui).dialog("close");
                            }
                        });
                        return _this;
                    }
                    return ConfirmDialogOption;
                }(DialogOption));
                option_1.ConfirmDialogOption = ConfirmDialogOption;
                var DelDialogOption = /** @class */ (function (_super) {
                    __extends(DelDialogOption, _super);
                    function DelDialogOption(option) {
                        var _this = _super.call(this) || this;
                        // Default value
                        _this.modal = (option && option.modal !== undefined) ? option.modal : true;
                        _this.buttons = [];
                        // Add OK Button
                        _this.buttons.push({
                            text: ui_2.toBeResource.yes,
                            "class": "yes ",
                            size: "large",
                            color: "danger",
                            click: function (viewmodel, ui) {
                                viewmodel.okButtonClicked();
                                ui.dialog("close");
                            }
                        });
                        // Add Cancel Button
                        _this.buttons.push({
                            text: ui_2.toBeResource.no,
                            "class": "no ",
                            size: "large",
                            color: "",
                            click: function (viewmodel, ui) {
                                viewmodel.cancelButtonClicked();
                                ui.dialog("close");
                            }
                        });
                        return _this;
                    }
                    return DelDialogOption;
                }(DialogOption));
                option_1.DelDialogOption = DelDialogOption;
                var OKDialogOption = /** @class */ (function (_super) {
                    __extends(OKDialogOption, _super);
                    function OKDialogOption(option) {
                        var _this = _super.call(this) || this;
                        // Default value
                        _this.modal = (option && option.modal !== undefined) ? option.modal : true;
                        _this.buttons = [];
                        // Add OK Button
                        _this.buttons.push({
                            text: ui_2.toBeResource.yes,
                            "class": "yes ",
                            size: "large",
                            color: "proceed",
                            click: function (viewmodel, ui) {
                                viewmodel.okButtonClicked();
                                ui.dialog("close");
                            }
                        });
                        // Add Cancel Button
                        _this.buttons.push({
                            text: ui_2.toBeResource.no,
                            "class": "no ",
                            size: "large",
                            color: "",
                            click: function (viewmodel, ui) {
                                viewmodel.cancelButtonClicked();
                                ui.dialog("close");
                            }
                        });
                        return _this;
                    }
                    return OKDialogOption;
                }(DialogOption));
                option_1.OKDialogOption = OKDialogOption;
                var ErrorDialogOption = /** @class */ (function (_super) {
                    __extends(ErrorDialogOption, _super);
                    function ErrorDialogOption(option) {
                        var _this = _super.call(this) || this;
                        // Default value
                        _this.headers = (option && option.headers) ? option.headers : [
                            new nts.uk.ui.errors.ErrorHeader("messageText", ui_2.toBeResource.errorContent, "auto", true),
                            new nts.uk.ui.errors.ErrorHeader("errorCode", ui_2.toBeResource.errorCode, 150, true)
                        ];
                        _this.modal = (option && option.modal !== undefined) ? option.modal : false;
                        _this.displayrows = (option && option.displayrows) ? option.displayrows : 10;
                        //this.maxrows = (option && option.maxrows) ? option.maxrows : 1000;
                        _this.autoclose = (option && option.autoclose !== undefined) ? option.autoclose : true;
                        _this.buttons = [];
                        // Add Close Button
                        _this.buttons.push({
                            text: ui_2.toBeResource.close,
                            "class": "yes ",
                            size: "large",
                            color: "",
                            click: function (viewmodel, ui) {
                                viewmodel.closeButtonClicked();
                                ui.dialog("close");
                            }
                        });
                        return _this;
                    }
                    return ErrorDialogOption;
                }(DialogOption));
                option_1.ErrorDialogOption = ErrorDialogOption;
                var ErrorDialogWithTabOption = /** @class */ (function (_super) {
                    __extends(ErrorDialogWithTabOption, _super);
                    function ErrorDialogWithTabOption(option) {
                        var _this = _super.call(this) || this;
                        // Default value
                        _this.headers = (option && option.headers) ? option.headers : [
                            new ui_2.errors.ErrorHeader("tab", ui_2.toBeResource.tab, 90, true),
                            new ui_2.errors.ErrorHeader("location", ui_2.toBeResource.errorPoint, 115, true),
                            new ui_2.errors.ErrorHeader("message", ui_2.toBeResource.errorDetail, 250, true)
                        ];
                        _this.modal = (option && option.modal !== undefined) ? option.modal : false;
                        _this.displayrows = (option && option.displayrows) ? option.displayrows : 10;
                        //this.maxrows = (option && option.maxrows) ? option.maxrows : 1000;
                        _this.autoclose = (option && option.autoclose !== undefined) ? option.autoclose : true;
                        _this.buttons = [];
                        // Add Close Button
                        _this.buttons.push({
                            text: ui_2.toBeResource.close,
                            "class": "yes ",
                            size: "large",
                            color: "",
                            click: function (viewmodel, ui) {
                                viewmodel.closeButtonClicked();
                                ui.dialog("close");
                            }
                        });
                        return _this;
                    }
                    return ErrorDialogWithTabOption;
                }(ErrorDialogOption));
                option_1.ErrorDialogWithTabOption = ErrorDialogWithTabOption;
                var DialogButton = /** @class */ (function () {
                    function DialogButton() {
                    }
                    DialogButton.prototype.click = function (viewmodel, ui) { };
                    ;
                    return DialogButton;
                }());
                option_1.DialogButton = DialogButton;
            })(option = ui_2.option || (ui_2.option = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var option;
            (function (option_2) {
                var currenryPosition = {
                    "JPY": "left",
                    "USD": "right"
                };
                var EditorOptionBase = /** @class */ (function () {
                    function EditorOptionBase() {
                    }
                    return EditorOptionBase;
                }());
                option_2.EditorOptionBase = EditorOptionBase;
                var TextEditorOption = /** @class */ (function (_super) {
                    __extends(TextEditorOption, _super);
                    function TextEditorOption(option) {
                        var _this = _super.call(this) || this;
                        // Default value
                        _this.textmode = (option !== undefined && option.textmode !== undefined) ? option.textmode : "text";
                        _this.placeholder = (option !== undefined && option.placeholder !== undefined) ? option.placeholder : "";
                        _this.width = (option !== undefined && option.width !== undefined) ? option.width : "";
                        _this.textalign = (option !== undefined && option.textalign !== undefined) ? option.textalign : "";
                        _this.autofill = (option !== undefined && option.autofill !== undefined) ? option.autofill : false;
                        _this.filldirection = (option !== undefined && option.filldirection !== undefined) ? option.filldirection : "left";
                        _this.fillcharacter = (option !== undefined && option.fillcharacter !== undefined) ? option.fillcharacter : "0";
                        return _this;
                    }
                    return TextEditorOption;
                }(EditorOptionBase));
                option_2.TextEditorOption = TextEditorOption;
                var TimeEditorOption = /** @class */ (function (_super) {
                    __extends(TimeEditorOption, _super);
                    function TimeEditorOption(option) {
                        var _this = _super.call(this) || this;
                        // Default value
                        _this.inputFormat = (option !== undefined && option.inputFormat !== undefined) ? option.inputFormat : "date";
                        _this.placeholder = (option !== undefined && option.placeholder !== undefined) ? option.placeholder : "";
                        _this.width = (option !== undefined && option.width !== undefined) ? option.width : "";
                        _this.defaultValue = (option !== undefined && option.defaultValue !== undefined) ? option.defaultValue : "";
                        _this.textalign = (option !== undefined && option.textalign !== undefined) ? option.textalign : "right";
                        return _this;
                    }
                    return TimeEditorOption;
                }(EditorOptionBase));
                option_2.TimeEditorOption = TimeEditorOption;
                var NumberEditorOption = /** @class */ (function (_super) {
                    __extends(NumberEditorOption, _super);
                    function NumberEditorOption(option) {
                        var _this = _super.call(this) || this;
                        // Default value
                        _this.groupseperator = (option !== undefined && option.groupseperator !== undefined) ? option.groupseperator : ",";
                        _this.grouplength = (option !== undefined && option.grouplength !== undefined) ? option.grouplength : 0;
                        _this.decimalseperator = (option !== undefined && option.decimalseperator !== undefined) ? option.decimalseperator : ".";
                        _this.decimallength = (option !== undefined && option.decimallength !== undefined) ? option.decimallength : 0;
                        _this.placeholder = (option !== undefined && option.placeholder !== undefined) ? option.placeholder : "";
                        _this.width = (option !== undefined && option.width !== undefined) ? option.width : "";
                        _this.textalign = (option !== undefined && option.textalign !== undefined) ? option.textalign : "right";
                        _this.symbolChar = (option !== undefined && option.symbolChar !== undefined) ? option.symbolChar : "";
                        _this.symbolPosition = (option !== undefined && option.symbolPosition !== undefined) ? option.symbolPosition : "right";
                        _this.unitID = (option !== undefined && option.unitID !== undefined) ? option.unitID : "";
                        _this.defaultValue = (option !== undefined && !nts.uk.util.isNullOrEmpty(option.defaultValue)) ? option.defaultValue : "";
                        _this.numberGroup = (option !== undefined && option.numberGroup !== undefined) ? option.numberGroup : null;
                        if (_this.numberGroup == true) {
                            _this.grouplength = 3;
                        }
                        else if (_this.numberGroup == false) {
                            _this.grouplength = 0;
                        }
                        return _this;
                    }
                    return NumberEditorOption;
                }(EditorOptionBase));
                option_2.NumberEditorOption = NumberEditorOption;
                var CurrencyEditorOption = /** @class */ (function (_super) {
                    __extends(CurrencyEditorOption, _super);
                    function CurrencyEditorOption(option) {
                        var _this = _super.call(this) || this;
                        // Default value
                        _this.groupseperator = (option !== undefined && option.groupseperator !== undefined) ? option.groupseperator : ",";
                        _this.grouplength = (option !== undefined && option.grouplength !== undefined) ? option.grouplength : 0;
                        _this.decimalseperator = (option !== undefined && option.decimalseperator !== undefined) ? option.decimalseperator : ".";
                        _this.decimallength = (option !== undefined && option.decimallength !== undefined) ? option.decimallength : 0;
                        _this.currencyformat = (option !== undefined && option.currencyformat !== undefined) ? option.currencyformat : "JPY";
                        _this.currencyposition = (option !== undefined && option.currencyposition !== undefined)
                            ? option.currencyposition : getCurrencyPosition(_this.currencyformat);
                        _this.placeholder = (option !== undefined && option.placeholder !== undefined) ? option.placeholder : "";
                        _this.width = (option !== undefined && option.width !== undefined) ? option.width : "";
                        _this.textalign = (option !== undefined && option.textalign !== undefined) ? option.textalign : "right";
                        _this.defaultValue = (option !== undefined && !nts.uk.util.isNullOrEmpty(option.defaultValue)) ? option.defaultValue : "";
                        _this.unitID = (option !== undefined && option.unitID !== undefined) ? option.unitID : "";
                        _this.numberGroup = (option !== undefined && option.numberGroup !== undefined) ? option.numberGroup : null;
                        if (_this.numberGroup == true) {
                            _this.grouplength = 3;
                        }
                        else if (_this.numberGroup == false) {
                            _this.grouplength = 0;
                        }
                        return _this;
                    }
                    return CurrencyEditorOption;
                }(NumberEditorOption));
                option_2.CurrencyEditorOption = CurrencyEditorOption;
                function getCurrencyPosition(currencyformat) {
                    return currenryPosition[currencyformat] === null ? "right" : currenryPosition[currencyformat];
                }
                var MultilineEditorOption = /** @class */ (function (_super) {
                    __extends(MultilineEditorOption, _super);
                    function MultilineEditorOption(option) {
                        var _this = _super.call(this) || this;
                        // Default value
                        _this.resizeable = (option !== undefined && option.resizeable !== undefined) ? option.resizeable : false;
                        _this.placeholder = (option !== undefined && option.placeholder !== undefined) ? option.placeholder : "";
                        _this.width = (option !== undefined && option.width !== undefined) ? option.width : "";
                        _this.textalign = (option !== undefined && option.textalign !== undefined) ? option.textalign : "";
                        return _this;
                    }
                    return MultilineEditorOption;
                }(EditorOptionBase));
                option_2.MultilineEditorOption = MultilineEditorOption;
                var TimeWithDayAttrEditorOption = /** @class */ (function (_super) {
                    __extends(TimeWithDayAttrEditorOption, _super);
                    function TimeWithDayAttrEditorOption(option) {
                        var _this = _super.call(this) || this;
                        // Default value
                        _this.timeWithDay = (option !== undefined && option.timeWithDay !== undefined) ? option.timeWithDay : true;
                        _this.placeholder = (option !== undefined && option.placeholder !== undefined) ? option.placeholder : "";
                        _this.width = (option !== undefined && option.width !== undefined) ? option.width : "";
                        _this.textalign = (option !== undefined && option.textalign !== undefined) ? option.textalign : "right";
                        return _this;
                    }
                    return TimeWithDayAttrEditorOption;
                }(EditorOptionBase));
                option_2.TimeWithDayAttrEditorOption = TimeWithDayAttrEditorOption;
            })(option = ui.option || (ui.option = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_3) {
            var exTable;
            (function (exTable_1) {
                var NAMESPACE = "extable";
                var DISTANCE = 1;
                var SPACE = 10;
                var HEADER = "xheader";
                var HEADER_PRF = "ex-header-";
                var BODY_PRF = "ex-body-";
                var HEADER_TBL_PRF = "extable-header-";
                var BODY_TBL_PRF = "extable-body-";
                var H_BTN_CLS = "ex-height-btn";
                var LEFTMOST = "leftmost";
                var MIDDLE = "middle";
                var DETAIL = "detail";
                var VERTICAL_SUM = "vert-sum";
                var HORIZONTAL_SUM = "horz-sum";
                var LEFT_HORZ_SUM = "left-horz-sum";
                var CRUD = "crud";
                var ADD_ROW = "add-row";
                var DEL_ROWS = "delete-rows";
                var H_BTN_HEIGHT = "24px";
                // Body height setting mode
                var DYNAMIC = "dynamic";
                var FIXED = "fixed";
                // Update mode
                var COPY_PASTE = "copyPaste";
                var EDIT = "edit";
                var STICK = "stick";
                var Connector = {};
                var _scrollWidth, emptyCells = {};
                var ExTable = /** @class */ (function () {
                    function ExTable($container, options) {
                        // dynamic or fixed
                        this.bodyHeightSetMode = DYNAMIC;
                        this.windowXOccupation = 0;
                        this.windowYOccupation = 0;
                        this.updateMode = EDIT;
                        this.pasteOverWrite = true;
                        this.stickOverWrite = true;
                        this.overflowTooltipOn = false;
                        this.$container = $container[0];
                        this.$commander = options.primaryTable ? options.primaryTable[0] : null;
                        this.$follower = options.secondaryTable ? options.secondaryTable[0] : null;
                        this.bodyRowHeight = options.bodyRowHeight;
                        this.headerHeight = options.headerHeight;
                        this.bodyHeight = options.bodyHeight;
                        this.horzSumHeaderHeight = options.horizontalSumHeaderHeight;
                        this.horzSumBodyHeight = options.horizontalSumBodyHeight;
                        this.horzSumBodyRowHeight = options.horizontalSumBodyRowHeight;
                        this.areaResize = options.areaResize;
                        this.remainSizes = !uk.util.isNullOrUndefined(options.remainSizes) ? options.remainSizes : true;
                        this.heightSetter = options.heightSetter;
                        this.bodyHeightSetMode = options.bodyHeightMode;
                        this.windowXOccupation = options.windowXOccupation;
                        this.windowYOccupation = options.windowYOccupation;
                        this.optionsCloned = options.cloned;
                        if (options.updateMode) {
                            this.updateMode = options.updateMode;
                        }
                        this.manipulatorId = options.manipulatorId;
                        this.manipulatorKey = options.manipulatorKey;
                        this.pasteOverWrite = options.pasteOverWrite;
                        this.stickOverWrite = options.stickOverWrite;
                        this.viewMode = options.viewMode;
                        this.overflowTooltipOn = !uk.util.isNullOrUndefined(options.showTooltipIfOverflow)
                            ? options.showTooltipIfOverflow : false;
                        this.determination = options.determination;
                        this.errorMessagePopup = options.errorMessagePopup;
                        this.features = options.features;
                        $.data(this.$container, internal.X_OCCUPY, this.windowXOccupation);
                        $.data(this.$container, internal.Y_OCCUPY, this.windowYOccupation);
                        helper.makeConnector();
                    }
                    ExTable.prototype.setUpdateMode = function (updateMode) {
                        this.updateMode = updateMode;
                        this.detailContent.updateMode = updateMode;
                    };
                    ExTable.prototype.setViewMode = function (mode) {
                        this.viewMode = mode;
                        this.detailContent.viewMode = mode;
                    };
                    ExTable.prototype.LeftmostHeader = function (leftmostHeader) {
                        this.leftmostHeader = this.optionsCloned ? _.cloneDeep(leftmostHeader) : leftmostHeader;
                        this.setHeaderClass(this.leftmostHeader, LEFTMOST);
                        return this;
                    };
                    ExTable.prototype.LeftmostContent = function (leftmostContent) {
                        this.leftmostContent = this.optionsCloned ? _.cloneDeep(leftmostContent) : leftmostContent;
                        this.setBodyClass(this.leftmostContent, LEFTMOST);
                        this.leftmostContent.updateMode = this.updateMode;
                        if (feature.isEnable(this.features, feature.UPDATING)) {
                            this.leftmostHeader.width = parseInt(this.leftmostHeader.width) + controls.CHECKBOX_COL_WIDTH + "px";
                            controls.addCheckBoxDef([this.leftmostHeader, this.leftmostContent]);
                        }
                        return this;
                    };
                    ExTable.prototype.MiddleHeader = function (middleHeader) {
                        this.middleHeader = this.optionsCloned ? _.cloneDeep(middleHeader) : middleHeader;
                        this.setHeaderClass(this.middleHeader, MIDDLE);
                        this.middleHeader.updateMode = this.updateMode;
                        return this;
                    };
                    ExTable.prototype.MiddleContent = function (middleContent) {
                        this.middleContent = this.optionsCloned ? _.cloneDeep(middleContent) : middleContent;
                        this.setBodyClass(this.middleContent, MIDDLE);
                        return this;
                    };
                    ExTable.prototype.DetailHeader = function (detailHeader) {
                        this.detailHeader = this.optionsCloned ? _.cloneDeep(detailHeader) : detailHeader;
                        this.setHeaderClass(this.detailHeader, DETAIL);
                        return this;
                    };
                    ExTable.prototype.DetailContent = function (detailContent) {
                        this.detailContent = this.optionsCloned ? _.cloneDeep(detailContent) : detailContent;
                        this.setBodyClass(this.detailContent, DETAIL);
                        this.detailContent.updateMode = this.updateMode;
                        this.detailContent.viewMode = this.viewMode;
                        return this;
                    };
                    ExTable.prototype.VerticalSumHeader = function (verticalSumHeader) {
                        this.verticalSumHeader = this.optionsCloned ? _.cloneDeep(verticalSumHeader) : verticalSumHeader;
                        this.setHeaderClass(this.verticalSumHeader, VERTICAL_SUM);
                        return this;
                    };
                    ExTable.prototype.VerticalSumContent = function (verticalSumContent) {
                        this.verticalSumContent = this.optionsCloned ? _.cloneDeep(verticalSumContent) : verticalSumContent;
                        this.setBodyClass(this.verticalSumContent, VERTICAL_SUM);
                        return this;
                    };
                    ExTable.prototype.LeftHorzSumHeader = function (leftHorzSumHeader) {
                        this.leftHorzSumHeader = this.optionsCloned ? _.cloneDeep(leftHorzSumHeader) : leftHorzSumHeader;
                        this.setHeaderClass(this.leftHorzSumHeader, LEFT_HORZ_SUM);
                        return this;
                    };
                    ExTable.prototype.LeftHorzSumContent = function (leftHorzSumContent) {
                        this.leftHorzSumContent = this.optionsCloned ? _.cloneDeep(leftHorzSumContent) : leftHorzSumContent;
                        this.setBodyClass(this.leftHorzSumContent, LEFT_HORZ_SUM);
                        return this;
                    };
                    ExTable.prototype.HorizontalSumHeader = function (horizontalSumHeader) {
                        this.horizontalSumHeader = this.optionsCloned ? _.cloneDeep(horizontalSumHeader) : horizontalSumHeader;
                        this.setHeaderClass(this.horizontalSumHeader, HORIZONTAL_SUM);
                        return this;
                    };
                    ExTable.prototype.HorizontalSumContent = function (horizontalSumContent) {
                        this.horizontalSumContent = this.optionsCloned ? _.cloneDeep(horizontalSumContent) : horizontalSumContent;
                        this.setBodyClass(this.horizontalSumContent, HORIZONTAL_SUM);
                        return this;
                    };
                    ExTable.prototype.setHeaderClass = function (options, part) {
                        options.tableClass = HEADER_TBL_PRF + part;
                        options.containerClass = HEADER_PRF + part;
                        if (uk.util.isNullOrUndefined(options.showTooltipIfOverflow)) {
                            options.overflowTooltipOn = this.overflowTooltipOn;
                        }
                    };
                    ExTable.prototype.setBodyClass = function (options, part) {
                        options.tableClass = BODY_TBL_PRF + part;
                        options.containerClass = BODY_PRF + part;
                        if (uk.util.isNullOrUndefined(options.showTooltipIfOverflow)) {
                            options.overflowTooltipOn = this.overflowTooltipOn;
                        }
                    };
                    ExTable.prototype.getChartRuler = function () {
                        var self = this;
                        return new nts.uk.ui.chart.Ruler(helper.getMainTable(self.$container));
                    };
                    /**
                     * Create.
                     */
                    ExTable.prototype.create = function () {
                        var self = this;
                        var left = "0px";
                        var top = "0px";
                        if (!self.satisfyPrebuild())
                            return;
                        self.headers = _.filter([self.leftmostHeader, self.middleHeader, self.detailHeader, self.verticalSumHeader], function (h) {
                            return !uk.util.isNullOrUndefined(h);
                        });
                        self.bodies = _.filter([self.leftmostContent, self.middleContent, self.detailContent, self.verticalSumContent], function (b) {
                            return !uk.util.isNullOrUndefined(b);
                        });
                        // Get part widths
                        var widthParts, gridHeight;
                        storage.area.getPartWidths(self.$container).ifPresent(function (parts) {
                            widthParts = JSON.parse(parts);
                            return null;
                        });
                        // Get grid height
                        storage.tableHeight.get(self.$container).ifPresent(function (height) {
                            gridHeight = JSON.parse(height);
                            return null;
                        });
                        self.$container.classList.add(NAMESPACE);
                        self.$container.tabIndex = -1;
                        $.data(self.$container, NAMESPACE, self);
                        var pTable = $.data(self.$container, NAMESPACE);
                        pTable.owner = { headers: [], bodies: [],
                            find: function (name, where) {
                                var o = this;
                                var elm = o[where].filter(function (e, i) { return e.classList.contains(name); });
                                if (!elm || elm.length === 0)
                                    return null;
                                return elm;
                            } };
                        var scrollWidth = helper.getScrollWidth();
                        var headerWrappers = [], bodyWrappers = [];
                        var $frag = document.createDocumentFragment(), $detailHeader, $detailBody;
                        for (var i = 0; i < self.headers.length; i++) {
                            if (!uk.util.isNullOrUndefined(self.headers[i])) {
                                self.headers[i].overflow = "hidden";
                                self.headers[i].height = self.headerHeight;
                                self.headers[i].isHeader = true;
                                self.headers[i].determination = self.determination;
                                self.setWrapperWidth(self.headers[i], widthParts);
                                var $headerWrapper = render.createWrapper("0px", left, self.headers[i]);
                                if (!uk.util.isNullOrUndefined($headerWrapper.style.maxWidth)
                                    && parseFloat(self.headers[i].width) > parseFloat($headerWrapper.style.maxWidth)) {
                                    self.headers[i].width = $headerWrapper.style.maxWidth;
                                }
                                pTable.owner.headers.push($headerWrapper);
                                $headerWrapper.classList.add(HEADER);
                                $frag.appendChild($headerWrapper);
                                render.process($headerWrapper, self.headers[i], false, self.$container);
                                left = (parseInt(left) + parseInt(self.headers[i].width) + DISTANCE) + "px";
                                top = (parseInt(self.headers[i].height) + DISTANCE) + "px";
                                headerWrappers.push($headerWrapper);
                                if (self.headers[i].containerClass === HEADER_PRF + DETAIL) {
                                    $detailHeader = $headerWrapper;
                                }
                            }
                        }
                        left = "0px";
                        for (var i = 0; i < self.bodies.length; i++) {
                            var $bodyWrapper = void 0;
                            if (!uk.util.isNullOrUndefined(self.bodies[i])) {
                                self.bodies[i].rowHeight = self.bodyRowHeight;
                                self.bodies[i].height = gridHeight ? (parseFloat(gridHeight) + "px") : self.bodyHeight;
                                self.bodies[i].width = self.headers[i].width;
                                self.bodies[i].determination = self.determination;
                                self.bodies[i].errorMessagePopup = self.errorMessagePopup;
                                self.setWrapperWidth(self.bodies[i], widthParts);
                                $bodyWrapper = render.createWrapper(top, left, self.bodies[i]);
                                pTable.owner.bodies.push($bodyWrapper);
                                $frag.appendChild($bodyWrapper);
                                if (i === self.bodies.length - 1 && !uk.util.isNullOrUndefined($bodyWrapper)) {
                                    self.bodies[i].overflow = "scroll";
                                    self.bodies[i].width = (parseFloat($bodyWrapper.style.width) + scrollWidth) + "px";
                                    self.bodies[i].height = (parseFloat($bodyWrapper.style.height) + scrollWidth) + "px";
                                    if (!uk.util.isNullOrUndefined($bodyWrapper.style.maxWidth)) {
                                        $bodyWrapper.style.maxWidth = (parseFloat($bodyWrapper.style.maxWidth) + scrollWidth) + "px";
                                    }
                                    scroll.syncDoubDirVerticalScrolls(_.concat(bodyWrappers, $bodyWrapper));
                                    scroll.bindVertWheel($bodyWrapper, true);
                                }
                                else if (i > 0 && i < self.bodies.length - 1) {
                                    self.bodies[i].overflowX = "scroll";
                                    self.bodies[i].overflowY = "hidden";
                                    self.bodies[i].height = (parseFloat($bodyWrapper.style.height) + scrollWidth) + "px";
                                    scroll.bindVertWheel($bodyWrapper);
                                }
                                else {
                                    scroll.bindVertWheel($bodyWrapper);
                                }
                                render.process($bodyWrapper, self.bodies[i], false, self.$container);
                                left = (parseInt(left) + parseInt(self.bodies[i].width) + DISTANCE) + "px";
                                if (self.bodies[i].containerClass !== BODY_PRF + DETAIL) {
                                    scroll.syncHorizontalScroll(headerWrappers[i], $bodyWrapper);
                                }
                                else {
                                    $detailBody = $bodyWrapper;
                                }
                                bodyWrappers.push($bodyWrapper);
                                if (feature.isEnable(self.headers[i].features, feature.COLUMN_RESIZE)) {
                                    new resize.ColumnAdjuster(headerWrappers[i].find("table"), $bodyWrapper.find("table")).handle();
                                }
                            }
                        }
                        self.createHorzSums(pTable, $detailHeader, $detailBody, $frag);
                        self.setupCrudArea();
                        self.$container.appendChild($frag);
                        self.generalSettings(headerWrappers, bodyWrappers);
                    };
                    /**
                     * Create horizontal sums.
                     */
                    ExTable.prototype.createHorzSums = function (table, $detailHeader, $detailContent, $frag) {
                        var self = this;
                        //            let $detailHeader = self.$container.querySelector("." + HEADER_PRF + DETAIL);
                        //            let $detailContent = self.$container.querySelector("." + BODY_PRF + DETAIL);
                        var headerTop = parseFloat($detailHeader.style.height) + parseFloat($detailContent.style.height) + DISTANCE + helper.getScrollWidth() + SPACE;
                        var bodyTop = headerTop + parseFloat(self.horzSumHeaderHeight) + DISTANCE + "px";
                        var sumPosLeft = $detailHeader.style.left;
                        var leftHorzWidth = parseInt(sumPosLeft) - DISTANCE;
                        var $leftSumHeaderWrapper, $leftSumContentWrapper, $sumHeaderWrapper, $sumContentWrapper;
                        // Items summary
                        if (self.leftHorzSumHeader) {
                            self.leftHorzSumHeader.height = self.horzSumHeaderHeight;
                            self.leftHorzSumHeader.width = leftHorzWidth + "px";
                            self.leftHorzSumHeader.overflow = "hidden";
                            self.leftHorzSumHeader.isHeader = true;
                            $leftSumHeaderWrapper = render.createWrapper(headerTop + "px", "0xp", self.leftHorzSumHeader);
                            table.owner.headers.push($leftSumHeaderWrapper);
                            $leftSumHeaderWrapper.classList.add(HEADER);
                            $frag.appendChild($leftSumHeaderWrapper);
                            render.process($leftSumHeaderWrapper, self.leftHorzSumHeader, false, self.$container);
                        }
                        if (self.leftHorzSumContent) {
                            self.leftHorzSumContent.rowHeight = self.horzSumBodyRowHeight;
                            self.leftHorzSumContent.height = parseFloat(self.horzSumBodyHeight) + helper.getScrollWidth() + "px";
                            self.leftHorzSumContent.width = leftHorzWidth + "px";
                            $leftSumContentWrapper = render.createWrapper(bodyTop, "0px", self.leftHorzSumContent);
                            table.owner.bodies.push($leftSumContentWrapper);
                            self.leftHorzSumContent.overflowX = "scroll";
                            self.leftHorzSumContent.overflowY = "hidden";
                            $frag.appendChild($leftSumContentWrapper);
                            render.process($leftSumContentWrapper, self.leftHorzSumContent, false, self.$container);
                            scroll.bindVertWheel($leftSumContentWrapper);
                        }
                        // Main summary
                        if (self.horizontalSumHeader) {
                            self.horizontalSumHeader.height = self.horzSumHeaderHeight;
                            self.horizontalSumHeader.width = $detailHeader.style.width;
                            self.horizontalSumHeader.overflow = "hidden";
                            self.horizontalSumHeader.isHeader = true;
                            $sumHeaderWrapper = render.createWrapper(headerTop + "px", sumPosLeft, self.horizontalSumHeader);
                            table.owner.headers.push($sumHeaderWrapper);
                            $sumHeaderWrapper.classList.add(HEADER);
                            $frag.appendChild($sumHeaderWrapper);
                            render.process($sumHeaderWrapper, self.horizontalSumHeader, false, self.$container);
                        }
                        if (self.horizontalSumContent) {
                            self.horizontalSumContent.rowHeight = self.horzSumBodyRowHeight;
                            self.horizontalSumContent.height = parseInt(self.horzSumBodyHeight) + helper.getScrollWidth() + "px";
                            var detailOverflow = $detailContent.style.overflow;
                            var horzSumWidth = parseFloat($detailContent.style.width)
                                + ((!uk.util.isNullOrUndefined(detailOverflow) && !_.isEmpty(detailOverflow) && detailOverflow !== "hidden")
                                    ? 0 : helper.getScrollWidth());
                            self.horizontalSumContent.width = horzSumWidth + "px";
                            $sumContentWrapper = render.createWrapper(bodyTop, sumPosLeft, self.horizontalSumContent);
                            table.owner.bodies.push($sumContentWrapper);
                            self.horizontalSumContent.overflow = "scroll";
                            $frag.appendChild($sumContentWrapper);
                            render.process($sumContentWrapper, self.horizontalSumContent, false, self.$container);
                            scroll.syncHorizontalScroll($leftSumHeaderWrapper, $leftSumContentWrapper);
                            scroll.syncDoubDirVerticalScrolls([$leftSumContentWrapper, $sumContentWrapper]);
                            scroll.bindVertWheel($sumContentWrapper, true);
                        }
                        if (self.$commander) {
                            self.$commander.addXEventListener(events.MOUSEIN_COLUMN, function (evt) {
                                var colIndex = evt.detail;
                                helper.highlightColumn(self.$container, colIndex);
                            });
                            self.$commander.addXEventListener(events.MOUSEOUT_COLUMN, function (evt) {
                                var colIndex = evt.detail;
                                helper.unHighlightColumn(self.$container, colIndex);
                            });
                            var pHorzHeader = self.$commander.querySelector("." + HEADER_PRF + HORIZONTAL_SUM);
                            var pHorzBody = self.$commander.querySelector("." + BODY_PRF + HORIZONTAL_SUM);
                            var cmdTbls = Array.prototype.slice.call(self.$commander.querySelectorAll("div[class*='" + DETAIL + "']"));
                            var stream = _.concat(cmdTbls, pHorzHeader, pHorzBody, $detailHeader, $detailContent, $sumHeaderWrapper, $sumContentWrapper);
                            scroll.syncDoubDirHorizontalScrolls(stream);
                        }
                        else if (self.$follower) {
                        }
                        else {
                            scroll.syncDoubDirHorizontalScrolls([$detailHeader, $detailContent, $sumHeaderWrapper, $sumContentWrapper]);
                        }
                    };
                    /**
                     * Setup crud area.
                     */
                    ExTable.prototype.setupCrudArea = function () {
                        var self = this;
                        var updateF = feature.find(self.features, feature.UPDATING);
                        if (updateF) {
                            var $area = document.createElement("div");
                            $area.className = NAMESPACE + "-" + CRUD;
                            var $rowAdd = document.createElement("button");
                            $rowAdd.className = NAMESPACE + "-" + ADD_ROW;
                            $rowAdd.addXEventListener(events.CLICK_EVT, function () {
                                update.insertNewRow(self.$container);
                            });
                            $area.appendChild($rowAdd);
                            var $rowDel = document.createElement("button");
                            $rowDel.className = NAMESPACE + "-" + DEL_ROWS;
                            $rowDel.addXEventListener(events.CLICK_EVT, function () {
                                update.deleteRows(self.$container);
                            });
                            $area.appendChild($rowDel);
                            var dftRowAddTxt = ui_3.toBeResource.addNewRow;
                            var dftRowDelTxt = ui_3.toBeResource.deleteRow;
                            if (updateF.addNew) {
                                $rowAdd.classList.add(updateF.addNew.buttonClass || "proceed");
                                $rowAdd.textContent = updateF.addNew.buttonText || dftRowAddTxt;
                            }
                            else {
                                $rowAdd.classList.add("proceed");
                                $rowAdd.textContent = dftRowAddTxt;
                            }
                            if (updateF.delete) {
                                $rowDel.classList.add(updateF.delete.buttonClass || "danger");
                                $rowDel.textContent = updateF.delete.buttonText || dftRowDelTxt;
                            }
                            else {
                                $rowDel.classList.add("danger");
                                $rowDel.textContent = dftRowDelTxt;
                            }
                            self.$container.insertAdjacentElement("beforebegin", $area);
                        }
                    };
                    /**
                     * General settings.
                     */
                    ExTable.prototype.generalSettings = function (headerWrappers, bodyWrappers) {
                        var self = this;
                        self.$container.addXEventListener(events.BODY_HEIGHT_CHANGED, resize.onBodyHeightChanged.bind(self));
                        //            if (self.heightSetter && self.heightSetter.showBodyHeightButton) {
                        //
                        //                let $lastHeader = headerWrappers[headerWrappers.length - 1];
                        //                let btnPosTop = $lastHeader.height() - parseInt(H_BTN_HEIGHT) - DISTANCE;
                        //                let btnPosLeft = parseInt($lastHeader.css("left")) + $lastHeader.outerWidth();
                        //                let $heightSetBtn = $("<button/>").addClass(H_BTN_CLS)
                        //                    .css({ position: "absolute", height: H_BTN_HEIGHT, top: btnPosTop + "px", left: btnPosLeft + "px" })
                        //                    .text("H").on(events.CLICK_EVT, self.heightSetter.click);
                        //                $lastHeader.after($heightSetBtn);
                        //            }
                        resize.fitWindowWidth(self.$container);
                        window.addXEventListener(events.RESIZE, resize.fitWindowWidth.bind(self, self.$container));
                        var horzSumExists = !uk.util.isNullOrUndefined(self.horizontalSumHeader);
                        if (self.bodyHeightSetMode === DYNAMIC) {
                            resize.fitWindowHeight(self.$container, bodyWrappers, horzSumExists);
                            window.addXEventListener(events.RESIZE, resize.fitWindowHeight.bind(self, self.$container, bodyWrappers, horzSumExists));
                        }
                        else {
                            var cHeight_1 = 0;
                            //                let stream = self.$container.querySelectorAll("div[class*='" + DETAIL + "'], div[class*='" + LEFT_HORZ_SUM + "']");
                            var stream_1 = [];
                            _.forEach(headerWrappers, function (hw) {
                                if (hw.className.split(' ').some(function (c) { return /.*-detail/.test(c) || /.*-left-horz-sum/.test(c); })) {
                                    stream_1.push(hw);
                                }
                            });
                            Array.prototype.slice.call(stream_1).forEach(function (e) {
                                cHeight_1 += parseInt(e.style.height);
                            });
                            if (stream_1.length === 4) {
                                cHeight_1 += (SPACE + DISTANCE);
                            }
                            self.$container.style.height = (cHeight_1 + SPACE) + "px";
                        }
                        if (self.$follower) {
                            self.$follower.addXEventListener(events.COMPLETED, function () {
                                if (self.areaResize) {
                                    new resize.AreaAdjuster(self.$container, headerWrappers, bodyWrappers, self.$follower).handle();
                                    self.$container.addXEventListener(events.AREA_RESIZE_END, resize.onAreaComplete.bind(self));
                                }
                                var formerWidth = 0, latterWidth = 0;
                                _.forEach(headerWrappers, function (header) {
                                    if (header.classList.contains(HEADER_PRF + LEFTMOST)) {
                                        formerWidth += parseFloat(header.style.width);
                                    }
                                    else if (header.classList.contains(HEADER_PRF + MIDDLE)) {
                                        formerWidth += parseFloat(header.style.width) + DISTANCE;
                                    }
                                    else if (header.classList.contains(HEADER_PRF + DETAIL)) {
                                        latterWidth += parseFloat(header.style.width);
                                    }
                                });
                                var $lm = self.$follower.querySelectorAll("div[class*='" + LEFTMOST + "']");
                                var diff = formerWidth - parseInt($lm[0].style.width);
                                for (var i = 0; i < $lm.length; i++) {
                                    $lm[i].style.width = formerWidth + "px";
                                }
                                var $depDetailHeader = self.$follower.querySelector("." + HEADER_PRF + DETAIL);
                                $depDetailHeader.style.width = latterWidth + "px";
                                var $depDetail = self.$follower.querySelector("." + BODY_PRF + DETAIL);
                                var left = parseInt($depDetail.style.left) + diff;
                                $depDetailHeader.style.left = left + "px";
                                $depDetail.style.left = left + "px";
                                $depDetail.style.width = (latterWidth + helper.getScrollWidth()) + "px";
                                var depLmHeader = _.filter($lm, function (e) {
                                    return e.classList.contains(HEADER_PRF + LEFTMOST);
                                });
                                resize.saveSizes(self.$follower, depLmHeader[0], $depDetailHeader, formerWidth, latterWidth);
                            });
                        }
                        else if (self.areaResize) {
                            new resize.AreaAdjuster(self.$container, headerWrappers, bodyWrappers, self.$follower).handle();
                            self.$container.addXEventListener(events.AREA_RESIZE_END, resize.onAreaComplete.bind(self));
                        }
                        if (self.remainSizes) {
                            storage.area.init(self.$container, headerWrappers);
                            storage.tableHeight.init(self.$container);
                        }
                        // Edit done
                        update.editDone(self.$container);
                        document.addXEventListener(events.CLICK_EVT, function (evt) {
                            update.outsideClick(self.$container, evt.target);
                        });
                        events.onModify(self.$container);
                        selection.checkUp(self.$container);
                        copy.on(self.$container.querySelector("." + BODY_PRF + DETAIL), self.updateMode);
                        self.$container.addXEventListener(events.OCCUPY_UPDATE, function (evt) {
                            if (self.bodyHeightSetMode === FIXED)
                                return;
                            var reserve = evt.detail;
                            if (reserve && reserve.x) {
                                $.data(self.$container, internal.X_OCCUPY, reserve.x);
                                resize.fitWindowWidth(self.$container);
                            }
                            if (reserve && reserve.y) {
                                $.data(self.$container, internal.Y_OCCUPY, reserve.y);
                                resize.fitWindowHeight(self.$container, bodyWrappers, horzSumExists);
                            }
                        });
                        var containerWidth = headerWrappers.map(function (h) { return parseFloat(h.style.width); }).reduce(function (a, v) { return a + v; });
                        self.$container.style.width = (containerWidth + 34) + "px";
                        if (self.$commander) {
                            events.trigger(self.$container, events.COMPLETED);
                        }
                        if (self.errorMessagePopup) {
                            var errPopup = document.createElement("div");
                            errPopup.className = errors.ERR_MSG_CLS;
                            $.data(self.$container, internal.ERR_POPUP, errPopup);
                        }
                    };
                    /**
                     * Satisfy prebuild.
                     */
                    ExTable.prototype.satisfyPrebuild = function () {
                        if (uk.util.isNullOrUndefined(this.$container) || uk.util.isNullOrUndefined(this.headerHeight)
                            || uk.util.isNullOrUndefined(this.bodyHeight) || uk.util.isNullOrUndefined(this.bodyRowHeight)
                            || uk.util.isNullOrUndefined(this.horzSumBodyRowHeight))
                            return false;
                        return true;
                    };
                    /**
                     * Set wrapper width.
                     */
                    ExTable.prototype.setWrapperWidth = function (options, widthParts) {
                        if (!widthParts)
                            return;
                        var width = widthParts[options.containerClass];
                        if (!uk.util.isNullOrUndefined(width)) {
                            options.width = width + "px";
                        }
                    };
                    return ExTable;
                }());
                exTable_1.ExTable = ExTable;
                var render;
                (function (render) {
                    render.CELL_CLS = "xcell";
                    render.HIGHLIGHT_CLS = "highlight";
                    render.CHILD_CELL_CLS = "child-cell";
                    render.COL_ICON_CLS = "column-icon";
                    render.EMPTY_CLS = "empty";
                    /**
                     * Process.
                     */
                    function process($container, options, isUpdate, $exTable) {
                        var levelStruct = synthesizeHeaders(options);
                        options.levelStruct = levelStruct;
                        if (isUpdate && !uk.util.isNullOrUndefined($container.style.maxWidth) && !_.isEmpty($container.style.maxWidth)) {
                            var maxWidth = calcWidth(options.columns);
                            if (!options.isHeader && options.overflow === "scroll") {
                                $container.style.maxWidth = (maxWidth + helper.getScrollWidth()) + "px";
                            }
                            else {
                                $container.style.maxWidth = maxWidth + "px";
                            }
                        }
                        if (options.isHeader) {
                            if (Object.keys(levelStruct).length > 1) {
                                groupHeader($container, options, isUpdate);
                                return;
                            }
                        }
                        else {
                            options.float = options.float === false ? false : true;
                        }
                        table($container, options, isUpdate, $exTable);
                        feature.activate($container, options);
                    }
                    render.process = process;
                    /**
                     * Group header.
                     */
                    function groupHeader($container, options, isUpdate) {
                        var $table = selector.create("table").html("<tbody></tbody>").addClass(options.tableClass)
                            .css({ position: "relative", "table-layout": "fixed", width: "100%",
                            /**"border-collapse": "separate",**/ "user-select": "none" }).getSingle();
                        $container.appendChild($table);
                        var $tbody = $table.getElementsByTagName("tbody")[0];
                        if (!isUpdate) {
                            $container.style.height = options.height;
                            $container.style.width = options.width;
                        }
                        if (!uk.util.isNullOrUndefined(options.overflow))
                            $container.style.overflow = options.overflow;
                        else if (!uk.util.isNullOrUndefined(options.overflowX) && !uk.util.isNullOrUndefined(options.overflowY)) {
                            $container.style.overflowX = options.overflowX;
                            $container.style.overflowY = options.overflowY;
                        }
                        var $colGroup = document.createElement("colgroup");
                        $table.insertBefore($colGroup, $tbody);
                        generateColGroup($colGroup, options.columns);
                        var painter = new GroupHeaderPainter(options);
                        painter.rows($tbody);
                    }
                    /**
                     * Generate column group.
                     */
                    function generateColGroup($colGroup, columns) {
                        _.forEach(columns, function (col) {
                            if (!uk.util.isNullOrUndefined(col.group)) {
                                generateColGroup($colGroup, col.group);
                                return;
                            }
                            var $col = document.createElement("col");
                            $col.style.width = col.width;
                            $colGroup.appendChild($col);
                            if (col.visible === false)
                                $col.style.display = "none";
                        });
                    }
                    /**
                     * Table.
                     */
                    function table($container, options, isUpdate, $exTable) {
                        var $table = document.createElement("table");
                        $table.innerHTML = "<tbody></tbody>";
                        $table.className = options.tableClass;
                        $table.style.position = "relative";
                        $table.style.tableLayout = "fixed";
                        $table.style.width = "100%";
                        //            $table.style.borderCollapse = "separate";
                        $table.style.userSelect = "none";
                        $container.appendChild($table);
                        var $tbody = $table.getElementsByTagName("tbody")[0];
                        if (!isUpdate) {
                            $container.style.height = options.height;
                            $container.style.width = options.width;
                        }
                        if (!uk.util.isNullOrUndefined(options.overflow))
                            $container.style.overflow = options.overflow;
                        else if (!uk.util.isNullOrUndefined(options.overflowX) && !uk.util.isNullOrUndefined(options.overflowY)) {
                            $container.style.overflowX = options.overflowX;
                            $container.style.overflowY = options.overflowY;
                        }
                        var $colGroup = document.createElement("colgroup");
                        $table.insertBefore($colGroup, $tbody);
                        generateColGroup($colGroup, options.columns);
                        var dataSource;
                        if (!uk.util.isNullOrUndefined(options.dataSource)) {
                            dataSource = options.dataSource;
                        }
                        else {
                            var item_1 = {};
                            _.forEach(options.columns, function (col) {
                                item_1[col.key] = col.headerText;
                            });
                            dataSource = [item_1];
                        }
                        begin($container, dataSource, options, $exTable);
                    }
                    render.table = table;
                    /**
                     * Begin.
                     */
                    function begin($container, dataSource, options, $exTable) {
                        if (options.float) {
                            var cloud = new intan.Cloud($container, dataSource, options, $exTable);
                            $.data($container, internal.TANGI, cloud);
                            cloud.renderRows(true);
                            return;
                        }
                        normal($container, dataSource, options, $exTable);
                    }
                    render.begin = begin;
                    /**
                     * Normal.
                     */
                    function normal($container, dataSource, options, $exTable) {
                        var rowConfig = { css: { height: options.rowHeight } };
                        var headerRowHeightFt;
                        if (options.isHeader) {
                            headerRowHeightFt = feature.find(options.features, feature.HEADER_ROW_HEIGHT);
                        }
                        var painter = new Painter($container, options, $exTable);
                        $.data($container, internal.CANON, { _origDs: _.cloneDeep(dataSource), dataSource: dataSource, primaryKey: options.primaryKey, painter: painter });
                        var $tbody = $container.querySelector("tbody");
                        _.forEach(dataSource, function (item, index) {
                            if (!uk.util.isNullOrUndefined(headerRowHeightFt)) {
                                rowConfig = { css: { height: headerRowHeightFt.rows[index] } };
                            }
                            $tbody.appendChild(painter.row(item, rowConfig, index));
                        });
                    }
                    render.normal = normal;
                    /**
                     * Synthesize headers.
                     */
                    function synthesizeHeaders(options) {
                        var level = {};
                        peelStruct(options.columns, level, 0);
                        var rowCount = Object.keys(level).length;
                        if (rowCount > 1) {
                            _.forEach(Object.keys(level), function (key) {
                                _.forEach(level[key], function (col) {
                                    if (uk.util.isNullOrUndefined(col.colspan)) {
                                        col.rowspan = rowCount - parseInt(key);
                                    }
                                });
                            });
                        }
                        return level;
                    }
                    render.synthesizeHeaders = synthesizeHeaders;
                    /**
                     * Peel struct.
                     */
                    function peelStruct(columns, level, currentLevel) {
                        var colspan = 0, noGroup = 0;
                        _.forEach(columns, function (col) {
                            var clonedCol = _.clone(col);
                            var colCount = 0;
                            if (!uk.util.isNullOrUndefined(col.group)) {
                                colCount = col.group.length;
                                noGroup++;
                                var ret = peelStruct(col.group, level, currentLevel + 1);
                                if (!uk.util.isNullOrUndefined(ret)) {
                                    colCount += ret;
                                }
                                clonedCol.colspan = colCount;
                            }
                            if (uk.util.isNullOrUndefined(level[currentLevel])) {
                                level[currentLevel] = [];
                            }
                            level[currentLevel].push(clonedCol);
                            colspan += colCount;
                        });
                        return colspan !== 0 ? (colspan - noGroup) : undefined;
                    }
                    var Conditional = /** @class */ (function () {
                        function Conditional(options) {
                            this.options = options;
                            var columns = helper.classifyColumns(options);
                            this.visibleColumns = columns.visibleColumns;
                            this.hiddenColumns = columns.hiddenColumns;
                            this.visibleColumnsMap = helper.getColumnsMap(this.visibleColumns);
                            this.hiddenColumnsMap = helper.getColumnsMap(this.hiddenColumns);
                        }
                        return Conditional;
                    }());
                    var Painter = /** @class */ (function (_super) {
                        __extends(Painter, _super);
                        function Painter($container, options, $exTable) {
                            var _this = _super.call(this, options) || this;
                            _this.multilineCountInCell = 2;
                            _this.$container = $container;
                            _this.$exTable = $exTable;
                            if (!uk.util.isNullOrUndefined(options.levelStruct)) {
                                _this.columnsMap = helper.columnsMapFromStruct(options.levelStruct);
                            }
                            else {
                                _this.columnsMap = _.groupBy(options.columns, "key");
                            }
                            _this.preRow = document.createElement("tr");
                            _this.preCell = document.createElement("td");
                            _this.preDiv = document.createElement("div");
                            return _this;
                        }
                        Painter.prototype.styleInnerCell = function (idx, innerCount) {
                            var self = this;
                            var divStyle = "", borderStyle = "solid 1px transparent", dashedBorder = "dashed 1px #AAB7B8", incellHeight = (parseInt(self.options.rowHeight) - 2) / self.multilineCountInCell, incellCountInRow = Math.ceil(innerCount / self.multilineCountInCell);
                            //                divStyle += `; border-top: ${borderStyle}; border-right: ${borderStyle}`;
                            if (idx < incellCountInRow * (self.multilineCountInCell - 1)) {
                                divStyle += "; border-bottom: " + dashedBorder;
                            }
                            var incellRowIdx = Math.floor(idx / incellCountInRow);
                            divStyle += "; top: " + (incellRowIdx === 0 ? 0 : incellRowIdx + incellHeight) + "px";
                            if (idx % incellCountInRow === 0) {
                                //                    divStyle += `; border-left: ${borderStyle}`;
                            }
                            else {
                                divStyle += "; border-left: " + dashedBorder;
                            }
                            if (incellRowIdx === 0) {
                                divStyle += "; height: " + (incellHeight - 1) + "px;";
                            }
                            else {
                                divStyle += "; height: " + (incellHeight - 2) + "px;";
                            }
                            divStyle += "; position: absolute; \n                    left: " + (idx - incellRowIdx * incellCountInRow) * (100 / incellCountInRow) + "%;  \n                    line-height: " + (incellRowIdx === 0 ? (incellHeight - 1) : (incellHeight - 2)) + "px; \n                    width: calc(" + 100 / incellCountInRow + "% - 2px); text-align: center;";
                            return divStyle;
                        };
                        Painter.prototype.cell = function (rData, rowIdx, key) {
                            var self = this;
                            var cData = rData[key];
                            var data = cData && _.isObject(cData) && cData.constructor !== Array && _.isFunction(self.options.view) ?
                                helper.viewData(self.options.view, self.options.viewMode, cData) : cData;
                            var column = self.columnsMap[key];
                            if (uk.util.isNullOrUndefined(column))
                                return;
                            var ws = column.css && column.css.whiteSpace ? column.css.whiteSpace : "nowrap";
                            var td = self.preCell.cloneNode(true);
                            td.classList.add(render.CELL_CLS);
                            if (cData && _.isObject(cData) && _.every(Object.keys(cData), function (k) { return cData[k] === null; })) {
                                td.classList.add(render.EMPTY_CLS);
                                var cols = emptyCells[rowIdx];
                                if (!cols)
                                    emptyCells[rowIdx] = [key];
                                else if (!_.some(cols, function (c) { return c === key; }))
                                    emptyCells[rowIdx].push(key);
                            }
                            $.data(td, internal.VIEW, rowIdx + "-" + key);
                            var tdStyle = "";
                            tdStyle += "; border-width: 1px; overflow: hidden; white-space: "
                                + ws + ";"; //"; position: relative;";
                            self.highlight(td);
                            self.highlightAround(td);
                            if (!self.visibleColumnsMap[key])
                                tdStyle += "; display: none;"; //td.style.display = "none";
                            if (!uk.util.isNullOrUndefined(data) && data.constructor === Array) {
                                _.forEach(data, function (item, idx) {
                                    var divStyle = "";
                                    var div = self.preDiv.cloneNode(true);
                                    div.classList.add(render.CHILD_CELL_CLS);
                                    div.innerText = uk.util.isNullOrUndefined(item) ? "" : item;
                                    divStyle = self.styleInnerCell(idx, data.length);
                                    div.style.cssText += divStyle;
                                    div.tabIndex = -1;
                                    td.appendChild(div);
                                    if (_.split(column.dataType, '/')[idx] === controls.LABEL.toLowerCase()) {
                                        div.classList.add(controls.LABEL_CLS);
                                    }
                                    if (column.handlerType) {
                                        var handler_1 = cellHandler.get(column.handlerType);
                                        if (handler_1)
                                            handler_1(div, self.options, helper.call(column.supplier, rData, rowIdx, key));
                                    }
                                    //                       cellHandler.rClick(div, column, helper.call(column.rightClick, rData, rowIdx, key));
                                    //                       spread.bindSticker(div, rowIdx, key, self.options);
                                });
                                style.detCell(self.$container, td, rowIdx, key, self.options.determination, self.$exTable);
                                tdStyle += "; position: relative; padding: 0px;";
                                td.style.cssText += tdStyle;
                                if (self.options.overflowTooltipOn)
                                    widget.textOverflow(td);
                                return td;
                            }
                            if (!uk.util.isNullOrUndefined(column.handlerType) && !self.options.isHeader) {
                                var handler_2 = cellHandler.get(column.handlerType);
                                if (!uk.util.isNullOrUndefined(handler_2)) {
                                    handler_2(td, self.options, helper.call(column.supplier, rData, rowIdx, key));
                                }
                            }
                            if (self.options.isHeader) {
                                if (!uk.util.isNullOrUndefined(column.icon) && column.icon.for === "header") {
                                    var icon = document.createElement("span");
                                    icon.className = render.COL_ICON_CLS + " " + column.icon.class;
                                    tdStyle += "; padding-left: " + column.icon.width + ";";
                                    td.appendChild(icon);
                                    if (column.icon.popup && typeof column.icon.popup === "function") {
                                        icon.style.cursor = "pointer";
                                        new widget.PopupPanel(icon, column.icon.popup, "bottom right");
                                    }
                                    var innerDiv = document.createElement("div");
                                    innerDiv.innerHTML = data;
                                    td.appendChild(innerDiv);
                                }
                                else if (!column.headerControl && helper.containsBr(data)) {
                                    td.innerHTML = data;
                                }
                                else if (!column.headerControl) {
                                    td.innerText = data;
                                }
                                controls.checkHeader(td, column, data, column.headerHandler);
                            }
                            else if (!self.options.isHeader) {
                                if (!uk.util.isNullOrUndefined(column.icon) && column.icon.for === "body") {
                                    var icon = document.createElement("span");
                                    icon.className = render.COL_ICON_CLS + " " + column.icon.class;
                                    tdStyle += "; padding-left: " + column.icon.width + ";";
                                    td.appendChild(icon);
                                }
                                else if (!column.control) {
                                    tdStyle += " text-overflow: ellipsis; -ms-text-overflow: ellipsis;";
                                    td.innerText = data;
                                }
                                controls.check(td, column, data, helper.call(column.handler, rData, rowIdx, key));
                                //                    cellHandler.rClick(td, column, helper.call(column.rightClick, rData, rowIdx, key));
                            }
                            //                spread.bindSticker(td, rowIdx , key, self.options);
                            style.detCell(self.$container, td, rowIdx, key, self.options.determination, self.$exTable);
                            td.style.cssText += tdStyle;
                            if (self.options.overflowTooltipOn)
                                widget.textOverflow(td);
                            return td;
                        };
                        Painter.prototype.row = function (data, config, rowIdx) {
                            var self = this;
                            var tr = self.preRow.cloneNode(true);
                            tr.style.height = parseInt(config.css.height) + "px";
                            var headerCellStyleFt, headerPopupFt, bodyCellStyleFt;
                            if (self.options.isHeader) {
                                headerCellStyleFt = feature.find(self.options.features, feature.HEADER_CELL_STYLE);
                                headerPopupFt = feature.find(self.options.features, feature.HEADER_POP_UP);
                            }
                            else {
                                bodyCellStyleFt = feature.find(self.options.features, feature.BODY_CELL_STYLE);
                            }
                            var onChecked = function (checked, rowIndex) {
                                var $grid = self.options.isHeader ? selector.classSiblings(self.$container, BODY_PRF + LEFTMOST)[0]
                                    : self.$container;
                                controls.tick(checked, $grid, self.options.isHeader, rowIndex);
                            };
                            if (!data[controls.CHECKED_KEY] && self.options.columns[0].key === controls.CHECKED_KEY) {
                                var td = self.preCell.cloneNode(true);
                                $.data(td, internal.VIEW, rowIdx + "-" + controls.CHECKED_KEY);
                                td.style.padding = "1px 1px";
                                td.style.textAlign = "center";
                                td.appendChild(controls.createCheckBox(self.$container, { initValue: false, onChecked: onChecked }));
                                tr.appendChild(td);
                            }
                            _.forEach(Object.keys(data), function (key, index) {
                                if (!self.visibleColumnsMap[key] && !self.hiddenColumnsMap[key])
                                    return;
                                if (key === controls.CHECKED_KEY) {
                                    var td = self.preCell.cloneNode(true);
                                    td.style.padding = "1px 1px";
                                    td.style.textAlign = "center";
                                    td.appendChild(controls.createCheckBox(self.$container, { initValue: false, onChecked: onChecked }));
                                    tr.appendChild(td);
                                    return;
                                }
                                var cell = self.cell(data, rowIdx, key);
                                tr.appendChild(cell);
                                // Styles
                                if (!uk.util.isNullOrUndefined(headerCellStyleFt)) {
                                    _.forEach(headerCellStyleFt.decorator, function (colorDef) {
                                        if (key === colorDef.columnKey) {
                                            if ((!uk.util.isNullOrUndefined(colorDef.rowId) && colorDef.rowId === rowIdx)
                                                || uk.util.isNullOrUndefined(colorDef.rowId)) {
                                                helper.addClassList(cell, colorDef.clazz);
                                                return false;
                                            }
                                        }
                                    });
                                }
                                else if (!uk.util.isNullOrUndefined(bodyCellStyleFt)) {
                                    _.forEach(bodyCellStyleFt.decorator, function (colorDef) {
                                        if (key === colorDef.columnKey && data[self.options.primaryKey] === colorDef.rowId) {
                                            var childCells = cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                                            if (!uk.util.isNullOrUndefined(colorDef.innerIdx) && childCells.length > 0) {
                                                var child = childCells[colorDef.innerIdx];
                                                helper.addClassList(child, colorDef.clazz);
                                                if (colorDef.clazz === style.HIDDEN_CLS) {
                                                    $.data(child, "hide", child.textContent);
                                                    child.innerHTML = "";
                                                }
                                            }
                                            else {
                                                helper.addClassList(cell, colorDef.clazz);
                                                if (colorDef.clazz == style.HIDDEN_CLS) {
                                                    $.data(cell, "hide", cell.innerText);
                                                    cell.innerText = "";
                                                }
                                            }
                                        }
                                    });
                                }
                                if (uk.util.isNullOrUndefined(self.columnsMap[key]))
                                    return;
                                var cellStyle = self.columnsMap[key].style;
                                if (!uk.util.isNullOrUndefined(cellStyle)) {
                                    cellStyle(new style.CellStyleParam($cell, data[key], data, rowIdx, key));
                                }
                            });
                            widget.bind(tr, rowIdx, headerPopupFt);
                            style.detColumn(self.$container, tr, rowIdx, self.options.determination, self.$exTable);
                            spread.bindRowSticker(tr, rowIdx, self.options);
                            if (!self.options.isHeader) {
                                cellHandler.rRowClick(tr, self.columnsMap, { rData: data, rowIdx: rowIdx });
                            }
                            return tr;
                        };
                        /**
                         * Highlight.
                         */
                        Painter.prototype.highlight = function (td) {
                            var self = this;
                            if (self.options.isHeader || self.options.containerClass !== BODY_PRF + DETAIL || self.options.highlight === false)
                                return;
                            var $targetContainer = self.$container;
                            //                let targetHeader = helper.firstSibling($targetContainer, self.options.containerClass.replace(BODY_PRF, HEADER_PRF));
                            var extable;
                            var horzSumHeader, horzSumContent, gen = $.data(self.$container, internal.TANGI) || $.data(self.$container, internal.CANON);
                            td.addXEventListener(events.MOUSE_OVER, function () {
                                if (_.isNil(extable)) {
                                    extable = helper.getExTableFromGrid($targetContainer);
                                }
                                var targetHeader = helper.firstSibling($targetContainer, self.options.containerClass.replace(BODY_PRF, HEADER_PRF));
                                var colIndex = helper.indexInParent(td);
                                var tr = helper.closest(td, "tr");
                                var rowIndex = helper.indexInParent(tr);
                                gen.highlightRowIndex = gen.startIndex + rowIndex;
                                gen.highlightColumnIndex = colIndex;
                                helper.addClass1n(tr.children, render.HIGHLIGHT_CLS);
                                if (!horzSumHeader || !horzSumContent) {
                                    horzSumHeader = extable.owner.find(HEADER_PRF + HORIZONTAL_SUM, "headers");
                                    if (horzSumHeader)
                                        horzSumHeader = horzSumHeader[0];
                                    horzSumContent = extable.owner.find(BODY_PRF + HORIZONTAL_SUM, "bodies");
                                    if (horzSumContent)
                                        horzSumContent = horzSumContent[0];
                                }
                                var bodies = extable.owner.bodies;
                                for (var i = 0; i < bodies.length; i++) {
                                    if (!helper.hasClass(bodies[i], BODY_PRF + LEFT_HORZ_SUM)
                                        && !helper.hasClass(bodies[i], BODY_PRF + HORIZONTAL_SUM)) {
                                        var rowElm = bodies[i].getElementsByTagName("tr")[rowIndex];
                                        if (rowElm) {
                                            helper.addClass1n(rowElm.getElementsByTagName("td"), render.HIGHLIGHT_CLS);
                                        }
                                    }
                                }
                                helper.consumeSiblings(tr, function (elm) {
                                    var tds = elm.getElementsByTagName("td");
                                    if (!tds || tds.length === 0)
                                        return;
                                    helper.addClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                });
                                _.forEach(targetHeader.getElementsByTagName("tr"), function (t) {
                                    var tds = t.getElementsByTagName("td");
                                    if (!tds || tds.length === 0)
                                        return;
                                    helper.addClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                });
                                if (horzSumHeader && horzSumHeader.style.display !== "none") {
                                    _.forEach(horzSumHeader.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.addClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                    _.forEach(horzSumContent.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.addClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                }
                                $.data(self.$container, internal.COLUMN_IN, colIndex);
                                events.trigger(helper.closest(self.$container, "." + NAMESPACE), events.MOUSEIN_COLUMN, colIndex);
                            });
                            td.addXEventListener(events.MOUSE_OUT, function () {
                                if (_.isNil(extable)) {
                                    extable = helper.getExTableFromGrid($targetContainer);
                                }
                                var targetHeader = helper.firstSibling($targetContainer, self.options.containerClass.replace(BODY_PRF, HEADER_PRF));
                                helper.removeClass1n(td, render.HIGHLIGHT_CLS);
                                var colIndex = helper.indexInParent(td);
                                var tr = helper.closest(td, "tr");
                                var rowIndex = helper.indexInParent(tr);
                                helper.removeClass1n(tr.children, render.HIGHLIGHT_CLS);
                                if (!horzSumHeader || !horzSumContent) {
                                    horzSumHeader = extable.owner.find(HEADER_PRF + HORIZONTAL_SUM, "headers");
                                    if (horzSumHeader)
                                        horzSumHeader = horzSumHeader[0];
                                    horzSumContent = extable.owner.find(BODY_PRF + HORIZONTAL_SUM, "bodies");
                                    if (horzSumContent)
                                        horzSumContent = horzSumContent[0];
                                }
                                var bodies = extable.owner.bodies;
                                for (var i = 0; i < bodies.length; i++) {
                                    if (!helper.hasClass(bodies[i], BODY_PRF + LEFT_HORZ_SUM)
                                        && !helper.hasClass(bodies[i], BODY_PRF + HORIZONTAL_SUM)) {
                                        var rowElm = bodies[i].getElementsByTagName("tr")[rowIndex];
                                        if (rowElm) {
                                            helper.removeClass1n(rowElm.getElementsByTagName("td"), render.HIGHLIGHT_CLS);
                                        }
                                    }
                                }
                                helper.consumeSiblings(tr, function (elm) {
                                    var tds = elm.getElementsByTagName("td");
                                    if (!tds || tds.length === 0)
                                        return;
                                    helper.removeClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                });
                                _.forEach(targetHeader.getElementsByTagName("tr"), function (t) {
                                    var tds = t.getElementsByTagName("td");
                                    if (!tds || tds.length === 0)
                                        return;
                                    helper.removeClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                });
                                if (horzSumHeader && horzSumHeader.style.display !== "none") {
                                    _.forEach(horzSumHeader.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.removeClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                    _.forEach(horzSumContent.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.removeClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                }
                                $.data(self.$container, internal.COLUMN_IN, -1);
                                events.trigger(helper.closest(self.$container, "." + NAMESPACE), events.MOUSEOUT_COLUMN, colIndex);
                            });
                        };
                        /**
                         * Highlight around.
                         */
                        Painter.prototype.highlightAround = function (td) {
                            var self = this;
                            if (self.options.isHeader || self.options.highlight === false)
                                return;
                            if (self.options.containerClass === BODY_PRF + MIDDLE) {
                                td.addXEventListener(events.MOUSE_OVER, function () {
                                    helper.addClass1n(td, render.HIGHLIGHT_CLS);
                                });
                                td.addXEventListener(events.MOUSE_OUT, function () {
                                    helper.removeClass1n(td, render.HIGHLIGHT_CLS);
                                });
                            }
                            if (self.options.containerClass === BODY_PRF + HORIZONTAL_SUM) {
                                var extable_1, detailHeader_1, detailBody_1;
                                td.addXEventListener(events.MOUSE_OVER, function () {
                                    var $targetContainer = self.$container;
                                    if (_.isNil(extable_1)) {
                                        extable_1 = helper.getExTableFromGrid($targetContainer);
                                    }
                                    var targetHeader = helper.firstSibling($targetContainer, self.options.containerClass.replace(BODY_PRF, HEADER_PRF));
                                    var colIndex = helper.indexInParent(td);
                                    var tr = helper.closest(td, "tr");
                                    var rowIndex = helper.indexInParent(tr);
                                    helper.addClass1n(tr.children, render.HIGHLIGHT_CLS);
                                    helper.consumeSiblings(tr, function (elm) {
                                        var tds = elm.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.addClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                    var bodies = extable_1.owner.bodies, leftHorzSumBody = bodies.filter(function (b) { return helper.hasClass(b, BODY_PRF + LEFT_HORZ_SUM); })[0];
                                    if (leftHorzSumBody) {
                                        var rowElm = leftHorzSumBody.querySelector("tr:nth-of-type(" + (rowIndex + 1) + ")");
                                        if (rowElm) {
                                            helper.addClass1n(rowElm.children, render.HIGHLIGHT_CLS);
                                        }
                                    }
                                    _.forEach(targetHeader.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.addClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                    if (!detailHeader_1) {
                                        detailHeader_1 = extable_1.owner.find(HEADER_PRF + DETAIL, "headers");
                                        if (detailHeader_1)
                                            detailHeader_1 = detailHeader_1[0];
                                    }
                                    if (!detailBody_1) {
                                        detailBody_1 = extable_1.owner.find(BODY_PRF + DETAIL, "bodies");
                                        if (detailBody_1)
                                            detailBody_1 = detailBody_1[0];
                                    }
                                    _.forEach(detailHeader_1.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.addClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                    _.forEach(detailBody_1.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.addClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                });
                                td.addXEventListener(events.MOUSE_OUT, function () {
                                    var $targetContainer = self.$container;
                                    if (_.isNil(extable_1)) {
                                        extable_1 = helper.getExTableFromGrid($targetContainer);
                                    }
                                    var targetHeader = helper.firstSibling($targetContainer, self.options.containerClass.replace(BODY_PRF, HEADER_PRF));
                                    var colIndex = helper.indexInParent(td);
                                    var tr = helper.closest(td, "tr");
                                    var rowIndex = helper.indexInParent(tr);
                                    helper.removeClass1n(tr.children, render.HIGHLIGHT_CLS);
                                    helper.consumeSiblings(tr, function (elm) {
                                        var tds = elm.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.removeClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                    var bodies = extable_1.owner.bodies, leftHorzSumBody = bodies.filter(function (b) { return helper.hasClass(b, BODY_PRF + LEFT_HORZ_SUM); })[0];
                                    if (leftHorzSumBody) {
                                        var rowElm = leftHorzSumBody.querySelector("tr:nth-of-type(" + (rowIndex + 1) + ")");
                                        if (rowElm) {
                                            helper.removeClass1n(rowElm.children, render.HIGHLIGHT_CLS);
                                        }
                                    }
                                    _.forEach(targetHeader.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.removeClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                    if (!detailHeader_1) {
                                        detailHeader_1 = extable_1.owner.find(HEADER_PRF + DETAIL, "headers");
                                        if (detailHeader_1)
                                            detailHeader_1 = detailHeader_1[0];
                                    }
                                    if (!detailBody_1) {
                                        detailBody_1 = extable_1.owner.find(BODY_PRF + DETAIL, "bodies");
                                        if (detailBody_1)
                                            detailBody_1 = detailBody_1[0];
                                    }
                                    _.forEach(detailHeader_1.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.removeClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                    _.forEach(detailBody_1.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.removeClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                });
                            }
                        };
                        return Painter;
                    }(Conditional));
                    render.Painter = Painter;
                    var GroupHeaderPainter = /** @class */ (function (_super) {
                        __extends(GroupHeaderPainter, _super);
                        function GroupHeaderPainter(options) {
                            var _this = _super.call(this, options) || this;
                            _this.levelStruct = options.levelStruct;
                            _this.columnsMap = helper.columnsMapFromStruct(_this.levelStruct);
                            return _this;
                        }
                        /**
                         * Cell.
                         */
                        GroupHeaderPainter.prototype.cell = function (text, rowIdx, cell) {
                            var self = this;
                            var $td = document.createElement("td");
                            $.data($td, internal.VIEW, rowIdx + "-" + cell.key);
                            var tdStyle = "; border-width: 1px; overflow: hidden; white-space: nowrap; border-collapse: collapse;";
                            if (!uk.util.isNullOrUndefined(cell.rowspan) && cell.rowspan > 1)
                                $td.setAttribute("rowspan", cell.rowspan);
                            if (!uk.util.isNullOrUndefined(cell.colspan) && cell.colspan > 1)
                                $td.setAttribute("colspan", cell.colspan);
                            else if (uk.util.isNullOrUndefined(cell.colspan) && !self.visibleColumnsMap[cell.key])
                                tdStyle += "; display: none;";
                            var column = self.columnsMap[cell.key];
                            if (!uk.util.isNullOrUndefined(cell.icon) && cell.icon.for === "header") {
                                var $icon = document.createElement("span");
                                $icon.className = render.COL_ICON_CLS + " " + cell.icon.class;
                                $icon.style.top = "20%";
                                tdStyle += "; padding-left: " + cell.icon.width + ";";
                                $td.appendChild($icon);
                                if (cell.icon.popup && typeof cell.icon.popup === "function") {
                                    $icon.style.cursor = "pointer";
                                    new widget.PopupPanel($icon, cell.icon.popup, "bottom right");
                                }
                                var $content = document.createElement("div");
                                $content.innerHTML = text;
                                $td.appendChild($content);
                            }
                            else if ((!column || (column && !column.headerControl)) && helper.containsBr(text)) {
                                $td.innerHTML = text;
                            }
                            else if (!column || (column && !column.headerControl)) {
                                $td.textContent = text;
                            }
                            if (column) {
                                controls.checkHeader($td, column, text, column.headerHandler);
                            }
                            $td.style.cssText += tdStyle;
                            return $td;
                        };
                        /**
                         * Rows.
                         */
                        GroupHeaderPainter.prototype.rows = function ($tbody) {
                            var self = this;
                            var height = self.options.rowHeight;
                            var headerRowHeightFt = feature.find(self.options.features, feature.HEADER_ROW_HEIGHT);
                            var headerCellStyleFt = feature.find(self.options.features, feature.HEADER_CELL_STYLE);
                            _.forEach(Object.keys(self.levelStruct), function (rowIdx) {
                                if (!uk.util.isNullOrUndefined(headerRowHeightFt)) {
                                    height = headerRowHeightFt.rows[rowIdx];
                                }
                                var $tr = document.createElement("tr");
                                $tr.style.height = height;
                                var oneLevel = self.levelStruct[rowIdx];
                                _.forEach(oneLevel, function (cell) {
                                    if (!self.visibleColumnsMap[cell.key] && !self.hiddenColumnsMap[cell.key]
                                        && uk.util.isNullOrUndefined(cell.colspan))
                                        return;
                                    var $cell = self.cell(cell.headerText, rowIdx, cell);
                                    $tr.appendChild($cell);
                                    if (!uk.util.isNullOrUndefined(headerCellStyleFt)) {
                                        _.forEach(headerCellStyleFt.decorator, function (colorDef) {
                                            if (colorDef.columnKey === cell.key) {
                                                if ((!uk.util.isNullOrUndefined(colorDef.rowId) && colorDef.rowId === rowIdx)
                                                    || uk.util.isNullOrUndefined(colorDef.rowId)) {
                                                    helper.addClassList($cell, colorDef.clazz);
                                                }
                                                return false;
                                            }
                                        });
                                    }
                                    if (uk.util.isNullOrUndefined(self.columnsMap[cell.key]))
                                        return;
                                    var cellStyle = self.columnsMap[cell.key].style;
                                    if (!uk.util.isNullOrUndefined(cellStyle)) {
                                        cellStyle(new style.CellStyleParam($cell, cell.headerText, undefined, rowIdx, cell.key));
                                    }
                                });
                                $tbody.appendChild($tr);
                            });
                        };
                        return GroupHeaderPainter;
                    }(Conditional));
                    render.GroupHeaderPainter = GroupHeaderPainter;
                    /**
                     * Extra.
                     */
                    function extra(className, height) {
                        var element = document.createElement("tr");
                        element.style.height = height + "px";
                        helper.addClass(element, "extable-" + className);
                        return element;
                    }
                    render.extra = extra;
                    /**
                     * Wrapper styles.
                     */
                    function wrapperStyles(top, left, width, height, maxWidth) {
                        var style = {
                            position: "absolute",
                            overflow: "hidden",
                            top: top,
                            left: left,
                            width: width,
                            height: height,
                            borderTop: "solid 1px #AAB7B8",
                            borderRight: "solid 1px #AAB7B8",
                            borderLeft: "solid 1px #AAB7B8"
                        };
                        if (maxWidth) {
                            style.maxWidth = maxWidth;
                            if (parseFloat(maxWidth) < parseFloat(width))
                                style.width = maxWidth;
                        }
                        return style;
                    }
                    render.wrapperStyles = wrapperStyles;
                    /**
                     * Create wrapper.
                     */
                    function createWrapper(top, left, options) {
                        var style;
                        if (options.containerClass === HEADER_PRF + DETAIL
                            || options.containerClass === BODY_PRF + DETAIL) {
                            var maxWidth = calcWidth(options.columns);
                            style = wrapperStyles(top, left, options.width, options.height, maxWidth + "px");
                        }
                        else if (options.containerClass === BODY_PRF + LEFTMOST) {
                            style = wrapperStyles(top, left, options.width, options.height);
                            style.borderBottom = "solid 1px #AAB7B8";
                        }
                        else {
                            style = wrapperStyles(top, left, options.width, options.height);
                        }
                        if (!options.isHeader) {
                            style.paddingRight = "1px";
                        }
                        return selector.create("div").data(internal.EX_PART, options.containerClass)
                            .addClass(options.containerClass)
                            .css(style).getSingle();
                    }
                    render.createWrapper = createWrapper;
                    /**
                     * CalcWidth.
                     */
                    function calcWidth(columns) {
                        var width = 0;
                        columns.forEach(function (c, i) {
                            if (c.group) {
                                width += calcWidth(c.group);
                                return;
                            }
                            width += parseFloat(c.width);
                        });
                        return width;
                    }
                    render.calcWidth = calcWidth;
                    /**
                     * Grid cell.
                     */
                    function gridCell($grid, rowIdx, columnKey, innerIdx, valueObj, styleMaker) {
                        var $exTable = helper.closest($grid, "." + NAMESPACE);
                        var x = helper.getExTableFromGrid($grid);
                        var updateMode = x.updateMode;
                        var $cell = selection.cellAt($grid, rowIdx, columnKey);
                        if ($cell === intan.NULL)
                            return;
                        var origDs = helper.getOrigDS($grid);
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        var viewFn = gen.painter.options.view;
                        var viewMode = gen.painter.options.viewMode;
                        var value = valueObj;
                        var fields = gen.painter.options.fields;
                        if (_.isFunction(viewFn)) {
                            value = helper.viewData(viewFn, viewMode, valueObj);
                        }
                        var touched, backStyle, cStyle;
                        var $childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                        if (styleMaker && _.isFunction(styleMaker)) {
                            var style_1 = styleMaker(rowIdx, columnKey, innerIdx, valueObj);
                            if (style_1 && $childCells.length === 0) {
                                if (style_1.class)
                                    helper.addClass($cell, style_1.class);
                                else
                                    $cell.style.color = style_1.textColor;
                            }
                            else if (style_1) {
                                if (style_1.class) {
                                    helper.addClass($childCells, style_1.class);
                                }
                                else {
                                    _.forEach($childCells, function (c) {
                                        c.style.color = style_1.textColor;
                                    });
                                }
                            }
                            makeUp($grid, rowIdx, columnKey, style_1);
                        }
                        else if (styleMaker === true) {
                            var cellStyles = $.data($grid, internal.D_CELLS_STYLE);
                            if (cellStyles) {
                                var styles = cellStyles[rowIdx];
                                if (styles) {
                                    styles = _.find(styles, function (c) { return c.columnKey === columnKey; });
                                    var makeup = void 0;
                                    if (styles && (makeup = styles.makeup))
                                        cStyle = styles.makeup.pop();
                                    backStyle = makeup[makeup.length - 1];
                                }
                            }
                        }
                        if ($childCells.length > 0) {
                            var fieldArr_1;
                            if (gen.painter.options.updateMode === STICK) {
                                fieldArr_1 = viewFn(viewMode);
                            }
                            if (value.constructor === Array) {
                                _.forEach(value, function (val, i) {
                                    var $c = $childCells[i];
                                    $c.textContent = val;
                                    if (backStyle) {
                                        if (backStyle.textColor) {
                                            $c.style.color = backStyle.textColor;
                                        }
                                        else if (backStyle.class) {
                                            $c.classList.remove(cStyle.class);
                                            $c.classList.add(backStyle.class);
                                        }
                                    }
                                    else if (cStyle) {
                                        if (cStyle.textColor) {
                                            $c.style.color = null;
                                        }
                                        else if (cStyle.class) {
                                            $c.classList.remove(cStyle.class);
                                        }
                                    }
                                    if (fieldArr_1) {
                                        fields = [fieldArr_1[i]];
                                    }
                                    var cellObj = new selection.Cell(rowIdx, columnKey, valueObj, i);
                                    var mTouch = trace(origDs, $c, cellObj, fields, x.manipulatorId, x.manipulatorKey);
                                    if ((!touched || (touched && !touched.dirty)) && mTouch && mTouch.dirty) {
                                        touched = mTouch;
                                        touched.idx = i;
                                    }
                                    else if (touched && touched.dirty && (!mTouch || !mTouch.dirty)) {
                                    }
                                    else if (touched && touched.dirty && mTouch && mTouch.dirty) {
                                        touched.idx = -1;
                                    }
                                    else
                                        touched = mTouch;
                                    if (mTouch && !mTouch.dirty) {
                                        events.popChange(x, rowIdx, cellObj);
                                    }
                                    if (updateMode === EDIT) {
                                        validation.validate($grid, $c, rowIdx, columnKey, i, val);
                                    }
                                });
                            }
                            else {
                                var $c = $childCells[innerIdx];
                                $c.textContent = value;
                                var cellObj = new selection.Cell(rowIdx, columnKey, valueObj, innerIdx);
                                touched = trace(origDs, $c, cellObj, fields, x.manipulatorId, x.manipulatorKey);
                                if (touched && !touched.dirty) {
                                    events.popChange(x, rowIdx, cellObj);
                                }
                                if (updateMode === EDIT) {
                                    validation.validate($grid, $c, rowIdx, columnKey, innerIdx, value);
                                }
                            }
                        }
                        else {
                            $cell.textContent = value;
                            if (backStyle) {
                                if (backStyle.textColor) {
                                    $cell.style.color = backStyle.textColor;
                                }
                                else if (backStyle.class) {
                                    $cell.classList.remove(cStyle.class);
                                    $cell.classList.add(backStyle.class);
                                }
                            }
                            else if (cStyle) {
                                if (cStyle.textColor) {
                                    $cell.style.color = null;
                                }
                                else if (cStyle.class) {
                                    $cell.classList.remove(cStyle.class);
                                }
                            }
                            var cellObj = new selection.Cell(rowIdx, columnKey, valueObj, -1);
                            touched = trace(origDs, $cell, cellObj, fields, x.manipulatorId, x.manipulatorKey);
                            if (touched && !touched.dirty) {
                                events.popChange(x, rowIdx, cellObj);
                            }
                            if (updateMode === EDIT) {
                                validation.validate($grid, $cell, rowIdx, columnKey, -1, value);
                            }
                        }
                        return touched;
                    }
                    render.gridCell = gridCell;
                    /**
                     * Grid row.
                     */
                    function gridRow($grid, rowIdx, data, styleMaker) {
                        var $exTable = helper.closest($grid, "." + NAMESPACE);
                        var x = helper.getExTableFromGrid($grid);
                        var updateMode = x.updateMode;
                        var $row = selection.rowAt($grid, rowIdx);
                        var $cells = Array.prototype.slice.call($row.querySelectorAll("td")).filter(function (e) {
                            return e.style.display !== "none";
                        });
                        var visibleColumns = helper.gridVisibleColumns($grid);
                        var origDs = helper.getOrigDS($grid);
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        var viewFn = gen.painter.options.view;
                        var viewMode = gen.painter.options.viewMode;
                        var fields = gen.painter.options.fields;
                        var touched;
                        _.forEach(Object.keys(data), function (key) {
                            _.forEach(visibleColumns, function (col, index) {
                                if (col.key === key) {
                                    var cellObj_1;
                                    var $target = $cells[index];
                                    var childCells_1 = $target.querySelectorAll("." + render.CHILD_CELL_CLS);
                                    var cData = data[key];
                                    if (styleMaker && _.isFunction(styleMaker)) {
                                        var style_2 = styleMaker(rowIdx, key, -1, cData);
                                        if (style_2 && childCells_1.length === 0) {
                                            if (style_2.class)
                                                helper.addClass($target, style_2.class);
                                            else
                                                $target.style.color = style_2.textColor;
                                        }
                                        else if (style_2) {
                                            if (style_2.class)
                                                helper.addClass(childCells_1, style_2.class);
                                            else {
                                                _.forEach(childCells_1, function (c) {
                                                    c.style.color = style_2.textColor;
                                                });
                                            }
                                        }
                                        makeUp($grid, rowIdx, key, style_2);
                                    }
                                    if (childCells_1.length > 0) {
                                        var fieldArr_2;
                                        if (_.isFunction(viewFn)) {
                                            cData = helper.viewData(viewFn, viewMode, data[key]);
                                            if (gen.painter.options.updateMode === STICK) {
                                                fieldArr_2 = viewFn(viewMode);
                                            }
                                        }
                                        if (cData.constructor === Array) {
                                            _.forEach(cData, function (d, i) {
                                                var $c = childCells_1[i];
                                                $c.textContent = d;
                                                if (updateMode === EDIT) {
                                                    validation.validate($exTable, $grid, $c, rowIdx, key, i, d);
                                                }
                                                if (fieldArr_2) {
                                                    fields = [fieldArr_2[i]];
                                                }
                                                cellObj_1 = new selection.Cell(rowIdx, key, data[key], i);
                                                var mTouch = trace(origDs, $c, cellObj_1, fields, x.manipulatorId, x.manipulatorKey);
                                                if ((!touched || (touched && !touched.dirty)) && mTouch && mTouch.dirty) {
                                                    touched = mTouch;
                                                }
                                                if (mTouch && !mTouch.dirty) {
                                                    events.popChange(x, rowIdx, cellObj_1);
                                                }
                                            });
                                            return false;
                                        }
                                        childCells_1[1].textContent = data[key];
                                        cellObj_1 = new selection.Cell(rowIdx, key, data[key], 1);
                                        touched = trace(origDs, childCells_1[1], cellObj_1, fields, x.manipulatorId, x.manipulatorKey);
                                        if (touched && !touched.dirty) {
                                            events.popChange(x, rowIdx, cellObj_1);
                                        }
                                        if (updateMode === EDIT) {
                                            validation.validate($exTable, $grid, childCells_1[1], rowIdx, key, 1, data[key]);
                                        }
                                    }
                                    else {
                                        if (_.isFunction(viewFn)) {
                                            cData = helper.viewData(viewFn, viewMode, data[key]);
                                        }
                                        $target.textContent = cData;
                                        cellObj_1 = new selection.Cell(rowIdx, key, data[key], -1);
                                        touched = trace(origDs, $target, cellObj_1, fields, x.manipulatorId, x.manipulatorKey);
                                        if (touched && !touched.dirty) {
                                            events.popChange(x, rowIdx, cellObj_1);
                                        }
                                        if (updateMode === EDIT) {
                                            validation.validate($exTable, $grid, $target, rowIdx, key, -1, data[key]);
                                        }
                                    }
                                    return false;
                                }
                            });
                        });
                        return touched;
                    }
                    render.gridRow = gridRow;
                    /**
                     * Makeup.
                     */
                    function makeUp($grid, rowIdx, key, hypo) {
                        var dCellsStyle = $.data($grid, internal.D_CELLS_STYLE);
                        if (!dCellsStyle) {
                            dCellsStyle = {};
                            dCellsStyle[rowIdx] = [new style.Cell(rowIdx, key, [hypo])];
                            $.data($grid, internal.D_CELLS_STYLE, dCellsStyle);
                            return;
                        }
                        var dup;
                        var cells = dCellsStyle[rowIdx];
                        if (cells) {
                            _.forEach(cells, function (c, i) {
                                if (c.columnKey === key) {
                                    c.makeup.push(hypo);
                                    dup = true;
                                    return false;
                                }
                            });
                            if (!dup) {
                                cells.push(new style.Cell(rowIdx, key, [hypo]));
                            }
                        }
                        else {
                            dCellsStyle[rowIdx] = [new style.Cell(rowIdx, key, [hypo])];
                        }
                    }
                    /**
                     * Trace.
                     */
                    function trace(ds, $cell, cellObj, fields, manId, manKey) {
                        if (!ds || ds.length === 0)
                            return;
                        var rowObj = ds[cellObj.rowIndex];
                        var oVal = rowObj[cellObj.columnKey];
                        var updCls = update.EDITED_CLS;
                        var updateTarget;
                        if (!uk.util.isNullOrUndefined(manId) && !uk.util.isNullOrUndefined(manKey)) {
                            if (rowObj[manKey] === manId) {
                                updCls = update.TARGET_EDITED_CLS;
                                updateTarget = 1;
                            }
                            else {
                                updCls = update.OTHER_EDITED_CLS;
                                updateTarget = 0;
                            }
                        }
                        if (!uk.util.isNullOrUndefined(oVal) && helper.isEqual(oVal, cellObj.value, fields)) {
                            helper.removeClass($cell, updCls);
                            return { dirty: false, updateTarget: updateTarget };
                        }
                        helper.addClass($cell, updCls);
                        return { dirty: true, updateTarget: updateTarget };
                    }
                })(render || (render = {}));
                var intan;
                (function (intan) {
                    intan.TOP_SPACE = "top-space";
                    intan.BOTTOM_SPACE = "bottom-space";
                    intan.NULL = null;
                    var Cloud = /** @class */ (function () {
                        function Cloud($container, dataSource, options, $exTable) {
                            this.rowElements = [];
                            this.$container = $container;
                            this.options = options;
                            this.primaryKey = options.primaryKey;
                            this.rowsOfBlock = options.rowsOfBlock || 30;
                            this.blocksOfCluster = options.blocksOfCluster || 3;
                            this.rowHeight = parseInt(options.rowHeight);
                            this.blockHeight = this.rowsOfBlock * this.rowHeight;
                            this.clusterHeight = this.blockHeight * this.blocksOfCluster;
                            this.dataSource = dataSource;
                            this._origDs = _.cloneDeep(dataSource);
                            this.painter = new render.Painter($container, options, $exTable);
                            this.setCellsStyle();
                            this.onScroll();
                        }
                        /**
                         * Set cells style.
                         */
                        Cloud.prototype.setCellsStyle = function () {
                            var self = this;
                            var bodyStylesFt = feature.find(self.options.features, feature.BODY_CELL_STYLE);
                            if (!bodyStylesFt)
                                return;
                            $.data(self.$container, internal.CELLS_STYLE, bodyStylesFt.decorator);
                        };
                        /**
                         * Get cluster no.
                         */
                        Cloud.prototype.getClusterNo = function () {
                            return Math.floor(this.$container.scrollTop / (this.clusterHeight - this.blockHeight));
                        };
                        /**
                         * Render rows.
                         */
                        Cloud.prototype.renderRows = function (manual) {
                            var self = this;
                            var clusterNo = self.getClusterNo();
                            if (manual)
                                self.currentCluster = clusterNo;
                            if (self.dataSource.length < self.rowsOfBlock) {
                                self.topOffset = 0;
                                self.bottomOffset = 0;
                            }
                            var rowsOfCluster = self.blocksOfCluster * self.rowsOfBlock;
                            var startRowIdx = self.startIndex = Math.max((rowsOfCluster - self.rowsOfBlock) * clusterNo, 0);
                            var endRowIdx = self.endIndex = startRowIdx + rowsOfCluster;
                            self.topOffset = Math.max(startRowIdx * self.rowHeight, 0);
                            self.bottomOffset = Math.max((self.dataSource.length - endRowIdx) * self.rowHeight, 0);
                            var rowConfig = { css: { height: self.rowHeight } };
                            var containerElm = self.$container;
                            var tbody = document.createElement("tbody");
                            tbody.appendChild(render.extra(intan.TOP_SPACE, self.topOffset));
                            for (var i = startRowIdx; i < endRowIdx; i++) {
                                if (uk.util.isNullOrUndefined(this.dataSource[i]))
                                    continue;
                                var rElm = self.rowElements[i];
                                if (rElm) {
                                    tbody.appendChild(rElm);
                                    continue;
                                }
                                var newRowElm = self.painter.row(this.dataSource[i], rowConfig, i);
                                tbody.appendChild(newRowElm);
                                self.rowElements[i] = newRowElm;
                            }
                            tbody.appendChild(render.extra(intan.BOTTOM_SPACE, self.bottomOffset));
                            containerElm.querySelector("table").replaceChild(tbody, containerElm.getElementsByTagName("tbody")[0]);
                            if (self.$container.classList.contains(BODY_PRF + DETAIL)) {
                                //                    self.selectCellsIn();
                                //                    self.dirtyCellsIn();
                                //                    self.errorCellsIn();
                                self.detCellsIn();
                                //                    self.editCellIn();
                                self.madeUpCellsIn();
                            }
                            else if (self.$container.classList.contains(BODY_PRF + LEFTMOST)) {
                                self.selectedRowsIn();
                                //                    self.dirtyCellsIn();
                                //                    self.errorCellsIn();
                                //                    self.editCellIn();
                            }
                            setTimeout(function () {
                                events.trigger(self.$container, events.RENDERED);
                            }, 0);
                        };
                        /**
                         * Clear highlight.
                         */
                        Cloud.prototype.clearHighlight = function (clusterNo) {
                            var self = this;
                            if (!_.isNil(self.highlightRowIndex) && !_.isNil(self.highlightColumnIndex)) {
                                var rowsOfCluster = self.blocksOfCluster * self.rowsOfBlock;
                                var startRowIdx = Math.max((rowsOfCluster - self.rowsOfBlock) * clusterNo, 0);
                                var endRowIdx = startRowIdx + rowsOfCluster;
                                for (var i = startRowIdx; i < endRowIdx; i++) {
                                    var rElm = self.rowElements[i];
                                    if (i === self.highlightRowIndex && rElm) {
                                        helper.removeClass1n(rElm.children, render.HIGHLIGHT_CLS);
                                        var extable = $.data(self.painter.$exTable, NAMESPACE), bodies = extable.owner.bodies;
                                        for (var j = 0; j < bodies.length; j++) {
                                            if (!helper.hasClass(bodies[j], BODY_PRF + LEFT_HORZ_SUM)
                                                && !helper.hasClass(bodies[j], BODY_PRF + HORIZONTAL_SUM)) {
                                                var gem = $.data(bodies[j], internal.TANGI) || $.data(bodies[j], internal.CANON);
                                                var rowElm = gem.rowElements[self.highlightRowIndex];
                                                if (rowElm) {
                                                    helper.removeClass1n(rowElm.children, render.HIGHLIGHT_CLS);
                                                }
                                            }
                                        }
                                        continue;
                                    }
                                    if (rElm) {
                                        var td = rElm.querySelector("td:nth-of-type(" + (self.highlightColumnIndex + 1) + ")");
                                        if (td) {
                                            helper.removeClass1n(td, render.HIGHLIGHT_CLS);
                                        }
                                    }
                                }
                                self.highlightRowIndex = null;
                                self.highlightColumnIndex = null;
                            }
                        };
                        /**
                         * OnScroll.
                         */
                        Cloud.prototype.onScroll = function () {
                            var self = this;
                            self.$container.removeXEventListener(events.SCROLL_EVT + ".detail");
                            self.$container.addXEventListener(events.SCROLL_EVT + ".detail", function () {
                                var inClusterNo = self.getClusterNo(), prevCluster;
                                if (self.currentCluster !== inClusterNo) {
                                    prevCluster = self.currentCluster;
                                    self.currentCluster = inClusterNo;
                                    if (self.$container.classList.contains(BODY_PRF + DETAIL)) {
                                        var colIn = $.data(self.$container, internal.COLUMN_IN);
                                        if (!uk.util.isNullOrUndefined(colIn) && colIn !== -1) {
                                            helper.unHighlightGrid(selector.classSiblings(self.$container, HEADER_PRF + DETAIL)[0], colIn);
                                            var $sumHeader = selector.classSiblings(self.$container, HEADER_PRF + HORIZONTAL_SUM);
                                            var $sumBody = selector.classSiblings(self.$container, BODY_PRF + HORIZONTAL_SUM);
                                            if ($sumHeader.length > 0 && $sumHeader[0].style.display !== "none") {
                                                helper.unHighlightGrid($sumHeader[0], colIn);
                                                helper.unHighlightGrid($sumBody[0], colIn);
                                            }
                                            events.trigger(helper.closest(self.$container, "." + NAMESPACE), events.MOUSEOUT_COLUMN, colIn);
                                        }
                                    }
                                    self.renderRows();
                                    self.clearHighlight(prevCluster);
                                }
                            });
                        };
                        /**
                         * Roll to.
                         */
                        Cloud.prototype.rollTo = function (cell) {
                            var self = this;
                            if (self.startIndex <= cell.rowIndex && self.endIndex >= cell.rowIndex) {
                                var $cell = selection.cellAt(self.$container, cell.rowIndex, cell.columnKey);
                                var tdIndex = selector.index($cell);
                                var tdPosLeft_1 = 0, tdPosTop_1 = 0;
                                selector.siblingsLt($cell, tdIndex).forEach(function (e) {
                                    if (e.style.display !== "none") {
                                        tdPosLeft_1 += e.offsetWidth;
                                    }
                                });
                                var $tr = $cell.parentElement;
                                var trIndex = selector.index($tr);
                                selector.siblingsLt($tr, trIndex).forEach(function (e) {
                                    tdPosTop_1 += e.offsetHeight;
                                });
                                if ((self.$container.scrollTop + parseFloat(self.$container.style.height)) < (tdPosTop_1 + 100)
                                    || self.$container.scrollTop > tdPosTop_1) {
                                    self.$container.scrollTop = tdPosTop_1;
                                }
                                if ((self.$container.scrollLeft + parseFloat(self.$container.style.width)) < (tdPosLeft_1 + 100)
                                    || self.$container.scrollLeft > tdPosLeft_1) {
                                    self.$container.scrollLeft = tdPosLeft_1;
                                }
                            }
                            else {
                                self.$container.scrollTop = cell.rowIndex * self.rowHeight;
                                var $cell = selection.cellAt(self.$container, cell.rowIndex, cell.columnKey);
                                var tdPosLeft_2 = 0;
                                selector.siblingsLt($cell, selector.index($cell)).forEach(function (e) {
                                    if (e.style.display !== "none") {
                                        tdPosLeft_2 += e.offsetWidth;
                                    }
                                });
                                self.$container.scrollLeft = tdPosLeft_2;
                            }
                        };
                        /**
                         * Edit cell in.
                         */
                        Cloud.prototype.editCellIn = function () {
                            var self = this;
                            var $exTable = helper.closest(self.$container, "." + NAMESPACE);
                            var updateMode = $.data($exTable, NAMESPACE).updateMode;
                            var editor = $.data($exTable, update.EDITOR);
                            if (updateMode !== EDIT)
                                return;
                            var inputSelecting = $.data(self.$container, internal.INPUT_SELECTING);
                            if (inputSelecting) {
                                var selectedRowIdx = parseInt(inputSelecting.rowIdx);
                                if (selectedRowIdx < self.startIndex || selectedRowIdx > self.endIndex)
                                    return;
                                var $selectedRow = self.$container.querySelectorAll("tr")[selectedRowIdx - self.startIndex + 1];
                                var selectedColumnIdx_1;
                                _.forEach(self.painter.visibleColumns, function (c, idx) {
                                    if (c.key === inputSelecting.columnKey) {
                                        selectedColumnIdx_1 = idx;
                                        return false;
                                    }
                                });
                                if (!uk.util.isNullOrUndefined(selectedColumnIdx_1)) {
                                    var $selectedCell = Array.prototype.slice.call($selectedRow.getElementsByTagName("td")).filter(function (e) {
                                        return e.style.display !== "none";
                                    })[selectedColumnIdx_1];
                                    var $childCells = $selectedCell.querySelectorAll("." + render.CHILD_CELL_CLS);
                                    selection.markCell($childCells[inputSelecting.innerIdx], true);
                                }
                            }
                            if (uk.util.isNullOrUndefined(editor) || editor.land !== self.options.containerClass)
                                return;
                            var editorRowIdx = parseInt(editor.rowIdx);
                            if (editorRowIdx < self.startIndex || editorRowIdx > self.endIndex)
                                return;
                            var $editRow = self.$container.querySelectorAll("tr")[editorRowIdx - self.startIndex + 1];
                            var editorColumnIdx;
                            _.forEach(self.painter.visibleColumns, function (c, idx) {
                                if (c.key === editor.columnKey) {
                                    editorColumnIdx = idx;
                                    return false;
                                }
                            });
                            if (!uk.util.isNullOrUndefined(editorColumnIdx)) {
                                var $editorCell = Array.prototype.slice.call($editRow.getElementsByTagName("td")).filter(function (e) {
                                    return e.style.display !== "none";
                                })[editorColumnIdx];
                                var $childCells = $editorCell.querySelectorAll("." + render.CHILD_CELL_CLS);
                                update.edit($exTable, !uk.util.isNullOrUndefined(editor.innerIdx)
                                    && editor.innerIdx > -1
                                    && $childCells.length > 0
                                    ? $childCells[editor.innerIdx] : $editorCell, editor.land, editor.value, true);
                            }
                        };
                        /**
                         * Select cells in.
                         */
                        Cloud.prototype.selectCellsIn = function () {
                            var self = this;
                            var $exTable = helper.closest(self.$container, "." + NAMESPACE);
                            var updateMode = $.data($exTable, NAMESPACE).updateMode;
                            if (updateMode !== COPY_PASTE)
                                return;
                            var selectedCells = $.data(self.$container, internal.SELECTED_CELLS);
                            if (uk.util.isNullOrUndefined(selectedCells) || selectedCells.length === 0)
                                return;
                            _.forEach(Object.keys(selectedCells), function (rowIdx, index) {
                                if (rowIdx >= self.startIndex && rowIdx <= self.endIndex) {
                                    _.forEach(selectedCells[rowIdx], function (colKey) {
                                        var $cell = selection.cellAt(self.$container, rowIdx, colKey);
                                        if ($cell === intan.NULL || !$cell)
                                            return;
                                        selection.markCell($cell);
                                    });
                                }
                            });
                        };
                        /**
                         * Select rows in.
                         */
                        Cloud.prototype.selectedRowsIn = function () {
                            var self = this;
                            var selectedRows = $.data(self.$container, internal.SELECTED_ROWS);
                            if (!selectedRows || !selectedRows.items || selectedRows.items.length === 0)
                                return;
                            for (var i = self.startIndex; i <= self.endIndex; i++) {
                                if (selectedRows.items[i]) {
                                    controls.tick(true, self.$container, false, i);
                                }
                            }
                        };
                        /**
                         * Dirty cells in.
                         */
                        Cloud.prototype.dirtyCellsIn = function () {
                            var self = this;
                            var $exTable = helper.closest(self.$container, "." + NAMESPACE);
                            var updateMode = $.data($exTable, NAMESPACE).updateMode;
                            var histories, targetHis, otherHis;
                            if (self.options.containerClass === BODY_PRF + LEFTMOST) {
                                histories = $.data(self.$container, internal.EDIT_HISTORY);
                                if (!histories)
                                    return;
                                self.each(histories);
                                return;
                            }
                            if (updateMode === COPY_PASTE) {
                                histories = $.data(self.$container, internal.COPY_HISTORY);
                                if (!histories)
                                    return;
                                for (var i = histories.length - 1; i >= 0; i--) {
                                    self.each(histories[i].items);
                                }
                            }
                            else if (updateMode === EDIT) {
                                histories = $.data(self.$container, internal.EDIT_HISTORY);
                                if (histories)
                                    self.each(histories);
                            }
                            else if (updateMode === STICK) {
                                histories = $.data(self.$container, internal.STICK_HISTORY);
                                if (!histories)
                                    return;
                                _.forEach(histories, function (items) {
                                    self.each(items);
                                });
                            }
                        };
                        /**
                         * Error cells in.
                         */
                        Cloud.prototype.errorCellsIn = function () {
                            var self = this;
                            var $exTable = helper.closest(self.$container, "." + NAMESPACE);
                            var updateMode = $.data($exTable, NAMESPACE).updateMode;
                            var errs = $.data($exTable, errors.ERRORS);
                            if (!errs || errs.length === 0)
                                return;
                            self.each(errs, errors.ERROR_CLS);
                        };
                        /**
                         * Det cells in.
                         */
                        Cloud.prototype.detCellsIn = function () {
                            var self = this;
                            var det = $.data(self.$container, internal.DET);
                            if (!det)
                                return;
                            self.eachKey(det, function (obj) { return obj.columnKey; }, function (obj) { return !obj.uiReflected; }, function ($cell, obj) {
                                helper.markCellWith(style.DET_CLS, $cell);
                                obj.uiReflected = true;
                            });
                        };
                        /**
                         * Made up cells in.
                         */
                        Cloud.prototype.madeUpCellsIn = function () {
                            var self = this;
                            var dCellsStyle = $.data(self.$container, internal.D_CELLS_STYLE);
                            if (!dCellsStyle)
                                return;
                            self.eachKey(dCellsStyle, function (obj) { return obj.columnKey; }, function (obj) { return !obj.uiReflected; }, function ($cell, obj) {
                                var makeup = obj.makeup;
                                if (makeup && makeup.length > 0) {
                                    makeup = makeup[makeup.length - 1];
                                    var $childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                                    if ($childCells && $childCells.length > 0) {
                                        if (makeup.textColor) {
                                            _.forEach($childCells, function (c) {
                                                c.style.color = makeup.textColor;
                                            });
                                        }
                                        else
                                            helper.addClass($childCells, makeup.class);
                                    }
                                    else if (makeup.textColor) { // Don't set textColor
                                        $cell.style.color = makeup.textColor;
                                    }
                                    else {
                                        $cell.classList.add(makeup.class);
                                    }
                                    obj.uiReflected = true;
                                }
                            });
                        };
                        /**
                         * Each key.
                         */
                        Cloud.prototype.eachKey = function (obj, key, filter, cb) {
                            var self = this;
                            _.forEach(Object.keys(obj), function (rIdx) {
                                if (rIdx >= self.startIndex && rIdx <= self.endIndex) {
                                    _.forEach(obj[rIdx], function (valObj) {
                                        if (!filter(valObj))
                                            return;
                                        var $cell = selection.cellAt(self.$container, rIdx, key(valObj));
                                        if ($cell === intan.NULL || !$cell)
                                            return;
                                        cb($cell, valObj);
                                    });
                                }
                            });
                        };
                        /**
                         * Each.
                         */
                        Cloud.prototype.each = function (items, styler) {
                            var self = this;
                            styler = styler || update.EDITED_CLS;
                            _.forEach(items, function (item) {
                                if (item.rowIndex >= self.startIndex && item.rowIndex <= self.endIndex) {
                                    var $cell = selection.cellAt(self.$container, item.rowIndex, item.columnKey);
                                    if ($cell === intan.NULL || !$cell)
                                        return;
                                    var itemStyle = void 0;
                                    if (item.updateTarget === 0) {
                                        itemStyle = update.OTHER_EDITED_CLS;
                                    }
                                    else if (item.updateTarget === 1) {
                                        itemStyle = update.TARGET_EDITED_CLS;
                                    }
                                    else
                                        itemStyle = styler;
                                    helper.markCellWith(itemStyle, $cell, item.innerIdx, item.value);
                                }
                            });
                        };
                        return Cloud;
                    }());
                    intan.Cloud = Cloud;
                })(intan || (intan = {}));
                var cellHandler;
                (function (cellHandler) {
                    cellHandler.ROUND_GO = "ex-round-go";
                    function get(handlerType) {
                        switch (handlerType.toLowerCase()) {
                            case "input":
                                return cellInput;
                            case "tooltip":
                                return tooltip;
                            case "roundtrip":
                                return roundGo;
                        }
                    }
                    cellHandler.get = get;
                    /**
                     * Cell input.
                     */
                    function cellInput($cell, options, supplier) {
                        if (uk.util.isNullOrUndefined(options.updateMode) || options.updateMode !== EDIT
                            || $cell.classList.contains(controls.LABEL_CLS))
                            return;
                        $cell.classList.add(update.EDITABLE_CLS);
                        $cell.addXEventListener(events.CLICK_EVT, function (evt) {
                            if ($cell.getElementsByTagName("input").length > 0) {
                                evt.stopImmediatePropagation();
                                return;
                            }
                            var $exTable = helper.closest($cell, "." + NAMESPACE);
                            if (!selector.is(evt.target, "." + selection.CELL_SELECTED_CLS)) {
                                var $detailContent = $exTable.querySelector("." + (BODY_PRF + DETAIL));
                                var inputSelecting = $.data($detailContent, internal.INPUT_SELECTING);
                                var editor = $.data($exTable, update.EDITOR);
                                if (editor) {
                                    update.outsideClick($exTable, null, true);
                                }
                                else if (inputSelecting) {
                                    selection.clearInnerCell($detailContent, inputSelecting.rowIdx, inputSelecting.columnKey, inputSelecting.innerIdx);
                                }
                                selection.markCell($cell, true);
                                var selectedCoord = helper.getCellCoord($cell);
                                selectedCoord.innerIdx = selector.index($cell);
                                $.data($detailContent, internal.INPUT_SELECTING, selectedCoord);
                                if (options.errorMessagePopup) {
                                    var errPopup = $.data($exTable, internal.ERR_POPUP), errMsg = $.data($cell, internal.ERR_MSG);
                                    if (errPopup) {
                                        helper.remove(errPopup);
                                        helper.close(errPopup);
                                    }
                                    if (errPopup && !_.isNil(errMsg)) {
                                        document.body.appendChild(errPopup);
                                        errPopup.innerHTML = errMsg;
                                        var offset = selector.offset($cell);
                                        var bodyRowHeight = parseFloat($.data($exTable, NAMESPACE).bodyRowHeight);
                                        var offsetHeight = !_.isNil($cell.style.height) ? parseFloat($cell.style.height)
                                            : (isNaN(bodyRowHeight) ? 50 : bodyRowHeight);
                                        errPopup.style.top = offset.top + offsetHeight + 2 + "px";
                                        errPopup.style.left = offset.left + "px";
                                    }
                                }
                                return;
                            }
                            if (evt.ctrlKey && $.data($exTable, NAMESPACE).determination)
                                return;
                            update.edit($exTable, $cell, options.containerClass);
                        });
                        $cell.addXEventListener(events.KEY_UP, function () {
                            var $grid = helper.closest($cell, "." + (BODY_PRF + DETAIL));
                            var inputSelecting = $.data($grid, internal.INPUT_SELECTING);
                            if (!inputSelecting)
                                return;
                            if (event.keyCode === $.ui.keyCode.ENTER) {
                                var cell_1 = helper.nextCellOf($grid, new selection.Cell(inputSelecting.rowIdx, inputSelecting.columnKey, null, inputSelecting.innerIdx));
                                selection.clearInnerCell($grid, inputSelecting.rowIdx, inputSelecting.columnKey, inputSelecting.innerIdx);
                                $.data($grid, internal.INPUT_SELECTING, null);
                                internal.getGem($grid).rollTo(cell_1);
                                _.defer(function () {
                                    var $cell = selection.cellAt($grid, cell_1.rowIndex, cell_1.columnKey);
                                    var childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                                    if (childCells) {
                                        selection.markCell(childCells[cell_1.innerIdx], true);
                                        $.data($grid, internal.INPUT_SELECTING, { rowIdx: cell_1.rowIndex, columnKey: cell_1.columnKey, innerIdx: cell_1.innerIdx });
                                    }
                                });
                            }
                        });
                    }
                    cellHandler.cellInput = cellInput;
                    /**
                     * Tooltip.
                     */
                    function tooltip($cell, options, supplier) {
                        var $content = supplier();
                        if (uk.util.isNullOrUndefined($content))
                            return;
                        new widget.Tooltip($cell, { sources: $content });
                    }
                    cellHandler.tooltip = tooltip;
                    /**
                     * Round go.
                     */
                    function roundGo($cell, options, supplier) {
                        if (!supplier || typeof supplier !== "function")
                            return;
                        $cell.classList.add(cellHandler.ROUND_GO);
                        $cell.addXEventListener(events.CLICK_EVT, function (evt) {
                            var $grid = helper.closest($cell, "table").parentElement;
                            if (errors.occurred(helper.closest($grid, "." + NAMESPACE)))
                                return false;
                            var coord = helper.getCellCoord($cell);
                            helper.closest($cell, "." + NAMESPACE).addXEventListener(events.ROUND_RETREAT, function (evt) {
                                if (evt.currentTarget.dataset.triggered)
                                    return;
                                var value = evt.detail;
                                var x = helper.getExTableFromGrid($grid);
                                var ds = helper.getDataSource($grid);
                                var manId = x.manipulatorId;
                                var manKey = x.manipulatorKey;
                                if (!ds || ds.length === 0)
                                    return;
                                var rowObj = ds[coord.rowIdx];
                                if (rowObj[coord.columnKey] !== value) {
                                    var updTarget = void 0;
                                    if (!uk.util.isNullOrUndefined(manId) && !uk.util.isNullOrUndefined(manKey)) {
                                        updTarget = rowObj[manKey] === manId ? 1 : 0;
                                    }
                                    update.gridCell($grid, coord.rowIdx, coord.columnKey, -1, value);
                                    update.pushEditHistory($grid, new selection.Cell(coord.rowIdx, coord.columnKey, value, -1), updTarget);
                                }
                                evt.currentTarget.dataset.triggered = true;
                            });
                            supplier();
                        });
                    }
                    cellHandler.roundGo = roundGo;
                    /**
                     * rClick.
                     */
                    function rClick(cell, column, cb) {
                        if (uk.util.isNullOrUndefined(column.rightClick) || typeof column.rightClick !== "function")
                            return;
                        cell.addXEventListener(events.MOUSE_DOWN, function (evt) {
                            if (evt.which === 3 || evt.button === 2) {
                                evt.preventDefault();
                                cb();
                            }
                        });
                        cell.addXEventListener(events.CM, function () {
                            return false;
                        });
                    }
                    cellHandler.rClick = rClick;
                    /**
                     * rRowClick.
                     */
                    function rRowClick(row, columnsMap, args) {
                        row.addXEventListener(events.MOUSE_DOWN, function (evt) {
                            var coord = helper.getCellCoord(evt.target);
                            if (!coord)
                                return;
                            var column = columnsMap[coord.columnKey];
                            if (uk.util.isNullOrUndefined(column.rightClick) || typeof column.rightClick !== "function")
                                return;
                            if (evt.which === 3 || evt.button === 2) {
                                evt.preventDefault();
                                column.rightClick(args.rData, args.rowIdx, coord.columnKey);
                            }
                        });
                        row.addXEventListener(events.CM, function () {
                            return false;
                        });
                    }
                    cellHandler.rRowClick = rRowClick;
                })(cellHandler || (cellHandler = {}));
                var update;
                (function (update) {
                    update.EDITOR = "editor";
                    update.EDITED_CLS = "edited";
                    update.TARGET_EDITED_CLS = "target-edited";
                    update.OTHER_EDITED_CLS = "other-edited";
                    update.EDIT_CELL_CLS = "edit-cell";
                    update.EDITOR_CLS = "ex-editor";
                    update.EDITABLE_CLS = "ex-editable";
                    var EMPTY_TBL_HEIGHT = "1px";
                    var Editor = /** @class */ (function () {
                        function Editor($editor, land, rowIdx, columnKey, innerIdx, value) {
                            this.$editor = $editor;
                            this.land = land;
                            this.rowIdx = rowIdx;
                            this.columnKey = columnKey;
                            this.innerIdx = innerIdx;
                            this.value = value;
                        }
                        return Editor;
                    }());
                    update.Editor = Editor;
                    /**
                     * Edit.
                     */
                    function edit($exTable, $cell, land, value, forced) {
                        var $grid = $exTable.querySelector("." + BODY_PRF + DETAIL);
                        var $body = !land ? $grid : helper.getTable($exTable, land);
                        var exTable = $.data($exTable, NAMESPACE);
                        if (!forced && ( /*errors.occurred($exTable) ||*/selector.is($cell, "." + style.DET_CLS)
                            || (land === BODY_PRF + DETAIL && exTable.detailContent.banEmptyInput
                                && exTable.detailContent.banEmptyInput.some(function (m) { return m === exTable.viewMode; })
                                && $cell.textContent === "")
                            || selector.is($cell, "." + style.HIDDEN_CLS) || selector.is($cell, "." + style.SEAL_CLS))) {
                            outsideClick($exTable, $cell, true);
                            return;
                        }
                        var editor = $.data($exTable, update.EDITOR);
                        var $editor, $input, inputVal, innerIdx = -1;
                        var coord = helper.getCellCoord($cell);
                        if (uk.util.isNullOrUndefined(editor)) {
                            var content = $cell.textContent;
                            inputVal = value ? value : content;
                            $input = document.createElement("input");
                            $input.style.border = "none";
                            $input.style.width = "calc(100% - 2px)";
                            $input.style.height = "calc(100% - 3px)";
                            $input.style.outline = "none";
                            $input.value = inputVal;
                            $editor = document.createElement("div");
                            $editor.className = update.EDITOR_CLS;
                            if (selector.is($cell, "." + render.CELL_CLS)) {
                                $editor.style.height = parseFloat(exTable.bodyRowHeight) - 3 + "px";
                            }
                            else {
                                $editor.style.height = "calc(100% - 1px)";
                            }
                            $editor.style.width = "calc(100% - 1px)";
                            $editor.style.backgroundColor = "#FFF";
                            $editor.style.border = "1px solid #AAB7B8";
                            $editor.appendChild($input);
                            if (selector.is($cell, "div")) {
                                $editor.style.height = "calc(100% - 2px)";
                                $editor.style.width = "calc(100% - 2px)";
                                innerIdx = selector.index($cell);
                            }
                            $.data($exTable, update.EDITOR, new Editor($editor, land, coord.rowIdx, coord.columnKey, innerIdx, inputVal));
                            events.trigger($exTable, events.START_EDIT, [$editor, content]);
                            helper.addClass($cell, update.EDIT_CELL_CLS);
                            $cell.innerHTML = "";
                            $cell.appendChild($editor);
                            editing($exTable, $editor, land);
                            $input.select();
                            validation.validate($body, $cell, coord.rowIdx, coord.columnKey, innerIdx, inputVal);
                            selection.tickRows($exTable.querySelector("." + BODY_PRF + LEFTMOST), false);
                        }
                        else {
                            $editor = editor.$editor;
                            $input = $editor.querySelector("input");
                            var content_1 = $input.value;
                            var editingLand_1 = editor.land;
                            var cont_1 = function (cb) {
                                if ($editor.style.display === "none")
                                    $editor.style.display = "";
                                if (selector.is($cell, "div")) {
                                    innerIdx = selector.index($cell);
                                }
                                var $editingCell = helper.closest($editor, "." + update.EDIT_CELL_CLS);
                                helper.removeClass($editingCell, update.EDIT_CELL_CLS);
                                var cellText = $cell.textContent;
                                inputVal = value ? value : cellText;
                                $input.value = inputVal;
                                triggerStopEdit($exTable, $editingCell, editingLand_1, content_1);
                                if (cb && _.isFunction(cb)) {
                                    cb();
                                }
                                // Update editing cell coord
                                editor.land = land;
                                editor.rowIdx = coord.rowIdx;
                                editor.columnKey = coord.columnKey;
                                editor.innerIdx = innerIdx;
                                editor.value = inputVal;
                                $.data($exTable, update.EDITOR, new Editor($editor, land, coord.rowIdx, coord.columnKey, innerIdx, inputVal));
                                helper.addClass($cell, update.EDIT_CELL_CLS);
                                $cell.innerHTML = "";
                                $cell.appendChild($editor);
                                editing($exTable, $editor, land);
                                $input.select();
                                validation.validate($body, $cell, coord.rowIdx, coord.columnKey, innerIdx, inputVal);
                                selection.tickRows($exTable.querySelector("." + BODY_PRF + LEFTMOST), false);
                            };
                            var $editingGrid_1 = !editingLand_1 ? helper.getMainTable($exTable) : helper.getTable($exTable, editor.land);
                            var visibleColumns = helper.getVisibleColumnsOn($editingGrid_1);
                            var columnDf_1;
                            _.forEach(visibleColumns, function (col) {
                                if (col.key === editor.columnKey) {
                                    columnDf_1 = col;
                                    return false;
                                }
                            });
                            if (!columnDf_1)
                                return;
                            if (columnDf_1.ajaxValidate && _.isFunction(columnDf_1.ajaxValidate.request)) {
                                helper.block($exTable);
                                columnDf_1.ajaxValidate.request(content_1).done(function (res) {
                                    cont_1(helper.call(columnDf_1.ajaxValidate.onValid, { rowIndex: editor.rowIdx, columnKey: editor.columnKey, innerIdx: editor.innerIdx }, res));
                                }).fail(function (res) {
                                    var $target = selection.cellAt($editingGrid_1, editor.rowIdx, editor.columnKey);
                                    if ($target !== intan.NULL) {
                                        errors.add($exTable, $target, editor.rowIdx, editor.columnKey, editor.innerIdx, editor.value);
                                    }
                                    if (_.isFunction(columnDf_1.ajaxValidate.onFailed)) {
                                        columnDf_1.ajaxValidate.onFailed({ rowIndex: editor.rowIdx, columnKey: editor.columnKey, innerIdx: editor.innerIdx }, res);
                                    }
                                }).always(function () {
                                    helper.unblock($exTable);
                                });
                                return;
                            }
                            cont_1();
                        }
                    }
                    update.edit = edit;
                    /**
                     * Editing.
                     */
                    function editing($exTable, $editor, land) {
                        var $input = $editor.querySelector("input");
                        $input.removeXEventListener(events.KEY_UP);
                        $input.addXEventListener(events.KEY_UP, function (evt) {
                            var value = $input.value;
                            if (evt.keyCode === $.ui.keyCode.ENTER) {
                                var $grid_1;
                                if (!land) {
                                    $grid_1 = helper.getMainTable($exTable);
                                }
                                else {
                                    $grid_1 = $exTable.querySelector("." + land);
                                }
                                var editor_1 = $.data($exTable, update.EDITOR);
                                if ( /*errors.occurred($exTable) ||*/!editor_1)
                                    return;
                                var visibleColumns = helper.getVisibleColumnsOn(!editor_1.land ? helper.getMainTable($exTable) : helper.getTable($exTable, editor_1.land));
                                var columnDf_2;
                                _.forEach(visibleColumns, function (col) {
                                    if (col.key === editor_1.columnKey) {
                                        columnDf_2 = col;
                                        return false;
                                    }
                                });
                                if (!columnDf_2)
                                    return;
                                if (columnDf_2.ajaxValidate && _.isFunction(columnDf_2.ajaxValidate.request)) {
                                    helper.block($exTable);
                                    columnDf_2.ajaxValidate.request(value).done(function (res) {
                                        var $parent = $editor.parentElement;
                                        helper.removeClass($parent, update.EDIT_CELL_CLS);
                                        var currentCell = new selection.Cell(editor_1.rowIdx, editor_1.columnKey, undefined, editor_1.innerIdx);
                                        triggerStopEdit($exTable, $parent, land, value);
                                        if (_.isFunction(columnDf_2.ajaxValidate.onValid)) {
                                            columnDf_2.ajaxValidate.onValid({ rowIndex: editor_1.rowIdx, columnKey: editor_1.columnKey, innerIdx: editor_1.innerIdx }, res);
                                        }
                                        if (land !== BODY_PRF + DETAIL)
                                            return;
                                        var cell = helper.nextCellOf($grid_1, currentCell);
                                        internal.getGem($grid_1).rollTo(cell);
                                        _.defer(function () {
                                            var $cell = selection.cellAt($grid_1, cell.rowIndex, cell.columnKey);
                                            //                                if (util.isNullOrUndefined(cell.innerIdx) || cell.innerIdx === -1) {
                                            //                                    edit($exTable, $cell, land);
                                            //                                    return;
                                            //                                }
                                            //                                edit($exTable, $cell.querySelectorAll("." + render.CHILD_CELL_CLS)[cell.innerIdx], land);
                                            var childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                                            if (childCells) {
                                                selection.markCell(childCells[cell.innerIdx], true);
                                                $.data($grid_1, internal.INPUT_SELECTING, { rowIdx: cell.rowIndex, columnKey: cell.columnKey, innerIdx: cell.innerIdx });
                                            }
                                        });
                                    }).fail(function (res) {
                                        var $target = selection.cellAt($grid_1, editor_1.rowIdx, editor_1.columnKey);
                                        if ($target !== intan.NULL) {
                                            errors.add($exTable, $target, editor_1.rowIdx, editor_1.columnKey, editor_1.innerIdx, editor_1.value);
                                        }
                                        if (_.isFunction(columnDf_2.ajaxValidate.onFailed)) {
                                            columnDf_2.ajaxValidate.onFailed({ rowIndex: editor_1.rowIdx, columnKey: editor_1.columnKey, innerIdx: editor_1.innerIdx }, res);
                                        }
                                    }).always(function () {
                                        helper.unblock($exTable);
                                    });
                                }
                                else {
                                    var $parent = $editor.parentElement;
                                    helper.removeClass($parent, update.EDIT_CELL_CLS);
                                    var currentCell = new selection.Cell(editor_1.rowIdx, editor_1.columnKey, undefined, editor_1.innerIdx);
                                    triggerStopEdit($exTable, $parent, land, value);
                                    if (land !== BODY_PRF + DETAIL)
                                        return;
                                    var cell_2 = helper.nextCellOf($grid_1, currentCell);
                                    internal.getGem($grid_1).rollTo(cell_2);
                                    _.defer(function () {
                                        var $cell = selection.cellAt($grid_1, cell_2.rowIndex, cell_2.columnKey);
                                        //                            if (util.isNullOrUndefined(cell.innerIdx) || cell.innerIdx === -1) {
                                        //                                edit($exTable, $cell, land);
                                        //                                return;
                                        //                            }
                                        //                            edit($exTable, $cell.querySelectorAll("." + render.CHILD_CELL_CLS)[cell.innerIdx], land);
                                        var childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                                        if (childCells) {
                                            selection.markCell(childCells[cell_2.innerIdx], true);
                                            $.data($grid_1, internal.INPUT_SELECTING, { rowIdx: cell_2.rowIndex, columnKey: cell_2.columnKey, innerIdx: cell_2.innerIdx });
                                        }
                                    });
                                }
                            }
                            else {
                                var editor = $.data($exTable, update.EDITOR);
                                if (uk.util.isNullOrUndefined(editor))
                                    return;
                                editor.value = value;
                                var $grid = !editor.land ? helper.getMainTable($exTable) : helper.getTable($exTable, editor.land);
                                validation.validate($grid, helper.closest(editor.$editor, "." + update.EDIT_CELL_CLS), editor.rowIdx, editor.columnKey, editor.innerIdx, editor.value);
                            }
                        });
                    }
                    /**
                     * Trigger stop edit.
                     */
                    function triggerStopEdit($exTable, $cell, land, value) {
                        if ($cell.length === 0)
                            return;
                        var innerIdx = -1;
                        if (selector.is($cell, "div")) {
                            innerIdx = selector.index($cell);
                        }
                        var coord = helper.getCellCoord($cell);
                        if (!coord)
                            return;
                        var $grid = helper.getMainTable($exTable), inputSelecting = $.data($grid, internal.INPUT_SELECTING);
                        if (inputSelecting) {
                            selection.clearInnerCell($grid, inputSelecting.rowIdx, inputSelecting.columnKey, inputSelecting.innerIdx);
                            $.data($grid, internal.INPUT_SELECTING, null);
                        }
                        var editor = $.data($exTable, update.EDITOR);
                        if (editor) {
                            var $input = editor.$editor.querySelector("input");
                            var content = $input.value;
                            var $parent = helper.closest(editor.$editor, "." + update.EDITABLE_CLS);
                            helper.removeClass($parent, update.EDIT_CELL_CLS);
                            $parent.textContent = content;
                            $.data($exTable, update.EDITOR, null);
                            var errPopup = $.data($exTable, internal.ERR_POPUP);
                            if (errPopup) {
                                helper.remove(errPopup);
                                helper.close(errPopup);
                            }
                        }
                        events.trigger($exTable, events.STOP_EDIT, { land: land, rowIndex: coord.rowIdx, columnKey: coord.columnKey, innerIdx: innerIdx, value: value });
                    }
                    update.triggerStopEdit = triggerStopEdit;
                    /**
                     * Edit done.
                     */
                    function editDone($exTable) {
                        var $grid = $exTable.querySelector("." + BODY_PRF + DETAIL);
                        var fts = $.data($exTable, NAMESPACE).detailContent.features;
                        var timeRangeFt = feature.find(fts, feature.TIME_RANGE);
                        var timeRangerDef;
                        if (!uk.util.isNullOrUndefined(timeRangeFt)) {
                            timeRangerDef = _.groupBy(timeRangeFt.ranges, "rowId");
                            $.data($grid, internal.TIME_VALID_RANGE, timeRangerDef);
                        }
                        $exTable.addXEventListener(events.STOP_EDIT, function (evt) {
                            var ui = evt.detail;
                            postEdit($exTable, ui, timeRangerDef);
                        });
                    }
                    update.editDone = editDone;
                    /**
                     * Post edit.
                     */
                    function postEdit($exTable, ui, timeRangerDef) {
                        var $body = !ui.land ? $exTable.querySelector("." + BODY_PRF + DETAIL) : $exTable.querySelector("." + ui.land);
                        var $cell = selection.cellAt($body, ui.rowIndex, ui.columnKey);
                        var result = validation.validate($body, $cell, ui.rowIndex, ui.columnKey, ui.innerIdx, ui.value, timeRangerDef);
                        if (!result.isValid)
                            return;
                        ui.value = result.value;
                        var res = cellData($exTable, ui);
                        if (!uk.util.isNullOrUndefined(res)) {
                            var newValObj = ui.value;
                            if (_.isObject(res.value)) {
                                var $main = helper.getMainTable($exTable);
                                var gen = $.data($main, internal.TANGI) || $.data($main, internal.CANON);
                                if (_.isFunction(gen.painter.options.view)) {
                                    var viewFields = gen.painter.options.view(gen.painter.options.viewMode);
                                    if (_.isNil(viewFields))
                                        return;
                                    newValObj = _.cloneDeep(res.value);
                                    newValObj[viewFields[ui.innerIdx]] = ui.value;
                                }
                            }
                            pushEditHistory($body, new selection.Cell(ui.rowIndex, ui.columnKey, res, ui.innerIdx), res.updateTarget);
                            var editCls = uk.util.isNullOrUndefined(res.updateTarget) ? update.EDITED_CLS
                                : (res.updateTarget === 0 ? update.OTHER_EDITED_CLS : update.TARGET_EDITED_CLS);
                            helper.markCellWith(editCls, $cell, ui.innerIdx);
                            events.trigger($exTable, events.CELL_UPDATED, new selection.Cell(ui.rowIndex, ui.columnKey, newValObj, ui.innerIdx));
                        }
                        setText($cell, ui.innerIdx, ui.value);
                    }
                    /**
                     * Set text.
                     */
                    function setText($cell, innerIdx, value) {
                        var $childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                        if (!uk.util.isNullOrUndefined(innerIdx) && innerIdx > -1 && $childCells.length > 0) {
                            $childCells[innerIdx].textContent = value;
                        }
                        else {
                            $cell.textContent = value;
                        }
                    }
                    update.setText = setText;
                    /**
                     * Outside click.
                     */
                    function outsideClick($exTable, $target, immediate) {
                        if (immediate || !selector.is($target, "." + update.EDITABLE_CLS)) {
                            var errPopup = $.data($exTable, internal.ERR_POPUP);
                            if (errPopup) {
                                helper.remove(errPopup);
                                helper.close(errPopup);
                            }
                            if ($.data($exTable, "blockUI.isBlocked") === 1 /*|| errors.occurred($exTable)*/)
                                return;
                            var editor_2 = $.data($exTable, update.EDITOR);
                            if (uk.util.isNullOrUndefined(editor_2))
                                return;
                            var $input = editor_2.$editor.querySelector("input");
                            var content_2 = $input.value;
                            var mo_1 = function (cb) {
                                var innerIdx = -1;
                                var $parent = helper.closest(editor_2.$editor, "." + update.EDITABLE_CLS);
                                helper.removeClass($parent, update.EDIT_CELL_CLS);
                                var $g = $grid_2;
                                if (!$parent || !$g)
                                    return;
                                if (selector.is($parent, "div"))
                                    innerIdx = selector.index($parent);
                                $parent.textContent = content_2;
                                postEdit($exTable, { rowIndex: editor_2.rowIdx, columnKey: editor_2.columnKey, innerIdx: innerIdx,
                                    value: content_2, land: ($.data($g, internal.TANGI) || $.data($g, internal.CANON)).painter.options.containerClass });
                                if (cb && _.isFunction(cb)) {
                                    cb();
                                }
                                $.data($exTable, update.EDITOR, null);
                                var inputSelecting = $.data($grid_2, internal.INPUT_SELECTING);
                                if (inputSelecting) {
                                    selection.clearInnerCell($grid_2, inputSelecting.rowIdx, inputSelecting.columnKey, inputSelecting.innerIdx);
                                }
                                $.data($grid_2, internal.INPUT_SELECTING, null);
                            };
                            var $grid_2 = !editor_2.land ? helper.getMainTable($exTable) : helper.getTable($exTable, editor_2.land);
                            var visibleColumns = helper.getVisibleColumnsOn($grid_2);
                            var columnDf_3;
                            _.forEach(visibleColumns, function (col) {
                                if (col.key === editor_2.columnKey) {
                                    columnDf_3 = col;
                                    return false;
                                }
                            });
                            if (!columnDf_3)
                                return;
                            if (!selector.is($target, "." + cellHandler.ROUND_GO)
                                && columnDf_3.ajaxValidate && _.isFunction(columnDf_3.ajaxValidate.request)) {
                                helper.block($exTable);
                                columnDf_3.ajaxValidate.request(content_2).done(function (res) {
                                    mo_1(helper.call(columnDf_3.ajaxValidate.onValid, { rowIndex: editor_2.rowIdx, columnKey: editor_2.columnKey, innerIdx: editor_2.innerIdx }, res));
                                }).fail(function (res) {
                                    var $target = selection.cellAt($grid_2, editor_2.rowIdx, editor_2.columnKey);
                                    if ($target !== intan.NULL) {
                                        errors.add($exTable, $target, editor_2.rowIdx, editor_2.columnKey, editor_2.innerIdx, editor_2.value);
                                    }
                                    if (_.isFunction(columnDf_3.ajaxValidate.onFailed)) {
                                        columnDf_3.ajaxValidate.onFailed({ rowIndex: editor_2.rowIdx, columnKey: editor_2.columnKey, innerIdx: editor_2.innerIdx }, res);
                                    }
                                }).always(function () {
                                    helper.unblock($exTable);
                                });
                                return;
                            }
                            mo_1();
                        }
                    }
                    update.outsideClick = outsideClick;
                    /**
                     * Cell data.
                     */
                    function cellData($exTable, ui) {
                        var exTable = $.data($exTable, NAMESPACE);
                        if (!exTable)
                            return;
                        var updateTarget, oldVal, innerIdx = ui.innerIdx, f;
                        if (ui.land === BODY_PRF + LEFTMOST) {
                            f = "leftmostContent";
                        }
                        else if (ui.land === BODY_PRF + MIDDLE) {
                            f = "middleContent";
                        }
                        else {
                            f = "detailContent";
                        }
                        if (uk.util.isNullOrUndefined(ui.innerIdx)) {
                            innerIdx = exTable[f].dataSource[ui.rowIndex][ui.columnKey].constructor === Array ? 1 : -1;
                        }
                        var rowData = exTable[f].dataSource[ui.rowIndex];
                        if (!uk.util.isNullOrUndefined(exTable.manipulatorKey)
                            && !uk.util.isNullOrUndefined(exTable.manipulatorId)) {
                            updateTarget = rowData[exTable.manipulatorKey] === exTable.manipulatorId ? 1 : 0;
                        }
                        var currentVal = rowData[ui.columnKey];
                        if (innerIdx === -1) {
                            if (currentVal !== ui.value) {
                                oldVal = _.cloneDeep(currentVal);
                                if (exTable[f].primaryKey === ui.columnKey) {
                                    if (exTable.leftmostContent) {
                                        exTable.leftmostContent.dataSource[ui.rowIndex][ui.columnKey] = ui.value;
                                    }
                                    if (exTable.middleContent) {
                                        exTable.middleContent.dataSource[ui.rowIndex][ui.columnKey] = ui.value;
                                    }
                                    if (exTable.detailContent) {
                                        exTable.detailContent.dataSource[ui.rowIndex][ui.columnKey] = ui.value;
                                    }
                                }
                                else {
                                    exTable[f].dataSource[ui.rowIndex][ui.columnKey] = ui.value;
                                }
                                return { updateTarget: updateTarget, value: oldVal };
                            }
                            return null;
                        }
                        var $main = !ui.land ? helper.getMainTable($exTable) : helper.getTable($exTable, ui.land);
                        var gen = $.data($main, internal.TANGI) || $.data($main, internal.CANON);
                        var field;
                        if (_.isFunction(gen.painter.options.view)) {
                            var fields = gen.painter.options.view(gen.painter.options.viewMode);
                            if (fields)
                                field = fields[ui.innerIdx];
                        }
                        if (currentVal[field] !== ui.value && (!uk.util.isNullOrUndefined(currentVal[field])
                            || ui.value !== "")) {
                            oldVal = _.cloneDeep(currentVal);
                            exTable[f].dataSource[ui.rowIndex][ui.columnKey][field] = ui.value;
                            return { updateTarget: updateTarget, value: oldVal };
                        }
                        return null;
                    }
                    update.cellData = cellData;
                    /**
                     * Row data.
                     */
                    function rowData($exTable, rowIdx, data) {
                        var exTable = $.data($exTable, NAMESPACE);
                        if (!exTable)
                            return;
                        _.assignInWith(exTable.detailContent.dataSource[rowIdx], data, function (objVal, srcVal) {
                            if (objVal.constructor === Array && srcVal.constructor !== Array) {
                                objVal[1] = srcVal;
                                return objVal;
                            }
                            return srcVal;
                        });
                    }
                    update.rowData = rowData;
                    /**
                     * Grid cell.
                     */
                    function gridCell($grid, rowIdx, columnKey, innerIdx, value, isRestore) {
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        if (!gen)
                            return;
                        var cData = gen.dataSource[rowIdx][columnKey];
                        var origDs = gen._origDs;
                        var $table = helper.closest($grid, "." + NAMESPACE);
                        if (cData.constructor === Array) {
                            if (value.constructor === Array) {
                                _.forEach(cData, function (d, i) {
                                    gen.dataSource[rowIdx][columnKey][i] = value[i];
                                    if (!helper.isEqual(origDs[rowIdx][columnKey][i], value[i])) {
                                        events.trigger($table, events.CELL_UPDATED, new selection.Cell(rowIdx, columnKey, value[i], i));
                                    }
                                });
                            }
                            else {
                                gen.dataSource[rowIdx][columnKey][innerIdx] = value;
                                if (!helper.isEqual(origDs[rowIdx][columnKey][innerIdx], value)) {
                                    events.trigger($table, events.CELL_UPDATED, new selection.Cell(rowIdx, columnKey, value, innerIdx));
                                }
                            }
                        }
                        else {
                            gen.dataSource[rowIdx][columnKey] = value;
                            if (!helper.isEqual(origDs[rowIdx][columnKey], value)) {
                                events.trigger($table, events.CELL_UPDATED, new selection.Cell(rowIdx, columnKey, value, -1));
                            }
                        }
                        render.gridCell($grid, rowIdx, columnKey, innerIdx, value, isRestore);
                    }
                    update.gridCell = gridCell;
                    /**
                     * Grid row.
                     */
                    function gridRow($grid, rowIdx, data, isRestore) {
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        if (!gen)
                            return;
                        _.assignInWith(gen.dataSource[rowIdx], data, function (objVal, srcVal) {
                            if (objVal.constructor === Array && srcVal.constructor !== Array) {
                                objVal[1] = srcVal;
                                return objVal;
                            }
                            return srcVal;
                        });
                        render.gridRow($grid, rowIdx, data, isRestore);
                    }
                    update.gridRow = gridRow;
                    /**
                     * Grid cell ow.
                     */
                    function gridCellOw($grid, rowIdx, columnKey, innerIdx, value, txId) {
                        var $exTable = helper.closest($grid, "." + NAMESPACE);
                        var exTable = $.data($exTable, NAMESPACE);
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        var pk = helper.getPrimaryKey($grid);
                        if (!gen || helper.isDetCell($grid, rowIdx, columnKey)
                            || helper.isXCell($grid, gen.dataSource[rowIdx][pk], columnKey, style.HIDDEN_CLS, style.SEAL_CLS))
                            return;
                        var cData = gen.dataSource[rowIdx][columnKey];
                        var opt = gen.options;
                        if (!exTable.pasteOverWrite
                            && !helper.isEmpty(helper.viewData(opt.view, opt.viewMode, cData)))
                            return;
                        var changedData;
                        if (cData.constructor === Array) {
                            if (value.constructor === Array) {
                                changedData = _.cloneDeep(cData);
                                _.forEach(cData, function (d, i) {
                                    gen.dataSource[rowIdx][columnKey][i] = value[i];
                                });
                            }
                            else {
                                changedData = cData[innerIdx];
                                gen.dataSource[rowIdx][columnKey][innerIdx] = value;
                            }
                        }
                        else if (_.isObject(cData) && !_.isObject(value)) {
                            return;
                        }
                        else {
                            changedData = cData;
                            gen.dataSource[rowIdx][columnKey] = value;
                        }
                        var sm, sticker = $.data($grid, internal.STICKER);
                        if (sticker) {
                            sm = sticker.styleMaker;
                        }
                        var touched = render.gridCell($grid, rowIdx, columnKey, innerIdx, value, sm);
                        if (touched && touched.dirty) {
                            var cellObj = new selection.Cell(rowIdx, columnKey, changedData);
                            cellObj.setTarget(touched.updateTarget);
                            pushHistory($grid, [cellObj], txId);
                            events.trigger($exTable, events.CELL_UPDATED, new selection.Cell(rowIdx, columnKey, value, innerIdx));
                        }
                    }
                    update.gridCellOw = gridCellOw;
                    /**
                     * Grid row ow.
                     */
                    function gridRowOw($grid, rowIdx, data, txId) {
                        var $exTable = helper.closest($grid, "." + NAMESPACE);
                        var exTable = $.data($exTable, NAMESPACE);
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        var pk = helper.getPrimaryKey($grid);
                        if (!gen)
                            return;
                        // Create history
                        var changedCells = [];
                        var origData = _.cloneDeep(data);
                        var clonedData = _.cloneDeep(data);
                        var opt = gen.options;
                        _.assignInWith(gen.dataSource[rowIdx], clonedData, function (objVal, srcVal, key, obj, src) {
                            if ((!exTable.pasteOverWrite
                                && !helper.isEmpty(helper.viewData(opt.view, opt.viewMode, objVal)))
                                || helper.isDetCell($grid, rowIdx, key)
                                || helper.isXCell($grid, gen.dataSource[rowIdx][pk], key, style.HIDDEN_CLS, style.SEAL_CLS)) {
                                src[key] = objVal;
                                return objVal;
                            }
                            if (!uk.util.isNullOrUndefined(src[key]) && !helper.isEqual(src[key], obj[key])) {
                                changedCells.push(new selection.Cell(rowIdx, key, objVal));
                            }
                            else {
                                delete origData[key];
                            }
                            if (objVal.constructor === Array && srcVal.constructor !== Array) {
                                objVal[1] = srcVal;
                                return objVal;
                            }
                            return srcVal;
                        });
                        _.forEach(Object.keys(clonedData), function (k) {
                            if (!helper.isEqual(clonedData[k], origData[k])) {
                                delete origData[k];
                            }
                        });
                        var sm, sticker = $.data($grid, internal.STICKER);
                        if (sticker) {
                            sm = sticker.styleMaker;
                        }
                        var touched = render.gridRow($grid, rowIdx, origData, sm);
                        if (changedCells.length > 0) {
                            changedCells.forEach(function (c) { return c.setTarget(touched.updateTarget); });
                            pushHistory($grid, changedCells, txId);
                            events.trigger($exTable, events.ROW_UPDATED, events.createRowUi(rowIdx, origData));
                        }
                    }
                    update.gridRowOw = gridRowOw;
                    /**
                     * Stick grid cell ow.
                     */
                    function stickGridCellOw($grid, rowIdx, columnKey, innerIdx, value, styleMaker) {
                        var $exTable = helper.closest($grid, "." + NAMESPACE);
                        var exTable = $.data($exTable, NAMESPACE);
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        var pk = helper.getPrimaryKey($grid);
                        if (!gen || helper.isDetCell($grid, rowIdx, columnKey)
                            || helper.isXCell($grid, gen.dataSource[rowIdx][pk], columnKey, style.HIDDEN_CLS, style.SEAL_CLS))
                            return;
                        var cData = gen.dataSource[rowIdx][columnKey];
                        var opt = gen.options;
                        if (!exTable.stickOverWrite
                            && !helper.isEmpty(helper.viewData(opt.view, opt.viewMode, cData)))
                            return;
                        var changedData = _.cloneDeep(cData);
                        gen.dataSource[rowIdx][columnKey] = value;
                        var touched = render.gridCell($grid, rowIdx, columnKey, innerIdx, value, styleMaker);
                        if (!touched || !touched.dirty)
                            return;
                        if (!_.isNil(touched.idx) && touched.idx !== -1) {
                            innerIdx = touched.idx;
                        }
                        var cellObj = new selection.Cell(rowIdx, columnKey, changedData, innerIdx);
                        cellObj.setTarget(touched.updateTarget);
                        pushStickHistory($grid, [cellObj]);
                        events.trigger($exTable, events.CELL_UPDATED, new selection.Cell(rowIdx, columnKey, value, innerIdx));
                    }
                    update.stickGridCellOw = stickGridCellOw;
                    /**
                     * Stick grid row ow.
                     */
                    function stickGridRowOw($grid, rowIdx, data, styleMaker) {
                        var $exTable = helper.closest($grid, "." + NAMESPACE);
                        var exTable = $.data($exTable, NAMESPACE);
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        var pk = helper.getPrimaryKey($grid);
                        if (!gen)
                            return;
                        // Create history
                        var changedCells = [];
                        var origData = _.cloneDeep(data);
                        var clonedData = _.cloneDeep(data);
                        var opt = gen.options, fieldArr = opt.view(opt.viewMode);
                        _.assignInWith(gen.dataSource[rowIdx], clonedData, function (objVal, srcVal, key, obj, src) {
                            if ((!exTable.stickOverWrite
                                && !helper.isEmpty(helper.viewData(opt.view, opt.viewMode, objVal)))
                                || helper.isDetCell($grid, rowIdx, key)
                                || helper.isXCell($grid, gen.dataSource[rowIdx][pk], key, style.HIDDEN_CLS, style.SEAL_CLS)) {
                                src[key] = objVal;
                                return objVal;
                            }
                            if (!uk.util.isNullOrUndefined(src[key])) {
                                if (fieldArr && _.isObject(srcVal)) {
                                    _.forEach(fieldArr, function (f, i) {
                                        if (!helper.isEqual(srcVal[f], objVal[f])) {
                                            changedCells.push(new selection.Cell(rowIdx, key, _.cloneDeep(objVal), i));
                                        }
                                    });
                                }
                                else if (!helper.isEqual(src[key], obj[key])) {
                                    changedCells.push(new selection.Cell(rowIdx, key, _.cloneDeep(objVal)));
                                }
                            }
                            else {
                                delete origData[key];
                            }
                            if (objVal.constructor === Array && srcVal.constructor !== Array) {
                                objVal[1] = srcVal;
                                return objVal;
                            }
                            return srcVal;
                        });
                        _.forEach(Object.keys(clonedData), function (k) {
                            if (!helper.isEqual(clonedData[k], origData[k])) {
                                delete origData[k];
                            }
                        });
                        var touched = render.gridRow($grid, rowIdx, origData, styleMaker);
                        if (changedCells.length > 0) {
                            changedCells.forEach(function (c) { return c.setTarget(touched.updateTarget); });
                            pushStickHistory($grid, changedCells);
                            events.trigger($exTable, events.ROW_UPDATED, events.createRowUi(rowIdx, origData, _.cloneDeep(changedCells)));
                        }
                    }
                    update.stickGridRowOw = stickGridRowOw;
                    /**
                     * Push history.
                     */
                    function pushHistory($grid, cells, txId) {
                        var history = $.data($grid, internal.COPY_HISTORY);
                        if (!history || history.length === 0) {
                            history = [{ txId: txId, items: cells }];
                            $.data($grid, internal.COPY_HISTORY, history);
                            return;
                        }
                        var latestHistory = history[history.length - 1];
                        if (latestHistory.txId === txId) {
                            _.forEach(cells, function (cell) {
                                latestHistory.items.push(cell);
                            });
                        }
                        else {
                            var newHis = { txId: txId, items: cells };
                            history.push(newHis);
                        }
                    }
                    update.pushHistory = pushHistory;
                    /**
                     * Push edit history.
                     */
                    function pushEditHistory($grid, cell, editTarget) {
                        var history = $.data($grid, internal.EDIT_HISTORY);
                        if (editTarget === 0 || editTarget === 1) {
                            cell.setTarget(editTarget);
                        }
                        if (!history || history.length === 0) {
                            $.data($grid, internal.EDIT_HISTORY, [cell]);
                            return;
                        }
                        history.push(cell);
                    }
                    update.pushEditHistory = pushEditHistory;
                    /**
                     * Push stick history.
                     */
                    function pushStickHistory($grid, cells) {
                        var history = $.data($grid, internal.STICK_HISTORY);
                        if (!history || history.length === 0) {
                            $.data($grid, internal.STICK_HISTORY, [cells]);
                            return;
                        }
                        history.push(cells);
                    }
                    update.pushStickHistory = pushStickHistory;
                    /**
                     * Remove stick history.
                     */
                    function removeStickHistory($grid, cells) {
                        var history = $.data($grid, internal.STICK_HISTORY);
                        if (!history || history.length === 0)
                            return;
                        _.remove(history, function (h) { return cells.some(function (c) { return helper.areSameCells(c, h); }); });
                    }
                    update.removeStickHistory = removeStickHistory;
                    /**
                     * Insert new row.
                     */
                    function insertNewRow($container) {
                        var rowIndex;
                        Array.prototype.slice.call($container.querySelectorAll("div[class*='" + BODY_PRF + "']")).filter(function (e) {
                            return !e.classList.contains(BODY_PRF + HORIZONTAL_SUM) && !e.classList.contains(BODY_PRF + LEFT_HORZ_SUM);
                        }).forEach(function (e) {
                            var ds = internal.getDataSource(e);
                            var origDs = helper.getOrigDS(e);
                            var newRec = {};
                            rowIndex = ds.length;
                            var columns = helper.gridColumnsMap(e);
                            if (!ds || !columns)
                                return;
                            _.forEach(columns, function (value, key) {
                                if (key === controls.CHECKED_KEY)
                                    return;
                                newRec[key] = "";
                            });
                            var gen = $.data(e, internal.TANGI) || $.data(e, internal.CANON);
                            var newRow = gen.painter.row(newRec, { css: { height: gen.painter.options.rowHeight } }, ds.length);
                            if (!uk.util.isNullOrUndefined(gen.startIndex)) {
                                var trList = e.querySelectorAll("tbody tr");
                                trList[trList.length - 1].insertAdjacentElement("beforebegin", newRow);
                            }
                            else {
                                e.querySelector("tbody").appendChild(newRow);
                            }
                            origDs[ds.length] = _.cloneDeep(newRec);
                            ds[ds.length] = newRec;
                        });
                        var $grid = helper.getMainTable($container);
                        $grid.scrollTop = $grid.scrollHeight;
                        var $leftmost = $container.querySelector("." + BODY_PRF + LEFTMOST);
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        if (rowIndex >= gen.startIndex && rowIndex <= gen.endIndex) {
                            controls.tick(true, $leftmost, false, rowIndex);
                            return;
                        }
                        $leftmost.addXEventListener(events.RENDERED + ".once", function (evt) {
                            controls.tick(true, $leftmost, false, rowIndex);
                            $leftmost.removeXEventListener(events.RENDERED + ".once");
                        });
                    }
                    update.insertNewRow = insertNewRow;
                    /**
                     * Delete rows.
                     */
                    function deleteRows($container) {
                        var $grid = helper.getLeftmostTable($container);
                        var rows = $.data($grid, internal.SELECTED_ROWS);
                        if (!rows || !rows.items || rows.items.length === 0)
                            return;
                        if (rows.count > 0) {
                            rows.selectAll = false;
                            var $allBox = selector.classSiblings($grid, HEADER_PRF + LEFTMOST).map(function (e) {
                                var trList = e.querySelectorAll("table tr");
                                return trList[0].querySelectorAll("td")[0].querySelector("input");
                            })[0];
                            if (selector.is($allBox, ":checked"))
                                $allBox.checked = false;
                        }
                        retrackEditor($container, rows.items);
                        var $t = Array.prototype.slice.call($container.querySelectorAll("div[class*='" + BODY_PRF + "']")).filter(function (e) {
                            return !e.classList.contains(BODY_PRF + HORIZONTAL_SUM) && !e.classList.contains(BODY_PRF + LEFT_HORZ_SUM);
                        });
                        $t.forEach(function (elm) {
                            _.forEach([internal.EDIT_HISTORY, internal.COPY_HISTORY, internal.STICK_HISTORY,
                                internal.SELECTED_CELLS, errors.ERRORS], function (name) {
                                retrackRecords(elm, rows.items, name);
                            });
                        });
                        $t.forEach(function (elm, index) {
                            var ds = internal.getDataSource(elm);
                            var origDs = helper.getOrigDS(elm);
                            if (!ds || ds.length === 0)
                                return;
                            if (ds.length > rows.items.length)
                                rows.items[ds.length - 1] = false;
                            var count = rows.count;
                            for (var i = rows.items.length - 1; i >= 0; i--) {
                                var $row = selection.rowAt(elm, i);
                                if (rows.items[i]) {
                                    if ($row !== intan.NULL && !$row.classList.contains(NAMESPACE + "-" + intan.BOTTOM_SPACE)) {
                                        $row.parentNode.removeChild($row);
                                    }
                                    ds.splice(i, 1);
                                    origDs.splice(i, 1);
                                    if (index === $t.length - 1) {
                                        rows.items[i] = false;
                                        rows.items.splice(i, 1);
                                        rows.count--;
                                    }
                                    count--;
                                }
                                else {
                                    if ($row !== intan.NULL) {
                                        selector.queryAll($row, "td").forEach(function (e) {
                                            var view = $.data(e, internal.VIEW);
                                            if (view) {
                                                var coord = view.split("-");
                                                $.data(e, internal.VIEW, parseInt(coord[0]) - count + "-" + coord[1]);
                                            }
                                        });
                                    }
                                }
                            }
                            if (ds.length === 0) {
                                elm.querySelector("." + NAMESPACE + "-" + intan.BOTTOM_SPACE).style.height = EMPTY_TBL_HEIGHT;
                            }
                        });
                    }
                    update.deleteRows = deleteRows;
                    /**
                     * Retrack editor.
                     */
                    function retrackEditor($container, rows) {
                        var count = 0;
                        var editor = $.data($container, update.EDITOR);
                        if (!editor)
                            return;
                        if (rows[editor.rowIdx]) {
                            $.data($container, update.EDITOR, null);
                            return;
                        }
                        for (var i = 0; i < editor.rowIdx; i++) {
                            if (rows[i])
                                count++;
                        }
                        if (count > 0)
                            editor.rowIdx = editor.rowIdx - count;
                    }
                    /**
                     * Retrack records.
                     */
                    function retrackRecords($grid, rows, name) {
                        var histories = $.data($grid, name);
                        if (!histories)
                            return;
                        if (name === internal.COPY_HISTORY) {
                            for (var i = histories.length - 1; i >= 0; i--) {
                                each(histories[i].items, rows);
                            }
                        }
                        else if (name === internal.SELECTED_CELLS) {
                            _.forEach(Object.keys(histories).sort(function (a, b) { return a - b; }), function (key, index) {
                                var count = 0;
                                if (rows[key]) {
                                    delete histories[key];
                                    return;
                                }
                                for (var i = 0; i < key; i++) {
                                    if (rows[i])
                                        count++;
                                }
                                if (count > 0) {
                                    var newKey = key - count;
                                    histories[newKey] = histories[key];
                                    delete histories[key];
                                }
                            });
                        }
                        else {
                            each(histories, rows);
                        }
                    }
                    /**
                     * Each.
                     */
                    function each(histories, rows) {
                        var removes = [];
                        _.forEach(histories, function (his, index) {
                            var count = 0;
                            if (rows[his.rowIndex]) {
                                removes.push(index);
                                return;
                            }
                            for (var i = 0; i < his.rowIndex; i++) {
                                if (rows[i])
                                    count++;
                            }
                            if (count > 0)
                                his.rowIndex = his.rowIndex - count;
                        });
                        while (removes.length > 0) {
                            histories.splice(removes.pop(), 1);
                        }
                    }
                })(update || (update = {}));
                var copy;
                (function (copy) {
                    copy.PASTE_ID = "pasteHelper";
                    copy.COPY_ID = "copyHelper";
                    var Mode;
                    (function (Mode) {
                        Mode[Mode["SINGLE"] = 0] = "SINGLE";
                        Mode[Mode["MULTIPLE"] = 1] = "MULTIPLE";
                    })(Mode || (Mode = {}));
                    var History = /** @class */ (function () {
                        function History(cells) {
                            this.cells = cells;
                        }
                        return History;
                    }());
                    copy.History = History;
                    var Printer = /** @class */ (function () {
                        function Printer(options) {
                            this.options = options;
                            this.token = uk.util.randomId();
                        }
                        /**
                         * Hook.
                         */
                        Printer.prototype.hook = function ($grid) {
                            var self = this;
                            self.$grid = $grid;
                            self.$grid.setAttribute("tabindex", 0);
                            self.$grid.style.outline = "none";
                            self.$grid.addXEventListener(events.FOCUS_IN, function (evt) {
                                if (document.querySelector("#pasteHelper") && document.querySelector("#copyHelper"))
                                    return;
                                var pasteArea = document.createElement("textarea");
                                pasteArea.setAttribute("id", copy.PASTE_ID);
                                pasteArea.style.opacity = "0";
                                pasteArea.style.overflow = "hidden";
                                pasteArea.addXEventListener(events.PASTE, self.paste.bind(self));
                                var copyArea = document.createElement("textarea");
                                copyArea.setAttribute("id", copy.COPY_ID);
                                copyArea.style.opacity = "0";
                                copyArea.style.overflow = "hidden";
                                var $div = document.createElement("div");
                                $div.style.position = "fixed";
                                $div.style.top = "-10000px";
                                $div.style.left = "-10000px";
                                document.body.appendChild($div);
                                $div.appendChild(pasteArea);
                                $div.appendChild(copyArea);
                            });
                            self.$grid.addXEventListener(events.KEY_DOWN, function (evt) {
                                if (evt.ctrlKey && helper.isPasteKey(evt)) {
                                    document.querySelector("#pasteHelper").focus();
                                }
                                else
                                    self.getOp(evt);
                                _.defer(function () {
                                    selection.focus(self.$grid);
                                });
                            });
                        };
                        /**
                         * Get op.
                         */
                        Printer.prototype.getOp = function (evt) {
                            var self = this;
                            if (evt.ctrlKey && helper.isCopyKey(evt)) {
                                self.copy();
                            }
                            else if (evt.ctrlKey && helper.isCutKey(evt)) {
                                //                    self.cut();
                            }
                            else if (evt.ctrlKey && helper.isUndoKey(evt)) {
                                self.undo();
                            }
                            else if (evt.ctrlKey && helper.isRedoKey(evt)) {
                                self.redo();
                            }
                        };
                        /**
                         * Copy.
                         */
                        Printer.prototype.copy = function (cut) {
                            var self = this;
                            var selectedCells = selection.getSelectedCells(this.$grid);
                            var copiedData = "" + self.token;
                            if (selectedCells.length === 1) {
                                var cell = selectedCells[0];
                                var ds = internal.getDataSource(self.$grid);
                                var pk = helper.getPrimaryKey(self.$grid);
                                if (helper.isDetCell(self.$grid, cell.rowIndex, cell.columnKey)
                                    || helper.isXCell(self.$grid, ds[cell.rowIndex][pk], cell.columnKey, style.HIDDEN_CLS, style.SEAL_CLS))
                                    return;
                                this.mode = Mode.SINGLE;
                                copiedData += _.isObject(selectedCells[0].value) ? JSON.stringify(selectedCells[0].value) : selectedCells[0].value;
                            }
                            else {
                                this.mode = Mode.MULTIPLE;
                                copiedData += this.converseStructure(selectedCells, cut);
                            }
                            var $copyHelper = document.querySelector("#copyHelper");
                            $copyHelper.value = copiedData;
                            $copyHelper.select();
                            document.execCommand("copy");
                            return selectedCells;
                        };
                        /**
                         * Convert structure.
                         */
                        Printer.prototype.converseStructure = function (cells, cut) {
                            var self = this;
                            var maxRow = 0;
                            var minRow = 0;
                            var maxColumn = 0;
                            var minColumn = 0;
                            var structure = [];
                            var structData = "";
                            _.forEach(cells, function (cell, index) {
                                var rowIndex = parseInt(cell.rowIndex);
                                var columnIndex = helper.getDisplayColumnIndex(self.$grid, cell.columnKey);
                                if (index === 0) {
                                    minRow = maxRow = rowIndex;
                                    minColumn = maxColumn = columnIndex;
                                }
                                if (rowIndex < minRow)
                                    minRow = rowIndex;
                                if (rowIndex > maxRow)
                                    maxRow = rowIndex;
                                if (columnIndex < minColumn)
                                    minColumn = columnIndex;
                                if (columnIndex > maxColumn)
                                    maxColumn = columnIndex;
                                if (uk.util.isNullOrUndefined(structure[rowIndex])) {
                                    structure[rowIndex] = {};
                                }
                                var ds = internal.getDataSource(self.$grid);
                                var pk = helper.getPrimaryKey(self.$grid);
                                if (helper.isDetCell(self.$grid, rowIndex, cell.columnKey)
                                    || helper.isXCell(self.$grid, ds[rowIndex][pk], cell.columnKey, style.HIDDEN_CLS, style.SEAL_CLS)) {
                                    structure[rowIndex][columnIndex] = undefined;
                                }
                                else
                                    structure[rowIndex][columnIndex] = helper.stringValue(cell.value);
                            });
                            for (var i = minRow; i <= maxRow; i++) {
                                for (var j = minColumn; j <= maxColumn; j++) {
                                    if (uk.util.isNullOrUndefined(structure[i]) || uk.util.isNullOrUndefined(structure[i][j])
                                        || uk.util.isNullOrEmpty(structure[i][j])) {
                                        structData += "null";
                                    }
                                    else {
                                        structData += structure[i][j];
                                    }
                                    if (j === maxColumn)
                                        structData += "\n";
                                    else
                                        structData += "\t";
                                }
                            }
                            return structData;
                        };
                        /**
                         * Cut.
                         */
                        Printer.prototype.cut = function () {
                            var self = this;
                            var selectedCells = this.copy(true);
                            _.forEach(selectedCells, function (cell) {
                                var $cell = selection.cellAt(self.$grid, cell.rowIndex, cell.columnKey);
                                var value = "";
                                if ($cell.querySelectorAll("." + render.CHILD_CELL_CLS).length > 0) {
                                    value = ["", ""];
                                }
                                update.gridCell(self.$grid, cell.rowIndex, cell.columnKey, -1, value);
                            });
                        };
                        /**
                         * Get contents.
                         */
                        Printer.prototype.getContents = function (raw) {
                            if (_.isNil(raw))
                                return null;
                            var self = this, length = self.token.length;
                            var token = raw.substr(0, length);
                            if (token !== self.token)
                                return null;
                            return raw.substr(length);
                        };
                        /**
                         * Paste.
                         */
                        Printer.prototype.paste = function (evt) {
                            if (this.mode === Mode.SINGLE) {
                                this.pasteSingleCell(evt);
                            }
                            else {
                                this.pasteRange(evt);
                            }
                            $.data(this.$grid, internal.REDO_STACK, []);
                        };
                        /**
                         * Paste single cell.
                         */
                        Printer.prototype.pasteSingleCell = function (evt) {
                            var self = this;
                            var cbData = this.getClipboardContent(evt);
                            cbData = self.getContents(cbData);
                            if (_.isNil(cbData))
                                return;
                            cbData = helper.getCellData(cbData);
                            var selectedCells = selection.getSelectedCells(this.$grid);
                            var txId = uk.util.randomId();
                            _.forEach(selectedCells, function (cell, index) {
                                update.gridCellOw(self.$grid, cell.rowIndex, cell.columnKey, -1, cbData, txId);
                            });
                        };
                        /**
                         * Paste range.
                         */
                        Printer.prototype.pasteRange = function (evt) {
                            var cbData = this.getClipboardContent(evt);
                            cbData = this.getContents(cbData);
                            if (_.isNil(cbData))
                                return;
                            cbData = this.process(cbData);
                            this.updateWith(cbData);
                        };
                        /**
                         * Process.
                         */
                        Printer.prototype.process = function (data) {
                            var dataRows = _.map(data.split("\n"), function (row) {
                                return _.map(row.split("\t"), function (cData) {
                                    return cData.indexOf(",") > 0 ? cData.split(",") : cData;
                                });
                            });
                            var rowsCount = dataRows.length;
                            if ((dataRows[rowsCount - 1].length === 1 && dataRows[rowsCount - 1][0] === "")
                                || (dataRows.length === 1 && dataRows[0].length === 1
                                    && (dataRows[0][0] === "" || dataRows[0][0] === "\r"))) {
                                dataRows.pop();
                            }
                            return dataRows;
                        };
                        /**
                         * Update with.
                         */
                        Printer.prototype.updateWith = function (data) {
                            var self = this;
                            var selectedCell = selection.getSelectedCells(self.$grid)[0];
                            if (selectedCell === undefined)
                                return;
                            var visibleColumns = helper.gridVisibleColumns(self.$grid);
                            var rowIndex = selectedCell.rowIndex;
                            var startColumnIndex = helper.indexOf(selectedCell.columnKey, visibleColumns);
                            if (startColumnIndex === -1)
                                return;
                            var txId = uk.util.randomId();
                            var ds = internal.getDataSource(self.$grid);
                            var size = ds ? ds.length : 0;
                            _.forEach(data, function (row, idx) {
                                var rowData = {};
                                var columnKey = selectedCell.columnKey;
                                var columnIndex = startColumnIndex;
                                for (var i = 0; i < row.length; i++) {
                                    if (!uk.util.isNullOrUndefined(row[i]) && row[i].constructor !== Array && row[i].trim() === "null") {
                                        columnKey = helper.nextKeyOf(columnIndex++, visibleColumns);
                                        if (!columnKey)
                                            break;
                                        continue;
                                    }
                                    rowData[columnKey] = helper.getCellData(row[i]);
                                    columnKey = helper.nextKeyOf(columnIndex++, visibleColumns);
                                    if (!columnKey)
                                        break;
                                }
                                if (rowIndex >= size)
                                    return false;
                                update.gridRowOw(self.$grid, rowIndex, rowData, txId);
                                rowIndex++;
                            });
                        };
                        /**
                         * Undo.
                         */
                        Printer.prototype.undo = function () {
                            var self = this;
                            var histories = $.data(self.$grid, internal.COPY_HISTORY);
                            if (!histories || histories.length === 0)
                                return;
                            var tx = histories.pop();
                            var redoStack = $.data(self.$grid, internal.REDO_STACK), ds = internal.getDataSource(self.$grid), currentItems = [];
                            _.forEach(tx.items, function (item) {
                                var currentItem = { rowIndex: item.rowIndex, columnKey: item.columnKey, innerIdx: -1 }, data = ds[item.rowIndex];
                                if (!data)
                                    return;
                                currentItem.value = data[item.columnKey];
                                currentItems.push(currentItem);
                                update.gridCell(self.$grid, item.rowIndex, item.columnKey, -1, item.value, true);
                                internal.removeChange(self.$grid, item);
                            });
                            var redoTx = { txId: tx.txId, items: currentItems };
                            if (!redoStack) {
                                redoStack = [redoTx];
                                $.data(self.$grid, internal.REDO_STACK, redoStack);
                            }
                            else {
                                redoStack.push(redoTx);
                            }
                        };
                        /**
                         * Redo.
                         */
                        Printer.prototype.redo = function () {
                            var self = this, redoStack = $.data(self.$grid, internal.REDO_STACK);
                            if (!redoStack || redoStack.length === 0)
                                return;
                            var tx = redoStack.pop();
                            _.forEach(tx.items, function (item) {
                                update.gridCellOw(self.$grid, item.rowIndex, item.columnKey, -1, item.value, tx.txId);
                            });
                        };
                        /**
                         * Get clipboard content.
                         */
                        Printer.prototype.getClipboardContent = function (evt) {
                            if (window.clipboardData) {
                                window.event.returnValue = false;
                                return window.clipboardData.getData("text");
                            }
                            else {
                                return evt.clipboardData.getData("text/plain");
                            }
                        };
                        return Printer;
                    }());
                    copy.Printer = Printer;
                    /**
                     * On.
                     */
                    function on($grid, updateMode) {
                        if (updateMode === COPY_PASTE) {
                            var printer = new Printer();
                            $.data($grid, internal.PRINTER_INST, printer);
                            printer.hook($grid);
                        }
                    }
                    copy.on = on;
                    /**
                     * Off.
                     */
                    function off($grid, updateMode) {
                        if (updateMode !== COPY_PASTE) {
                            $grid.removeXEventListener(events.FOCUS_IN);
                            $grid.removeXEventListener(events.KEY_DOWN);
                            var $copy = document.querySelector("#" + copy.COPY_ID);
                            var $paste = document.querySelector("#" + copy.PASTE_ID);
                            if (uk.util.isNullOrUndefined($copy) || uk.util.isNullOrUndefined($paste))
                                return;
                            $copy.parentNode.removeChild($copy);
                            $paste.parentNode.removeChild($paste);
                        }
                    }
                    copy.off = off;
                })(copy || (copy = {}));
                var spread;
                (function (spread) {
                    spread.SINGLE = "single";
                    spread.MULTIPLE = "multiple";
                    var Sticker = /** @class */ (function () {
                        function Sticker(data) {
                            this.mode = spread.MULTIPLE;
                            this.validate = function () { return true; };
                            this.data = data;
                        }
                        return Sticker;
                    }());
                    spread.Sticker = Sticker;
                    /**
                     * Bind sticker.
                     */
                    function bindSticker($cell, rowIdx, columnKey, options) {
                        if (options.containerClass !== BODY_PRF + DETAIL || uk.util.isNullOrUndefined(options.updateMode)
                            || options.updateMode !== STICK)
                            return;
                        $cell.addXEventListener(events.CLICK_EVT, function (evt) {
                            if (evt.ctrlKey)
                                return;
                            var $grid = helper.closest($cell, "." + BODY_PRF + DETAIL);
                            var sticker = $.data($grid, internal.STICKER);
                            if (!sticker || uk.util.isNullOrUndefined(sticker.data)
                                || uk.util.isNullOrUndefined(sticker.validate))
                                return;
                            var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                            var visibleColumns = gen.painter.visibleColumns;
                            var data = {};
                            var key = columnKey;
                            var colIndex = helper.indexOf(key, visibleColumns);
                            if (sticker.mode === spread.SINGLE) {
                                var result = void 0;
                                if ((result = sticker.validate(rowIdx, columnKey, sticker.data)) !== true) {
                                    // TODO: show error
                                    result();
                                    return;
                                }
                                update.stickGridCellOw($grid, rowIdx, columnKey, -1, sticker.data);
                                return;
                            }
                            _.forEach(sticker.data, function (cData) {
                                data[key] = cData;
                                key = helper.nextKeyOf(colIndex++, visibleColumns);
                                if (!key)
                                    return false;
                            });
                            update.stickGridRowOw($grid, rowIdx, data);
                        });
                    }
                    spread.bindSticker = bindSticker;
                    /**
                     * Bind row sticker.
                     */
                    function bindRowSticker($row, rowIdx, options) {
                        if (options.containerClass !== BODY_PRF + DETAIL || uk.util.isNullOrUndefined(options.updateMode)
                            || options.updateMode !== STICK)
                            return;
                        $row.addXEventListener(events.CLICK_EVT, function (evt) {
                            if (evt.ctrlKey)
                                return;
                            var $grid = helper.closest($row, "." + BODY_PRF + DETAIL);
                            var sticker = $.data($grid, internal.STICKER);
                            if (!sticker || uk.util.isNullOrUndefined(sticker.data)
                                || uk.util.isNullOrUndefined(sticker.validate))
                                return;
                            var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                            var visibleColumns = gen.painter.visibleColumns;
                            var data = {};
                            var $cell = evt.target;
                            if (selector.is(evt.target, "." + render.CHILD_CELL_CLS)) {
                                $cell = helper.closest(evt.target, "td");
                            }
                            var coord = helper.getCellCoord($cell);
                            var key = coord.columnKey;
                            var colIndex = helper.indexOf(key, visibleColumns);
                            $.data($grid, internal.STICK_REDO_STACK, []);
                            if (sticker.mode === spread.SINGLE) {
                                var result = void 0;
                                if ((result = sticker.validate(rowIdx, key, sticker.data)) !== true) {
                                    // TODO: show error
                                    result();
                                    return;
                                }
                                update.stickGridCellOw($grid, rowIdx, key, -1, sticker.data, sticker.styleMaker);
                                return;
                            }
                            _.forEach(sticker.data, function (cData) {
                                data[key] = cData;
                                key = helper.nextKeyOf(colIndex++, visibleColumns);
                                if (!key)
                                    return false;
                            });
                            update.stickGridRowOw($grid, rowIdx, data, sticker.styleMaker);
                        });
                    }
                    spread.bindRowSticker = bindRowSticker;
                })(spread || (spread = {}));
                var validation;
                (function (validation) {
                    validation.TIME_SPLIT = ":";
                    validation.TIME_PTN = /^-?\d+:\d{2}$/;
                    validation.SHORT_TIME_PTN = /^-?\d+$/;
                    validation.NUMBER_PTN = /^\d+$/;
                    validation.MINUTE_MAX = 59;
                    validation.HOUR_MAX = 24;
                    validation.DEF_HOUR_MAX = 9999;
                    validation.DEF_HOUR_MIN = 0;
                    validation.DEF_MIN_MAXMIN = 0;
                    validation.DAY_MINS = 1439;
                    var Result = /** @class */ (function () {
                        function Result(isValid, value) {
                            this.isValid = isValid;
                            this.value = value;
                        }
                        Result.fail = function () {
                            return new Result(false);
                        };
                        Result.ok = function (value) {
                            return new Result(true, value);
                        };
                        return Result;
                    }());
                    /**
                     * Validate.
                     */
                    function validate($body, $cell, rowIdx, columnKey, innerIdx, value, timeRangerDef) {
                        var vtor = validation.mandate($body, columnKey, innerIdx);
                        var gen = $.data($body, internal.TANGI) || $.data($body, internal.CANON);
                        var rowId = gen.dataSource[rowIdx][gen.primaryKey];
                        timeRangerDef = timeRangerDef || $.data($body, internal.TIME_VALID_RANGE);
                        var formatValue;
                        if (vtor) {
                            if ((vtor.actValid === internal.TIME || vtor.actValid === internal.DURATION) && timeRangerDef) {
                                var ranges = timeRangerDef[rowId];
                                _.forEach(ranges, function (range) {
                                    if (range && range.columnKey === columnKey && range.innerIdx === innerIdx) {
                                        vtor.max = range.max;
                                        vtor.min = range.min;
                                        return Result.fail();
                                    }
                                });
                            }
                            var isValid = void 0, message = void 0;
                            if (vtor.required && (_.isUndefined(value) || _.isEmpty(value))) {
                                isValid = false;
                                message = uk.resource.getMessage('MsgB_1', ["時間"]);
                            }
                            else if (!_.isUndefined(value) && !_.isEmpty(value)) {
                                if (vtor.actValid === internal.TIME) {
                                    isValid = isTimeClock(value);
                                    message = uk.resource.getMessage("MsgB_16", ["時刻", "0:00", "23:59"]);
                                    formatValue = formatTime(value);
                                }
                                else if (vtor.actValid === internal.DURATION) {
                                    isValid = isTimeDuration(value, vtor.max, vtor.min);
                                    if (_.isNil(vtor.max)) {
                                        vtor.max = validation.DEF_HOUR_MAX + ":00";
                                    }
                                    if (_.isNil(vtor.min)) {
                                        vtor.min = "0:00";
                                    }
                                    message = uk.resource.getMessage("MsgB_15", ["時間", vtor.min, vtor.max]);
                                    formatValue = formatTime(value);
                                }
                                else if (vtor.actValid === internal.NUMBER) {
                                    isValid = isNumber(value, vtor.max, vtor.min);
                                    message = "MESSAGE_DEFINE_NEED";
                                    formatValue = (_.isUndefined(value) || _.isEmpty(value)) ? "" : Number(value);
                                }
                                else {
                                    isValid = true;
                                    formatValue = value;
                                }
                            }
                            else {
                                isValid = true;
                                formatValue = "";
                            }
                            var $tbl = helper.closest($body, "." + NAMESPACE);
                            if (!isValid) {
                                errors.add($tbl, $cell, rowIdx, columnKey, innerIdx, value);
                                //                cellData($exTable, rowIdx, columnKey, innerIdx, value);
                                //                    update.setText($cell, innerIdx, value);
                                if (gen.options.errorMessagePopup) {
                                    $.data($cell, internal.ERR_MSG, message);
                                }
                                return Result.fail();
                            }
                            else {
                                if (gen.options.errorMessagePopup) {
                                    $.data($cell, internal.ERR_MSG, null);
                                }
                            }
                            if (errors.any($cell, innerIdx))
                                errors.remove($tbl, $cell, rowIdx, columnKey, innerIdx);
                        }
                        return Result.ok(formatValue);
                    }
                    validation.validate = validate;
                    /**
                     * Mandate.
                     */
                    function mandate($grid, columnKey, innerIdx) {
                        var visibleColumns = helper.getVisibleColumnsOn($grid);
                        var actValid, dataType, max, min, required;
                        _.forEach(visibleColumns, function (col) {
                            if (col.key === columnKey) {
                                if (!col.dataType)
                                    return false;
                                dataType = col.dataType.toLowerCase();
                                actValid = which(innerIdx, dataType, internal.TIME)
                                    || which(innerIdx, dataType, internal.DURATION)
                                    || which(innerIdx, dataType, internal.NUMBER)
                                    || which(innerIdx, dataType, internal.TEXT);
                                var constraints = ui.validation.getConstraint(col.primitiveValue);
                                if (constraints && (constraints.valueType === "Time" || constraints.valueType === "Clock")) {
                                    max = constraints.max ? constraints.max : col.max;
                                    min = constraints.min ? constraints.min : col.min;
                                    required = constraints.required ? constraints.required : col.required;
                                    return false;
                                }
                                max = col.max;
                                min = col.min;
                                required = col.required;
                                return false;
                            }
                        });
                        if (actValid)
                            return {
                                actValid: actValid,
                                max: max,
                                min: min,
                                required: required
                            };
                    }
                    validation.mandate = mandate;
                    /**
                     * Which.
                     */
                    function which(innerIdx, dataType, type) {
                        var actValid;
                        if (dataType && dataType.indexOf(type) !== -1) {
                            if (!uk.util.isNullOrUndefined(innerIdx) && innerIdx > -1) {
                                _.forEach(dataType.split(internal.DT_SEPARATOR), function (p, index) {
                                    if (p === type && index === innerIdx) {
                                        actValid = type;
                                        return false;
                                    }
                                });
                            }
                            else {
                                actValid = type;
                            }
                        }
                        return actValid;
                    }
                    /**
                     * Check time clock.
                     */
                    function isTimeClock(time) {
                        if (uk.util.isNullOrUndefined(time))
                            return false;
                        time = time.trim();
                        var hour, minute;
                        if (validation.TIME_PTN.test(time)) {
                            var parts = time.split(validation.TIME_SPLIT);
                            hour = parseInt(parts[0]);
                            minute = parseInt(parts[1]);
                        }
                        else if (validation.SHORT_TIME_PTN.test(time)) {
                            var totalTime = parseInt(time);
                            minute = totalTime % 100;
                            hour = Math.floor(totalTime / 100);
                        }
                        if (((!isNaN(hour) && hour >= 0 && hour <= validation.HOUR_MAX) || isNaN(hour))
                            && !isNaN(minute) && minute >= 0 && minute <= validation.MINUTE_MAX)
                            return true;
                        return false;
                    }
                    validation.isTimeClock = isTimeClock;
                    /**
                     * Check time duration.
                     */
                    function isTimeDuration(time, max, min) {
                        if (uk.util.isNullOrUndefined(time))
                            return false;
                        time = time.trim();
                        var hour, minute, negative, minMM, maxHour = validation.DEF_HOUR_MAX, minHour = validation.DEF_HOUR_MIN;
                        var maxMM = minMM = validation.DEF_MIN_MAXMIN;
                        var maxTime = parse(max) || { hour: validation.DEF_HOUR_MAX, minute: validation.DEF_MIN_MAXMIN, negative: false };
                        var minTime = parse(min) || { hour: validation.DEF_HOUR_MIN, minute: validation.DEF_MIN_MAXMIN, negative: false };
                        if (validation.TIME_PTN.test(time)) {
                            var parts = time.split(validation.TIME_SPLIT);
                            hour = Math.abs(parseInt(parts[0]));
                            minute = parseInt(parts[1]);
                            negative = time.charAt(0) === '-';
                        }
                        else if (validation.SHORT_TIME_PTN.test(time)) {
                            var totalTime = Math.abs(parseInt(time));
                            minute = totalTime % 100;
                            hour = Math.floor(totalTime / 100);
                            negative = time.charAt(0) === '-';
                        }
                        if (((uk.util.isNullOrUndefined(hour) || isNaN(hour)) && (uk.util.isNullOrUndefined(minute) || isNaN(minute)))
                            || minute > validation.MINUTE_MAX)
                            return false;
                        var targetTime = getComplement({ hour: hour, minute: minute, negative: negative });
                        if (!targetTime)
                            return false;
                        var compareMax = compare(targetTime, maxTime);
                        var compareMin = compare(targetTime, minTime);
                        if (compareMax > 0 || compareMin < 0)
                            return false;
                        if ((targetTime.negative && maxTime.negative && compareMax === 0)
                            || (targetTime.negative && minTime.negative && compareMin === 0))
                            return false;
                        return true;
                    }
                    validation.isTimeDuration = isTimeDuration;
                    /**
                     * Check number.
                     */
                    function isNumber(value, max, min) {
                        if (!validation.NUMBER_PTN.test(value))
                            return false;
                        var int = parseInt(value);
                        if ((!uk.util.isNullOrUndefined(max) && int > parseInt(max))
                            || (!uk.util.isNullOrUndefined(min) && int < parseInt(min)))
                            return false;
                        return true;
                    }
                    /**
                     * Compare.
                     */
                    function compare(one, other) {
                        if (one.negative && !other.negative)
                            return -1;
                        else if (!one.negative && other.negative)
                            return 1;
                        else if (one.negative && other.negative) {
                            return compareAbs(one, other) * (-1);
                        }
                        else
                            return compareAbs(one, other);
                    }
                    /**
                     * Compare abs.
                     */
                    function compareAbs(one, other) {
                        if (one.hour > other.hour) {
                            return 1;
                        }
                        else if (one.hour < other.hour) {
                            return -1;
                        }
                        else if (one.minute > other.minute) {
                            return 1;
                        }
                        else if (one.minute < other.minute) {
                            return -1;
                        }
                        return 0;
                    }
                    /**
                     * Get complement.
                     */
                    function getComplement(time) {
                        if (!time.negative)
                            return time;
                        var oTime = validation.DAY_MINS - (time.hour * 60 + time.minute);
                        if (oTime < 0)
                            return;
                        var hour = Math.floor(oTime / 60);
                        var minute = oTime - hour * 60;
                        return { hour: hour, minute: minute, negative: true };
                    }
                    /**
                     * Parse.
                     */
                    function parse(time) {
                        if (validation.TIME_PTN.test(time)) {
                            var parts = time.split(validation.TIME_SPLIT);
                            var hour = Math.abs(parseInt(parts[0]));
                            var minute = parseInt(parts[1]);
                            return {
                                hour: hour,
                                minute: minute,
                                negative: time.charAt(0) === '-'
                            };
                        }
                    }
                    /**
                     * Format time.
                     */
                    function formatTime(time) {
                        var minute, hour;
                        if (validation.SHORT_TIME_PTN.test(time)) {
                            var totalTime = Math.abs(parseInt(time));
                            minute = totalTime % 100;
                            hour = Math.floor(totalTime / 100);
                        }
                        if (!uk.util.isNullOrUndefined(hour) && !isNaN(hour)
                            && !uk.util.isNullOrUndefined(minute) && !isNaN(minute)) {
                            if (minute < 10)
                                minute = "0" + minute;
                            return (time.charAt(0) === '-' ? "-" : "") + hour + validation.TIME_SPLIT + minute;
                        }
                        if (!uk.util.isNullOrUndefined(hour) && isNaN(hour)
                            && !uk.util.isNullOrUndefined(minute) && !isNaN(minute)) {
                            return (time.charAt(0) === '-' ? "-" : "") + minute;
                        }
                        return time;
                    }
                    validation.formatTime = formatTime;
                })(validation || (validation = {}));
                var errors;
                (function (errors_2) {
                    errors_2.ERROR_CLS = "x-error";
                    errors_2.ERRORS = "errors";
                    errors_2.ERR_MSG_CLS = "x-error-message";
                    /**
                     * Add.
                     */
                    function add($grid, $cell, rowIdx, columnKey, innerIdx, value) {
                        if (any($cell, innerIdx))
                            return;
                        var errors = $.data($grid, errors_2.ERRORS);
                        var newErr = new selection.Cell(rowIdx, columnKey, value, innerIdx);
                        if (!errors) {
                            errors = [newErr];
                            $.data($grid, errors_2.ERRORS, errors);
                        }
                        else {
                            errors.push(newErr);
                        }
                        if (selector.is($cell, "td") && !uk.util.isNullOrUndefined(innerIdx) && innerIdx > -1) {
                            $cell.querySelectorAll("div")[innerIdx].classList.add(errors_2.ERROR_CLS);
                        }
                        else {
                            $cell.classList.add(errors_2.ERROR_CLS);
                        }
                    }
                    errors_2.add = add;
                    /**
                     * Remove.
                     */
                    function remove($grid, $cell, rowIdx, columnKey, innerIdx) {
                        var errors = $.data($grid, errors_2.ERRORS);
                        if (!errors)
                            return;
                        var idx;
                        _.forEach(errors, function (err, index) {
                            if (helper.areSameCells(err, { rowIndex: rowIdx, columnKey: columnKey, innerIdx: innerIdx })) {
                                idx = index;
                                return false;
                            }
                        });
                        if (!uk.util.isNullOrUndefined(idx)) {
                            errors.splice(idx, 1);
                            if (selector.is($cell, "td") && !uk.util.isNullOrUndefined(innerIdx) && innerIdx > -1) {
                                $cell.querySelector("div")[innerIdx].classList.remove(errors_2.ERROR_CLS);
                            }
                            else {
                                $cell.classList.remove(errors_2.ERROR_CLS);
                            }
                        }
                    }
                    errors_2.remove = remove;
                    /**
                     * Clear.
                     */
                    function clear($grid) {
                        $.data($grid, errors_2.ERRORS, null);
                    }
                    errors_2.clear = clear;
                    /**
                     * Any.
                     */
                    function any($cell, innerIdx) {
                        var $childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                        if (!uk.util.isNullOrUndefined(innerIdx) && $childCells.length > 0) {
                            return $childCells[innerIdx].classList.contains(errors_2.ERROR_CLS);
                        }
                        return $cell.classList.contains(errors_2.ERROR_CLS);
                    }
                    errors_2.any = any;
                    /**
                     * Occurred.
                     */
                    function occurred($grid) {
                        var errs = $.data($grid, errors_2.ERRORS);
                        if (!errs)
                            return false;
                        return errs.length > 0;
                    }
                    errors_2.occurred = occurred;
                })(errors || (errors = {}));
                var selection;
                (function (selection) {
                    selection.CELL_SELECTED_CLS = "x-cell-selected";
                    selection.ROW_SELECTED_CLS = "x-row-selected";
                    var Cell = /** @class */ (function () {
                        function Cell(rowIdx, columnKey, value, innerIdx) {
                            this.rowIndex = rowIdx;
                            this.columnKey = columnKey;
                            this.value = value;
                            this.innerIdx = innerIdx;
                        }
                        Cell.prototype.setTarget = function (target) {
                            this.updateTarget = target;
                        };
                        return Cell;
                    }());
                    selection.Cell = Cell;
                    /**
                     * Check up.
                     */
                    function checkUp($exTable) {
                        if ($.data($exTable, NAMESPACE).updateMode !== COPY_PASTE)
                            return;
                        var $detailContent = $exTable.querySelector("." + BODY_PRF + DETAIL);
                        var isSelecting;
                        $detailContent.onselectstart = function () {
                            return false;
                        };
                        $detailContent.addXEventListener(events.MOUSE_DOWN, function (evt) {
                            var $target = evt.target;
                            isSelecting = true;
                            if (!selector.is($target, "." + render.CHILD_CELL_CLS) && !selector.is($target, "td"))
                                return;
                            if (evt.shiftKey) {
                                selectRange($detailContent, $target);
                                return;
                            }
                            if (!evt.ctrlKey) {
                                clearAll($detailContent);
                            }
                            selectCell($detailContent, $target);
                        });
                        $detailContent.addXEventListener(events.MOUSE_UP, function (evt) {
                            isSelecting = false;
                        });
                        $detailContent.addXEventListener(events.MOUSE_MOVE, function (evt) {
                            if (isSelecting) {
                                selectRange($detailContent, evt.target);
                            }
                        });
                    }
                    selection.checkUp = checkUp;
                    /**
                     * Select range.
                     */
                    function selectRange($grid, $cell) {
                        if (uk.util.isNullOrUndefined($cell) || selector.is($cell, "." + BODY_PRF + DETAIL))
                            return;
                        var lastSelected = $.data($grid, internal.LAST_SELECTED);
                        if (!lastSelected) {
                            selectCell($grid, $cell);
                            return;
                        }
                        clearAll($grid);
                        var toCoord = helper.getCellCoord($cell);
                        var minRowIdx = Math.min(lastSelected.rowIdx, toCoord.rowIdx);
                        var maxRowIdx = Math.max(lastSelected.rowIdx, toCoord.rowIdx);
                        for (var i = minRowIdx; i < maxRowIdx + 1; i++) {
                            cellInRange($grid, i, lastSelected.columnKey, toCoord.columnKey);
                        }
                    }
                    /**
                     * Mark cell.
                     */
                    function markCell($cell, single) {
                        if (selector.is($cell, "." + render.CHILD_CELL_CLS)) {
                            $cell.classList.add(selection.CELL_SELECTED_CLS);
                            if (single) {
                                $cell.focus();
                                return true;
                            }
                            selector.classSiblings($cell, render.CHILD_CELL_CLS).forEach(function (e) {
                                e.classList.add(selection.CELL_SELECTED_CLS);
                            });
                            return true;
                        }
                        else if (selector.is($cell, "td")) {
                            var childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                            if (childCells.length > 0) {
                                helper.addClass(childCells, selection.CELL_SELECTED_CLS);
                            }
                            else {
                                $cell.classList.add(selection.CELL_SELECTED_CLS);
                            }
                            return true;
                        }
                        return false;
                    }
                    selection.markCell = markCell;
                    /**
                     * Select cell.
                     */
                    function selectCell($grid, $cell, notLast) {
                        if (!markCell($cell))
                            return;
                        var coord = helper.getCellCoord($cell);
                        addSelect($grid, coord.rowIdx, coord.columnKey, notLast);
                        tickRows(selector.classSiblings($grid, BODY_PRF + LEFTMOST), false);
                    }
                    selection.selectCell = selectCell;
                    /**
                     * Add select.
                     */
                    function addSelect($grid, rowIdx, columnKey, notLast) {
                        var selectedCells = $.data($grid, internal.SELECTED_CELLS);
                        if (!notLast)
                            $.data($grid, internal.LAST_SELECTED, { rowIdx: rowIdx, columnKey: columnKey });
                        if (!selectedCells) {
                            selectedCells = {};
                            selectedCells[rowIdx] = [columnKey];
                            $.data($grid, internal.SELECTED_CELLS, selectedCells);
                            return;
                        }
                        if (!selectedCells[rowIdx]) {
                            selectedCells[rowIdx] = [columnKey];
                            return;
                        }
                        if (_.find(selectedCells[rowIdx], function (key) {
                            return key === columnKey;
                        }) === undefined) {
                            selectedCells[rowIdx].push(columnKey);
                        }
                    }
                    selection.addSelect = addSelect;
                    /**
                     * Clear.
                     */
                    function clear($grid, rowIdx, columnKey) {
                        var selectedCells = $.data($grid, internal.SELECTED_CELLS);
                        if (!selectedCells)
                            return;
                        var row = selectedCells[rowIdx];
                        if (!row || row.length === 0)
                            return;
                        var colIdx;
                        _.forEach(row, function (key, index) {
                            if (key === columnKey) {
                                colIdx = index;
                                return false;
                            }
                        });
                        if (uk.util.isNullOrUndefined(colIdx))
                            return;
                        row.splice(colIdx, 1);
                        var selectedCell = cellAt($grid, rowIdx, columnKey);
                        if (selectedCell === intan.NULL)
                            return;
                        if (selectedCell) {
                            var $childCells = selectedCell.querySelectorAll("." + render.CHILD_CELL_CLS);
                            if ($childCells.length > 0) {
                                helper.removeClass($childCells, selection.CELL_SELECTED_CLS);
                            }
                            else {
                                helper.removeClass(selectedCell, selection.CELL_SELECTED_CLS);
                            }
                        }
                    }
                    selection.clear = clear;
                    /**
                     * Clear all.
                     */
                    function clearAll($grid) {
                        var selectedCells = $.data($grid, internal.SELECTED_CELLS);
                        if (!selectedCells)
                            return;
                        _.forEach(Object.keys(selectedCells), function (rowIdx, index) {
                            if (!rowExists($grid, rowIdx))
                                return;
                            _.forEach(selectedCells[rowIdx], function (col, i) {
                                var $cell = cellAt($grid, rowIdx, col);
                                if ($cell) {
                                    var childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                                    if (childCells.length > 0) {
                                        helper.removeClass(childCells, selection.CELL_SELECTED_CLS);
                                    }
                                    else {
                                        helper.removeClass($cell, selection.CELL_SELECTED_CLS);
                                    }
                                }
                            });
                        });
                        $.data($grid, internal.SELECTED_CELLS, null);
                    }
                    selection.clearAll = clearAll;
                    /**
                     * Clear inner cell.
                     */
                    function clearInnerCell($grid, rowIdx, columnKey, innerIdx) {
                        if (!rowExists($grid, rowIdx))
                            return;
                        var $cell = cellAt($grid, rowIdx, columnKey);
                        var childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                        if (_.isNil(childCells) || childCells.length === 0) {
                            helper.removeClass($cell, selection.CELL_SELECTED_CLS);
                            return;
                        }
                        helper.removeClass(childCells[innerIdx], selection.CELL_SELECTED_CLS);
                    }
                    selection.clearInnerCell = clearInnerCell;
                    /**
                     * Cell at.
                     */
                    function cellAt($grid, rowIdx, columnKey) {
                        var $row = rowAt($grid, rowIdx);
                        return getCellInRow($grid, $row, columnKey);
                    }
                    selection.cellAt = cellAt;
                    /**
                     * Row at.
                     */
                    function rowAt($grid, rowIdx) {
                        var virt = $.data($grid, internal.TANGI);
                        var rows = $grid.getElementsByTagName("tr");
                        var idx;
                        if (!virt) {
                            idx = (parseInt(rowIdx) + 1);
                            if (!rows || rows.length <= idx)
                                return intan.NULL;
                            return rows[idx];
                        }
                        if (virt.startIndex > rowIdx || virt.endIndex < rowIdx) {
                            if (virt.rowElements)
                                return virt.rowElements[rowIdx];
                            return intan.NULL;
                        }
                        idx = (parseInt(rowIdx) - virt.startIndex + 1);
                        return rows[idx];
                    }
                    selection.rowAt = rowAt;
                    /**
                     * Cell of.
                     */
                    function cellOf($grid, rowId, columnKey) {
                        var $row = rowOf($grid, rowId);
                        return getCellInRow($grid, $row, columnKey);
                    }
                    selection.cellOf = cellOf;
                    /**
                     * Row of.
                     */
                    function rowOf($grid, rowId) {
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        if (!gen)
                            return;
                        var start = gen.startIndex || 0;
                        var end = gen.endIndex || gen.dataSource.length - 1;
                        for (var i = start; i <= end; i++) {
                            if (gen.dataSource[i][gen.primaryKey] === rowId) {
                                return rowAt($grid, i);
                            }
                        }
                    }
                    selection.rowOf = rowOf;
                    /**
                     * Row exists.
                     */
                    function rowExists($grid, rowIdx) {
                        var virt = $.data($grid, internal.TANGI);
                        if (virt && (virt.startIndex > rowIdx || virt.endIndex < rowIdx)) {
                            if (virt.rowElements && virt.rowElements[rowIdx])
                                return true;
                            return false;
                        }
                        return true;
                    }
                    selection.rowExists = rowExists;
                    /**
                     * Cell in range.
                     */
                    function cellInRange($grid, rowIdx, startKey, endKey) {
                        var range = [];
                        var $row = rowAt($grid, rowIdx);
                        if ($row === intan.NULL)
                            return;
                        var colRange = columnIndexRange($grid, startKey, endKey);
                        if (colRange.start === -1 || colRange.end === -1)
                            return;
                        var min = Math.min(colRange.start, colRange.end);
                        var max = Math.max(colRange.start, colRange.end);
                        var $td = selector.queryAll($row, "td").filter(function (e) {
                            return e.style.display !== "none";
                        }).forEach(function (e, index) {
                            if (index >= min && index <= max) {
                                var childCells = e.querySelectorAll("." + render.CHILD_CELL_CLS);
                                if (childCells.length > 0) {
                                    helper.addClass(childCells, selection.CELL_SELECTED_CLS);
                                }
                                else {
                                    helper.addClass(e, selection.CELL_SELECTED_CLS);
                                }
                                addSelect($grid, rowIdx, colRange.columns[index].key, true);
                                range.push($(this));
                            }
                            else if (index > max)
                                return false;
                        });
                        return range;
                    }
                    selection.cellInRange = cellInRange;
                    /**
                     * Get cell in row.
                     */
                    function getCellInRow($grid, $row, columnKey) {
                        if ($row === intan.NULL || !$row)
                            return intan.NULL;
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        var visibleColumns = gen.painter.visibleColumns;
                        var columnIdx;
                        _.forEach(visibleColumns, function (c, idx) {
                            if (c.key === columnKey) {
                                columnIdx = idx;
                                return false;
                            }
                        });
                        if (uk.util.isNullOrUndefined(columnIdx))
                            return intan.NULL;
                        var cells = Array.prototype.slice.call($row.getElementsByTagName("td")).filter(function (c) {
                            return c.style.display !== "none";
                        });
                        return cells[columnIdx];
                    }
                    selection.getCellInRow = getCellInRow;
                    /**
                     * Column index range.
                     */
                    function columnIndexRange($grid, startKey, endKey) {
                        var cloud = $.data($grid, internal.TANGI);
                        var canon = $.data($grid, internal.CANON);
                        var visibleColumns;
                        if (!uk.util.isNullOrUndefined(cloud)) {
                            visibleColumns = cloud.painter.visibleColumns;
                        }
                        else {
                            visibleColumns = canon.painter.visibleColumns;
                        }
                        var startColumnIdx = -1, endColumnIdx = -1;
                        _.forEach(visibleColumns, function (c, idx) {
                            if (c.key === startKey) {
                                startColumnIdx = idx;
                            }
                            if (c.key === endKey) {
                                endColumnIdx = idx;
                            }
                            if (startColumnIdx !== -1 && endColumnIdx !== -1)
                                return false;
                        });
                        return {
                            start: startColumnIdx,
                            end: endColumnIdx,
                            columns: visibleColumns
                        };
                    }
                    selection.columnIndexRange = columnIndexRange;
                    /**
                     * Get selected cells.
                     */
                    function getSelectedCells($grid) {
                        var selectedCells = $.data($grid, internal.SELECTED_CELLS);
                        var generator = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        var dataSource = generator.dataSource;
                        var cells = [];
                        _.forEach(Object.keys(selectedCells), function (rowIdx) {
                            _.forEach(selectedCells[rowIdx], function (colKey) {
                                cells.push(new Cell(rowIdx, colKey, dataSource[rowIdx][colKey]));
                            });
                        });
                        return cells;
                    }
                    selection.getSelectedCells = getSelectedCells;
                    /**
                     * Off.
                     */
                    function off($exTable) {
                        if ($.data($exTable, NAMESPACE).updateMode === COPY_PASTE)
                            return;
                        var $detailContent = $exTable.querySelector("." + BODY_PRF + DETAIL);
                        $detailContent.onselectstart = function () {
                            return true;
                        };
                        $detailContent.removeXEventListener(events.MOUSE_DOWN);
                        $detailContent.removeXEventListener(events.MOUSE_UP);
                        $detailContent.removeXEventListener(events.MOUSE_MOVE);
                    }
                    selection.off = off;
                    /**
                     * Focus.
                     */
                    function focus($grid) {
                        $grid.focus();
                    }
                    selection.focus = focus;
                    /**
                     * Focus latest.
                     */
                    function focusLatest($grid) {
                        var latest = $.data($grid, internal.LAST_SELECTED);
                        if (!latest)
                            return;
                        var $cell = selection.cellAt($grid, latest.rowIdx, latest.columnKey);
                        if ($cell === intan.NULL)
                            return;
                        $cell.focus();
                    }
                    selection.focusLatest = focusLatest;
                    /**
                     * Select row.
                     */
                    function selectRow($grid, rowIndex) {
                        var $row = selection.rowAt($grid, rowIndex);
                        if ($row !== intan.NULL && !$row.classList.contains(NAMESPACE + "-" + intan.BOTTOM_SPACE)) {
                            helper.addClass($row, selection.ROW_SELECTED_CLS);
                        }
                        setTimeout(function () {
                            var tbls = helper.classSiblings($grid, BODY_PRF).filter(function (e) {
                                return !e.classList.contains(BODY_PRF + HORIZONTAL_SUM) && !e.classList.contains(BODY_PRF + LEFT_HORZ_SUM);
                            });
                            tbls.forEach(function (t) {
                                $row = selection.rowAt(t, rowIndex);
                                if ($row !== intan.NULL && !$row.classList.contains(NAMESPACE + "-" + intan.BOTTOM_SPACE)) {
                                    helper.addClass($row, selection.ROW_SELECTED_CLS);
                                }
                            });
                        }, 60);
                        var selectedRows = $.data($grid, internal.SELECTED_ROWS);
                        if (!selectedRows) {
                            selectedRows = {};
                            selectedRows.items = [];
                            selectedRows.items[rowIndex] = true;
                            selectedRows.count = (selectedRows.count || 0) + 1;
                            $.data($grid, internal.SELECTED_ROWS, selectedRows);
                            return;
                        }
                        if (!selectedRows.items) {
                            selectedRows.items = [];
                            selectedRows.items[rowIndex] = true;
                            selectedRows.count = (selectedRows.count || 0) + 1;
                            return;
                        }
                        if (!selectedRows.items[rowIndex]) {
                            selectedRows.items[rowIndex] = true;
                            selectedRows.count = (selectedRows.count || 0) + 1;
                        }
                    }
                    selection.selectRow = selectRow;
                    /**
                     * Deselect row.
                     */
                    function deselectRow($grid, rowIndex) {
                        var selectedRows = $.data($grid, internal.SELECTED_ROWS);
                        if (!selectedRows || !selectedRows.items || selectedRows.items.length === 0)
                            return;
                        selectedRows.items[rowIndex] = false;
                        selectedRows.count--;
                        var row = selection.rowAt($grid, rowIndex);
                        if (!row)
                            return;
                        row.classList.remove(selection.ROW_SELECTED_CLS);
                        var tbls = helper.classSiblings($grid, BODY_PRF).filter(function (e) {
                            return !e.classList.contains(BODY_PRF + HORIZONTAL_SUM) && !e.classList.contains(BODY_PRF + LEFT_HORZ_SUM);
                        });
                        tbls.forEach(function (t) {
                            var bodies = selection.rowAt(t, rowIndex);
                            helper.removeClass(bodies, selection.ROW_SELECTED_CLS);
                        });
                    }
                    selection.deselectRow = deselectRow;
                    /**
                     * Tick rows.
                     */
                    function tickRows($grid, flag, limit) {
                        var selectedRows = $.data($grid, internal.SELECTED_ROWS);
                        if (!selectedRows || !selectedRows.items || selectedRows.items.length === 0)
                            return;
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        var start = limit ? gen.startIndex : 0;
                        var end = limit ? gen.endIndex : selectedRows.items.length - 1;
                        for (var i = start; i <= end; i++) {
                            if (selectedRows.items[i]) {
                                controls.tick(flag, $grid, false, i);
                            }
                        }
                    }
                    selection.tickRows = tickRows;
                })(selection || (selection = {}));
                var resize;
                (function (resize) {
                    resize.AGENCY = "ex-agency";
                    resize.LINE = "ex-line";
                    resize.RESIZE_COL = "resize-column";
                    resize.AREA_AGENCY = "ex-area-agency";
                    resize.RESIZE_AREA = "resize-area";
                    resize.AREA_LINE = "ex-area-line";
                    resize.STAY_CLS = "x-stay";
                    var MiddleAdjust;
                    (function (MiddleAdjust) {
                        MiddleAdjust[MiddleAdjust["SHOW"] = 0] = "SHOW";
                        MiddleAdjust[MiddleAdjust["HIDE"] = 1] = "HIDE";
                    })(MiddleAdjust = resize.MiddleAdjust || (resize.MiddleAdjust = {}));
                    var ColumnAdjuster = /** @class */ (function () {
                        function ColumnAdjuster($headerTable, $contentTable, options) {
                            this.$headerTable = $headerTable;
                            this.$contentTable = $contentTable;
                            this.$ownerDoc = $headerTable.ownerDocument;
                            this.standardCells = [];
                        }
                        /**
                         * Handle.
                         */
                        ColumnAdjuster.prototype.handle = function () {
                            var self = this;
                            self.$agency = document.createElement("div");
                            self.$agency.className = resize.AGENCY;
                            self.$agency.style.position = "relative";
                            self.$agency.style.width = self.$headerTable.offsetWidth;
                            self.$headerTable.insertAdjacentElement("beforebegin", self.$agency);
                            self.$colGroup = self.$headerTable.querySelectorAll("colgroup > col");
                            var trList = self.$headerTable.querySelectorAll("tbody > tr");
                            var targetColumnIdx = 0;
                            _.forEach(trList, function (tr) {
                                var tdList = tr.querySelectorAll("td");
                                for (var i = 0; i < tdList.length; i++) {
                                    if (self.standardCells.length >= self.$colGroup.length)
                                        return false;
                                    var $td = tdList[i];
                                    var colspan = $td.getAttribute("colspan");
                                    if (!uk.util.isNullOrUndefined(colspan) && parseInt(colspan) > 1)
                                        continue;
                                    self.standardCells.push($td);
                                    var $targetCol = self.$colGroup[targetColumnIdx];
                                    var $line = document.createElement("div");
                                    $line.className = resize.LINE;
                                    $.data($line, resize.RESIZE_COL, $targetCol);
                                    $line.style.position = "absolute";
                                    $line.style.cursor = "ew-resize";
                                    $line.style.width = "4px";
                                    $line.style.zIndex = 2,
                                        $line.style.marginLeft = "-3px";
                                    self.$agency.appendChild($line);
                                    // Line positions
                                    var height = self.$headerTable.style.height;
                                    var left = $td.offsetWidth + (selector.offset($td).left - selector.offset(self.$agency).left);
                                    $line.style.left = left + "px";
                                    $line.style.height = height;
                                    targetColumnIdx++;
                                }
                            });
                            self.$agency.addXEventListener(events.MOUSE_DOWN, self.cursorDown.bind(self));
                        };
                        /**
                         * Cursor down.
                         */
                        ColumnAdjuster.prototype.cursorDown = function (event) {
                            var self = this;
                            if (self.actionDetails) {
                                self.cursorUp(event);
                            }
                            var $targetGrip = event.target;
                            var gripIndex = selector.index($targetGrip);
                            var $leftCol = $.data($targetGrip, resize.RESIZE_COL);
                            var $rightCol = self.$colGroup[gripIndex + 1];
                            var leftWidth = $leftCol.style.width;
                            var rightWidth = $rightCol.style.width;
                            self.actionDetails = {
                                $targetGrip: $targetGrip,
                                gripIndex: gripIndex,
                                $leftCol: $leftCol,
                                $rightCol: $rightCol,
                                xCoord: getCursorX(event),
                                widths: {
                                    left: parseFloat(leftWidth),
                                    right: parseFloat(rightWidth)
                                },
                                changedWidths: {
                                    left: parseFloat(leftWidth),
                                    right: parseFloat(rightWidth)
                                }
                            };
                            self.$ownerDoc.addXEventListener(events.MOUSE_MOVE, self.cursorMove.bind(self));
                            self.$ownerDoc.addXEventListener(events.MOUSE_UP, self.cursorUp.bind(self));
                            event.preventDefault();
                        };
                        /**
                         * Cursor move.
                         */
                        ColumnAdjuster.prototype.cursorMove = function (event) {
                            var self = this;
                            if (!self.actionDetails)
                                return;
                            var distance = getCursorX(event) - self.actionDetails.xCoord;
                            if (distance === 0)
                                return;
                            var leftWidth, rightWidth;
                            if (distance > 0) {
                                leftWidth = self.actionDetails.widths.left + distance;
                                rightWidth = self.actionDetails.widths.right - distance;
                            }
                            else {
                                leftWidth = self.actionDetails.widths.left + distance;
                                rightWidth = self.actionDetails.widths.right - distance;
                            }
                            if (leftWidth <= 20 || rightWidth <= 20)
                                return;
                            self.actionDetails.changedWidths.left = leftWidth;
                            self.actionDetails.changedWidths.right = rightWidth;
                            if (self.actionDetails.$leftCol) {
                                self.setWidth(self.actionDetails.$leftCol, leftWidth);
                                var $contentLeftCol = self.$contentTable.querySelectorAll("colgroup > col")[self.actionDetails.gripIndex];
                                self.setWidth($contentLeftCol, leftWidth);
                            }
                            if (self.actionDetails.$rightCol) {
                                self.setWidth(self.actionDetails.$rightCol, rightWidth);
                                var $contentRightCol = self.$contentTable.querySelectorAll("colgroup > col")[self.actionDetails.gripIndex + 1];
                                self.setWidth($contentRightCol, rightWidth);
                            }
                        };
                        /**
                         * Cursor up.
                         */
                        ColumnAdjuster.prototype.cursorUp = function (event) {
                            var self = this;
                            self.$ownerDoc.removeXEventListener(events.MOUSE_MOVE);
                            self.$ownerDoc.removeXEventListener(events.MOUSE_UP);
                            self.syncLines();
                            self.actionDetails = null;
                        };
                        /**
                         * Set width.
                         */
                        ColumnAdjuster.prototype.setWidth = function ($col, width) {
                            $col.style.width = parseFloat(width) + "px";
                        };
                        /**
                         * Sync lines.
                         */
                        ColumnAdjuster.prototype.syncLines = function () {
                            var self = this;
                            self.$agency.style.width = self.$headerTable.style.width;
                            _.forEach(self.standardCells, function ($td, index) {
                                var height = self.$headerTable.style.height;
                                var left = $td.offsetWidth + (selector.offset($td).left - selector.offset(self.$agency).left);
                                var div = self.$agency.querySelectorAll("div")[index];
                                div.style.left = left + "px";
                                div.style.height = height;
                            });
                        };
                        return ColumnAdjuster;
                    }());
                    resize.ColumnAdjuster = ColumnAdjuster;
                    var AreaAdjuster = /** @class */ (function () {
                        function AreaAdjuster($container, headerWrappers, bodyWrappers, $follower) {
                            this.$container = $container;
                            this.headerWrappers = headerWrappers;
                            this.bodyWrappers = bodyWrappers;
                            this.$ownerDoc = $container.ownerDocument;
                            this.$leftHorzSumHeader = this.$container.querySelector("." + HEADER_PRF + LEFT_HORZ_SUM);
                            this.$leftHorzSumContent = this.$container.querySelector("." + BODY_PRF + LEFT_HORZ_SUM);
                            this.$horzSumHeader = this.$container.querySelector("." + HEADER_PRF + HORIZONTAL_SUM);
                            this.$horzSumContent = this.$container.querySelector("." + BODY_PRF + HORIZONTAL_SUM);
                            if ($follower) {
                                this.$depLeftmostHeader = $follower.querySelector("." + HEADER_PRF + LEFTMOST);
                                this.$depLeftmostBody = $follower.querySelector("." + BODY_PRF + LEFTMOST);
                                this.$depDetailHeader = $follower.querySelector("." + HEADER_PRF + DETAIL);
                                this.$depDetailBody = $follower.querySelector("." + BODY_PRF + DETAIL);
                            }
                        }
                        /**
                         * Handle.
                         */
                        AreaAdjuster.prototype.handle = function () {
                            var self = this;
                            self.$areaAgency = document.createElement("div");
                            self.$areaAgency.className = resize.AREA_AGENCY;
                            self.$areaAgency.style.position = "relative";
                            self.$areaAgency.style.width = self.$container.style.width;
                            self.headerWrappers[0].insertAdjacentElement("beforebegin", self.$areaAgency);
                            _.forEach(self.headerWrappers, function ($wrapper, index) {
                                if (index === self.headerWrappers.length - 1)
                                    return;
                                var $line = document.createElement("div");
                                $line.className = resize.AREA_LINE;
                                $.data($line, resize.RESIZE_AREA, $wrapper);
                                $line.style.position = "absolute";
                                $line.style.cursor = "ew-resize";
                                $line.style.width = "4px";
                                $line.style.zIndex = 2;
                                $line.style.marginLeft = "0px";
                                self.$areaAgency.appendChild($line);
                                // Line positions
                                var height = parseFloat($wrapper.style.height) + parseFloat(self.bodyWrappers[index].style.height);
                                var left = $wrapper.offsetWidth + (selector.offset($wrapper).left - selector.offset(self.$areaAgency).left);
                                $line.style.left = left + "px";
                                $line.style.height = height + "px";
                                if ($wrapper.classList.contains(HEADER_PRF + LEFTMOST)
                                    && self.headerWrappers[index + 1].classList.contains(HEADER_PRF + MIDDLE))
                                    helper.addClass($line, resize.STAY_CLS);
                            });
                            self.$areaAgency.addXEventListener(events.MOUSE_DOWN, self.cursorDown.bind(self));
                        };
                        /**
                         * Cursor down.
                         */
                        AreaAdjuster.prototype.cursorDown = function (event) {
                            var self = this;
                            if (self.actionDetails) {
                                self.cursorUp(event);
                            }
                            var $targetGrip = event.target;
                            if ($targetGrip.classList.contains(resize.STAY_CLS))
                                return;
                            var gripIndex = selector.index($targetGrip);
                            var $leftArea = $.data($targetGrip, resize.RESIZE_AREA);
                            var $rightArea = self.headerWrappers[gripIndex + 1];
                            var leftWidth = $leftArea.style.width;
                            var rightWidth = !uk.util.isNullOrUndefined($rightArea) ? $rightArea.style.width : 0;
                            var leftHorzSumWidth;
                            if (self.$leftHorzSumHeader) {
                                leftHorzSumWidth = self.$leftHorzSumHeader.style.width;
                            }
                            else if (self.headerWrappers[0].classList.contains(HEADER_PRF + LEFTMOST)) {
                                leftHorzSumWidth = parseFloat(self.headerWrappers[0].style.width);
                                if (self.headerWrappers[1].classList.contains(HEADER_PRF + MIDDLE)) {
                                    leftHorzSumWidth += (parseFloat(self.headerWrappers[1].style.width) + DISTANCE);
                                }
                            }
                            self.actionDetails = {
                                $targetGrip: $targetGrip,
                                gripIndex: gripIndex,
                                $leftArea: $leftArea,
                                $rightArea: $rightArea,
                                xCoord: getCursorX(event),
                                rightAreaPosLeft: $rightArea ? $rightArea.style.left : 0,
                                widths: {
                                    left: parseFloat(leftWidth),
                                    right: parseFloat(rightWidth),
                                    leftHorzSum: parseFloat(leftHorzSumWidth)
                                },
                                changedWidths: {
                                    left: parseFloat(leftWidth),
                                    right: parseFloat(rightWidth),
                                    leftHorzSum: parseFloat(leftHorzSumWidth)
                                }
                            };
                            self.$ownerDoc.addXEventListener(events.MOUSE_MOVE, self.cursorMove.bind(self));
                            self.$ownerDoc.addXEventListener(events.MOUSE_UP, self.cursorUp.bind(self));
                            events.trigger(self.$container, events.AREA_RESIZE_STARTED, [$leftArea, $rightArea, leftWidth, rightWidth]);
                            event.preventDefault();
                        };
                        /**
                         * Cursor move.
                         */
                        AreaAdjuster.prototype.cursorMove = function (event) {
                            var self = this;
                            if (!self.actionDetails)
                                return;
                            var distance = getCursorX(event) - self.actionDetails.xCoord;
                            if (distance === 0)
                                return;
                            var $bodyLeftArea, $bodyRightArea, leftWidth, rightWidth;
                            // TODO: Use if here because there may be changes later.
                            if (distance > 0) {
                                leftWidth = self.actionDetails.widths.left + distance;
                                rightWidth = self.actionDetails.widths.right - distance;
                            }
                            else {
                                leftWidth = self.actionDetails.widths.left + distance;
                                rightWidth = self.actionDetails.widths.right - distance;
                            }
                            if (!self.isResizePermit(leftWidth, rightWidth))
                                return;
                            self.actionDetails.changedWidths.left = leftWidth;
                            self.actionDetails.changedWidths.right = rightWidth;
                            if (self.actionDetails.$leftArea) {
                                self.setWidth(self.actionDetails.$leftArea, leftWidth);
                                $bodyLeftArea = self.bodyWrappers[self.actionDetails.gripIndex];
                                if (self.actionDetails.gripIndex === self.bodyWrappers.length - 1) {
                                    self.setWidth($bodyLeftArea, leftWidth + helper.getScrollWidth());
                                }
                                else {
                                    self.setWidth($bodyLeftArea, leftWidth);
                                }
                            }
                            var newPosLeft;
                            if (self.actionDetails.$rightArea) {
                                self.setWidth(self.actionDetails.$rightArea, rightWidth);
                                newPosLeft = (parseInt(self.actionDetails.rightAreaPosLeft) + distance) + "px";
                                self.actionDetails.$rightArea.style.left = newPosLeft;
                                $bodyRightArea = self.bodyWrappers[self.actionDetails.gripIndex + 1];
                                if (self.actionDetails.gripIndex === self.bodyWrappers.length - 2
                                    || $bodyRightArea.style.overflowY === "scroll") {
                                    self.setWidth($bodyRightArea, rightWidth + helper.getScrollWidth());
                                }
                                else {
                                    self.setWidth($bodyRightArea, rightWidth);
                                }
                                $bodyRightArea.style.left = newPosLeft;
                            }
                            self.reflectSumTblsSize(distance, leftWidth, rightWidth, newPosLeft);
                            events.trigger(self.$container, events.AREA_RESIZE, [self.actionDetails.$leftArea, self.actionDetails.$rightArea, leftWidth, rightWidth]);
                        };
                        /**
                         * Reflect size.
                         */
                        AreaAdjuster.prototype.reflectSumTblsSize = function (diff, leftWidth, rightWidth, posLeft) {
                            var self = this;
                            var $leftArea = self.actionDetails.$leftArea;
                            var $rightArea = self.actionDetails.$rightArea;
                            var scrollWidth = helper.getScrollWidth();
                            if ($rightArea && $rightArea.classList.contains(HEADER_PRF + DETAIL)) {
                                var horzLeftWidth = self.actionDetails.widths.leftHorzSum + diff;
                                self.setWidth(self.$leftHorzSumHeader, horzLeftWidth);
                                self.setWidth(self.$leftHorzSumContent, horzLeftWidth);
                                self.setWidth(self.$horzSumHeader, rightWidth);
                                self.setWidth(self.$horzSumContent, rightWidth + scrollWidth);
                                if (self.$horzSumHeader) {
                                    self.$horzSumHeader.style.left = posLeft;
                                    self.$horzSumContent.style.left = posLeft;
                                }
                                if (self.$depLeftmostHeader) {
                                    self.setWidth(self.$depLeftmostHeader, horzLeftWidth);
                                    self.setWidth(self.$depLeftmostBody, horzLeftWidth);
                                    self.setWidth(self.$depDetailHeader, rightWidth);
                                    self.setWidth(self.$depDetailBody, rightWidth + scrollWidth);
                                    self.$depDetailHeader.style.left = posLeft;
                                    self.$depDetailBody.style.left = posLeft;
                                }
                            }
                            else if ($leftArea && $leftArea.classList.contains(HEADER_PRF + DETAIL)) {
                                self.setWidth(self.$horzSumHeader, leftWidth);
                                self.setWidth(self.$horzSumContent, leftWidth + scrollWidth);
                                if (self.$depDetailHeader) {
                                    self.setWidth(self.$depDetailHeader, leftWidth);
                                    self.setWidth(self.$depDetailBody, leftWidth + scrollWidth);
                                }
                            }
                        };
                        /**
                         * Check resize permit.
                         */
                        AreaAdjuster.prototype.isResizePermit = function (leftWidth, rightWidth) {
                            var self = this;
                            var leftAreaMaxWidth = 0, rightAreaMaxWidth = 0;
                            if (leftWidth <= 20 || (self.actionDetails.widths.right > 0 && rightWidth <= 20))
                                return false;
                            if (self.actionDetails.$leftArea) {
                                var leftAreaColGroup = self.actionDetails.$leftArea.querySelectorAll("table > colgroup > col");
                                var size = leftAreaColGroup.length;
                                for (var i = 0; i < size; i++) {
                                    leftAreaMaxWidth += (parseFloat(leftAreaColGroup[i].style.width) + 1);
                                }
                                var maxWidth = parseFloat(self.actionDetails.$leftArea.style.maxWidth);
                                if (leftWidth >= leftAreaMaxWidth
                                    || (!isNaN(maxWidth) && leftWidth >= maxWidth))
                                    return false;
                            }
                            if (self.actionDetails.$rightArea) {
                                var rightAreaColGroup = self.actionDetails.$rightArea.querySelectorAll("table > colgroup > col");
                                var size = rightAreaColGroup.length;
                                for (var i = 0; i < size; i++) {
                                    rightAreaMaxWidth += (parseFloat(rightAreaColGroup[i].style.width) + 1);
                                }
                                var maxWidth = parseFloat(self.actionDetails.$rightArea.style.maxWidth);
                                if (rightWidth >= rightAreaMaxWidth
                                    || (!isNaN(maxWidth) && rightWidth >= maxWidth))
                                    return false;
                            }
                            return true;
                        };
                        /**
                         * Cursor up.
                         */
                        AreaAdjuster.prototype.cursorUp = function (event) {
                            var self = this;
                            if (!self.actionDetails)
                                return;
                            self.$ownerDoc.removeXEventListener(events.MOUSE_MOVE);
                            self.$ownerDoc.removeXEventListener(events.MOUSE_UP);
                            self.syncLines();
                            events.trigger(self.$container, events.AREA_RESIZE_END, [self.actionDetails.$leftArea, self.actionDetails.$rightArea,
                                self.actionDetails.changedWidths.left, self.actionDetails.changedWidths.right]);
                            self.actionDetails = null;
                        };
                        /**
                         * Set width.
                         */
                        AreaAdjuster.prototype.setWidth = function ($wrapper, width) {
                            if (uk.util.isNullOrUndefined($wrapper))
                                return;
                            $wrapper.style.width = parseFloat(width) + "px";
                        };
                        /**
                         * Sync lines.
                         */
                        AreaAdjuster.prototype.syncLines = function () {
                            var self = this;
                            self.$areaAgency.style.width = self.$container.style.width;
                            var agencies = self.$areaAgency.querySelectorAll("div");
                            _.forEach(self.headerWrappers, function ($wrapper, index) {
                                if ($wrapper.style.display === "none")
                                    return;
                                var height = parseFloat($wrapper.style.height) + parseFloat(self.bodyWrappers[index].style.height);
                                var left = $wrapper.offsetWidth + (selector.offset($wrapper).left - selector.offset(self.$areaAgency).left);
                                var div = agencies[index];
                                if (!div)
                                    return false;
                                div.style.left = left + "px";
                                div.style.height = height + "px";
                            });
                        };
                        return AreaAdjuster;
                    }());
                    resize.AreaAdjuster = AreaAdjuster;
                    /**
                     * Get cursorX.
                     */
                    function getCursorX(event) {
                        return event.pageX;
                    }
                    /**
                     * Line styles.
                     */
                    function lineStyles(marginLeft) {
                        return { position: "absolute", cursor: "ew-resize", width: "4px", zIndex: 2, marginLeft: marginLeft };
                    }
                    /**
                     * Fit window height.
                     */
                    function fitWindowHeight($container, wrappers, horzSumExists) {
                        var height = window.innerHeight - parseInt($.data($container, internal.Y_OCCUPY)) - 100;
                        var $horzSumHeader, $horzSumBody, decreaseAmt;
                        wrappers = wrappers || selector.queryAll($container, "div[class*='" + BODY_PRF + "']").filter(function (e) {
                            return !e.classList.contains(BODY_PRF + HORIZONTAL_SUM) && !e.classList.contains(BODY_PRF + LEFT_HORZ_SUM);
                        });
                        if (horzSumExists) {
                            $horzSumHeader = $container.querySelector("." + HEADER_PRF + HORIZONTAL_SUM);
                            $horzSumBody = $container.querySelector("." + BODY_PRF + HORIZONTAL_SUM);
                            decreaseAmt = parseFloat($horzSumHeader.style.height) + parseFloat($horzSumBody.style.height) + DISTANCE + SPACE;
                            height -= decreaseAmt;
                        }
                        _.forEach(wrappers, function ($wrapper) {
                            if (($wrapper.style.overflowX && $wrapper.style.overflowX === "scroll")
                                || ($wrapper.style.overflow && $wrapper.style.overflow === "scroll")) {
                                $wrapper.style.height = height + "px";
                            }
                            else {
                                $wrapper.style.height = (height - helper.getScrollWidth()) + "px";
                            }
                        });
                        if (horzSumExists) {
                            repositionHorzSum($container, $horzSumHeader, $horzSumBody);
                        }
                        var cHeight = 0, showCount = 0;
                        var stream = selector.queryAll($container, "div[class*='" + DETAIL + "'], div[class*='" + LEFT_HORZ_SUM + "']");
                        stream.forEach(function (e) {
                            if (e.style.display !== "none") {
                                showCount++;
                                cHeight += parseFloat(e.style.height);
                            }
                        });
                        if (showCount === 4) {
                            cHeight += (SPACE + DISTANCE);
                        }
                        $container.style.height = (cHeight + SPACE) + "px";
                        events.trigger($container, events.BODY_HEIGHT_CHANGED, height);
                    }
                    resize.fitWindowHeight = fitWindowHeight;
                    /**
                     * Fit window width.
                     */
                    function fitWindowWidth($container, adjustMiddle) {
                        var table = $.data($container, NAMESPACE);
                        if (table.$commander)
                            return;
                        var $vertSumHeader = $container.querySelector("." + HEADER_PRF + VERTICAL_SUM);
                        var $vertSumContent = $container.querySelector("." + BODY_PRF + VERTICAL_SUM);
                        var $detailHeader = $container.querySelector("." + HEADER_PRF + DETAIL);
                        var $detailBody = $container.querySelector("." + BODY_PRF + DETAIL);
                        var $middleHeader = $container.querySelector("." + (HEADER_PRF + MIDDLE));
                        var $middleBody = $container.querySelector("." + (BODY_PRF + MIDDLE));
                        var $horzSumHeader = $container.querySelector("." + (HEADER_PRF + HORIZONTAL_SUM));
                        var $horzSumContent = $container.querySelector("." + (BODY_PRF + HORIZONTAL_SUM));
                        var detailOffsetLeft = parseFloat($detailHeader.style.left), //selector.offset($detailHeader).left,
                        width = window.innerWidth - detailOffsetLeft;
                        var scrollWidth = helper.getScrollWidth();
                        var $sup = table.$follower;
                        if (adjustMiddle === true && $middleHeader) {
                            var $leftHorzSumHeader = $container.querySelector("." + (HEADER_PRF + LEFT_HORZ_SUM));
                            var $leftHorzSumBody = $container.querySelector("." + (BODY_PRF + LEFT_HORZ_SUM));
                            var leftHorzSumWidth = void 0, horzSumLeft = void 0, middleWidth = parseFloat($middleHeader.style.width); //$middleHeader.clientWidth;
                            if ($middleHeader.style.display !== "none") {
                                width -= middleWidth;
                                var newDetailLeft = detailOffsetLeft + middleWidth;
                                $detailHeader.style.left = newDetailLeft + "px";
                                $detailBody.style.left = newDetailLeft + "px";
                                if ($leftHorzSumHeader) {
                                    leftHorzSumWidth = parseFloat($leftHorzSumHeader.style.width) + middleWidth;
                                    horzSumLeft = parseFloat($horzSumHeader.style.left) + middleWidth;
                                }
                            }
                            else {
                                width += middleWidth;
                                var newDetailLeft = detailOffsetLeft - middleWidth;
                                $detailHeader.style.left = newDetailLeft + "px";
                                $detailBody.style.left = newDetailLeft + "px";
                                if ($leftHorzSumHeader) {
                                    leftHorzSumWidth = parseFloat($leftHorzSumHeader.style.width) - middleWidth;
                                    horzSumLeft = parseFloat($horzSumHeader.style.left) - middleWidth;
                                }
                            }
                            if ($leftHorzSumHeader) {
                                $leftHorzSumHeader.style.width = leftHorzSumWidth + "px";
                                $leftHorzSumBody.style.width = leftHorzSumWidth + "px";
                                $horzSumHeader.style.left = horzSumLeft + "px";
                                $horzSumContent.style.left = horzSumLeft + "px";
                            }
                        }
                        if ($vertSumHeader && $vertSumHeader.style.display !== "none") {
                            width = width - parseFloat($.data($container, internal.X_OCCUPY)) - parseFloat($vertSumContent.style.width);
                            if (!uk.util.isNullOrUndefined($detailHeader.style.maxWidth)
                                && width >= parseFloat($detailHeader.style.maxWidth)) {
                                width = parseFloat($detailHeader.style.maxWidth);
                            }
                            if (adjustMiddle instanceof Event) {
                                $container.style.width = (parseFloat($container.style.width) + (width - parseFloat($detailBody.style.width))) + "px";
                            }
                            $detailHeader.style.width = width + "px";
                            $detailBody.style.width = width + "px";
                            if (storage.area.getPartWidths($container).isPresent()) {
                                storage.area.save($container, $.data($detailHeader, internal.EX_PART), width);
                            }
                            if ($horzSumHeader) {
                                $horzSumHeader.style.width = width + "px";
                            }
                            if ($horzSumContent) {
                                $horzSumContent.style.width = (width + helper.getScrollWidth()) + "px";
                            }
                            repositionVertSum($container, $vertSumHeader, $vertSumContent);
                            syncDetailAreaLine($container, $detailHeader, $detailBody);
                            if ($sup) {
                                var $supHeader = $sup.querySelector("." + HEADER_PRF + DETAIL);
                                if ($supHeader) {
                                    $supHeader.style.width = width + "px";
                                    $sup.querySelector("." + BODY_PRF + DETAIL).style.width = (width + scrollWidth) + "px";
                                }
                            }
                            return;
                        }
                        width = width - parseFloat($.data($container, internal.X_OCCUPY));
                        if (!uk.util.isNullOrUndefined($detailHeader.style.maxWidth)
                            && width >= parseFloat($detailHeader.style.maxWidth) + scrollWidth) {
                            width = parseFloat($detailHeader.style.maxWidth) + scrollWidth;
                        }
                        $detailHeader.style.width = (width - scrollWidth) + "px";
                        if (adjustMiddle instanceof Event) {
                            $container.style.width = (parseFloat($container.style.width)
                                + (width - parseFloat($detailBody.style.width))) + "px";
                        }
                        $detailBody.style.width = width + "px";
                        if (storage.area.getPartWidths($container).isPresent()) {
                            storage.area.save($container, $.data($detailHeader, internal.EX_PART), width);
                        }
                        if ($horzSumHeader && $horzSumHeader.style.display !== "none") {
                            $horzSumHeader.style.width = (width - scrollWidth) + "px";
                            $horzSumContent.style.width = width + "px";
                        }
                        syncDetailAreaLine($container, $detailHeader, $detailBody);
                        if ($sup) {
                            var $supHeader = $sup.querySelector("." + HEADER_PRF + DETAIL);
                            if ($supHeader) {
                                $supHeader.style.width = (width - scrollWidth) + "px";
                                $sup.querySelector("." + BODY_PRF + DETAIL).style.width = width + "px";
                            }
                        }
                    }
                    resize.fitWindowWidth = fitWindowWidth;
                    /**
                     * Sync detail area line.
                     */
                    function syncDetailAreaLine($container, $detailHeader, $detailBody) {
                        var $agency = $container.querySelector("." + resize.AREA_AGENCY);
                        if (!$agency)
                            return;
                        var height = parseFloat($detailHeader.style.height) + parseFloat($detailBody.style.height);
                        var left = $detailHeader.offsetWidth + (selector.offset($detailHeader).left - selector.offset($agency).left);
                        var index, middleIndex, middleHidden, vertSumIndex, vertSumHidden;
                        selector.queryAll($container, "div[class*='" + HEADER_PRF + "']").forEach(function (e, idx) {
                            if (e.classList.contains(HEADER_PRF + MIDDLE)) {
                                middleIndex = idx;
                                if (e.style.display === "none") {
                                    middleHidden = true;
                                }
                                return;
                            }
                            if (e.classList.contains(HEADER_PRF + DETAIL)) {
                                index = idx;
                                return;
                            }
                            if (e.classList.contains(HEADER_PRF + VERTICAL_SUM)) {
                                vertSumIndex = idx;
                                if (e.style.display === "none") {
                                    vertSumHidden = true;
                                }
                            }
                        });
                        var agencies = $agency.querySelectorAll("div");
                        var middleAgency = agencies[middleIndex];
                        if (middleHidden) {
                            helper.addClass(middleAgency, resize.STAY_CLS);
                        }
                        else {
                            helper.removeClass(middleAgency, resize.STAY_CLS);
                        }
                        var div = agencies[index];
                        if (!_.isNil(div)) {
                            div.style.left = left + "px";
                            div.style.height = height + "px";
                            if (vertSumHidden) {
                                helper.addClass(div, resize.STAY_CLS);
                            }
                            else {
                                helper.removeClass(div, resize.STAY_CLS);
                            }
                        }
                    }
                    /**
                     * Reposition horzSum.
                     */
                    function repositionHorzSum($container, $horzSumHeader, $horzSumBody) {
                        $horzSumHeader = $horzSumHeader || $container.querySelector("." + HEADER_PRF + HORIZONTAL_SUM);
                        $horzSumBody = $horzSumBody || $container.querySelector("." + BODY_PRF + HORIZONTAL_SUM);
                        if (!$horzSumHeader)
                            return;
                        var headerTop = parseFloat($container.querySelector("." + HEADER_PRF + DETAIL).style.height)
                            + parseFloat($container.querySelector("." + BODY_PRF + DETAIL).style.height) + DISTANCE + SPACE;
                        var bodyTop = headerTop + DISTANCE + parseFloat($horzSumHeader.style.height);
                        $container.querySelector("." + HEADER_PRF + LEFT_HORZ_SUM).style.top = headerTop + "px";
                        $container.querySelector("." + BODY_PRF + LEFT_HORZ_SUM).style.top = bodyTop + "px";
                        $horzSumHeader.style.top = headerTop + "px";
                        $horzSumBody.style.top = bodyTop + "px";
                    }
                    resize.repositionHorzSum = repositionHorzSum;
                    /**
                     * Reposition vertSum.
                     */
                    function repositionVertSum($container, $vertSumHeader, $vertSumContent) {
                        $vertSumHeader = $vertSumHeader || $container.querySelector("." + HEADER_PRF + VERTICAL_SUM);
                        $vertSumContent = $vertSumContent || $container.querySelector("." + BODY_PRF + VERTICAL_SUM);
                        var $detailHeader = $container.querySelector("." + HEADER_PRF + DETAIL);
                        var posLeft = $detailHeader.style.left;
                        var vertSumLeft = parseFloat(posLeft) + parseFloat($detailHeader.style.width) + DISTANCE;
                        $vertSumHeader.style.left = vertSumLeft + "px";
                        $vertSumContent.style.left = vertSumLeft + "px";
                    }
                    resize.repositionVertSum = repositionVertSum;
                    /**
                     * Set height.
                     */
                    function setHeight($container, height) {
                        selector.queryAll($container, "div[class*='" + BODY_PRF + "']").forEach(function (e) {
                            if (e.classList.contains(BODY_PRF + HORIZONTAL_SUM) || e.classList.contains(BODY_PRF + LEFT_HORZ_SUM))
                                return;
                            if (e.classList.contains(BODY_PRF + LEFTMOST)) {
                                e.style.height = height - helper.getScrollWidth() + "px";
                            }
                            else {
                                e.style.height = height + "px";
                            }
                        });
                        var cHeight = 0, showCount = 0;
                        var stream = selector.queryAll($container, "div[class*='" + DETAIL + "'], div[class*='" + LEFT_HORZ_SUM + "']");
                        stream.forEach(function (e) {
                            if (e.style.display !== "none") {
                                showCount++;
                                cHeight += parseFloat(e.style.height);
                            }
                        });
                        if (showCount === 4) {
                            cHeight += (SPACE + DISTANCE);
                        }
                        $container.style.height = (cHeight + SPACE) + "px";
                        events.trigger($container, events.BODY_HEIGHT_CHANGED, height);
                    }
                    resize.setHeight = setHeight;
                    /**
                     * On area complete.
                     */
                    function onAreaComplete(args) {
                        var self = this;
                        var detail = args.detail;
                        if (self.remainSizes) {
                            saveSizes(self.$container, detail[0], detail[1], detail[2], detail[3]);
                        }
                    }
                    resize.onAreaComplete = onAreaComplete;
                    /**
                     * Save sizes.
                     */
                    function saveSizes($container, $leftArea, $rightArea, leftWidth, rightWidth) {
                        if ($leftArea) {
                            storage.area.save($container, $.data($leftArea, internal.EX_PART), leftWidth);
                        }
                        if ($rightArea) {
                            storage.area.save($container, $.data($rightArea, internal.EX_PART), rightWidth);
                        }
                    }
                    resize.saveSizes = saveSizes;
                    /**
                     * On body height changed.
                     */
                    function onBodyHeightChanged(event) {
                        var self = this;
                        var $container = event.target;
                        if (self.remainSizes) {
                            var height = event.detail;
                            storage.tableHeight.save($container, height);
                        }
                        repositionHorzSum($container);
                    }
                    resize.onBodyHeightChanged = onBodyHeightChanged;
                })(resize || (resize = {}));
                var storage;
                (function (storage) {
                    storage.AREA_WIDTHS = "areawidths";
                    storage.TBL_HEIGHT = "tableheight";
                    var Store = /** @class */ (function () {
                        function Store() {
                        }
                        /**
                         * Check value exists.
                         */
                        Store.prototype.initValueExists = function ($container) {
                            var self = this;
                            var storeKey = self.getStorageKey($container);
                            var value = uk.localStorage.getItem(storeKey);
                            return value.isPresent();
                        };
                        /**
                         * Get store item.
                         */
                        Store.prototype.getStoreItem = function ($container, item) {
                            return uk.request.location.current.rawUrl + "/" + $container.id + "/" + item;
                        };
                        /**
                         * Get value.
                         */
                        Store.prototype.getValue = function ($container) {
                            var storeKey = this.getStorageKey($container);
                            return uk.localStorage.getItem(storeKey);
                        };
                        return Store;
                    }());
                    var area;
                    (function (area) {
                        var Cache = /** @class */ (function (_super) {
                            __extends(Cache, _super);
                            function Cache() {
                                return _super !== null && _super.apply(this, arguments) || this;
                            }
                            Cache.prototype.getStorageKey = function ($container) {
                                return this.getStoreItem($container, storage.AREA_WIDTHS);
                            };
                            return Cache;
                        }(Store));
                        var cache = new Cache();
                        /**
                         * Init.
                         */
                        function init($container, parts) {
                            if (cache.initValueExists($container)) {
                                return;
                            }
                            var partWidths = {};
                            _.forEach(parts, function (part, index) {
                                var key = helper.getClassOfHeader(part);
                                partWidths[key] = parseFloat(part.style.width);
                            });
                            saveAll($container, partWidths);
                        }
                        area.init = init;
                        /**
                         * Load.
                         */
                        function load($container) {
                            var storeKey = cache.getStorageKey($container);
                            uk.localStorage.getItem(storeKey).ifPresent(function (parts) {
                                var widthParts = JSON.parse(parts);
                                setWidths($container, widthParts);
                                return null;
                            });
                        }
                        area.load = load;
                        /**
                         * Save.
                         */
                        function save($container, keyClass, partWidth) {
                            var storeKey = cache.getStorageKey($container);
                            var partsWidth = uk.localStorage.getItem(storeKey);
                            var widths = {};
                            if (partsWidth.isPresent()) {
                                widths = JSON.parse(partsWidth.get());
                                widths[keyClass] = partWidth;
                            }
                            else {
                                widths[keyClass] = partWidth;
                            }
                            uk.localStorage.setItemAsJson(storeKey, widths);
                        }
                        area.save = save;
                        /**
                         * Save all.
                         */
                        function saveAll($container, widths) {
                            var storeKey = cache.getStorageKey($container);
                            var partWidths = uk.localStorage.getItem(storeKey);
                            if (!partWidths.isPresent()) {
                                uk.localStorage.setItemAsJson(storeKey, widths);
                            }
                        }
                        /**
                         * Get part widths.
                         */
                        function getPartWidths($container) {
                            return cache.getValue($container);
                        }
                        area.getPartWidths = getPartWidths;
                        /**
                         * Set widths.
                         */
                        function setWidths($container, parts) {
                            var partKeys = Object.keys(parts);
                            _.forEach(partKeys, function (keyClass, index) {
                                setWidth($container, keyClass, parts[keyClass]);
                            });
                        }
                        /**
                         * Set width.
                         */
                        function setWidth($container, keyClass, width) {
                            selector.find($container, "." + keyClass).width(width);
                            selector.find($container, "." + Connector[keyClass]).width(width);
                        }
                    })(area = storage.area || (storage.area = {}));
                    var tableHeight;
                    (function (tableHeight) {
                        var Cache2 = /** @class */ (function (_super) {
                            __extends(Cache2, _super);
                            function Cache2() {
                                return _super !== null && _super.apply(this, arguments) || this;
                            }
                            Cache2.prototype.getStorageKey = function ($container) {
                                return this.getStoreItem($container, storage.TBL_HEIGHT);
                            };
                            return Cache2;
                        }(Store));
                        var cache = new Cache2();
                        /**
                         * Init.
                         */
                        function init($container) {
                            if (cache.initValueExists($container)) {
                                return;
                            }
                            var $bodies = $container.querySelectorAll("div[class*='" + BODY_PRF + "']");
                            if ($bodies.length === 0)
                                return;
                            save($container, parseFloat($bodies[0].style.height));
                        }
                        tableHeight.init = init;
                        /**
                         * Load.
                         */
                        function load($container) {
                            var storeKey = cache.getStorageKey($container);
                            uk.localStorage.getItem(storeKey).ifPresent(function (height) {
                                var h = JSON.parse(height);
                                resize.setHeight($container, height);
                                return null;
                            });
                        }
                        tableHeight.load = load;
                        /**
                         * Get.
                         */
                        function get($container) {
                            return cache.getValue($container);
                        }
                        tableHeight.get = get;
                        /**
                         * Save.
                         */
                        function save($container, height) {
                            var storeKey = cache.getStorageKey($container);
                            uk.localStorage.setItemAsJson(storeKey, height);
                        }
                        tableHeight.save = save;
                    })(tableHeight = storage.tableHeight || (storage.tableHeight = {}));
                })(storage || (storage = {}));
                var scroll;
                (function (scroll) {
                    scroll.SCROLL_SYNCING = "scroll-syncing";
                    scroll.VERT_SCROLL_SYNCING = "vert-scroll-syncing";
                    /**
                     * Bind vertWheel.
                     */
                    function bindVertWheel($container, showY) {
                        var $_container = $($container);
                        $container.addXEventListener(events.MOUSE_WHEEL, function (event) {
                            var delta = event.deltaY;
                            var direction = delta < 0 ? -1 : 1;
                            var value = $_container.scrollTop();
                            //                $container.stop().animate({ scrollTop: value }, 10);
                            var os = helper.isIE() ? 25 : 50;
                            $_container.scrollTop(value + direction * os);
                            event.preventDefault();
                            event.stopImmediatePropagation();
                        });
                        if (!showY && $container.style.overflowY !== "hidden") {
                            $container.style.overflowY = "hidden";
                        }
                    }
                    scroll.bindVertWheel = bindVertWheel;
                    /**
                     * Unbind vertWheel.
                     */
                    function unbindVertWheel($container) {
                        $container.removeXEventListener(events.MOUSE_WHEEL);
                        $container.style.overflowY = "scroll";
                    }
                    scroll.unbindVertWheel = unbindVertWheel;
                    /**
                     * Sync scrolls.
                     */
                    function syncDoubDirHorizontalScrolls(wrappers) {
                        _.forEach(wrappers, function ($main, index) {
                            if (!$main)
                                return;
                            $main.addXEventListener(events.SCROLL_EVT, function () {
                                _.forEach(wrappers, function ($depend, i) {
                                    if (i === index || !$depend)
                                        return;
                                    var mainSyncing = $.data($main, scroll.SCROLL_SYNCING);
                                    if (!mainSyncing) {
                                        $.data($depend, scroll.SCROLL_SYNCING, true);
                                        $depend.scrollLeft = $main.scrollLeft;
                                    }
                                });
                                $.data($main, scroll.SCROLL_SYNCING, false);
                            });
                        });
                    }
                    scroll.syncDoubDirHorizontalScrolls = syncDoubDirHorizontalScrolls;
                    /**
                     * Sync scrolls.
                     */
                    function syncDoubDirVerticalScrolls(wrappers) {
                        _.forEach(wrappers, function ($main, index) {
                            $main.addXEventListener(events.SCROLL_EVT, function (event) {
                                _.forEach(wrappers, function ($depend, i) {
                                    if (i === index)
                                        return;
                                    var mainSyncing = $.data($main, scroll.VERT_SCROLL_SYNCING);
                                    if (!mainSyncing) {
                                        $.data($depend, scroll.VERT_SCROLL_SYNCING, true);
                                        $depend.scrollTop = $main.scrollTop;
                                    }
                                });
                                $.data($main, scroll.VERT_SCROLL_SYNCING, false);
                            });
                        });
                    }
                    scroll.syncDoubDirVerticalScrolls = syncDoubDirVerticalScrolls;
                    /**
                     * Sync scroll.
                     */
                    function syncHorizontalScroll($headerWrap, $bodyWrap) {
                        $bodyWrap.addXEventListener(events.SCROLL_EVT, function () {
                            $headerWrap.scrollLeft = $bodyWrap.scrollLeft;
                        });
                    }
                    scroll.syncHorizontalScroll = syncHorizontalScroll;
                    /**
                     * Sync scroll.
                     */
                    function syncVerticalScroll($pivotBody, bodyWraps) {
                        $pivotBody.addXEventListener(events.SCROLL_EVT, function () {
                            _.forEach(bodyWraps, function (body) {
                                body.scrollTop = $pivotBody.scrollTop;
                            });
                        });
                    }
                    scroll.syncVerticalScroll = syncVerticalScroll;
                })(scroll || (scroll = {}));
                var controls;
                (function (controls) {
                    controls.LINK_BUTTON = "link";
                    controls.LINK_CLS = "x-link";
                    controls.CHECKED_KEY = "xCheckbox";
                    controls.CHECKBOX_COL_WIDTH = 40;
                    controls.LABEL = "Label";
                    controls.LABEL_CLS = "x-label";
                    /**
                     * Check.
                     */
                    function check(td, column, data, action) {
                        if (!uk.util.isNullOrUndefined(column.control)) {
                            switch (column.control) {
                                case controls.LINK_BUTTON:
                                    var a = document.createElement("a");
                                    a.classList.add(controls.LINK_CLS);
                                    a.addXEventListener(events.CLICK_EVT, function (evt) {
                                        action();
                                    });
                                    a.innerText = data;
                                    td.appendChild(a);
                                    break;
                            }
                        }
                    }
                    controls.check = check;
                    /**
                     * Check header.
                     */
                    function checkHeader(td, column, data, action) {
                        if (column.headerControl) {
                            if (helper.isHtml(data)) {
                                td.innerHTML = data;
                                return;
                            }
                            switch (column.headerControl) {
                                case controls.LINK_BUTTON:
                                    var a = document.createElement("a");
                                    a.classList.add(controls.LINK_CLS);
                                    var ui_4 = helper.getCellCoord(td);
                                    a.addXEventListener(events.CLICK_EVT, function (evt) {
                                        if (action(ui_4) === false) {
                                            evt.stopPropagation();
                                        }
                                    });
                                    a.innerHTML = data;
                                    td.appendChild(a);
                                    break;
                            }
                        }
                    }
                    controls.checkHeader = checkHeader;
                    /**
                     * Add checkbox def.
                     */
                    function addCheckBoxDef(arr) {
                        _.forEach(arr, function (opt) {
                            opt.columns.unshift({ key: controls.CHECKED_KEY, headerText: controls.CHECKED_KEY, width: controls.CHECKBOX_COL_WIDTH + "px" });
                        });
                    }
                    controls.addCheckBoxDef = addCheckBoxDef;
                    /**
                     * Create checkbox.
                     */
                    function createCheckBox($grid, ui) {
                        var checkBoxText;
                        var $wrapper = document.createElement("div");
                        $wrapper.className = "nts-checkbox-container";
                        $wrapper.addXEventListener(events.CLICK_EVT, function (e) {
                            if ($grid && errors.occurred(helper.closest($grid, "." + NAMESPACE)))
                                e.preventDefault();
                        });
                        var $checkBoxLabel = document.createElement("label");
                        $checkBoxLabel.className = "ntsCheckBox";
                        var $checkBox = document.createElement("input");
                        $checkBox.type = "checkbox";
                        $checkBox.addXEventListener("change", function () {
                            var cellCoord = helper.getCellCoord(helper.closest($checkBox, "td"));
                            var rowIndex = 0;
                            if (cellCoord)
                                rowIndex = cellCoord.rowIdx;
                            ui.onChecked(selector.is($checkBox, ":checked"), rowIndex);
                        });
                        $checkBoxLabel.appendChild($checkBox);
                        var $box = document.createElement("span");
                        $box.className = "box";
                        $checkBoxLabel.appendChild($box);
                        if (ui.text && ui.text.length > 0) {
                            var label = document.createElement("span");
                            label.className = "label";
                            label.textContent = ui.text;
                            $checkBoxLabel.appendChild(label);
                        }
                        $wrapper.appendChild($checkBoxLabel);
                        var checked = ui.initValue !== undefined ? ui.initValue : true;
                        var $checkBox = $wrapper.querySelector("input[type='checkbox']");
                        if (checked === true)
                            $checkBox.checked = true;
                        else
                            $checkBox.checked = false;
                        return $wrapper;
                    }
                    controls.createCheckBox = createCheckBox;
                    /**
                     * Checkbox cell styles.
                     */
                    function checkBoxCellStyles() {
                        return { padding: "1px 1px", textAlign: "center" };
                    }
                    controls.checkBoxCellStyles = checkBoxCellStyles;
                    /**
                     * Tick.
                     */
                    function tick(checked, $grid, isHeader, rowIdx) {
                        var $checkBox;
                        var ds = internal.getDataSource($grid);
                        if (isHeader) {
                            selector.queryAll($grid, "tr").forEach(function (r) {
                                var td = r.querySelectorAll("td")[0];
                                if (!td)
                                    return;
                                $checkBox = td.querySelector("input");
                                if (checked) {
                                    $checkBox.checked = true;
                                }
                                else {
                                    $checkBox.checked = false;
                                }
                            });
                            var rows = $.data($grid, internal.SELECTED_ROWS);
                            if (checked) {
                                if (!rows) {
                                    rows = {};
                                    rows.selectAll = true;
                                    $.data($grid, internal.SELECTED_ROWS, rows);
                                }
                                else {
                                    rows.selectAll = true;
                                }
                                for (var i = 0; i < ds.length; i++) {
                                    selection.selectRow($grid, i);
                                }
                            }
                            else {
                                rows.selectAll = false;
                                for (var i = 0; i < ds.length; i++) {
                                    selection.deselectRow($grid, i);
                                }
                            }
                        }
                        else {
                            var $row = selection.rowAt($grid, rowIdx);
                            if (!$row)
                                return;
                            var $cells = $row.querySelectorAll("td");
                            if (!$cells || $cells.length === 0)
                                return;
                            $checkBox = $cells[0].querySelector("input");
                            if (checked) {
                                $checkBox.checked = true;
                                selection.selectRow($grid, rowIdx);
                            }
                            else {
                                $checkBox.checked = false;
                                selection.deselectRow($grid, rowIdx);
                            }
                            var rows = $.data($grid, internal.SELECTED_ROWS);
                            var $allBox = selector.classSiblings($grid, HEADER_PRF + LEFTMOST)[0].querySelectorAll("table tr")[0]
                                .querySelectorAll("td")[0].querySelector("input");
                            if (rows.count === ds.length) {
                                rows.selectAll = true;
                                if (!selector.is($allBox, ":checked"))
                                    $allBox.checked = true;
                            }
                            else {
                                rows.selectAll = false;
                                if (selector.is($allBox, ":checked"))
                                    $allBox.checked = false;
                            }
                        }
                    }
                    controls.tick = tick;
                })(controls || (controls = {}));
                var events;
                (function (events) {
                    events.SCROLL_EVT = "scroll";
                    events.CLICK_EVT = "click";
                    events.MOUSE_DOWN = "mousedown";
                    events.MOUSE_MOVE = "mousemove";
                    events.MOUSE_UP = "mouseup";
                    events.MOUSE_OVER = "mouseover";
                    events.MOUSE_ENTER = "mouseenter";
                    events.MOUSE_OUT = "mouseout";
                    events.MOUSE_LEAVE = "mouseleave";
                    events.FOCUS_IN = "focusin";
                    events.PASTE = "paste";
                    events.MOUSE_WHEEL = "wheel";
                    events.RESIZE = "resize";
                    events.KEY_DOWN = "keydown";
                    events.KEY_UP = "keyup";
                    events.CM = "contextmenu";
                    events.AREA_RESIZE_STARTED = "extablearearesizestarted";
                    events.AREA_RESIZE = "extablearearesize";
                    events.AREA_RESIZE_END = "extablearearesizeend";
                    events.BODY_HEIGHT_CHANGED = "extablebodyheightchanged";
                    events.OCCUPY_UPDATE = "extableoccupyupdate";
                    events.START_EDIT = "extablestartedit";
                    events.STOP_EDIT = "extablestopedit";
                    events.CELL_UPDATED = "extablecellupdated";
                    events.ROW_UPDATED = "extablerowupdated";
                    events.POPUP_SHOWN = "xpopupshown";
                    events.POPUP_INPUT_END = "xpopupinputend";
                    events.ROUND_RETREAT = "extablecellretreat";
                    events.CHECK_ALL = "extableselectallrows";
                    events.CHECK_ROW = "extableselectrow";
                    events.MOUSEIN_COLUMN = "extablemouseincolumn";
                    events.MOUSEOUT_COLUMN = "extablemousoutcolumn";
                    events.RENDERED = "extablerowsrendered";
                    events.COMPLETED = "extablecompleted";
                    window.addXEventListener = document.addXEventListener = Element.prototype.addXEventListener = addEventListener;
                    window.removeXEventListener = document.removeXEventListener = Element.prototype.removeXEventListener = removeEventListener;
                    /**
                     * Trigger.
                     */
                    function trigger($target, eventName, args) {
                        var event;
                        if (window.CustomEvent) {
                            event = new CustomEvent(eventName, { detail: args });
                        }
                        else {
                            event = document.createEvent('CustomEvent');
                            event.initCustomEvent(eventName, true, true, args);
                        }
                        $target.dispatchEvent(event);
                    }
                    events.trigger = trigger;
                    function addEventListener(event, cb, opts) {
                        var self = this;
                        if (!self.ns)
                            self.ns = {};
                        if (!self.ns[event])
                            self.ns[event] = [cb];
                        else
                            self.ns[event].push(cb);
                        self.addEventListener(event.split(".")[0], cb, opts);
                    }
                    ;
                    function removeEventListener(event, cb) {
                        var self = this;
                        if (!self.ns)
                            return;
                        if (cb) {
                            var keys = Object.keys(self.ns).filter(function (k) {
                                return (k === event || k === event.split(".")[0])
                                    && self.ns[k].indexOf(cb) > -1;
                            });
                            var key = void 0;
                            if (keys.length > 0) {
                                key = keys[0];
                                self.ns[key].splice(self.ns[key].indexOf(cb), 1);
                                if (self.ns[key].length === 0)
                                    delete self.ns[key];
                            }
                            self.removeEventListener(event.split(".")[0], cb);
                            return;
                        }
                        if (!self.ns[event])
                            return;
                        self.ns[event].forEach(function (e) {
                            self.removeEventListener(event.split(".")[0], e);
                        });
                        delete self.ns[event];
                    }
                    /**
                     * On modify.
                     */
                    function onModify($exTable) {
                        $exTable.addXEventListener(events.CELL_UPDATED, function (evt) {
                            var exTable = $.data($exTable, NAMESPACE);
                            if (!exTable)
                                return;
                            var ui = evt.detail;
                            if ((uk.util.isNullOrUndefined(ui.innerIdx) || ui.innerIdx === -1)) {
                                var $grid = helper.getMainTable($exTable);
                                var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                                var view = (gen.options || {}).view;
                                if (!_.isFunction(view))
                                    return;
                                var fields = view(exTable.viewMode);
                                if (ui.value.constructor === Array) {
                                    for (var i = 0; i < fields.length; i++) {
                                        pushChange(exTable, ui.rowIndex, new selection.Cell(ui.rowIndex, ui.columnKey, ui.value[i], i));
                                    }
                                }
                                else {
                                    for (var i = 0; i < fields.length; i++) {
                                        pushChange(exTable, ui.rowIndex, new selection.Cell(ui.rowIndex, ui.columnKey, ui.value, i));
                                    }
                                }
                                return;
                            }
                            pushChange(exTable, ui.rowIndex, ui);
                        });
                        $exTable.addXEventListener(events.ROW_UPDATED, function (evt) {
                            var exTable = $.data($exTable, NAMESPACE);
                            if (!exTable)
                                return;
                            var ui = evt.detail;
                            var cells = [];
                            if (ui.changed) {
                                _.forEach(ui.changed, function (c, i) {
                                    cells.push(new selection.Cell(c.rowIndex, c.columnKey, ui.data[c.columnKey], c.innerIdx));
                                });
                            }
                            else {
                                _.forEach(Object.keys(ui.data), function (k, i) {
                                    if (ui.data[k].constructor === Array && ui.data[k].length === 2) {
                                        cells.push(new selection.Cell(ui.rowIndex, k, ui.data[k][0], 0));
                                        cells.push(new selection.Cell(ui.rowIndex, k, ui.data[k][1], 1));
                                        return;
                                    }
                                    cells.push(new selection.Cell(ui.rowIndex, k, ui.data[k], -1));
                                });
                            }
                            _.forEach(cells, function (c, i) {
                                pushChange(exTable, c.rowIndex, c);
                            });
                        });
                    }
                    events.onModify = onModify;
                    /**
                     * Push change.
                     */
                    function pushChange(exTable, rowIdx, cell) {
                        var modifies = exTable.modifications;
                        if (!modifies) {
                            exTable.modifications = {};
                            exTable.modifications[rowIdx] = [cell];
                            return;
                        }
                        if (!modifies[rowIdx]) {
                            modifies[rowIdx] = [cell];
                            return;
                        }
                        var rData = modifies[rowIdx];
                        var cellUpdated = false;
                        _.forEach(rData, function (c, i) {
                            if (helper.areSameCells(c, cell)) {
                                rData[i].value = cell.value;
                                cellUpdated = true;
                                return false;
                            }
                        });
                        if (!cellUpdated) {
                            modifies[rowIdx].push(cell);
                        }
                    }
                    function popChange(exTable, rowIdx, cell) {
                        var modifies = exTable.modifications;
                        if (!modifies || _.keys(modifies).length === 0)
                            return;
                        _.remove(modifies[rowIdx], function (c, i) {
                            if (helper.areSameCells(c, cell))
                                return true;
                        });
                    }
                    events.popChange = popChange;
                    /**
                     * Create row ui.
                     */
                    function createRowUi(rowIdx, data, changed) {
                        return {
                            rowIndex: rowIdx,
                            data: data,
                            changed: changed
                        };
                    }
                    events.createRowUi = createRowUi;
                })(events || (events = {}));
                var feature;
                (function (feature_1) {
                    feature_1.UPDATING = "Updating";
                    feature_1.HEADER_ROW_HEIGHT = "HeaderRowHeight";
                    feature_1.HEADER_CELL_STYLE = "HeaderCellStyle";
                    feature_1.HEADER_POP_UP = "HeaderPopups";
                    feature_1.BODY_CELL_STYLE = "BodyCellStyle";
                    feature_1.COLUMN_RESIZE = "ColumnResize";
                    feature_1.TIME_RANGE = "TimeRange";
                    feature_1.RIGHT_CLICK = "RightClick";
                    feature_1.CLICK = "Click";
                    feature_1.HOVER = "Hover";
                    /**
                     * Is enable.
                     */
                    function isEnable(features, name) {
                        return _.find(features, function (feature) {
                            return feature.name === name;
                        }) !== undefined;
                    }
                    feature_1.isEnable = isEnable;
                    /**
                     * Find.
                     */
                    function find(features, name) {
                        return _.find(features, function (feature) {
                            return feature.name === name;
                        });
                    }
                    feature_1.find = find;
                    /**
                     * Activate.
                     */
                    function activate($container, options) {
                        var rightClickFt = find(options.features, feature_1.RIGHT_CLICK);
                        if (rightClickFt) {
                            $container.addXEventListener(events.CM, function () {
                                var target = event.target;
                                event.preventDefault();
                                event.stopPropagation();
                                if (selector.is(target, "." + render.CHILD_CELL_CLS)) {
                                    target = helper.closest(target, "." + render.CELL_CLS);
                                }
                                if (!selector.is(target, "." + render.CELL_CLS))
                                    return;
                                var cm, ui = helper.getCellCoord(target);
                                ui.target = target;
                                ui.contextMenu = function (items) {
                                    if (_.isNil(cm)) {
                                        cm = new widget.ContextMenu();
                                        cm.$table = $container.querySelector("." + options.tableClass);
                                    }
                                    if (items === "show") {
                                        cm.click(event);
                                        return;
                                    }
                                    if (!_.isNil(items)) {
                                        cm.newItems(items);
                                    }
                                };
                                rightClickFt.handler(ui);
                            });
                        }
                        var hoverFt = find(options.features, feature_1.HOVER);
                        if (hoverFt) {
                            if (hoverFt.enter) {
                                $container.addXEventListener(events.MOUSE_OVER, function () {
                                    var target = event.target;
                                    if (!_.isNil(hoverFt.selector) && !selector.is(target, hoverFt.selector))
                                        return;
                                    event.stopPropagation();
                                    if (!selector.is(target, "." + render.CELL_CLS)) {
                                        target = helper.closest(target, "." + render.CELL_CLS);
                                    }
                                    if (_.isNil(target))
                                        return;
                                    var ui = helper.getCellCoord(target), $table = $container.querySelector("." + options.tableClass);
                                    ui.target = event.target;
                                    ui.tooltip = function (tooltipOpt, sources) {
                                        var $t2 = $.data($table, internal.TOOLTIP);
                                        if (!$t2) {
                                            if (_.isObject(tooltipOpt) && _.isNil(tooltipOpt.showRight)) {
                                                tooltipOpt.showRight = true;
                                            }
                                            $t2 = $("<div/>").addClass(widget.cssClass(_.isString(tooltipOpt) ? { showRight: true } : tooltipOpt));
                                            $t2.appendTo("body");
                                            $.data($table, internal.TOOLTIP, $t2);
                                        }
                                        if (tooltipOpt === "show") {
                                            $t2.empty().append(sources).css({ visibility: "visible" })
                                                .position({ my: "left top", at: "left+" + helper.visibleWidth($container, target) + " top+5", of: target });
                                        }
                                    };
                                    hoverFt.enter(ui);
                                });
                            }
                            if (hoverFt.exit) {
                                $container.addXEventListener(events.MOUSE_OUT, function () {
                                    var target = event.target;
                                    if (!_.isNil(hoverFt.selector) && !selector.is(target, hoverFt.selector))
                                        return;
                                    event.stopPropagation();
                                    if (!selector.is(target, "." + render.CELL_CLS)) {
                                        target = helper.closest(target, "." + render.CELL_CLS);
                                    }
                                    if (_.isNil(target))
                                        return;
                                    var ui = helper.getCellCoord(target), $table = $container.querySelector("." + options.tableClass);
                                    ui.target = event.target;
                                    ui.tooltip = function (tooltipOpt) {
                                        if (tooltipOpt === "hide") {
                                            var $t2 = $.data($table, internal.TOOLTIP);
                                            if (!$t2 || $t2.css("display") === "none")
                                                return;
                                            $t2.css({ visibility: "hidden" });
                                        }
                                    };
                                    hoverFt.exit(ui);
                                });
                            }
                        }
                        var clickFt = find(options.features, feature_1.CLICK);
                        if (clickFt) {
                            $container.addXEventListener(events.MOUSE_DOWN, function () {
                                var target = event.target;
                                event.stopPropagation();
                                if (selector.is(target, "." + render.CHILD_CELL_CLS)) {
                                    target = helper.closest(target, "." + render.CELL_CLS);
                                }
                                if (!selector.is(target, "." + render.CELL_CLS))
                                    return;
                                var ui = helper.getCellCoord(target), $table = $container.querySelector("." + options.tableClass);
                                ui.target = target;
                                ui.popupPanel = function (popupOpt, $panel, position) {
                                    var $pu = $.data($table, internal.POPUP);
                                    if (!$pu && _.isObject(popupOpt)) {
                                        if (popupOpt.wrap) {
                                            if (!popupOpt.cssClass)
                                                popupOpt.cssClass = {};
                                            $.extend(popupOpt.cssClass, { showRight: true });
                                            $pu = $("<div/>").addClass(widget.cssClass(popupOpt.cssClass));
                                            $pu.appendTo("body");
                                            $pu.data("wrap", popupOpt.wrap);
                                        }
                                        else {
                                            if (_.isNil(popupOpt.panel))
                                                return;
                                            $pu = popupOpt.panel.addClass(widget.POPUP_CLS).hide();
                                        }
                                        $.data($table, internal.POPUP, $pu);
                                        widget.hideIfOutside($pu);
                                    }
                                    if (_.isNil($pu) || _.isObject(popupOpt))
                                        return;
                                    if (popupOpt === "show") {
                                        if ($pu.data("wrap")) {
                                            if (_.isNil($panel))
                                                return;
                                            $pu.empty().append($panel).show()
                                                .position({ my: "left top", at: "left+" + helper.visibleWidth($container, target) + " top+5", of: target });
                                        }
                                        else {
                                            var pos = widget.eventPageOffset(event, false);
                                            $pu.show().css(widget.getPosition($pu, pos, position || "top left"));
                                        }
                                    }
                                    else {
                                        $pu.hide();
                                    }
                                };
                                clickFt.handler(ui);
                            });
                        }
                    }
                    feature_1.activate = activate;
                })(feature || (feature = {}));
                var style;
                (function (style) {
                    style.DET_CLS = "xdet";
                    style.HIDDEN_CLS = "xhidden";
                    style.SEAL_CLS = "xseal";
                    var CellStyleParam = /** @class */ (function () {
                        function CellStyleParam($cell, cellData, rowData, rowIdx, columnKey) {
                            this.$cell = $cell;
                            this.cellData = cellData;
                            this.rowData = rowData;
                            this.rowIdx = rowIdx;
                            this.columnKey = columnKey;
                        }
                        return CellStyleParam;
                    }());
                    style.CellStyleParam = CellStyleParam;
                    var Cell = /** @class */ (function () {
                        function Cell(rowIndex, columnKey, makeup) {
                            this.rowIndex = rowIndex;
                            this.columnKey = columnKey;
                            this.makeup = makeup;
                        }
                        return Cell;
                    }());
                    style.Cell = Cell;
                    function detColumn($grid, row, rowIdx, detOpt, $tbl) {
                        //            let $tbl = helper.closest($grid, "." + NAMESPACE);
                        //            let detOpt = $.data($tbl, NAMESPACE).determination;
                        if (!detOpt || !$grid.classList.contains(HEADER_PRF + DETAIL))
                            return;
                        _.forEach(detOpt.rows, function (i) {
                            if (i === rowIdx) {
                                row.addXEventListener(events.MOUSE_DOWN, function (evt) {
                                    if (!evt.ctrlKey)
                                        return;
                                    var $main = helper.getMainTable($tbl);
                                    var gen = $.data($main, internal.TANGI) || $.data($main, internal.CANON);
                                    var ds = gen.dataSource;
                                    var primaryKey = helper.getPrimaryKey($main);
                                    var start = gen.startIndex || 0;
                                    var end = gen.endIndex || ds.length - 1;
                                    var $hCell = evt.target;
                                    var coord = helper.getCellCoord($hCell);
                                    var det = $.data($main, internal.DET);
                                    if (!det) {
                                        det = {};
                                    }
                                    var xRows = [];
                                    var xCellsInColumn = _.filter(ds, function (r, i) {
                                        if (helper.isXCell($main, r[primaryKey], coord.columnKey, style.HIDDEN_CLS, style.SEAL_CLS)
                                            || _.some(emptyCells[i], function (c) { return c === coord.columnKey; })) {
                                            xRows.push(i);
                                            return true;
                                        }
                                        return false;
                                    });
                                    var rows = Object.keys(det);
                                    if (rows.length >= (ds.length - xCellsInColumn.length)) {
                                        var flaw_1 = false;
                                        var indices_1 = {};
                                        _.forEach(rows, function (k, i) {
                                            var found = false;
                                            _.forEach(det[k], function (c, j) {
                                                if (c.columnKey === coord.columnKey) {
                                                    indices_1[k] = j;
                                                    found = true;
                                                    return false;
                                                }
                                            });
                                            if (!found && !xRows.some(function (val) { return parseInt(k) === val; })) {
                                                flaw_1 = true;
                                                return false;
                                            }
                                        });
                                        if (!flaw_1) {
                                            var rKeys = Object.keys(indices_1);
                                            _.forEach(rKeys, function (k, i) {
                                                var col = det[k].splice(indices_1[k], 1);
                                                if (det[k].length === 0)
                                                    delete det[k];
                                                var $c = selection.cellAt($main, k, col[0].columnKey);
                                                if ($c)
                                                    helper.stripCellWith(style.DET_CLS, $c);
                                            });
                                            return;
                                        }
                                    }
                                    _.forEach(ds, function (item, index) {
                                        if (index >= start && index < end) {
                                            var $c = selection.cellAt($main, index, coord.columnKey);
                                            if ($c === intan.NULL || !$c || !helper.isDetable($c))
                                                return;
                                            helper.markCellWith(style.DET_CLS, $c);
                                        }
                                        else if (helper.isXCell($main, item[primaryKey], coord.columnKey, style.HIDDEN_CLS, style.SEAL_CLS))
                                            return;
                                        if (!det[index]) {
                                            det[index] = [{ columnKey: coord.columnKey, value: item[coord.columnKey] }];
                                            $.data($main, internal.DET, det);
                                        }
                                        else {
                                            var dup_1;
                                            _.forEach(det[index], function (key) {
                                                if (key.columnKey === coord.columnKey) {
                                                    dup_1 = true;
                                                    return false;
                                                }
                                            });
                                            if (!dup_1) {
                                                det[index].push({ columnKey: coord.columnKey, value: item[coord.columnKey] });
                                            }
                                        }
                                    });
                                });
                                return false;
                            }
                        });
                    }
                    style.detColumn = detColumn;
                    function detCell($grid, $cell, rowIdx, columnKey, detOpt, $tbl) {
                        //            let $tbl = helper.closest($grid, "." + NAMESPACE);
                        //            let detOpt = $.data($tbl, NAMESPACE).determination;
                        if (!detOpt)
                            return;
                        if ($grid.classList.contains(BODY_PRF + LEFTMOST)) {
                            _.forEach(detOpt.columns, function (key) {
                                if (key === columnKey) {
                                    $cell.addXEventListener(events.MOUSE_DOWN, function (evt) {
                                        if (!evt.ctrlKey)
                                            return;
                                        var $main = helper.getMainTable($tbl);
                                        var ds = internal.getDataSource($main);
                                        var coord = helper.getCellCoord($cell);
                                        var $targetRow = selection.rowAt($main, coord.rowIdx);
                                        if ($targetRow === intan.NULL || !$targetRow)
                                            return;
                                        var colKeys = _.map(helper.gridVisibleColumns($main), "key");
                                        var det = $.data($main, internal.DET);
                                        var rowDet;
                                        var undetables = [];
                                        var detables = selector.queryAll($targetRow, "td").filter(function (e) {
                                            return e.style.display !== "none";
                                        }).filter(function (e, i) {
                                            if (!helper.isDetable(e)) {
                                                undetables.push(i);
                                                return false;
                                            }
                                            return true;
                                        });
                                        for (var i = undetables.length - 1; i >= 0; i--) {
                                            colKeys.splice(undetables[i], 1);
                                        }
                                        if (det && (rowDet = det[coord.rowIdx]) && rowDet.length === colKeys.length) {
                                            helper.stripCellsWith(style.DET_CLS, selector.queryAll($targetRow, "td").filter(function (e) {
                                                return e.style.display !== "none";
                                            }));
                                            //                                det[coord.rowIdx] = [];
                                            delete det[coord.rowIdx];
                                            return;
                                        }
                                        helper.markCellsWith(style.DET_CLS, detables);
                                        var detCols = colKeys.map(function (c) {
                                            return { columnKey: c, value: ds[coord.rowIdx][c] };
                                        });
                                        if (!det) {
                                            det = {};
                                            det[coord.rowIdx] = detCols;
                                            $.data($main, internal.DET, det);
                                        }
                                        else if (!det[coord.rowIdx]) {
                                            det[coord.rowIdx] = detCols;
                                        }
                                        else {
                                            var dup_2;
                                            _.forEach(colKeys, function (k) {
                                                dup_2 = false;
                                                _.forEach(det[coord.rowIdx], function (existedKey) {
                                                    if (existedKey.columnKey === k) {
                                                        dup_2 = true;
                                                        return false;
                                                    }
                                                });
                                                if (!dup_2) {
                                                    det[coord.rowIdx].push({ columnKey: k, value: ds[coord.rowIdx][k] });
                                                }
                                            });
                                        }
                                    });
                                    return false;
                                }
                            });
                        }
                        else if ($grid.classList.contains(BODY_PRF + DETAIL)) {
                            var childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                            var target = $cell;
                            if (childCells.length > 0) {
                                target = childCells;
                                _.forEach(Array.prototype.slice.call(childCells), function (c) {
                                    c.addXEventListener(events.MOUSE_DOWN, function (evt) {
                                        onDetSingleCell(evt, $tbl, $cell, rowIdx, columnKey);
                                    });
                                });
                                return;
                            }
                            target.addXEventListener(events.MOUSE_DOWN, function (evt) {
                                onDetSingleCell(evt, $tbl, $cell, rowIdx, columnKey);
                            });
                        }
                    }
                    style.detCell = detCell;
                    /**
                     * On det single cell.
                     */
                    function onDetSingleCell(evt, $tbl, $cell, rowIdx, columnKey) {
                        if (!evt.ctrlKey || !helper.isDetable($cell))
                            return;
                        var $main = helper.getMainTable($tbl);
                        var ds = internal.getDataSource($main);
                        var det = $.data($main, internal.DET);
                        if (!det) {
                            det = {};
                            det[rowIdx] = [{ columnKey: columnKey, value: ds[rowIdx][columnKey] }];
                            $.data($main, internal.DET, det);
                        }
                        else if (!det[rowIdx]) {
                            det[rowIdx] = [{ columnKey: columnKey, value: ds[rowIdx][columnKey] }];
                        }
                        else {
                            var dup_3 = -1;
                            _.forEach(det[rowIdx], function (key, index) {
                                if (key.columnKey === columnKey) {
                                    dup_3 = index;
                                    return false;
                                }
                            });
                            if (dup_3 > -1) {
                                var a = [];
                                det[rowIdx].splice(dup_3, 1);
                                if (det[rowIdx].length === 0)
                                    delete det[rowIdx];
                                helper.stripCellWith(style.DET_CLS, $cell);
                                return;
                            }
                            det[rowIdx].push({ columnKey: columnKey, value: ds[rowIdx][columnKey] });
                        }
                        helper.markCellWith(style.DET_CLS, $cell);
                    }
                })(style || (style = {}));
                var func;
                (function (func) {
                    var LEFT_TBL = "leftmost";
                    var HORZ_SUM = "horizontalSummaries";
                    var VERT_SUM = "verticalSummaries";
                    $.fn.exTable = function (name) {
                        var params = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            params[_i - 1] = arguments[_i];
                        }
                        var self = this;
                        switch (name) {
                            case "setHeight":
                                resize.setHeight(self[0], params[0]);
                                break;
                            case "gridHeightMode":
                                changeGridHeightMode(self, params[0]);
                                break;
                            case "hideHorizontalSummary":
                                hideHorzSum(self);
                                break;
                            case "showHorizontalSummary":
                                showHorzSum(self);
                                break;
                            case "hideVerticalSummary":
                                hideVertSum(self);
                                break;
                            case "showVerticalSummary":
                                showVertSum(self);
                                break;
                            case "hideMiddle":
                                hideMiddle(self);
                                break;
                            case "showMiddle":
                                showMiddle(self);
                                break;
                            case "updateTable":
                                updateTable(self, params[0], params[1], params[2], params[3], params[4]);
                                break;
                            case "updateMode":
                                return setUpdateMode(self, params[0], params[1]);
                            case "viewMode":
                                return setViewMode(self, params[0], params[1], params[2]);
                            case "mode":
                                setMode(self, params[0], params[1], params[2], params[3]);
                                break;
                            case "pasteOverWrite":
                                setPasteOverWrite(self, params[0]);
                                break;
                            case "stickOverWrite":
                                setStickOverWrite(self, params[0]);
                                break;
                            case "stickMode":
                                setStickMode(self, params[0]);
                                break;
                            case "stickData":
                                setStickData(self, params[0]);
                                break;
                            case "stickValidate":
                                setStickValidate(self, params[0]);
                                break;
                            case "stickStyler":
                                setStickStyler(self, params[0]);
                                break;
                            case "stickUndo":
                                undoStick(self);
                                break;
                            case "stickRedo":
                                redoStick(self);
                                break;
                            case "copyUndo":
                                undoCopy(self);
                                break;
                            case "copyRedo":
                                redoCopy(self);
                                break;
                            case "clearHistories":
                                clearHistories(self, params[0]);
                                break;
                            case "lockCell":
                                lockCell(self, params[0], params[1]);
                                break;
                            case "unlockCell":
                                unlockCell(self, params[0], params[1]);
                                break;
                            case "popupValue":
                                returnPopupValue(self, params[0]);
                                break;
                            case "cellValue":
                                setCellValue(self, params[0], params[1], params[2], params[3]);
                                break;
                            case "cellValueByIndex":
                                setCellValueByIndex(self, params[0], params[1], params[2], params[3]);
                                break;
                            case "roundGet":
                                roundRetreat(self, params[0]);
                                break;
                            case "dataSource":
                                return getDataSource(self, params[0]);
                            case "cellByIndex":
                                return getCellByIndex(self, params[0], params[1]);
                            case "cellById":
                                return getCellById(self, params[0], params[1]);
                            case "updatedCells":
                                return getUpdatedCells(self);
                            case "lockCells":
                                return getLockCells(self);
                            case "addNewRow":
                                break;
                            case "removeRows":
                                break;
                            case "rowId":
                                setRowId(self, params[0], params[1]);
                                break;
                            case "saveScroll":
                                saveScroll(self);
                                break;
                            case "scrollBack":
                                scrollBack(self, params[0], params[1]);
                                break;
                        }
                    };
                    /**
                     * Change grid height mode.
                     */
                    function changeGridHeightMode($container, mode) {
                        if (mode === DYNAMIC) {
                            var bodyWrappers_1 = [], horzSumExists_1 = false;
                            var $bodyWrappers = $container.find("div[class*='" + BODY_PRF + "']").each(function () {
                                if ($(this).hasClass(BODY_PRF + HORIZONTAL_SUM) || $(this).hasClass(BODY_PRF + LEFT_HORZ_SUM)) {
                                    horzSumExists_1 = true;
                                    return;
                                }
                                bodyWrappers_1.push($(this));
                            });
                            $(window).on(events.RESIZE, $.proxy(resize.fitWindowHeight, undefined, $container[0], bodyWrappers_1, horzSumExists_1));
                        }
                        else {
                            $(window).off(events.RESIZE, resize.fitWindowHeight);
                        }
                    }
                    /**
                     * Hide horzSum.
                     */
                    function hideHorzSum($container) {
                        $container.find("." + HEADER_PRF + LEFT_HORZ_SUM).hide();
                        $container.find("." + BODY_PRF + LEFT_HORZ_SUM).hide();
                        $container.find("." + HEADER_PRF + HORIZONTAL_SUM).hide();
                        $container.find("." + BODY_PRF + HORIZONTAL_SUM).hide();
                        resize.fitWindowHeight($container[0], undefined, false);
                    }
                    /**
                     * Show horzSum.
                     */
                    function showHorzSum($container) {
                        $container.find("." + HEADER_PRF + LEFT_HORZ_SUM).show();
                        $container.find("." + BODY_PRF + LEFT_HORZ_SUM).show();
                        $container.find("." + HEADER_PRF + HORIZONTAL_SUM).show();
                        $container.find("." + BODY_PRF + HORIZONTAL_SUM).show();
                        resize.fitWindowHeight($container[0], undefined, true);
                    }
                    /**
                     * Hide vertSum.
                     */
                    function hideVertSum($container) {
                        var $vertSumHeader = $container.find("." + HEADER_PRF + VERTICAL_SUM);
                        if ($vertSumHeader.css("display") === "none")
                            return;
                        $vertSumHeader.hide();
                        $container.find("." + BODY_PRF + VERTICAL_SUM).hide();
                        var $detailBody = $container.find("." + (BODY_PRF + DETAIL));
                        if (!helper.hasScrollBar($detailBody[0], true)) {
                            $container.css("width", parseFloat($container.css("width")) - parseFloat($vertSumHeader.css("width")));
                        }
                        resize.fitWindowWidth($container[0]);
                        $detailBody.css("max-width", parseFloat($detailBody.css("max-width")) + helper.getScrollWidth() + "px");
                        scroll.unbindVertWheel($container.find("." + BODY_PRF + DETAIL)[0]);
                    }
                    /**
                     * Show vertSum.
                     */
                    function showVertSum($container) {
                        var $vertSumBody = $container.find("." + BODY_PRF + VERTICAL_SUM);
                        var $detailBody = $container.find("." + BODY_PRF + DETAIL);
                        var $vertSumHeader = $container.find("." + HEADER_PRF + VERTICAL_SUM);
                        if ($vertSumHeader.css("display") !== "none")
                            return;
                        $vertSumHeader.show();
                        $vertSumBody.show();
                        resize.fitWindowWidth($container[0]);
                        $detailBody.css("max-width", parseFloat($detailBody.css("max-width")) - helper.getScrollWidth() + "px");
                        scroll.bindVertWheel($detailBody[0]);
                        $vertSumBody.scrollTop($detailBody.scrollTop());
                        if (!helper.hasScrollBar($detailBody[0], true)) {
                            $container.css("width", parseFloat($container.css("width")) + parseFloat($vertSumHeader.css("width")));
                        }
                    }
                    /**
                     * Hide middle.
                     */
                    function hideMiddle($container) {
                        var $middleHeader = $container.find("." + (HEADER_PRF + MIDDLE));
                        if ($middleHeader.length === 0)
                            return;
                        var $middleBody = $container.find("." + (BODY_PRF + MIDDLE));
                        $middleHeader.hide();
                        $middleBody.hide();
                        var $detailBody = $container.find("." + (BODY_PRF + DETAIL));
                        if (!helper.hasScrollBar($detailBody[0], true)) {
                            $container.css("width", parseFloat($container.css("width")) - parseFloat($middleHeader.css("width")));
                        }
                        resize.fitWindowWidth($container[0], true);
                    }
                    /**
                     * Show middle.
                     */
                    function showMiddle($container) {
                        var $middleHeader = $container.find("." + (HEADER_PRF + MIDDLE));
                        if ($middleHeader.length === 0)
                            return;
                        var $middleBody = $container.find("." + (BODY_PRF + MIDDLE)), $detailBody = $container.find("." + (BODY_PRF + DETAIL));
                        $middleHeader.show();
                        $middleBody.show();
                        resize.fitWindowWidth($container[0], true);
                        $middleBody.scrollTop($detailBody.scrollTop());
                        if (!helper.hasScrollBar($detailBody[0], true)) {
                            $container.css("width", parseFloat($container.css("width")) + parseFloat($middleHeader.css("width")));
                        }
                    }
                    /**
                     * Update table.
                     */
                    function updateTable($container, name, header, body, keepStates, keepStruct) {
                        switch (name) {
                            case "leftmost":
                                updateLeftmost($container, header, body, keepStruct);
                                break;
                            case "middle":
                                updateMiddle($container, header, body);
                                break;
                            case "detail":
                                updateDetail($container, header, body, keepStates, keepStruct);
                                break;
                            case "verticalSummaries":
                                updateVertSum($container, header, body);
                                break;
                            case "leftHorizontalSummaries":
                                updateLeftHorzSum($container, header, body);
                                break;
                            case "horizontalSummaries":
                                updateHorzSum($container, header, body);
                                break;
                        }
                    }
                    /**
                     * Update leftmost.
                     */
                    function updateLeftmost($container, header, body, keepStruct) {
                        var exTable = $container.data(NAMESPACE);
                        var sizeAdjust, left, width, offsetWidth = 0;
                        if (!exTable.middleHeader && !exTable.leftHorzSumHeader
                            && !exTable.horizontalSumHeader && !exTable.verticalSumHeader
                            && !exTable.areaResize) {
                            sizeAdjust = true;
                        }
                        if (header) {
                            _.assignIn(exTable.leftmostHeader, header);
                            var $header = $container.find("." + HEADER_PRF + LEFTMOST);
                            if (sizeAdjust && header.columns) {
                                width = render.calcWidth(header.columns);
                                exTable.leftmostHeader.width = width + "px";
                                offsetWidth = Math.abs($header.width() - width);
                                if (offsetWidth > 0) {
                                    var $detailH = $container.find("." + HEADER_PRF + DETAIL);
                                    var $detailB = $container.find("." + BODY_PRF + DETAIL);
                                    var op = $header.width() > width ? -1 : 1;
                                    $header.width(width);
                                    left = parseFloat($detailH.css("left"));
                                    left = left + op * offsetWidth;
                                    $detailH.css("left", left);
                                    $detailB.css("left", left);
                                }
                            }
                            var pu = $header.find("table").data(internal.POPUP);
                            $header.empty();
                            render.process($header[0], exTable.leftmostHeader, true);
                            if (pu && pu.css("display") !== "none")
                                pu.hide();
                        }
                        if (body) {
                            _.assignIn(exTable.leftmostContent, body);
                            var $body = $container.find("." + BODY_PRF + LEFTMOST);
                            if (offsetWidth > 0 && width) {
                                $body.width(width);
                            }
                            if (keepStruct) {
                                render.begin($body[0], body.dataSource, exTable.leftmostContent);
                            }
                            else {
                                $body.empty();
                                render.process($body[0], exTable.leftmostContent, true);
                            }
                        }
                    }
                    /**
                     * Update middle.
                     */
                    function updateMiddle($container, header, body) {
                        var exTable = $container.data(NAMESPACE);
                        if (header) {
                            _.assignIn(exTable.middleHeader, header);
                            var $header = $container.find("." + HEADER_PRF + MIDDLE);
                            var pu = $header.find("table").data(internal.POPUP);
                            $header.empty();
                            render.process($header[0], exTable.middleHeader, true);
                            if (pu && pu.css("display") !== "none")
                                pu.hide();
                        }
                        if (body) {
                            _.assignIn(exTable.middleContent, body);
                            var $body = $container.find("." + BODY_PRF + MIDDLE);
                            $body.empty();
                            render.process($body[0], exTable.middleContent, true);
                        }
                    }
                    /**
                     * Update detail.
                     */
                    function updateDetail($container, header, body, keepStates, keepStruct) {
                        var exTable = $container.data(NAMESPACE);
                        var refreshFeatures = function (detail, features) {
                            if (features && detail.features) {
                                var newFeatures = _.map(detail.features, function (f, i) {
                                    var z = -1;
                                    _.forEach(features, function (ft, y) {
                                        if (f.name == ft.name) {
                                            z = y;
                                            return false;
                                        }
                                    });
                                    if (z > -1) {
                                        var fts = features.splice(z, 1);
                                        return fts[0];
                                    }
                                    return f;
                                });
                                detail.features = newFeatures;
                            }
                        };
                        if (header) {
                            _.assignIn(exTable.detailHeader, header);
                            var $header = $container.find("." + HEADER_PRF + DETAIL);
                            var pu = $header.find("table").data(internal.POPUP);
                            $header.empty();
                            render.process($header[0], exTable.detailHeader, true);
                            if (pu && pu.css("display") !== "none")
                                pu.hide();
                        }
                        if (body) {
                            _.assignIn(exTable.detailContent, body);
                            var $body = $container.find("." + BODY_PRF + DETAIL);
                            if (!keepStates)
                                internal.clearStates($body[0]);
                            if (keepStruct) {
                                render.begin($body[0], body.dataSource, exTable.detailContent);
                            }
                            else {
                                $body.empty();
                                render.process($body[0], exTable.detailContent, true);
                            }
                        }
                    }
                    /**
                     * Update vertSum.
                     */
                    function updateVertSum($container, header, body) {
                        var exTable = $container.data(NAMESPACE);
                        if (header) {
                            _.assignIn(exTable.verticalSumHeader, header);
                            var $header = $container.find("." + HEADER_PRF + VERTICAL_SUM);
                            var pu = $header.find("table").data(internal.POPUP);
                            $header.empty();
                            render.process($header[0], exTable.verticalSumHeader, true);
                            if (pu && pu.css("display") !== "none")
                                pu.hide();
                        }
                        if (body) {
                            _.assignIn(exTable.verticalSumContent, body);
                            var $body = $container.find("." + BODY_PRF + VERTICAL_SUM);
                            $body.empty();
                            render.process($body[0], exTable.verticalSumContent, true);
                        }
                    }
                    /**
                     * Update leftHorzSum.
                     */
                    function updateLeftHorzSum($container, header, body) {
                        var exTable = $container.data(NAMESPACE);
                        if (header) {
                            _.assignIn(exTable.leftHorzSumHeader, header);
                            var $header = $container.find("." + HEADER_PRF + LEFT_HORZ_SUM);
                            var pu = $header.find("table").data(internal.POPUP);
                            $header.empty();
                            render.process($header[0], exTable.leftHorzSumHeader, true);
                            if (pu && pu.css("display") !== "none")
                                pu.hide();
                        }
                        if (body) {
                            _.assignIn(exTable.leftHorzSumContent, body);
                            var $body = $container.find("." + BODY_PRF + LEFT_HORZ_SUM);
                            $body.empty();
                            render.process($body[0], exTable.leftHorzSumContent, true);
                        }
                    }
                    /**
                     * Update horzSum.
                     */
                    function updateHorzSum($container, header, body) {
                        var exTable = $container.data(NAMESPACE);
                        if (header) {
                            _.assignIn(exTable.horizontalSumHeader, header);
                            var $header = $container.find("." + HEADER_PRF + HORIZONTAL_SUM);
                            var pu = $header.find("table").data(internal.POPUP);
                            $header.empty();
                            render.process($header[0], exTable.horizontalSumHeader, true);
                            if (pu && pu.css("display") !== "none")
                                pu.hide();
                        }
                        if (body) {
                            _.assignIn(exTable.horizontalSumContent, body);
                            var $body = $container.find("." + BODY_PRF + HORIZONTAL_SUM);
                            $body.empty();
                            render.process($body[0], exTable.horizontalSumContent, true);
                        }
                    }
                    /**
                     * Set update mode.
                     */
                    function setUpdateMode($container, mode, occupation) {
                        var exTable = $container.data(NAMESPACE);
                        if (!mode)
                            return exTable.updateMode;
                        if (exTable.updateMode === mode)
                            return;
                        exTable.setUpdateMode(mode);
                        exTable.modifications = {};
                        if (occupation) {
                            events.trigger($container[0], events.OCCUPY_UPDATE, occupation);
                        }
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        render.begin($grid[0], _.cloneDeep(helper.getOrigDS($grid[0])), exTable.detailContent);
                        selection.tickRows($container.find("." + BODY_PRF + LEFTMOST)[0], true);
                        if (mode === COPY_PASTE) {
                            selection.checkUp($container[0]);
                            copy.on($grid[0], mode);
                            return;
                        }
                        selection.off($container[0]);
                        copy.off($grid[0], mode);
                    }
                    /**
                     * Set view mode.
                     */
                    function setViewMode($container, mode, occupation, features) {
                        var exTable = $container.data(NAMESPACE);
                        if (!mode)
                            return exTable.viewMode;
                        if (occupation) {
                            events.trigger($container[0], events.OCCUPY_UPDATE, occupation);
                        }
                        if (exTable.viewMode === mode)
                            return;
                        var table = helper.getMainTable($container[0]);
                        exTable.modifications = {};
                        if (exTable.updateMode === EDIT) {
                            //                if (errors.occurred($container[0])) return;
                            var editor = $container.data(update.EDITOR);
                            if (editor) {
                                var $editor = editor.$editor;
                                var $input = $editor.querySelector("input");
                                var $editingCell = helper.closest($editor, "." + update.EDIT_CELL_CLS);
                                $editingCell.classList.remove(update.EDIT_CELL_CLS);
                                update.triggerStopEdit($container[0], $editingCell, editor.land, $input.value);
                                $container.data(update.EDITOR, null);
                                $.data(table, internal.INPUT_SELECTING, null);
                            }
                            $.data(table, internal.EDIT_HISTORY, null);
                        }
                        else if (exTable.updateMode === COPY_PASTE) {
                            $.data(table, internal.COPY_HISTORY, null);
                        }
                        else if (exTable.updateMode === STICK) {
                            $.data(table, internal.STICK_HISTORY, null);
                        }
                        $.data(table, internal.DET, null);
                        $container.data(errors.ERRORS, null);
                        $.data(table, internal.D_CELLS_STYLE, null);
                        exTable.setViewMode(mode);
                        if (features && exTable.detailContent.features) {
                            var newFeatures = _.map(exTable.detailContent.features, function (f, i) {
                                var z = -1;
                                _.forEach(features, function (ft, y) {
                                    if (f.name == ft.name) {
                                        z = y;
                                        return false;
                                    }
                                });
                                if (z > -1) {
                                    var fts = features.splice(z, 1);
                                    return fts[0];
                                }
                                return f;
                            });
                            exTable.detailContent.features = newFeatures;
                        }
                        var ds = helper.getOrigDS(table);
                        render.begin(table, _.cloneDeep(ds), exTable.detailContent);
                    }
                    /**
                     * Set mode.
                     */
                    function setMode($container, viewMode, updateMode, occupation, features) {
                        var exTable = $container.data(NAMESPACE);
                        if (occupation) {
                            events.trigger($container[0], events.OCCUPY_UPDATE, occupation);
                        }
                        var table = helper.getMainTable($container[0]), updateViewMode = false;
                        var ds = helper.getOrigDS(table);
                        exTable.modifications = {};
                        if (viewMode && exTable.viewMode !== viewMode) {
                            if (exTable.updateMode === EDIT) {
                                //                if (errors.occurred($container[0])) return;
                                var editor = $container.data(update.EDITOR);
                                if (editor) {
                                    var $editor = editor.$editor;
                                    var $input = $editor.querySelector("input");
                                    var $editingCell = helper.closest($editor, "." + update.EDIT_CELL_CLS);
                                    $editingCell.classList.remove(update.EDIT_CELL_CLS);
                                    update.triggerStopEdit($container[0], $editingCell, editor.land, $input.value);
                                    $container.data(update.EDITOR, null);
                                }
                                $.data(table, internal.EDIT_HISTORY, null);
                                $.data(table, internal.INPUT_SELECTING, null);
                            }
                            else if (exTable.updateMode === COPY_PASTE) {
                                $.data(table, internal.COPY_HISTORY, null);
                            }
                            else if (exTable.updateMode === STICK) {
                                $.data(table, internal.STICK_HISTORY, null);
                            }
                            //                $.data(table, internal.DET, null);
                            $container.data(errors.ERRORS, null);
                            $.data(table, internal.D_CELLS_STYLE, null);
                            exTable.setViewMode(viewMode);
                            var $grid = $container.find("." + BODY_PRF + DETAIL);
                            updateViewMode = true;
                        }
                        var refreshFeatures = function () {
                            if (features && exTable.detailContent.features) {
                                var newFeatures = _.map(exTable.detailContent.features, function (f, i) {
                                    var z = -1;
                                    _.forEach(features, function (ft, y) {
                                        if (f.name == ft.name) {
                                            z = y;
                                            return false;
                                        }
                                    });
                                    if (z > -1) {
                                        var fts = features.splice(z, 1);
                                        return fts[0];
                                    }
                                    return f;
                                });
                                exTable.detailContent.features = newFeatures;
                            }
                        };
                        if (updateMode && exTable.updateMode !== updateMode) {
                            exTable.setUpdateMode(updateMode);
                            refreshFeatures();
                            render.begin(table, ds, exTable.detailContent);
                            selection.tickRows($container.find("." + BODY_PRF + LEFTMOST)[0], true);
                            if (updateMode === COPY_PASTE) {
                                selection.checkUp($container[0]);
                                copy.on(table, updateMode);
                                return;
                            }
                            selection.off($container[0]);
                            copy.off(table, updateMode);
                        }
                        else if (updateViewMode) {
                            refreshFeatures();
                            render.begin(table, ds, exTable.detailContent);
                        }
                    }
                    /**
                     * Set paste overwrite.
                     */
                    function setPasteOverWrite($container, overwrite) {
                        var exTable = $container.data(NAMESPACE);
                        exTable.pasteOverWrite = overwrite;
                    }
                    /**
                     * Set stick overwrite.
                     */
                    function setStickOverWrite($container, overwrite) {
                        var exTable = $container.data(NAMESPACE);
                        exTable.stickOverWrite = overwrite;
                    }
                    /**
                     * Set stick mode.
                     */
                    function setStickMode($container, mode) {
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        var sticker = $grid.data(internal.STICKER);
                        if (!sticker) {
                            sticker = new spread.Sticker();
                            sticker.mode = mode;
                            $grid.data(internal.STICKER, sticker);
                        }
                        else {
                            sticker.mode = mode;
                        }
                    }
                    /**
                     * Set stick data.
                     */
                    function setStickData($container, data) {
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        var sticker = $grid.data(internal.STICKER);
                        if (!sticker) {
                            sticker = new spread.Sticker(data);
                            $grid.data(internal.STICKER, sticker);
                        }
                        else {
                            sticker.data = data;
                        }
                    }
                    /**
                     * Set stick validate.
                     */
                    function setStickValidate($container, validate) {
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        var sticker = $grid.data(internal.STICKER);
                        if (!sticker) {
                            sticker = new spread.Sticker();
                            sticker.validate = validate;
                            $grid.data(internal.STICKER, sticker);
                        }
                        else {
                            sticker.validate = validate;
                        }
                    }
                    /**
                     * Set stick styler.
                     */
                    function setStickStyler($container, styler) {
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        var sticker = $grid.data(internal.STICKER);
                        if (!sticker) {
                            sticker = new spread.Sticker();
                            sticker.styleMaker = styler;
                            $grid.data(internal.STICKER, sticker);
                        }
                        else {
                            sticker.styleMaker = styler;
                        }
                    }
                    /**
                     * Undo stick.
                     */
                    function undoStick($container) {
                        var exTable = $container.data(NAMESPACE);
                        if (!exTable || exTable.updateMode !== STICK)
                            return;
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        var histories = $grid.data(internal.STICK_HISTORY);
                        if (!histories || histories.length === 0)
                            return;
                        var items = histories.pop();
                        var ds = internal.getDataSource($grid[0]), currentItems = [], itemsByKey = {};
                        _.forEach(items, function (i) {
                            var innerIdx = _.isNil(i.innerIdx) ? -1 : i.innerIdx;
                            var data = ds[i.rowIndex];
                            if (data) {
                                var value = itemsByKey[i.columnKey];
                                if (_.isNil(value)) {
                                    value = data[i.columnKey];
                                    itemsByKey[i.columnKey] = value;
                                }
                                currentItems.push({ rowIndex: i.rowIndex, columnKey: i.columnKey, innerIdx: innerIdx, value: value });
                            }
                            update.gridCell($grid[0], i.rowIndex, i.columnKey, innerIdx, i.value, true);
                            internal.removeChange($grid[0], i);
                        });
                        var redoStack = $grid.data(internal.STICK_REDO_STACK);
                        if (!redoStack) {
                            $grid.data(internal.STICK_REDO_STACK, [currentItems]);
                        }
                        else {
                            redoStack.push(currentItems);
                        }
                    }
                    /**
                     * Redo stick.
                     */
                    function redoStick($container) {
                        var exTable = $container.data(NAMESPACE);
                        if (!exTable || exTable.updateMode !== STICK)
                            return;
                        var $grid = $container.find("." + (BODY_PRF + DETAIL));
                        var redoStack = $grid.data(internal.STICK_REDO_STACK);
                        if (!redoStack || redoStack.length === 0)
                            return;
                        var sticker = $grid.data(internal.STICKER), items = redoStack.pop();
                        if (!items || items.length === 0)
                            return;
                        if (items.length == 1) {
                            var item = items[0];
                            update.stickGridCellOw($grid[0], item.rowIndex, item.columnKey, item.innerIdx, item.value, sticker.styleMaker);
                        }
                        else {
                            var data_1 = {};
                            _.forEach(items, function (item) {
                                data_1[item.columnKey] = item.value;
                            });
                            update.stickGridRowOw($grid[0], items[0].rowIndex, data_1, sticker.styleMaker);
                        }
                    }
                    /**
                     * Undo copy.
                     */
                    function undoCopy($container) {
                        var exTable = $container.data(NAMESPACE);
                        if (!exTable || exTable.updateMode !== COPY_PASTE)
                            return;
                        var $grid = $container.find("." + (BODY_PRF + DETAIL));
                        var printer = $grid.data(internal.PRINTER_INST);
                        if (!printer)
                            return;
                        printer.undo();
                    }
                    /**
                     * Redo copy.
                     */
                    function redoCopy($container) {
                        var exTable = $container.data(NAMESPACE);
                        if (!exTable || exTable.updateMode !== COPY_PASTE)
                            return;
                        var $grid = $container.find("." + (BODY_PRF + DETAIL));
                        var printer = $grid.data(internal.PRINTER_INST);
                        if (!printer)
                            return;
                        printer.redo();
                    }
                    /**
                     * Clear histories.
                     */
                    function clearHistories($container, type) {
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        var histType;
                        switch (type) {
                            case "edit":
                                histType = internal.EDIT_HISTORY;
                                break;
                            case "copyPaste":
                                histType = internal.COPY_HISTORY;
                                break;
                            case "stick":
                                histType = internal.STICK_HISTORY;
                                break;
                        }
                        $grid.data(histType, null);
                    }
                    /**
                     * Lock cell.
                     */
                    function lockCell($container, rowId, columnKey) {
                        var $table = helper.getMainTable($container[0]);
                        var ds = helper.getDataSource($table);
                        var pk = helper.getPrimaryKey($table);
                        var i = -1;
                        _.forEach(ds, function (r, j) {
                            if (r[pk] === rowId) {
                                i = j;
                                return false;
                            }
                        });
                        if (i === -1)
                            return;
                        var locks = $.data($table, internal.DET);
                        var found = -1;
                        if (locks && locks[i] && locks[i].length > 0) {
                            _.forEach(locks[i], function (c, j) {
                                if (c.columnKey === columnKey) {
                                    found = j;
                                    return false;
                                }
                            });
                        }
                        if (found === -1) {
                            var $cell = selection.cellAt($table, i, columnKey);
                            if (!locks) {
                                locks = {};
                                locks[i] = [{ columnKey: columnKey, value: ds[i][columnKey] }];
                                $.data($table, internal.DET, locks);
                            }
                            else if (locks && !locks[i]) {
                                locks[i] = [{ columnKey: columnKey, value: ds[i][columnKey] }];
                            }
                            else
                                locks[i].push({ columnKey: columnKey, value: ds[i][columnKey] });
                            helper.markCellWith(style.DET_CLS, $cell);
                        }
                    }
                    /**
                     * Unlock cell.
                     */
                    function unlockCell($container, rowId, columnKey) {
                        var $table = helper.getMainTable($container[0]);
                        var ds = helper.getDataSource($table);
                        var pk = helper.getPrimaryKey($table);
                        var i = -1;
                        _.forEach(ds, function (r, j) {
                            if (r[pk] === rowId) {
                                i = j;
                                return false;
                            }
                        });
                        if (i === -1)
                            return;
                        var locks = $.data($table, internal.DET);
                        var found = -1;
                        if (locks && locks[i] && locks[i].length > 0) {
                            _.forEach(locks[i], function (c, j) {
                                if (c.columnKey === columnKey) {
                                    found = j;
                                    return false;
                                }
                            });
                        }
                        if (found > -1) {
                            var $cell = selection.cellAt($table, i, columnKey);
                            locks[i].splice(found, 1);
                            if (locks[i].length === 0)
                                delete locks[i];
                            helper.stripCellWith(style.DET_CLS, $cell);
                        }
                    }
                    /**
                     * Return popup value.
                     */
                    function returnPopupValue($container, value) {
                        if (!$container)
                            return;
                        var header = helper.getMainHeader($container[0]);
                        if (!header)
                            return;
                        var headerTbl = header.querySelector("table");
                        if (!headerTbl)
                            return;
                        var $pu = $.data(headerTbl, internal.POPUP);
                        if (!$pu)
                            return;
                        events.trigger($pu[0], events.POPUP_INPUT_END, { value: value });
                    }
                    /**
                     * Get data source.
                     */
                    function getDataSource($container, name) {
                        switch (name) {
                            case "leftmost":
                                return helper.getPartialDataSource($container[0], LEFTMOST);
                            case "middle":
                                return helper.getPartialDataSource($container[0], MIDDLE);
                            case "detail":
                                return helper.getPartialDataSource($container[0], DETAIL);
                            case "verticalSummaries":
                                return helper.getPartialDataSource($container[0], VERTICAL_SUM);
                            case "leftHorizontalSummaries":
                                return helper.getPartialDataSource($container[0], LEFT_HORZ_SUM);
                            case "horizontalSummaries":
                                return helper.getPartialDataSource($container[0], HORIZONTAL_SUM);
                        }
                    }
                    /**
                     * Get cell by index.
                     */
                    function getCellByIndex($container, rowIndex, columnKey) {
                        var $tbl = helper.getMainTable($container[0]);
                        if (!$tbl)
                            return;
                        return selection.cellAt($tbl, rowIndex, columnKey);
                    }
                    /**
                     * Get cell by Id.
                     */
                    function getCellById($container, rowId, columnKey) {
                        var $tbl = helper.getMainTable($container[0]);
                        if (!$tbl)
                            return;
                        return selection.cellOf($tbl, rowId, columnKey);
                    }
                    /**
                     * Get updated cells.
                     */
                    function getUpdatedCells($container) {
                        var data = $container.data(NAMESPACE).modifications;
                        if (!data)
                            return [];
                        return helper.valuesArray(data);
                    }
                    /**
                     * Get lock cells.
                     */
                    function getLockCells($container) {
                        var tbl = helper.getMainTable($container[0]);
                        var det = $.data(tbl, internal.DET);
                        if (!det)
                            return [];
                        var cells = [];
                        Object.keys(det).forEach(function (k) {
                            if (!uk.util.isNullOrUndefined(det[k])) {
                                det[k].forEach(function (v) {
                                    cells.push({ rowIndex: k, columnKey: v.columnKey, value: v.value });
                                });
                            }
                        });
                        return cells;
                    }
                    /**
                     * Round retreat.
                     */
                    function roundRetreat($container, value) {
                        if (!value)
                            return;
                        events.trigger($container[0], events.ROUND_RETREAT, value);
                    }
                    /**
                     * Set cell value.
                     */
                    function setCellValue($container, name, rowId, columnKey, value) {
                        switch (name) {
                            case LEFT_TBL:
                                setValue($container, BODY_PRF + LEFTMOST, rowId, columnKey, value);
                                break;
                            case HORZ_SUM:
                                setValue($container, BODY_PRF + HORIZONTAL_SUM, rowId, columnKey, value);
                                break;
                            case VERT_SUM:
                                setValue($container, BODY_PRF + VERTICAL_SUM, rowId, columnKey, value);
                                break;
                        }
                    }
                    /**
                     * Set cell value by index.
                     */
                    function setCellValueByIndex($container, name, rowIdx, columnKey, value) {
                        switch (name) {
                            case LEFT_TBL:
                                setValueByIndex($container, BODY_PRF + LEFTMOST, rowIdx, columnKey, value);
                                break;
                            case HORZ_SUM:
                                setValueByIndex($container, BODY_PRF + HORIZONTAL_SUM, rowIdx, columnKey, value);
                                break;
                            case VERT_SUM:
                                setValueByIndex($container, BODY_PRF + VERTICAL_SUM, rowIdx, columnKey, value);
                                break;
                        }
                    }
                    /**
                     * Set value.
                     */
                    function setValue($container, selector, rowId, columnKey, value) {
                        var $grid = $container.find("." + selector);
                        if ($grid.length === 0)
                            return;
                        var rowIdx = helper.getRowIndex($grid[0], rowId);
                        var ds = helper.getDataSource($grid[0]);
                        if (rowIdx === -1 || !ds || ds.length === 0)
                            return;
                        if (selector === BODY_PRF + LEFTMOST) {
                            if (ds[rowIdx][columnKey] !== value) {
                                update.gridCell($grid[0], rowIdx, columnKey, -1, value);
                                update.pushEditHistory($grid[0], new selection.Cell(rowIdx, columnKey, value, -1));
                            }
                        }
                        else {
                            ds[rowIdx][columnKey] = value;
                            refreshCell($grid, rowId, columnKey, value);
                        }
                    }
                    /**
                     * Set value by index.
                     */
                    function setValueByIndex($container, selector, rowIdx, columnKey, value) {
                        var $grid = $container.find("." + selector);
                        if ($grid.length === 0)
                            return;
                        var x = helper.getExTableFromGrid($grid[0]);
                        var ds = helper.getDataSource($grid[0]);
                        if (!ds || ds.length === 0)
                            return;
                        var rowObj = ds[rowIdx];
                        if (!rowObj)
                            return;
                        var updTarget;
                        if (!uk.util.isNullOrUndefined(x.manipulatorId)
                            && !uk.util.isNullOrUndefined(x.manipulatorKey)) {
                            updTarget = x.manipulatorId === rowObj[x.manipulatorKey] ? 1 : 0;
                        }
                        if (selector === BODY_PRF + LEFTMOST) {
                            if (rowObj[columnKey] !== value) {
                                update.gridCell($grid[0], rowIdx, columnKey, -1, value);
                                update.pushEditHistory($grid[0], new selection.Cell(rowIdx, columnKey, value, -1), updTarget);
                            }
                        }
                        else {
                            rowObj[columnKey] = value;
                            refreshCellByIndex($grid, rowIdx, columnKey, value);
                        }
                    }
                    /**
                     * Refresh cell.
                     */
                    function refreshCell($grid, rowId, columnKey, value) {
                        var $c = selection.cellOf($grid[0], rowId, columnKey);
                        if ($c === intan.NULL || !$c)
                            return;
                        if (uk.util.isNullOrUndefined(value)) {
                            var ds = helper.getClonedDs($grid[0]);
                            if (!ds || ds.length === 0)
                                return;
                            var rIdx = helper.getRowIndex($grid[0], rowId);
                            if (rIdx === -1)
                                return;
                            value = ds[rIdx][columnKey];
                        }
                        $c.textContent = value;
                    }
                    /**
                     * Refresh cell by index.
                     */
                    function refreshCellByIndex($grid, rowIdx, columnKey, value) {
                        var $c = selection.cellAt($grid[0], rowIdx, columnKey);
                        if ($c === intan.NULL || !$c)
                            return;
                        if (uk.util.isNullOrUndefined(value)) {
                            var ds = helper.getClonedDs($grid);
                            if (!ds || ds.length === 0)
                                return;
                            value = ds[rowIdx][columnKey];
                        }
                        $c.textContent = value;
                    }
                    /**
                     * Set row Id.
                     */
                    function setRowId($container, rowIndex, value) {
                        $container.find("div[class*='" + BODY_PRF + "']").filter(function () {
                            return !$(this).hasClass(BODY_PRF + HORIZONTAL_SUM) && !$(this).hasClass(BODY_PRF + LEFT_HORZ_SUM);
                        }).each(function () {
                            var key = helper.getPrimaryKey(this);
                            var x = helper.getExTableFromGrid(this);
                            var ds = helper.getDataSource(this);
                            var rowObj = ds[rowIndex];
                            if (!ds || ds.length === 0 || !rowObj)
                                return;
                            var updTarget;
                            if (!uk.util.isNullOrUndefined(x.manipulatorId)
                                && !uk.util.isNullOrUndefined(x.manipulatorKey)) {
                                updTarget = x.manipulatorId === rowObj[x.manipulatorKey] ? 1 : 0;
                            }
                            if (rowObj[key] !== value) {
                                update.gridCell(this, rowIndex, key, -1, value);
                                update.pushEditHistory(this, new selection.Cell(rowIndex, key, value, -1), updTarget);
                            }
                        });
                    }
                    /**
                     * Save scroll.
                     */
                    function saveScroll($container) {
                        var key = uk.request.location.current.rawUrl + "/" + $container.attr("id") + "/scroll";
                        var scroll = {};
                        var $tbl = $container.find("." + BODY_PRF + DETAIL);
                        scroll.v = $tbl.scrollTop();
                        scroll.h = $tbl.scrollLeft();
                        uk.localStorage.setItemAsJson(key, scroll);
                    }
                    /**
                     * Scroll back.
                     */
                    function scrollBack($container, where, scrollLength) {
                        var scroll, $tbl = $container.find("." + BODY_PRF + DETAIL);
                        if (_.isNil(scrollLength)) {
                            var key = uk.request.location.current.rawUrl + "/" + $container.attr("id") + "/scroll";
                            var item = uk.localStorage.getItem(key);
                            if (!item.isPresent())
                                return;
                            scroll = JSON.parse(item.get());
                        }
                        else {
                            scroll = scrollLength;
                        }
                        switch (where) {
                            case 0:
                                $tbl.scrollLeft(scroll.h);
                                break;
                            case 1:
                                $tbl.scrollTop(scroll.v);
                                break;
                            case 2:
                                $tbl.scrollLeft(scroll.h);
                                $tbl.scrollTop(scroll.v);
                                break;
                        }
                    }
                })(func || (func = {}));
                var internal;
                (function (internal) {
                    internal.X_OCCUPY = "ex-x-occupy";
                    internal.Y_OCCUPY = "ex-y-occupy";
                    internal.TANGI = "x-tangi";
                    internal.CANON = "x-canon";
                    internal.STICKER = "x-sticker";
                    internal.DET = "x-det";
                    internal.PAINTER = "painter";
                    internal.CELLS_STYLE = "body-cells-style";
                    internal.D_CELLS_STYLE = "d-body-cells-style";
                    internal.VIEW = "view";
                    internal.EX_PART = "expart";
                    internal.TIME_VALID_RANGE = "time-validate-range";
                    internal.SELECTED_CELLS = "selected-cells";
                    internal.LAST_SELECTED = "last-selected";
                    internal.SELECTED_ROWS = "selected-rows";
                    internal.COPY_HISTORY = "copy-history";
                    internal.REDO_STACK = "redo-stack";
                    internal.EDIT_HISTORY = "edit-history";
                    internal.TARGET_EDIT_HISTORY = "target-edit-history";
                    internal.OTHER_EDIT_HISTORY = "other-edit-history";
                    internal.STICK_HISTORY = "stick-history";
                    internal.STICK_REDO_STACK = "stick-redo-stack";
                    internal.TOOLTIP = "tooltip";
                    internal.CONTEXT_MENU = "context-menu";
                    internal.POPUP = "popup";
                    internal.TEXT = "text";
                    internal.TIME = "time";
                    internal.DURATION = "duration";
                    internal.NUMBER = "number";
                    internal.DT_SEPARATOR = "/";
                    internal.COLUMN_IN = "column-in";
                    internal.INPUT_SELECTING = "input-selecting";
                    internal.ERR_MSG = "error-msg";
                    internal.ERR_POPUP = "error-popup";
                    internal.PRINTER_INST = "printer-inst";
                    /**
                     * Get gem.
                     */
                    function getGem($grid) {
                        return $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                    }
                    internal.getGem = getGem;
                    /**
                     * Get data source.
                     */
                    function getDataSource($grid) {
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        if (!gen)
                            return;
                        return gen.dataSource;
                    }
                    internal.getDataSource = getDataSource;
                    /**
                     * Remove change.
                     */
                    function removeChange($grid, cell) {
                        var origDs = helper.getOrigDS($grid);
                        var exTable = helper.getExTableFromGrid($grid);
                        if (!origDs || !exTable)
                            return;
                        var oVal = origDs[cell.rowIndex][cell.columnKey];
                        var cells = exTable.modifications[cell.rowIndex];
                        if (!cells)
                            return;
                        var index = -1;
                        _.forEach(cells, function (c, i) {
                            if (helper.areSameCells(cell, c) && cell.value === oVal) {
                                index = i;
                                return false;
                            }
                        });
                        if (index !== -1) {
                            exTable.modifications[cell.rowIndex].splice(index, 1);
                        }
                    }
                    internal.removeChange = removeChange;
                    /**
                     * Clear states.
                     */
                    function clearStates($grid) {
                        $.data($grid, internal.SELECTED_CELLS, null);
                        $.data($grid, internal.LAST_SELECTED, null);
                        $.data($grid, internal.COPY_HISTORY, null);
                        $.data($grid, internal.EDIT_HISTORY, null);
                        $.data($grid, internal.STICK_HISTORY, null);
                        $.data($grid, internal.DET, null);
                        $.data($grid, internal.D_CELLS_STYLE, null);
                        var exTable = helper.getExTableFromGrid($grid);
                        if (!exTable)
                            return;
                        exTable.modifications = {};
                    }
                    internal.clearStates = clearStates;
                })(internal || (internal = {}));
                var selector;
                (function (selector) {
                    function find(p, sel) {
                        return new Manipulator().addNodes(p.querySelectorAll(sel));
                    }
                    selector.find = find;
                    function create(str) {
                        return new Manipulator().addElement(document.createElement(str));
                    }
                    selector.create = create;
                    function is(el, sel) {
                        if (_.isNil(el) || _.isNil(sel))
                            return false;
                        var matches = el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector;
                        if (matches)
                            return matches.call(el, sel);
                        return $(el).is(sel);
                    }
                    selector.is = is;
                    function index(el) {
                        return Array.prototype.slice.call(el.parentNode.children).indexOf(el);
                    }
                    selector.index = index;
                    function queryAll(el, sel) {
                        return Array.prototype.slice.call(el.querySelectorAll(sel));
                    }
                    selector.queryAll = queryAll;
                    function offset(el) {
                        var rect = el.getBoundingClientRect();
                        return {
                            top: rect.top + document.body.scrollTop,
                            left: rect.left + document.body.scrollLeft
                        };
                    }
                    selector.offset = offset;
                    function classSiblings(node, clazz) {
                        var parent = node.parentElement;
                        if (!parent)
                            return;
                        var children = parent.children;
                        var results = [];
                        for (var i = 0; i < children.length; i++) {
                            if (children[i] === node)
                                continue;
                            var classList = children[i].classList;
                            for (var j = 0; j < classList.length; j++) {
                                if (classList.item(j) === clazz) {
                                    results.push(children[i]);
                                    break;
                                }
                            }
                        }
                        return results;
                    }
                    selector.classSiblings = classSiblings;
                    function siblingsLt(el, index) {
                        var parent = el.parentNode;
                        if (!parent)
                            return;
                        var children = parent.children;
                        var results = [];
                        for (var i = 0; i < children.length; i++) {
                            if (i < index) {
                                if (children[i] !== el)
                                    results.push(children[i]);
                            }
                            else
                                return results;
                        }
                    }
                    selector.siblingsLt = siblingsLt;
                    var Manipulator = /** @class */ (function () {
                        function Manipulator() {
                        }
                        Manipulator.prototype.addNodes = function (nodes) {
                            if (!nodes || nodes.length === 0)
                                return;
                            this.elements = Array.prototype.slice.call(self.elements);
                            return this;
                        };
                        Manipulator.prototype.addElements = function (elements) {
                            this.elements = elements;
                            return this;
                        };
                        Manipulator.prototype.addElement = function (element) {
                            if (!this.elements)
                                this.elements = [];
                            this.elements.push(element);
                            return this;
                        };
                        Manipulator.prototype.html = function (str) {
                            this.elements.forEach(function (e) {
                                e.innerHTML = str;
                            });
                            return this;
                        };
                        Manipulator.prototype.width = function (w) {
                            var self = this;
                            this.elements.forEach(function (e) {
                                e.style.width = parseInt(w) + "px";
                            });
                            return this;
                        };
                        Manipulator.prototype.height = function (h) {
                            var self = this;
                            this.elements.forEach(function (e) {
                                e.style.height = parseInt(h) + "px";
                            });
                            return this;
                        };
                        Manipulator.prototype.data = function (name, value) {
                            this.elements.forEach(function (e) {
                                $.data(e, name, value);
                            });
                            return this;
                        };
                        Manipulator.prototype.addClass = function (clazz) {
                            this.elements.forEach(function (e) {
                                e.classList.add(clazz);
                            });
                            return this;
                        };
                        Manipulator.prototype.css = function (style) {
                            //                this.elements.forEach(function(e) {
                            //                    Object.keys(style).forEach(function(k) {;
                            //                        if (k === "maxWidth") {
                            //                            e.style.setProperty("max-width", style[k]);
                            //                            return;
                            //                        } else if (k === "paddingRight") {
                            //                            e.style.setProperty("padding-right", style[k]);
                            //                            return;
                            //                        } else if (k === "borderTop") {
                            //                            e.style.setProperty("border-top", style[k]);
                            //                            return;
                            //                        } else if (k === "borderBottom") {
                            //                            e.style.setProperty("border-bottom", style[k]);
                            //                            return;
                            //                        } else if (k === "borderRight") {
                            //                            e.style.setProperty("border-right", style[k]);
                            //                            return;
                            //                        } else if (k === "borderLeft") {
                            //                            e.style.setProperty("border-left", style[k]);
                            //                            return;
                            //                        }
                            //                        e.style.setProperty(k, style[k]);
                            //                    });
                            //                });
                            var text = "; ";
                            Object.keys(style).forEach(function (k) {
                                if (k === "maxWidth") {
                                    text += ("max-width: " + style[k] + "; ");
                                    return;
                                }
                                else if (k === "paddingRight") {
                                    text += ("padding-right: " + style[k] + "; ");
                                    return;
                                }
                                else if (k === "borderTop") {
                                    text += ("border-top: " + style[k] + "; ");
                                    return;
                                }
                                else if (k === "borderBottom") {
                                    text += ("border-bottom: " + style[k] + "; ");
                                    return;
                                }
                                else if (k === "borderRight") {
                                    text += ("border-right: " + style[k] + "; ");
                                    return;
                                }
                                else if (k === "borderLeft") {
                                    text += ("border-left: " + style[k] + "; ");
                                    return;
                                }
                                text += k + ": " + style[k] + "; ";
                            });
                            this.elements.forEach(function (e) {
                                e.style.cssText = text;
                            });
                            return this;
                        };
                        Manipulator.prototype.getSingle = function () {
                            return this.elements[0];
                        };
                        Manipulator.prototype.get = function () {
                            return this.elements;
                        };
                        return Manipulator;
                    }());
                    selector.Manipulator = Manipulator;
                })(selector || (selector = {}));
                var helper;
                (function (helper) {
                    /**
                     * Is IE.
                     */
                    function isIE() {
                        return window.navigator.userAgent.indexOf("MSIE") > -1 || window.navigator.userAgent.match(/trident/i);
                    }
                    helper.isIE = isIE;
                    /**
                     * Is Chrome.
                     */
                    function isChrome() {
                        return window.chrome;
                    }
                    helper.isChrome = isChrome;
                    /**
                     * Is Edge.
                     */
                    function isEdge() {
                        return window.navigator.userAgent.indexOf("Edge") > -1;
                    }
                    helper.isEdge = isEdge;
                    /**
                     * Get scroll width.
                     */
                    function getScrollWidth() {
                        if (_scrollWidth)
                            return _scrollWidth;
                        var $outer = document.body.appendChild(selector.create("div").css({ visibility: 'hidden', width: "100px", overflow: 'scroll' }).getSingle());
                        var $inner = selector.create("div").css({ width: '100%' }).getSingle();
                        $outer.appendChild($inner);
                        var widthWithScroll = $inner.offsetWidth;
                        $outer.parentNode.removeChild($outer);
                        _scrollWidth = 100 - widthWithScroll;
                        return _scrollWidth;
                    }
                    helper.getScrollWidth = getScrollWidth;
                    /**
                     * Has scrollbar.
                     */
                    function hasScrollBar(element, horzDir) {
                        if (horzDir)
                            return element.scrollWidth > element.clientWidth;
                        return element.scrollHeight > element.clientHeight;
                    }
                    helper.hasScrollBar = hasScrollBar;
                    /**
                     * Get table.
                     */
                    function getTable($exTable, name) {
                        return $exTable.querySelector("." + name);
                    }
                    helper.getTable = getTable;
                    /**
                     * Get main header.
                     */
                    function getMainHeader($exTable) {
                        return $exTable.querySelector("." + HEADER_PRF + DETAIL);
                    }
                    helper.getMainHeader = getMainHeader;
                    /**
                     * Get main table.
                     */
                    function getMainTable($exTable) {
                        return $exTable.querySelector("." + BODY_PRF + DETAIL);
                    }
                    helper.getMainTable = getMainTable;
                    /**
                     * Get leftmost table.
                     */
                    function getLeftmostTable($exTable) {
                        return $exTable.querySelector("." + BODY_PRF + LEFTMOST);
                    }
                    helper.getLeftmostTable = getLeftmostTable;
                    /**
                     * Get exTable from grid.
                     */
                    function getExTableFromGrid($grid) {
                        return $.data(helper.closest($grid, "." + NAMESPACE), NAMESPACE);
                    }
                    helper.getExTableFromGrid = getExTableFromGrid;
                    /**
                     * Get visible columns.
                     */
                    function getVisibleColumnsOn($grid) {
                        return ($.data($grid, internal.TANGI) || $.data($grid, internal.CANON)).painter.visibleColumns;
                    }
                    helper.getVisibleColumnsOn = getVisibleColumnsOn;
                    /**
                     * Get visible columns.
                     */
                    function getVisibleColumns(options) {
                        var visibleColumns = [];
                        filterColumns(options.columns, visibleColumns, []);
                        return visibleColumns;
                    }
                    helper.getVisibleColumns = getVisibleColumns;
                    /**
                     * Get origDS.
                     */
                    function getOrigDS($grid) {
                        return ($.data($grid, internal.TANGI) || $.data($grid, internal.CANON))._origDs;
                    }
                    helper.getOrigDS = getOrigDS;
                    /**
                     * Get data source.
                     */
                    function getDataSource($grid) {
                        return ($.data($grid, internal.TANGI) || $.data($grid, internal.CANON)).dataSource;
                    }
                    helper.getDataSource = getDataSource;
                    /**
                     * Get clonedDs.
                     */
                    function getClonedDs($grid) {
                        return _.cloneDeep(getDataSource($grid));
                    }
                    helper.getClonedDs = getClonedDs;
                    /**
                     * Get primary key.
                     */
                    function getPrimaryKey($grid) {
                        return ($.data($grid, internal.TANGI) || $.data($grid, internal.CANON)).primaryKey;
                    }
                    helper.getPrimaryKey = getPrimaryKey;
                    /**
                     * Classify columns.
                     */
                    function classifyColumns(options) {
                        var visibleColumns = [];
                        var hiddenColumns = [];
                        filterColumns(options.columns, visibleColumns, hiddenColumns);
                        return {
                            visibleColumns: visibleColumns,
                            hiddenColumns: hiddenColumns
                        };
                    }
                    helper.classifyColumns = classifyColumns;
                    /**
                     * Filter columns.
                     */
                    function filterColumns(columns, visibleColumns, hiddenColumns) {
                        _.forEach(columns, function (col) {
                            if (!uk.util.isNullOrUndefined(col.visible) && col.visible === false) {
                                hiddenColumns.push(col);
                                return;
                            }
                            if (!uk.util.isNullOrUndefined(col.group) && col.group.length > 0) {
                                filterColumns(col.group, visibleColumns, hiddenColumns);
                            }
                            else {
                                visibleColumns.push(col);
                            }
                        });
                    }
                    /**
                     * Get columns map.
                     */
                    function getColumnsMap(columns) {
                        return _.groupBy(columns, "key");
                    }
                    helper.getColumnsMap = getColumnsMap;
                    /**
                     * Get columns map from struct.
                     */
                    function columnsMapFromStruct(levelStruct) {
                        var map = {};
                        _.forEach(Object.keys(levelStruct), function (nth) {
                            _.forEach(levelStruct[nth], function (col) {
                                if (!uk.util.isNullOrUndefined(col.key)) {
                                    map[col.key] = col;
                                }
                            });
                        });
                        return map;
                    }
                    helper.columnsMapFromStruct = columnsMapFromStruct;
                    /**
                     * Get partial data source.
                     */
                    function getPartialDataSource($table, name) {
                        return {
                            header: getClonedDs($table.querySelector("." + HEADER_PRF + name)),
                            body: getClonedDs($table.querySelector("." + BODY_PRF + name))
                        };
                    }
                    helper.getPartialDataSource = getPartialDataSource;
                    /**
                     * Make connector.
                     */
                    function makeConnector() {
                        Connector[HEADER_PRF + LEFTMOST] = BODY_PRF + LEFTMOST;
                        Connector[HEADER_PRF + MIDDLE] = BODY_PRF + MIDDLE;
                        Connector[HEADER_PRF + DETAIL] = BODY_PRF + DETAIL;
                        Connector[HEADER_PRF + VERTICAL_SUM] = BODY_PRF + VERTICAL_SUM;
                        Connector[HEADER_PRF + HORIZONTAL_SUM] = BODY_PRF + HORIZONTAL_SUM;
                    }
                    helper.makeConnector = makeConnector;
                    /**
                     * Get class of header.
                     */
                    function getClassOfHeader($part) {
                        return $.data($part, internal.EX_PART);
                    }
                    helper.getClassOfHeader = getClassOfHeader;
                    /**
                     * Is paste key.
                     */
                    function isPasteKey(evt) {
                        return evt.keyCode === 86;
                    }
                    helper.isPasteKey = isPasteKey;
                    /**
                     * Is copy key.
                     */
                    function isCopyKey(evt) {
                        return evt.keyCode === 67;
                    }
                    helper.isCopyKey = isCopyKey;
                    /**
                     * Is cut key.
                     */
                    function isCutKey(evt) {
                        return evt.keyCode === 88;
                    }
                    helper.isCutKey = isCutKey;
                    /**
                     * Is undo key.
                     */
                    function isUndoKey(evt) {
                        return evt.keyCode === 90;
                    }
                    helper.isUndoKey = isUndoKey;
                    /**
                     * Is redo key.
                     */
                    function isRedoKey(evt) {
                        return evt.keyCode === 89;
                    }
                    helper.isRedoKey = isRedoKey;
                    /**
                     * Is Html.
                     */
                    function isHtml(str) {
                        return /^(<([^>]+)>).*$/i.test(str);
                    }
                    helper.isHtml = isHtml;
                    /**
                     * Get cell coord.
                     */
                    function getCellCoord($cell) {
                        if (!$cell)
                            return;
                        var $td = $cell;
                        if (selector.is($cell, "div")) {
                            $td = closest($cell, "td");
                        }
                        var view = $.data($td, internal.VIEW);
                        if (!view)
                            return;
                        var coord = view.split("-");
                        if (uk.util.isNullOrUndefined(coord[0]) || uk.util.isNullOrUndefined(coord[1]))
                            return;
                        return {
                            rowIdx: parseFloat(coord[0]),
                            columnKey: coord[1]
                        };
                    }
                    helper.getCellCoord = getCellCoord;
                    /**
                     * Get display column index.
                     */
                    function getDisplayColumnIndex($grid, key) {
                        var generator = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        var visibleColumns = generator.painter.visibleColumns;
                        var index;
                        _.forEach(visibleColumns, function (c, i) {
                            if (c.key === key) {
                                index = i;
                                return false;
                            }
                        });
                        return index;
                    }
                    helper.getDisplayColumnIndex = getDisplayColumnIndex;
                    /**
                     * Get row index.
                     */
                    function getRowIndex($grid, rowId) {
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        if (!gen)
                            return;
                        var start = gen.startIndex || 0;
                        var end = gen.endIndex || gen.dataSource.length - 1;
                        for (var i = start; i <= end; i++) {
                            if (gen.dataSource[i][gen.primaryKey] === rowId) {
                                return i;
                            }
                        }
                        return -1;
                    }
                    helper.getRowIndex = getRowIndex;
                    /**
                     * Grid visible columns.
                     */
                    function gridVisibleColumns($grid) {
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        if (!gen)
                            return;
                        return gen.painter.visibleColumns;
                    }
                    helper.gridVisibleColumns = gridVisibleColumns;
                    /**
                     * Grid columns map.
                     */
                    function gridColumnsMap($grid) {
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        if (!gen)
                            return;
                        return gen.painter.columnsMap;
                    }
                    helper.gridColumnsMap = gridColumnsMap;
                    /**
                     * Mark cell.
                     */
                    function markCellWith(clazz, $cell, nth, value) {
                        if (!$cell)
                            return;
                        var $childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                        if (selector.is($cell, "td") && $childCells.length > 0) {
                            if (!uk.util.isNullOrUndefined(nth) && nth !== -1) {
                                $childCells[nth].classList.add(clazz);
                                if (clazz === errors.ERROR_CLS)
                                    $childCells[nth].textContent = value;
                            }
                            else {
                                helper.addClass($childCells, clazz);
                            }
                            return;
                        }
                        $cell.classList.add(clazz);
                        if (clazz === errors.ERROR_CLS)
                            $cell.textContent = value;
                    }
                    helper.markCellWith = markCellWith;
                    /**
                     * Strip cell.
                     */
                    function stripCellWith(clazz, $cell, nth) {
                        if (!$cell)
                            return;
                        var $childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                        if (selector.is($cell, "td") && $childCells.length > 0) {
                            if (!uk.util.isNullOrUndefined(nth) && nth !== -1) {
                                $childCells[nth].classList.remove(clazz);
                            }
                            else
                                helper.removeClass($childCells, clazz);
                            return;
                        }
                        $cell.classList.remove(clazz);
                    }
                    helper.stripCellWith = stripCellWith;
                    /**
                     * Mark cells.
                     */
                    function markCellsWith(clazz, $cells) {
                        if (!$cells || $cells.constructor !== Array)
                            return;
                        $cells.forEach(function (e) {
                            markCellWith(clazz, e);
                        });
                    }
                    helper.markCellsWith = markCellsWith;
                    /**
                     * Strip cells.
                     */
                    function stripCellsWith(clazz, $cells) {
                        if (!$cells || $cells.constructor !== Array)
                            return;
                        $cells.forEach(function (e) {
                            stripCellWith(clazz, e);
                        });
                    }
                    helper.stripCellsWith = stripCellsWith;
                    /**
                     * Is detable.
                     */
                    function isDetable($cell) {
                        var children = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                        return !(selector.is($cell, "." + style.HIDDEN_CLS) || selector.is($cell, "." + style.SEAL_CLS)
                            || selector.is($cell, "." + render.EMPTY_CLS) || (children.length > 0
                            && (selector.is(children[0], "." + style.HIDDEN_CLS)
                                || selector.is(children[0], "." + style.SEAL_CLS))));
                    }
                    helper.isDetable = isDetable;
                    /**
                     * Column index.
                     */
                    function indexOf(columnKey, visibleColumns) {
                        var index = -1;
                        _.forEach(visibleColumns, function (column, i) {
                            if (column.key === columnKey) {
                                index = i;
                                return false;
                            }
                        });
                        return index;
                    }
                    helper.indexOf = indexOf;
                    /**
                     * Next column key.
                     */
                    function nextKeyOf(columnIndex, visibleColumns) {
                        if (columnIndex >= visibleColumns.length - 1)
                            return;
                        return visibleColumns[columnIndex + 1].key;
                    }
                    helper.nextKeyOf = nextKeyOf;
                    /**
                     * Next cell.
                     */
                    function nextCellOf($grid, cell) {
                        var key, rowIndex, innerIdx;
                        var gen = $.data($grid, internal.TANGI) || $.data($grid, internal.CANON);
                        if (!gen)
                            return;
                        var visibleColumns = gen.painter.visibleColumns;
                        var innerTypes = [];
                        _(gen.painter.options.columns).forEach(function (c) {
                            if (c.dataType) {
                                innerTypes = c.dataType.split('/');
                                return false;
                            }
                        });
                        var nextInnerIdx = function (idx) {
                            if (idx === innerTypes.length - 1)
                                return;
                            for (var i = idx + 1; i < innerTypes.length; i++) {
                                if (innerTypes[i] !== controls.LABEL.toLowerCase()) {
                                    return i;
                                }
                            }
                        };
                        innerIdx = nextInnerIdx(cell.innerIdx);
                        if (!_.isNil(innerIdx)) {
                            return new selection.Cell(cell.rowIndex, cell.columnKey, null, innerIdx);
                        }
                        key = nextKeyOf(indexOf(cell.columnKey, visibleColumns), visibleColumns);
                        if (key) {
                            for (var i = 0; i < innerTypes.length; i++) {
                                if (innerTypes[i] !== controls.LABEL.toLowerCase()) {
                                    innerIdx = i;
                                    break;
                                }
                            }
                            return new selection.Cell(cell.rowIndex, key, undefined, innerIdx);
                        }
                        key = visibleColumns[0].key;
                        if (cell.rowIndex >= gen.dataSource.length - 1) {
                            if (cell.innerIdx === -1) {
                                rowIndex = 0;
                                innerIdx = -1;
                            }
                            else if (!_.isNil(innerIdx = nextInnerIdx(cell.innerIdx))) {
                                rowIndex = Number(cell.rowIndex);
                            }
                            else {
                                rowIndex = 0;
                                for (var i = 0; i <= cell.innerIdx; i++) {
                                    if (innerTypes[i] !== controls.LABEL.toLowerCase()) {
                                        innerIdx = i;
                                        break;
                                    }
                                }
                            }
                        }
                        else {
                            if (cell.innerIdx === -1) {
                                rowIndex = Number(cell.rowIndex) + 1;
                                innerIdx = -1;
                            }
                            else if (!_.isNil(innerIdx = nextInnerIdx(cell.innerIdx))) {
                                rowIndex = Number(cell.rowIndex);
                            }
                            else {
                                rowIndex = Number(cell.rowIndex) + 1;
                                for (var i = 0; i <= cell.innerIdx; i++) {
                                    if (innerTypes[i] !== controls.LABEL.toLowerCase()) {
                                        innerIdx = i;
                                        break;
                                    }
                                }
                            }
                        }
                        return new selection.Cell(rowIndex, key, undefined, innerIdx);
                    }
                    helper.nextCellOf = nextCellOf;
                    /**
                     * Call.
                     */
                    function call(fn) {
                        var args = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            args[_i - 1] = arguments[_i];
                        }
                        return function () {
                            return fn.apply(null, args);
                        };
                    }
                    helper.call = call;
                    /**
                     * Check br.
                     */
                    function containsBr(text) {
                        return text && text.indexOf("<br/>") > -1;
                    }
                    helper.containsBr = containsBr;
                    /**
                     * Compare cells.
                     */
                    function areSameCells(one, other) {
                        if (parseInt(one.rowIndex) !== parseInt(other.rowIndex)
                            || one.columnKey !== other.columnKey
                            || one.innerIdx !== other.innerIdx)
                            return false;
                        return true;
                    }
                    helper.areSameCells = areSameCells;
                    /**
                     * Is det cell.
                     */
                    function isDetCell($grid, rowIdx, key) {
                        var $cell = selection.cellAt($grid, rowIdx, key);
                        var $childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                        return ($childCells.length === 0 && selector.is($cell, "." + style.DET_CLS))
                            || ($childCells.length > 0 && selector.is($childCells[0], "." + style.DET_CLS));
                    }
                    helper.isDetCell = isDetCell;
                    /**
                     * Is xcell.
                     */
                    function isXCell($grid, rowId, key) {
                        var clazz = [];
                        for (var _i = 3; _i < arguments.length; _i++) {
                            clazz[_i - 3] = arguments[_i];
                        }
                        var cellsStyle = $.data($grid, internal.CELLS_STYLE);
                        if (!cellsStyle)
                            return;
                        var result = _.find(cellsStyle, function (deco) {
                            return deco.columnKey === key && deco.rowId === rowId && clazz.some(function (c) { return deco.clazz === c; });
                        });
                        return result !== undefined;
                    }
                    helper.isXCell = isXCell;
                    /**
                     * Is xcell shown.
                     */
                    function isXCellShown($grid, rowIdx, key) {
                        var clazz = [];
                        for (var _i = 3; _i < arguments.length; _i++) {
                            clazz[_i - 3] = arguments[_i];
                        }
                        var $cell = selection.cellAt($grid, rowIdx, key);
                        var $childCells = $cell.querySelectorAll("." + render.CHILD_CELL_CLS);
                        var returnVal = false;
                        _.forEach(clazz, function (c) {
                            if (($childCells.length === 0 && selector.is($cell, "." + c))
                                || ($childCells.length > 0 && selector.is($childCells[0], "." + c))) {
                                returnVal = true;
                                return false;
                            }
                        });
                        return returnVal;
                    }
                    helper.isXCellShown = isXCellShown;
                    /**
                     * Is empty.
                     */
                    function isEmpty(obj) {
                        if (obj && obj.constructor === Array) {
                            var empty_1 = true;
                            _.forEach(obj, function (o) {
                                if (!uk.util.isNullOrUndefined(o)) {
                                    empty_1 = false;
                                    return false;
                                }
                            });
                            return empty_1;
                        }
                        if (!obj)
                            return true;
                        return false;
                    }
                    helper.isEmpty = isEmpty;
                    /**
                     * Values array.
                     */
                    function valuesArray(obj) {
                        var values = [];
                        _.forEach(Object.keys(obj), function (k, i) {
                            values = _.concat(values, obj[k]);
                        });
                        return values;
                    }
                    helper.valuesArray = valuesArray;
                    /**
                     * String value.
                     */
                    function stringValue(val) {
                        return _.isObject(val) ? JSON.stringify(val) : val;
                    }
                    helper.stringValue = stringValue;
                    /**
                     * Get cell data.
                     */
                    function getCellData(data) {
                        try {
                            return JSON.parse(data);
                        }
                        catch (e) {
                            return data;
                        }
                    }
                    helper.getCellData = getCellData;
                    /**
                     * View data.
                     */
                    function viewData(view, viewMode, obj) {
                        if (!view || !viewMode)
                            return;
                        var result = [];
                        _.forEach(view(viewMode), function (f) {
                            if (!f)
                                return;
                            result.push(obj[f]);
                        });
                        return result.length === 1 ? result[0] : result;
                    }
                    helper.viewData = viewData;
                    /**
                     * Is equal.
                     */
                    function isEqual(one, two, fields) {
                        if (_.isObject(one) && _.isObject(two)) {
                            if (fields && fields.length > 0) {
                                var oFields_1 = _.cloneDeep(fields);
                                _(fields).filter(function (f) { return f.slice(-4) === "Name"; }).forEach(function (f) { return oFields_1.push(f.substr(0, f.length - 4) + "Code"); });
                                return _.isEqual(_.omitBy(one, function (d, p) { return oFields_1.every(function (f) { return f !== p; }); }), _.omitBy(two, function (d, p) { return oFields_1.every(function (f) { return f !== p; }); }));
                            }
                            return _.isEqual(_.omit(one, _.isFunction), _.omit(two, _.isFunction));
                        }
                        return _.isEqual(one, two);
                    }
                    helper.isEqual = isEqual;
                    /**
                     * Block.
                     */
                    function block(exTable) {
                        var $exTable = $(exTable);
                        $exTable.block({
                            message: null,
                            fadeIn: 200,
                            css: {
                                width: $exTable.width(),
                                height: $exTable.height()
                            }
                        });
                    }
                    helper.block = block;
                    /**
                     * Unblock.
                     */
                    function unblock(exTable) {
                        $(exTable).unblock();
                    }
                    helper.unblock = unblock;
                    /**
                     * Highlight column.
                     */
                    function highlightColumn($container, columnIndex) {
                        var grid = $container.querySelector("." + BODY_PRF + DETAIL);
                        var header = $container.querySelector("." + HEADER_PRF + DETAIL);
                        _.forEach(grid.getElementsByTagName("tr"), function (t) {
                            var tds = t.getElementsByTagName("td");
                            if (!tds || tds.length === 0)
                                return;
                            helper.addClass1n(tds[columnIndex], render.HIGHLIGHT_CLS);
                        });
                        _.forEach(header.getElementsByTagName("tr"), function (t) {
                            var tds = t.getElementsByTagName("td");
                            if (!tds || tds.length === 0)
                                return;
                            helper.addClass1n(tds[columnIndex], render.HIGHLIGHT_CLS);
                        });
                    }
                    helper.highlightColumn = highlightColumn;
                    /**
                     * Unhighlight column.
                     */
                    function unHighlightColumn($container, columnIndex) {
                        var grid = $container.querySelector("." + BODY_PRF + DETAIL);
                        var header = $container.querySelector("." + HEADER_PRF + DETAIL);
                        unHighlightGrid(grid, columnIndex);
                        unHighlightGrid(header, columnIndex);
                    }
                    helper.unHighlightColumn = unHighlightColumn;
                    /**
                     * Unhighlight grid.
                     */
                    function unHighlightGrid(grid, columnIndex) {
                        if (!grid)
                            return;
                        _.forEach(grid.getElementsByTagName("tr"), function (t) {
                            var tds = t.getElementsByTagName("td");
                            if (!tds || tds.length === 0)
                                return;
                            helper.removeClass1n(tds[columnIndex], render.HIGHLIGHT_CLS);
                        });
                    }
                    helper.unHighlightGrid = unHighlightGrid;
                    /**
                     * First sibling.
                     */
                    function firstSibling(node, clazz) {
                        var parent = node.parentElement;
                        if (!parent)
                            return;
                        var children = parent.children;
                        for (var i = 0; i < children.length; i++) {
                            if (node !== children[i] && children[i].classList.contains(clazz)) {
                                return children[i];
                            }
                        }
                    }
                    helper.firstSibling = firstSibling;
                    /**
                     * Class siblings.
                     */
                    function classSiblings(node, partialClass) {
                        var parent = node.parentElement;
                        if (!parent)
                            return;
                        var children = parent.children;
                        var results = [];
                        for (var i = 0; i < children.length; i++) {
                            if (children[i] === node)
                                continue;
                            var classList = children[i].classList;
                            for (var j = 0; j < classList.length; j++) {
                                if (classList.item(j).indexOf(partialClass) >= 0) {
                                    results.push(children[i]);
                                }
                            }
                        }
                        return results;
                    }
                    helper.classSiblings = classSiblings;
                    /**
                     * Consume siblings.
                     */
                    function consumeSiblings(node, op) {
                        var parent = node.parentElement;
                        if (!parent)
                            return;
                        var children = parent.children;
                        for (var i = 0; i < children.length; i++) {
                            if (node !== children[i]) {
                                op(children[i]);
                            }
                        }
                    }
                    helper.consumeSiblings = consumeSiblings;
                    /**
                     * Closest.
                     */
                    function closest(el, selector) {
                        var matches;
                        ['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'].some(function (fn) {
                            if (typeof document.body[fn] === 'function') {
                                matches = fn;
                                return true;
                            }
                            return false;
                        });
                        var parent;
                        while (el) {
                            parent = el.parentElement;
                            if (parent && parent[matches](selector)) {
                                return parent;
                            }
                            el = parent;
                        }
                    }
                    helper.closest = closest;
                    /**
                     * Remove node.
                     */
                    function remove(node) {
                        if (isIE()) {
                            if (node && node.parentNode)
                                node.parentNode.removeChild(node);
                            return;
                        }
                        node.remove();
                    }
                    helper.remove = remove;
                    /**
                     * Width.
                     */
                    function width(el) {
                        return parseFloat(getComputedStyle(el, null).width.replace("px", ""));
                    }
                    helper.width = width;
                    /**
                     * Visible width.
                     */
                    function visibleWidth(outer, inner) {
                        return Math.min(outer.offsetWidth + outer.scrollLeft - inner.offsetLeft, inner.offsetWidth);
                    }
                    helper.visibleWidth = visibleWidth;
                    function close(container) {
                        container.style.top = "-99999px";
                        container.style.left = "-99999px";
                    }
                    helper.close = close;
                    /**
                     * Add class.
                     */
                    function addClass1n(node, clazz) {
                        if (node && node.constructor !== HTMLCollection) {
                            var children = node.querySelectorAll("." + render.CHILD_CELL_CLS);
                            if (children.length > 0)
                                addClass(children, clazz);
                            else
                                addClass(node, clazz);
                            return;
                        }
                        for (var i = 0; i < node.length; i++) {
                            var children = node[i].querySelectorAll("." + render.CHILD_CELL_CLS);
                            if (children.length > 0)
                                addClass(children, clazz);
                            else
                                addClass(node[i], clazz);
                        }
                    }
                    helper.addClass1n = addClass1n;
                    /**
                     * Remove class.
                     */
                    function removeClass1n(node, clazz) {
                        if (node && node.constructor !== HTMLCollection) {
                            var children = node.querySelectorAll("." + render.CHILD_CELL_CLS);
                            if (children.length > 0)
                                removeClass(children, clazz);
                            else
                                removeClass(node, clazz);
                            return;
                        }
                        for (var i = 0; i < node.length; i++) {
                            var children = node[i].querySelectorAll("." + render.CHILD_CELL_CLS);
                            if (children.length > 0)
                                removeClass(children, clazz);
                            else
                                removeClass(node[i], clazz);
                        }
                    }
                    helper.removeClass1n = removeClass1n;
                    /**
                     * Add class.
                     */
                    function addClass(node, clazz) {
                        if (node && node.constructor !== HTMLCollection && node.constructor !== NodeList) {
                            node.classList.add(clazz);
                            return;
                        }
                        for (var i = 0; i < node.length; i++) {
                            if (!node[i].classList.contains(clazz)) {
                                node[i].classList.add(clazz);
                            }
                        }
                    }
                    helper.addClass = addClass;
                    /**
                     * Remove class.
                     */
                    function removeClass(node, clazz) {
                        if (node && node.constructor !== HTMLCollection && node.constructor !== NodeList) {
                            node.classList.remove(clazz);
                            return;
                        }
                        for (var i = 0; i < node.length; i++) {
                            if (node[i].classList.contains(clazz)) {
                                node[i].classList.remove(clazz);
                            }
                        }
                    }
                    helper.removeClass = removeClass;
                    /**
                     * Has class.
                     */
                    function hasClass(node, clazz) {
                        return node.classList.contains(clazz);
                    }
                    helper.hasClass = hasClass;
                    /**
                     * Index.
                     */
                    function indexInParent(node) {
                        var parent = node.parentElement;
                        if (!parent)
                            return;
                        var children = parent.children;
                        var index = 0;
                        for (var i = 0; i < children.length; i++) {
                            if (children[i] === node)
                                return index;
                            if (children[i].nodeType === 1)
                                index++;
                        }
                        return -1;
                    }
                    helper.indexInParent = indexInParent;
                    /**
                     * Add class.
                     */
                    function addClassList(cell, clazz) {
                        if (!clazz)
                            return;
                        clazz.split(" ").forEach(function (c, i) {
                            cell.classList.add(c);
                        });
                    }
                    helper.addClassList = addClassList;
                })(helper || (helper = {}));
                var widget;
                (function (widget) {
                    widget.MENU = "menu";
                    widget.POPUP = "popup";
                    widget.MENU_CLS = "x-context-menu";
                    widget.POPUP_CLS = "x-popup-panel";
                    widget.PARTITION_CLS = "partition";
                    widget.MENU_ITEM_CLS = "menu-item";
                    widget.MENU_ICON_CLS = "menu-icon";
                    widget.DISABLED_CLS = "disabled";
                    /**
                     * Widget.
                     */
                    var XWidget = /** @class */ (function () {
                        function XWidget($selector) {
                            this.$selector = $selector;
                        }
                        /**
                         * Get table.
                         */
                        XWidget.prototype.getTable = function () {
                            this.$table = helper.closest(this.$selector, "table");
                        };
                        return XWidget;
                    }());
                    /**
                     * Tooltip.
                     */
                    var Tooltip = /** @class */ (function (_super) {
                        __extends(Tooltip, _super);
                        function Tooltip($selector, options) {
                            var _this = _super.call(this, $selector) || this;
                            _this.options = options;
                            _this.defaultOpts = {
                                showRight: true,
                                width: "100px"
                            };
                            _this.initialize();
                            return _this;
                        }
                        /**
                         * Initialize.
                         */
                        Tooltip.prototype.initialize = function () {
                            var self = this;
                            $.extend(true, self.options, self.defaultOpts);
                            self.$selector.addXEventListener(events.MOUSE_OVER, function (evt) {
                                self.getTable();
                                if (self.$table.length === 0)
                                    return;
                                // Tooltip is jq
                                var $t2 = $.data(self.$table, internal.TOOLTIP);
                                if (!$t2) {
                                    $t2 = $("<div/>").addClass(cssClass(self.options));
                                    $t2.appendTo("body");
                                    $.data(self.$table, internal.TOOLTIP, $t2);
                                }
                                $t2.empty().append(self.options.sources).css({ visibility: "visible" })
                                    .position({ my: "left top", at: "left+" + self.$selector.offsetWidth + " top+5", of: self.$selector });
                            });
                            self.$selector.addXEventListener(events.MOUSE_OUT, function (evt) {
                                self.getTable();
                                if (!self.$table)
                                    return;
                                var $t2 = $.data(self.$table, internal.TOOLTIP);
                                if (!$t2 || $t2.css("display") === "none")
                                    return;
                                $t2.css({ visibility: "hidden" });
                            });
                        };
                        return Tooltip;
                    }(XWidget));
                    widget.Tooltip = Tooltip;
                    /**
                     * Popup.
                     */
                    var Popup = /** @class */ (function (_super) {
                        __extends(Popup, _super);
                        function Popup($selector, event) {
                            var _this = _super.call(this, $selector) || this;
                            _this.initialize(event);
                            return _this;
                        }
                        /**
                         * Initialize.
                         */
                        Popup.prototype.initialize = function (event) {
                            var self = this;
                            if (_.isNil(self.$selector))
                                return;
                            self.$selector.addXEventListener(event ? event : events.MOUSE_DOWN, function (evt) {
                                self.getTable();
                                if (evt.ctrlKey && $.data(helper.closest(self.$table, "." + NAMESPACE), NAMESPACE).determination)
                                    return;
                                self.click(evt);
                            });
                        };
                        return Popup;
                    }(XWidget));
                    /**
                     * Context menu.
                     */
                    var ContextMenu = /** @class */ (function (_super) {
                        __extends(ContextMenu, _super);
                        function ContextMenu($selector, items, event) {
                            var _this = _super.call(this, $selector, event) || this;
                            _this.items = items;
                            return _this;
                        }
                        /**
                         * Click.
                         */
                        ContextMenu.prototype.click = function (evt) {
                            var self = this;
                            var $menu = $.data(self.$table, internal.CONTEXT_MENU);
                            if (!$menu) {
                                $menu = $("<ul/>").addClass(widget.MENU_CLS).appendTo("body").hide();
                                _.forEach(self.items, function (item) {
                                    self.createItem($menu, item);
                                });
                                $.data(self.$table, internal.CONTEXT_MENU, $menu);
                            }
                            if ($menu.css("display") === "none") {
                                $menu.show().css({ top: evt.pageY, left: evt.pageX });
                            }
                            else {
                                $menu.hide();
                            }
                            var $pu = $.data(self.$table, internal.POPUP);
                            if ($pu && $pu.css("display") !== "none") {
                                $pu.hide();
                            }
                            update.outsideClick(helper.closest(self.$table, "." + NAMESPACE), self.$selector);
                            evt.stopPropagation();
                            hideIfOutside($menu);
                        };
                        /**
                         * New items.
                         */
                        ContextMenu.prototype.newItems = function (items) {
                            var self = this, $menu = $.data(self.$table, internal.CONTEXT_MENU);
                            self.items = items;
                            if (!$menu) {
                                $menu = $("<ul/>").addClass(widget.MENU_CLS).appendTo("body").hide();
                                $.data(self.$table, internal.CONTEXT_MENU, $menu);
                            }
                            $menu.empty();
                            _.forEach(self.items, function (item) {
                                self.createItem($menu, item);
                            });
                        };
                        /**
                         * Create item.
                         */
                        ContextMenu.prototype.createItem = function ($menu, item) {
                            if (item.id === widget.PARTITION_CLS) {
                                $("<li/>").addClass(widget.MENU_ITEM_CLS + " " + widget.PARTITION_CLS).appendTo($menu);
                                return;
                            }
                            var $li = $("<li/>").addClass(widget.MENU_ITEM_CLS).text(item.text)
                                .on(events.CLICK_EVT, function (evt) {
                                if (item.disabled)
                                    return;
                                item.selectHandler(item.id);
                                $menu.hide();
                            }).appendTo($menu);
                            if (item.disabled) {
                                $li.addClass(widget.DISABLED_CLS);
                            }
                            if (item.icon) {
                                $li.append($("<span/>").addClass(widget.MENU_ICON_CLS + " " + item.icon));
                            }
                        };
                        return ContextMenu;
                    }(Popup));
                    widget.ContextMenu = ContextMenu;
                    /**
                     * Menu item.
                     */
                    var MenuItem = /** @class */ (function () {
                        function MenuItem(text, selectHandler, disabled, icon) {
                            this.text = text;
                            this.selectHandler = selectHandler ? selectHandler : $.noop();
                            this.disabled = disabled;
                            this.icon = icon;
                        }
                        return MenuItem;
                    }());
                    widget.MenuItem = MenuItem;
                    /**
                     * Popup panel.
                     */
                    var PopupPanel = /** @class */ (function (_super) {
                        __extends(PopupPanel, _super);
                        function PopupPanel($selector, provider, position) {
                            var _this = _super.call(this, $selector) || this;
                            _this.provider = provider;
                            _this.position = position;
                            return _this;
                        }
                        /**
                         * Click.
                         */
                        PopupPanel.prototype.click = function (evt) {
                            var self = this;
                            var $pu = $.data(self.$table, internal.POPUP);
                            var $cell = evt.target;
                            if (!selector.is(evt.target, "td")) {
                                $cell = helper.closest(evt.target, "td");
                            }
                            var coord = helper.getCellCoord($cell);
                            self.$panel = self.provider(coord.columnKey);
                            if (!$pu) {
                                $pu = self.$panel.addClass(widget.POPUP_CLS).hide();
                                $.data(self.$table, internal.POPUP, $pu);
                            }
                            if ($pu.css("display") === "none") {
                                var pos = eventPageOffset(evt, false);
                                $pu.show().css(getPosition($pu, pos, self.position || "top left"));
                                events.trigger(self.$table, events.POPUP_SHOWN, $(evt.target));
                                self.addListener($pu, $(evt.target));
                            }
                            else {
                                $pu.hide();
                            }
                            var $menu = $.data(self.$table, internal.CONTEXT_MENU);
                            if ($menu && $menu.css("display") !== "none") {
                                $menu.hide();
                            }
                            evt.stopPropagation();
                            hideIfOutside($pu);
                        };
                        /**
                         * Add listener.
                         */
                        PopupPanel.prototype.addListener = function ($pu, $t) {
                            var self = this;
                            $pu.off(events.POPUP_INPUT_END);
                            $pu.on(events.POPUP_INPUT_END, function (evt) {
                                var ui = evt.detail;
                                var $header = helper.closest(self.$selector, "table").parentElement;
                                if ($header.classList.contains(HEADER)) {
                                    var ds = helper.getDataSource($header);
                                    if (!ds || ds.length === 0)
                                        return;
                                    var coord = helper.getCellCoord($t[0]);
                                    ds[coord.rowIdx][coord.columnKey] = ui.value;
                                    $t.text(ui.value);
                                    $pu.hide();
                                }
                            });
                        };
                        return PopupPanel;
                    }(Popup));
                    widget.PopupPanel = PopupPanel;
                    /**
                     * Get position.
                     */
                    function getPosition($pu, pos, my) {
                        if (my === "top left") {
                            return { top: pos.pageY - $pu.outerHeight() /*- 49*/, left: pos.pageX - $pu.outerWidth() };
                        }
                        else if (my === "bottom left") {
                            return { top: pos.pageY - 49, left: pos.pageX - $pu.outerWidth() };
                        }
                        else if (my === "top right") {
                            return { top: pos.pageY - $pu.outerHeight() - 49, left: pos.pageX };
                        }
                        else if (my === "bottom right") {
                            return { top: pos.pageY - 49, left: pos.pageX };
                        }
                    }
                    widget.getPosition = getPosition;
                    function bind(row, rowIdx, headerPopupFt) {
                        var wType;
                        if (!headerPopupFt)
                            return;
                        if (headerPopupFt.menu) {
                            _.forEach(headerPopupFt.menu.rows, function (rId) {
                                if (rId === rowIdx) {
                                    new ContextMenu(row, headerPopupFt.menu.items);
                                    wType = widget.MENU;
                                    return false;
                                }
                            });
                        }
                        if (wType)
                            return;
                        if (headerPopupFt.popup) {
                            _.forEach(headerPopupFt.popup.rows, function (rId) {
                                if (rId === rowIdx) {
                                    new PopupPanel(row, headerPopupFt.popup.provider);
                                    wType = widget.POPUP;
                                    return false;
                                }
                            });
                        }
                        return wType;
                    }
                    widget.bind = bind;
                    /**
                     * Text overflow.
                     */
                    function textOverflow($cell) {
                        $cell.addXEventListener(events.MOUSE_ENTER + ".celloverflow", function (evt) {
                            var $target = $(evt.target);
                            if (!displayFullText($target)) {
                                var $link = $target.find("a");
                                if ($link.length > 0) {
                                    displayFullText($link, $target);
                                }
                            }
                        });
                    }
                    widget.textOverflow = textOverflow;
                    /**
                     * Display full text.
                     */
                    function displayFullText($target, $s) {
                        if ($target.outerWidth() < $target[0].scrollWidth) {
                            var $container_1 = $s ? $s : $target;
                            var $view_2 = $("<div />").addClass("x-cell-overflow")
                                .text($target.text() || $target.val())
                                .appendTo("body")
                                .position({
                                my: "left top",
                                at: "left bottom",
                                of: $container_1,
                                collision: "flip"
                            }).on(events.MOUSE_OVER, function (evt) {
                                $view_2.remove();
                            });
                            $container_1[0].addXEventListener(events.MOUSE_LEAVE + ".celloverflow", function (evt) {
                                $view_2.remove();
                                setTimeout(function () {
                                    $container_1[0].removeXEventListener(events.MOUSE_LEAVE + ".celloverflow");
                                }, 0);
                            });
                            return true;
                        }
                    }
                    /**
                     * Hide.
                     */
                    function hideIfOutside($w) {
                        $(document).on(events.MOUSE_DOWN, function (evt) {
                            if (outsideOf($w, evt.target)) {
                                $w.hide();
                            }
                        });
                        var outsideOf = function ($container, target) {
                            return !$container.is(target) && $container.has(target).length === 0;
                        };
                    }
                    widget.hideIfOutside = hideIfOutside;
                    /**
                     * Offset.
                     */
                    function eventPageOffset(evt, isFixed) {
                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
                        var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                        var $contentsArea = $("#contents-area");
                        return isFixed ? { pageX: evt.pageX + $contentsArea.scrollLeft() - scrollLeft,
                            pageY: evt.pageY + $contentsArea.scrollTop() - scrollTop }
                            : { pageX: evt.pageX + $contentsArea.scrollLeft(),
                                pageY: evt.pageY + $contentsArea.scrollTop() };
                    }
                    widget.eventPageOffset = eventPageOffset;
                    /**
                     * Class.
                     */
                    function cssClass(options) {
                        var css = _.isObject(options) && options.showBelow ? 'bottom' : 'top';
                        css += '-';
                        css += (_.isObject(options) && options.showRight ? 'right' : 'left');
                        css += '-tooltip';
                        return css;
                    }
                    widget.cssClass = cssClass;
                })(widget || (widget = {}));
            })(exTable = ui_3.exTable || (ui_3.exTable = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_5) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                // This file left here for log purpose
                $.fn.exposeVertically = function ($target) {
                    var $scroll = $(this);
                    var currentViewTopPosition = $scroll.scrollTop();
                    var currentViewBottomPosition = currentViewTopPosition + $scroll.height();
                    var targetTopPosition = $target.position().top + currentViewTopPosition;
                    var targetBottomPosition = targetTopPosition + $target.outerHeight();
                    if (currentViewTopPosition <= targetTopPosition && targetBottomPosition <= currentViewBottomPosition) {
                        return;
                    }
                    if (targetTopPosition <= currentViewTopPosition) {
                        var gap = currentViewTopPosition - targetTopPosition;
                        $scroll.scrollTop(currentViewTopPosition - gap);
                        return;
                    }
                    if (currentViewBottomPosition <= targetBottomPosition) {
                        var gap = targetBottomPosition - currentViewBottomPosition;
                        $scroll.scrollTop(currentViewTopPosition + gap);
                        return;
                    }
                };
                $.fn.onkey = function (command, keyCode, handler) {
                    var $element = $(this);
                    $element.on("key" + command, function (e) {
                        if (e.keyCode === keyCode) {
                            return handler(e);
                        }
                    });
                    return $element;
                };
                $.fn.dialogPositionControl = function () {
                    var $dialog = $(this);
                    $dialog.dialog("option", "position", {
                        my: "center",
                        at: "center",
                        of: window,
                        collision: "none"
                    });
                    var $container = $dialog.closest(".ui-dialog");
                    //let offsetContentsArea = window.parent.$("#header").height();
                    var offsetContentsArea = 0;
                    var offsetDialog = $container.offset();
                    if (offsetDialog.top < offsetContentsArea) {
                        offsetDialog.top = offsetContentsArea;
                    }
                    if (offsetDialog.left < 0) {
                        offsetDialog.left = 0;
                    }
                    $container.offset(offsetDialog);
                    $dialog.dialog({ dragStop: function (event, ui) {
                            var offsetDialog = $container.offset();
                            if (offsetDialog.top < offsetContentsArea) {
                                offsetDialog.top = offsetContentsArea;
                                $container.offset(offsetDialog);
                                return false;
                            }
                            $dialog.data("stopdrop", offsetDialog);
                        } });
                    return $dialog;
                };
                $.fn.exposeOnTabPanel = function () {
                    var $target = $(this);
                    var $tabPanel = $target.closest(".ui-tabs-panel");
                    if ($tabPanel.length === 0) {
                        return $target;
                    }
                    var tabId = $tabPanel.attr("id");
                    var $tabsContainer = $tabPanel.closest(".ui-tabs");
                    // 先に親から
                    $tabsContainer.exposeOnTabPanel();
                    $tabsContainer.trigger("change-tab", tabId);
                    return $target;
                };
                $.fn.ctState = function (name, method, value) {
                    var $this = $(this);
                    var dataName = {
                        selected: "ctstate-selected",
                        required: "ctstate-required",
                        name: "ctstate-name"
                    }[name];
                    switch (method) {
                        case "set":
                            return $this.data(dataName, value);
                        case "get":
                            return $this.data(dataName);
                    }
                };
                $.fn.tooltipWhenReadonly = function () {
                    var $this = $(this);
                    var border = 2;
                    $this.mouseenter(function (e) {
                        if (!$this.prop("readonly") || !$this.isOverflow()) {
                            return;
                        }
                        $this.showTextContentAsTooltip(function () { return $this.val(); });
                    });
                };
                $.fn.isOverflowContent = function (border) {
                    var $this = $(this);
                    return $this.prop("offsetWidth") - border < $this.prop("scrollWidth");
                };
                $.fn.isOverflow = function () {
                    var $label = $(this);
                    if ($label[0].nodeName === "INPUT"
                        && (window.navigator.userAgent.indexOf("MSIE") > -1
                            || !!window.navigator.userAgent.match(/trident/i)
                            || window.navigator.userAgent.indexOf("Edge") > -1)) {
                        var $div = $("<div/>").appendTo($(document.body));
                        var style = $label[0].currentStyle || window.getComputedStyle($label[0]); //$label[0].style;
                        if (style) {
                            for (var p in style) {
                                $div[0].style[p] = style[p];
                            }
                        }
                        $div.html($label.val());
                        var width = $label.outerWidth();
                        var scrollWidth = $div[0].scrollWidth;
                        $div.remove();
                        return width < scrollWidth;
                    }
                    return $label.outerWidth() < $label[0].scrollWidth;
                };
                $.fn.showTextContentAsTooltip = function (textContentGetter) {
                    var $this = $(this);
                    var $view = $('<div />').addClass('limited-label-view')
                        .text(textContentGetter())
                        .appendTo('body')
                        .position({
                        my: 'left top',
                        at: 'left bottom',
                        of: $this,
                        collision: 'flip'
                    });
                    $this.bind('mouseleave.limitedlabel', function () {
                        $this.unbind('mouseleave.limitedlabel');
                        $view.remove();
                    });
                };
            })(jqueryExtentions = ui_5.jqueryExtentions || (ui_5.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_6) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * CheckBox binding handler
                 */
                var NtsCheckboxBindingHandler = /** @class */ (function () {
                    /**
                     * Constructor.
                     */
                    function NtsCheckboxBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsCheckboxBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var setChecked = data.checked;
                        var textId = data.text;
                        var style = "style-" + (data.style || "normal");
                        var checkBoxText;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Container
                        var container = $(element);
                        if (nts.uk.util.isNullOrUndefined(container.attr("tabindex")))
                            container.attr("tabindex", "0");
                        container.addClass("ntsControl ntsCheckBox").on("click", function (e) {
                            if (container.data("readonly") === true)
                                e.preventDefault();
                        });
                        container.addClass(style + " checkbox-wrapper");
                        container.data("tabindex", container.attr("tabindex"));
                        var wrapper = container.parent();
                        wrapper.addClass(style);
                        if (textId) {
                            checkBoxText = textId;
                        }
                        else {
                            checkBoxText = container.text();
                            container.text('');
                        }
                        container.data("enable", enable);
                        var $checkBoxLabel = $("<label class='ntsCheckBox-label'></label>");
                        var $checkBox = $('<input type="checkbox">').on("change", function () {
                            if (typeof setChecked === "function")
                                setChecked($(this).is(":checked"));
                        }).appendTo($checkBoxLabel);
                        var $box = $("<span class='box'></span>").appendTo($checkBoxLabel);
                        if (checkBoxText && checkBoxText.length > 0)
                            var label = $("<span class='label'></span>").text(checkBoxText).appendTo($checkBoxLabel);
                        $checkBoxLabel.appendTo(container);
                        container.keypress(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (code === 32) {
                                if (container.data("enable") !== false) {
                                    var checkbox = container.find("input[type='checkbox']:first");
                                    var checked = !checkbox.is(":checked");
                                    checkbox.prop("checked", checked);
                                    container[checked ? "addClass" : "removeClass"]("checked");
                                    setChecked(checked);
                                }
                                evt.preventDefault();
                            }
                        });
                    };
                    /**
                     * Update
                     */
                    NtsCheckboxBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var checked = ko.unwrap(data.checked);
                        var readonly = (data.readonly !== undefined) ? ko.unwrap(data.readonly) : false;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Container
                        var container = $(element);
                        container.data("enable", enable);
                        container.data("readonly", readonly);
                        var $checkBox = $(element).find("input[type='checkbox']");
                        // Checked
                        $checkBox.prop("checked", checked);
                        container[checked ? "addClass" : "removeClass"]("checked");
                        // Enable
                        if (enable === true) {
                            $checkBox.removeAttr("disabled");
                            container.attr("tabindex", container.data("tabindex"));
                        }
                        else if (enable === false) {
                            $checkBox.attr("disabled", "disabled");
                            container.attr("tabindex", "-1");
                        }
                    };
                    return NtsCheckboxBindingHandler;
                }());
                /**
                 * MultiCheckbox binding handler
                 */
                var NtsMultiCheckBoxBindingHandler = /** @class */ (function () {
                    function NtsMultiCheckBoxBindingHandler() {
                    }
                    NtsMultiCheckBoxBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var container = $(element);
                        container.addClass("ntsControl").on("click", function (e) {
                            if (container.data("readonly") === true)
                                e.preventDefault();
                        });
                        container.wrap("<div class='multicheckbox-wrapper'/>");
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        container.data("enable", _.clone(enable));
                        container.data("init", true);
                        container.data("tabindex", container.attr("tabindex"));
                        container.removeAttr("tabindex");
                        // Default value
                        new nts.uk.util.value.DefaultValue().onReset(container, data.value);
                    };
                    NtsMultiCheckBoxBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var options = data.options === undefined ? [] : JSON.parse(ko.toJSON(data.options));
                        var optionValue = ko.unwrap(data.optionsValue);
                        var optionText = ko.unwrap(data.optionsText);
                        var selectedValue = data.value;
                        var readonly = (data.readonly !== undefined) ? ko.unwrap(data.readonly) : false;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Container
                        var container = $(element);
                        container.data("readonly", readonly);
                        // Get option or option[optionValue]
                        var getOptionValue = function (item) {
                            return (optionValue === undefined) ? item : item[optionValue];
                        };
                        var selectedValues = JSON.parse(ko.toJSON(data.value));
                        // Render
                        if (!_.isEqual(container.data("options"), options)) {
                            container.empty();
                            _.forEach(options, function (option) {
                                var checkBoxLabel = $("<label class='ntsCheckBox'></label>");
                                var checkBox = $('<input type="checkbox">').data("option", option).data("value", getOptionValue(option)).on("change", function () {
                                    var self = $(this);
                                    if (self.is(":checked"))
                                        selectedValue.push(self.data("value"));
                                    else
                                        selectedValue.remove(_.find(selectedValue(), function (value) {
                                            return _.isEqual(JSON.parse(ko.toJSON(value)), self.data("value"));
                                        }));
                                });
                                var disableOption = option["enable"];
                                if (nts.uk.util.isNullOrUndefined(container.data("tabindex")))
                                    checkBoxLabel.attr("tabindex", "0");
                                else {
                                    checkBoxLabel.attr("tabindex", container.data("tabindex"));
                                }
                                checkBoxLabel.keypress(function (evt, ui) {
                                    var code = evt.which || evt.keyCode;
                                    if (code === 32) {
                                        if (container.data("enable") !== false && disableOption !== false) {
                                            var cb = checkBoxLabel.find("input[type='checkbox']:first");
                                            if (cb.is(":checked")) {
                                                cb.prop("checked", false);
                                                selectedValue.remove(_.find(selectedValue(), function (value) {
                                                    return _.isEqual(JSON.parse(ko.toJSON(value)), checkBox.data("value"));
                                                }));
                                            }
                                            else {
                                                if (!cb.is(":checked")) {
                                                    cb.prop("checked", true);
                                                    selectedValue.push(checkBox.data("value"));
                                                }
                                            }
                                        }
                                        evt.preventDefault();
                                    }
                                });
                                if (!nts.uk.util.isNullOrUndefined(disableOption) && (disableOption === false)) {
                                    checkBox.attr("disabled", "disabled");
                                    checkBox.attr("tabindex", "-1");
                                }
                                checkBox.appendTo(checkBoxLabel);
                                var box = $("<span class='box'></span>").appendTo(checkBoxLabel);
                                if (option[optionText] && option[optionText].length > 0)
                                    var label = $("<span class='label'></span>").text(option[optionText]).appendTo(checkBoxLabel);
                                checkBoxLabel.appendTo(container);
                            });
                            // Save a clone
                            container.data("options", _.cloneDeep(options));
                        }
                        // Checked
                        container.find("input[type='checkbox']").prop("checked", function () {
                            var _this = this;
                            return (_.find(selectedValue(), function (value) {
                                return _.isEqual(JSON.parse(ko.toJSON(value)), $(_this).data("value"));
                            }) !== undefined);
                        });
                        // Enable
                        //            if((container.data("init") && enable !== true) || !_.isEqual(container.data("enable"), enable)){
                        container.data("enable", _.clone(enable));
                        if (enable === true) {
                            _.forEach(container.find("input[type='checkbox']"), function (checkbox) {
                                var dataOpion = $(checkbox).data("option");
                                if (dataOpion["enable"] === true) {
                                    $(checkbox).removeAttr("disabled");
                                }
                            });
                        }
                        else if (enable === false) {
                            container.find("input[type='checkbox']").attr("disabled", "disabled");
                            new nts.uk.util.value.DefaultValue().applyReset(container, data.value);
                        }
                    };
                    return NtsMultiCheckBoxBindingHandler;
                }());
                ko.bindingHandlers['ntsCheckBox'] = new NtsCheckboxBindingHandler();
                ko.bindingHandlers['ntsMultiCheckBox'] = new NtsMultiCheckBoxBindingHandler();
            })(koExtentions = ui_6.koExtentions || (ui_6.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_7) {
            var koExtentions;
            (function (koExtentions) {
                var _ = window['_'], $ = window['$'], ko = window['ko'];
                var count = nts.uk.text.countHalf;
                var WoC = 9, MINWIDTH = 'auto', TAB_INDEX = 'tabindex', KEYPRESS = 'keypress', KEYDOWN = 'keydown', FOCUS = 'focus', VALIDATE = 'validate', OPENDDL = 'openDropDown', CLOSEDDL = 'closeDropDown', OPENED = 'dropDownOpened', IGCOMB = 'igCombo', OPTION = 'option', ENABLE = 'enable', EDITABLE = 'editable', DROPDOWN = 'dropdown', COMBOROW = 'nts-combo-item', COMBOCOL = 'nts-column nts-combo-column', DATA = '_nts_data', CHANGED = '_nts_changed', SHOWVALUE = '_nts_show', NAME = '_nts_name', CWIDTH = '_nts_col_width', VALUE = '_nts_value', REQUIRED = '_nts_required';
                var ComboBoxBindingHandler = /** @class */ (function () {
                    function ComboBoxBindingHandler() {
                        this.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var template = '', $element = $(element), accessor = valueAccessor(),
                            // dataSource of igCombo
                            options = ko.unwrap(accessor.options),
                            // enable or disable
                            enable = _.has(accessor, 'enable') ? ko.unwrap(accessor.enable) : true,
                            // mode of dropdown
                            editable = _.has(accessor, 'editable') ? ko.unwrap(accessor.editable) : false,
                            // require or no
                            required = _.has(accessor, 'required') ? ko.unwrap(accessor.required) : false,
                            // textKey
                            optionsText = _.has(accessor, 'optionsText') ? ko.unwrap(accessor.optionsText) : null,
                            // valueKey
                            optionsValue = _.has(accessor, 'optionsValue') ? ko.unwrap(accessor.optionsValue) : null,
                            // columns
                            columns = _.has(accessor, 'columns') ? ko.unwrap(accessor.columns) : [{ prop: optionsText }], visibleItemsCount = _.has(accessor, 'visibleItemsCount') ? ko.unwrap(accessor.visibleItemsCount) : 5, dropDownAttachedToBody = _.has(accessor, 'dropDownAttachedToBody') ? ko.unwrap(accessor.dropDownAttachedToBody) : true, $show = $('<div>', {
                                'class': 'nts-toggle-dropdown',
                                'css': {
                                    'color': '#000',
                                    'height': '30px',
                                    'padding-left': '3px',
                                    'position': 'absolute',
                                    'left': '0px',
                                    'right': '0px'
                                }
                            });
                            // filter valid options
                            options = _(options)
                                .filter(function (x) { return _.isObject(x); })
                                .value();
                            // fix show dropdown in igGrid
                            if (!!$element.closest(".ui-iggrid").length) {
                                dropDownAttachedToBody = true;
                            }
                            // generate template if has columns
                            if (_.isArray(columns)) {
                                template = "<div class='" + COMBOROW + "'>" + _.map(columns, function (c, i) { return "<div data-ntsclass='" + (c.toggle || '') + "' class='" + COMBOCOL + "-" + i + " " + c.prop.toLowerCase() + " " + (c.toggle || '') + "'>${" + c.prop + "}&nbsp;</div>"; }).join('') + "</div>";
                            }
                            if (!$element.attr('tabindex')) {
                                $element.attr('tabindex', 0);
                            }
                            $element
                                // delegate event for change template (on old filter box)
                                .on(SHOWVALUE, function (evt) {
                                var data = $element.data(DATA), cws = data[CWIDTH], ks = _.keys(cws);
                                var option = _.find(data[DATA], function (t) { return t[optionsValue] == data[VALUE]; }), _template = template;
                                if (option) {
                                    _.each(_.keys(option), function (k) {
                                        _template = _template.replace("${" + k + "}", _.escape(option[k]));
                                    });
                                    $show.html(_template);
                                    _.each(ks, function (k) {
                                        $show.find("." + k.toLowerCase() + ":not(:last-child)")
                                            .css('width', cws[k] * WoC + "px");
                                        $show.find("." + k.toLowerCase())
                                            .css({
                                            'height': '31px',
                                            'line-height': '27px'
                                        })
                                            .find('.nts-column:last-child')
                                            .css('margin-right', 0);
                                    });
                                }
                                else {
                                    // show text
                                    if (!_.isNil(ko.toJS(accessor.nullText)) && !_.isNil(data[SHOWVALUE])) {
                                        $show.html($('<div>', { 'class': 'nts-combo-column', text: _.escape(ko.toJS(accessor.nullText)), css: { 'line-height': '27px' } }));
                                    }
                                    else {
                                        $show.empty();
                                    }
                                }
                            })
                                // define event changed for save default data
                                .on(CHANGED, function (evt, key, value) {
                                if (value === void 0) { value = undefined; }
                                var data = $element.data(DATA) || {};
                                {
                                    data[key] = value;
                                    $element.data(DATA, data);
                                }
                            })
                                // define event validate for check require
                                .on(VALIDATE, function (evt, ui) {
                                var data = $element.data(DATA), value = data[VALUE];
                                if ((ui ? data[CHANGED] : true) && data[ENABLE] && data[REQUIRED] && (_.isEmpty(String(value).trim()) || _.isNil(value))) {
                                    $element
                                        .addClass('error')
                                        .ntsError("set", uk.resource.getMessage("MsgB_2", [data[NAME]]), "MsgB_2");
                                    if (accessor.value.addError) {
                                        accessor.value.addError("MsgB_2", { MsgId: "MsgB_2" });
                                    }
                                }
                                else {
                                    $element
                                        .removeClass('error')
                                        .ntsError("clear");
                                    if (accessor.value.removeError) {
                                        accessor.value.removeError("MsgB_2");
                                    }
                                }
                            })
                                // delegate open or close event on enter key
                                .on(KEYDOWN, function (evt, ui) {
                                if ($element.data(IGCOMB)) {
                                    if ([13].indexOf(evt.which || evt.keyCode) > -1) {
                                        // fire click of igcombo-button
                                        $element
                                            .find('.ui-igcombo-button')
                                            .trigger('click');
                                    }
                                    else if ([32, 38, 40].indexOf(evt.which || evt.keyCode) > -1) {
                                        if (!$element.igCombo(OPENED)) {
                                            // fire click of igcombo-button
                                            $element
                                                .find('.ui-igcombo-button')
                                                .trigger('click');
                                        }
                                    }
                                }
                            })
                                .igCombo({
                                loadOnDemandSettings: {
                                    enabled: true,
                                    pageSize: 15
                                },
                                dataSource: options,
                                placeHolder: '',
                                textKey: 'nts_' + optionsText,
                                valueKey: optionsValue,
                                mode: EDITABLE,
                                disabled: !ko.toJS(enable),
                                enableClearButton: false,
                                itemTemplate: template,
                                dropDownWidth: "auto",
                                tabIndex: $element.attr('tabindex') || 0,
                                visibleItemsCount: visibleItemsCount,
                                dropDownAttachedToBody: dropDownAttachedToBody,
                                rendered: function (evt, ui) {
                                    setTimeout(function () {
                                        $(ui.owner.dropDown()[0])
                                            .css({
                                            top: '-99999px',
                                            left: '-99999px'
                                        });
                                    }, 100);
                                    $element
                                        .find('.ui-igcombo')
                                        .css('background', '#fff')
                                        .find('.ui-igcombo-fieldholder').hide();
                                    $element
                                        .find('.ui-igcombo-hidden-field')
                                        .parent()
                                        .prepend($show)
                                        .css({
                                        'overflow': 'hidden',
                                        'position': 'relative'
                                    })
                                        .find('.ui-igcombo-button')
                                        .css({
                                        'float': 'none',
                                        'width': '100%',
                                        'border': '0px',
                                        'padding': '0px',
                                        'position': 'absolute',
                                        'box-sizing': 'border-box',
                                        'background-color': 'transparent'
                                    })
                                        .find('.ui-igcombo-buttonicon')
                                        .text('▼')
                                        .css({
                                        'right': '0px',
                                        'font-size': '0.85rem',
                                        'top': '0px',
                                        'bottom': '0px',
                                        'display': 'block',
                                        'background-color': '#ececec',
                                        'width': '30px',
                                        'text-align': 'center',
                                        'line-height': '30px',
                                        'margin': '0px',
                                        'border-left': '1px solid #ccc'
                                    })
                                        .removeClass('ui-icon')
                                        .removeClass('ui-icon-triangle-1-s');
                                },
                                itemsRendered: function (evt, ui) {
                                    var data = $element.data(DATA) || {}, cws = data[CWIDTH] || [], ks = _.keys(cws);
                                    // calc new size of template columns
                                    _.each(ks, function (k) {
                                        $("[class*=ui-igcombo-orientation]")
                                            .find("." + k.toLowerCase() + ":not(:last-child)")
                                            .css('width', cws[k] * WoC + "px");
                                    });
                                },
                                selectionChanged: function (evt, ui) {
                                    if (!_.size(ui.items)) {
                                        $element.trigger(CHANGED, [VALUE, null]);
                                    }
                                    else {
                                        var value = ui.items[0]["data"][optionsValue];
                                        $element.trigger(CHANGED, [VALUE, value]);
                                    }
                                },
                                dropDownClosed: function (evt, ui) {
                                    var data = $element.data(DATA);
                                    if (data) {
                                        // check flag changed for validate
                                        $element.trigger(CHANGED, [CHANGED, true]);
                                        var sto_1 = setTimeout(function () {
                                            var data = $element.data(DATA);
                                            // select first if !select and !editable
                                            if (!data[EDITABLE] && _.isNil(data[VALUE])) {
                                                $element.trigger(CHANGED, [VALUE, $element.igCombo('value')]);
                                                //reload data
                                                data = $element.data(DATA);
                                            }
                                            // not match any filter value
                                            if (_.isArray(data[VALUE]) && !_.size(data[VALUE])) {
                                                $element.trigger(CHANGED, [VALUE, ko.toJS(accessor.value)]);
                                                //reload data
                                                data = $element.data(DATA);
                                            }
                                            // set value on select
                                            accessor.value(data[VALUE]);
                                            // validate if required
                                            $element
                                                .trigger(VALIDATE, [true])
                                                .trigger(SHOWVALUE);
                                            clearTimeout(sto_1);
                                        }, 10);
                                        if (data[ENABLE]) {
                                            var f = $(':focus');
                                            if (f.hasClass('ui-igcombo-field')
                                                || !(f.is('input') || f.is('select') || f.is('textarea') || f.is('a') || f.is('button'))
                                                || ((f.is('p') || f.is('div') || f.is('span') || f.is('table') || f.is('ul') || f.is('li') || f.is('tr')) && _.isNil(f.attr('tabindex')))) {
                                                $element.focus();
                                            }
                                        }
                                    }
                                },
                                dropDownOpening: function (evt, ui) {
                                    var data = $element.data(DATA), cws = data[CWIDTH], ks = _.keys(cws);
                                    // move searchbox to list
                                    $element
                                        .find('.ui-igcombo-fieldholder')
                                        .prependTo(ui.list);
                                    // show searchbox if editable
                                    var $input = ui.list
                                        .attr('dropdown-for', $element.attr('id'))
                                        .find('.ui-igcombo-fieldholder')
                                        .css({
                                        'height': !!data[EDITABLE] ? '' : '0px',
                                        'padding': !!data[EDITABLE] ? '3px' : '',
                                        'background-color': !!data[EDITABLE] ? '#f6f6f6' : ''
                                    })
                                        .show()
                                        .find('input')
                                        .prop('readonly', !data[EDITABLE])
                                        .css({
                                        'width': '0px',
                                        'height': !!data[EDITABLE] ? '30px' : '0px',
                                        'text-indent': !!data[EDITABLE] ? '0' : '-99999px',
                                        'border': !!data[EDITABLE] ? '1px solid #ccc' : 'none'
                                    });
                                    if (!$input.data('_nts_bind')) {
                                        $input
                                            .on(KEYDOWN, function (evt, ui) {
                                            if ([13].indexOf(evt.which || evt.keyCode) > -1) {
                                                if ($element.data(IGCOMB)) {
                                                    // fire click of igcombo-button
                                                    $element
                                                        .find('.ui-igcombo-button')
                                                        .trigger('click');
                                                }
                                            }
                                        })
                                            .data('_nts_bind', true)
                                            .attr('tabindex', -1);
                                    }
                                    // calc new size of template columns
                                    _.each(ks, function (k) {
                                        $(ui.list).find("." + k.toLowerCase() + (_.size(ks) == 1 ? '' : ':not(:last-child)'))
                                            .css('width', cws[k] * WoC + "px");
                                    });
                                    // fix min width of dropdown = $element.width();
                                    $(ui.list)
                                        .css('min-width', $element.width() + 'px')
                                        .find('.nts-column:last-child')
                                        .css('margin-right', 0);
                                    var sto = setTimeout(function () {
                                        $input.css({
                                            'width': ($(ui.list).width() - 6) + 'px'
                                        });
                                        clearTimeout(sto);
                                    }, 25);
                                }
                            })
                                .trigger(CHANGED, [DATA, options])
                                .trigger(CHANGED, [TAB_INDEX, $element.attr(TAB_INDEX) || 0])
                                .addClass('ntsControl')
                                .on('blur', function () { $element.css('box-shadow', ''); })
                                .on('focus', function () {
                                $element
                                    .css({
                                    'outline': 'none',
                                    'box-shadow': '0 0 1px 1px #0096f2'
                                });
                            });
                        };
                        this.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var ss = new Date().getTime(), $element = $(element), accessor = valueAccessor(), width = _.has(accessor, 'width') ? ko.unwrap(accessor.width) : undefined, name = ko.unwrap(accessor.name), value = ko.unwrap(accessor.value),
                            // dataSource of igCombo
                            options = ko.unwrap(accessor.options),
                            // init default selection
                            selectFirstIfNull = !(ko.unwrap(accessor.selectFirstIfNull) === false), // default: true
                            // enable or disable
                            enable = _.has(accessor, 'enable') ? ko.unwrap(accessor.enable) : true,
                            // mode of dropdown
                            editable = _.has(accessor, 'editable') ? ko.unwrap(accessor.editable) : false,
                            // require or no
                            required = _.has(accessor, 'required') ? ko.unwrap(accessor.required) : false,
                            // textKey
                            optionsText = _.has(accessor, 'optionsText') ? ko.unwrap(accessor.optionsText) : null,
                            // valueKey
                            optionsValue = _.has(accessor, 'optionsValue') ? ko.unwrap(accessor.optionsValue) : null,
                            // columns
                            columns = _.has(accessor, 'columns') ? ko.unwrap(accessor.columns) : [{ prop: optionsText }];
                            // filter valid options
                            options = _(options)
                                .filter(function (x) { return _.isObject(x); })
                                .value();
                            var props = columns.map(function (c) { return c.prop; }),
                            // list key value
                            vkl = _(options)
                                .map(function (m) {
                                if (!!m) {
                                    return _(m)
                                        .keys(m)
                                        .map(function (t) { return ({
                                        k: t,
                                        w: _.max([count(_.trim(m[t])), (_.find(columns, function (c) { return c.prop == t; }) || {}).length || 0])
                                    }); })
                                        .filter(function (m) { return props.indexOf(m.k) > -1; })
                                        .keyBy('k')
                                        .mapValues('w')
                                        .value();
                                }
                                return undefined;
                            }).filter(function (f) { return !!f; }).value(), cws = _(props)
                                .map(function (p) { return ({ k: p, v: _.maxBy(vkl, p) }); })
                                .map(function (m) { return ({ k: m.k, v: (m.v || {})[m.k] || 0 }); })
                                .keyBy('k')
                                .mapValues('v')
                                .value();
                            // map new options width nts_[optionsText]
                            // (show new prop on filter box)
                            options = _(options)
                                .map(function (m) {
                                var c = {}, k = ko.toJS(m), t = k[optionsText], v = k[optionsValue], n = _.omit(k, [optionsValue]), nt = _.map(props, function (p) { return k[p]; }).join(' ').trim();
                                c[optionsValue] = !_.isNil(v) ? v : '';
                                c['nts_' + optionsText] = nt || t || ' ';
                                return _.extend(n, c);
                            })
                                .value();
                            // check value has exist in option
                            var vio = _.find(options, function (f) { return f[optionsValue] == value; });
                            if (!vio) {
                                if (selectFirstIfNull) {
                                    vio = _.head(options);
                                    if (!vio) {
                                        value = null;
                                    }
                                    else {
                                        value = vio[optionsValue];
                                    }
                                }
                                else {
                                    value = null;
                                    //save old value
                                    if (!_.isNil(ko.toJS(accessor.value))) {
                                        $element.trigger(CHANGED, [SHOWVALUE, ko.toJS(accessor.value)]);
                                    }
                                }
                                accessor.value(value);
                            }
                            // check flag changed for validate
                            if (_.has($element.data(DATA), VALUE)) {
                                $element.trigger(CHANGED, [CHANGED, true]);
                            }
                            // save change value
                            $element
                                .trigger(CHANGED, [CWIDTH, cws])
                                .trigger(CHANGED, [NAME, name])
                                .trigger(CHANGED, [VALUE, value])
                                .trigger(CHANGED, [ENABLE, enable])
                                .trigger(CHANGED, [EDITABLE, editable])
                                .trigger(CHANGED, [REQUIRED, required]);
                            var sto = setTimeout(function () {
                                if ($element.data("igCombo")) {
                                    $element
                                        // enable or disable
                                        .igCombo(OPTION, "disabled", !enable);
                                    clearTimeout(sto);
                                }
                            }, 100);
                            // if igCombo has init
                            if ($element.data("igCombo")) {
                                var data = $element.data(DATA), olds = data[DATA];
                                // change dataSource if changed
                                if (!_.isEqual(olds, options)) {
                                    $element.igCombo(OPTION, "dataSource", options);
                                }
                                $element
                                    // set new value
                                    .igCombo("value", value);
                                if (!enable) {
                                    $element.removeAttr(TAB_INDEX);
                                }
                                else {
                                    $element.attr(TAB_INDEX, data[TAB_INDEX]);
                                }
                                if (_.isNil(value)) {
                                    $element
                                        .igCombo("deselectAll");
                                }
                                // set width of container
                                if (width) {
                                    if (width != MINWIDTH) {
                                        $element.igCombo("option", "width", width);
                                    }
                                    else { // auto width
                                        $element
                                            .igCombo("option", "width", (_.sum(_.map(cws, function (c) { return c; })) * WoC + 60) + 'px');
                                    }
                                }
                            }
                            // set new dataSource to data;
                            $element
                                .trigger(CHANGED, [DATA, options])
                                .trigger(SHOWVALUE);
                        };
                    }
                    return ComboBoxBindingHandler;
                }());
                koExtentions.ComboBoxBindingHandler = ComboBoxBindingHandler;
                ko.bindingHandlers['ntsComboBox'] = new ComboBoxBindingHandler();
            })(koExtentions = ui_7.koExtentions || (ui_7.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                var DatePickerBindingHandler = /** @class */ (function () {
                    /**
                     * Constructor.
                     */
                    function DatePickerBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    DatePickerBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var container = $(element);
                        var data = valueAccessor();
                        var value = data.value;
                        var name = data.name !== undefined ? ko.unwrap(data.name) : "";
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var pickOnly = !uk.util.isNullOrUndefined(data.pickOnly) ? ko.unwrap(data.pickOnly) : false;
                        var dateFormat = (data.dateFormat !== undefined) ? ko.unwrap(data.dateFormat) : "YYYY/MM/DD";
                        var valueFormat = (data.valueFormat !== undefined) ? ko.unwrap(data.valueFormat) : "";
                        var jumpButtonsDisplay = data.showJumpButtons !== undefined ? ko.unwrap(data.showJumpButtons) : false;
                        var tabIndex = nts.uk.util.isNullOrEmpty(container.attr("tabindex")) ? "0" : container.attr("tabindex");
                        var fiscalYear = data.fiscalYear !== undefined ? ko.unwrap(data.fiscalYear) : false;
                        var dateType = (data.type !== undefined) ? ko.unwrap(data.type) : "";
                        if (dateType === "yearmonth") {
                            dateFormat = 'yearmonth';
                            valueFormat = 'YYYYMM';
                        }
                        else if (dateType === "year") {
                            dateFormat = 'YYYY';
                            valueFormat = 'YYYY';
                        }
                        else if (dateType === "fiscalYear") {
                            dateFormat = 'YYYY';
                            valueFormat = 'YYYY';
                            fiscalYear = true;
                        }
                        else if (dateType === "dateWeek") {
                            dateFormat = 'YYYY/MM/DD ddd';
                            valueFormat = 'YYYY/MM/DD';
                        }
                        else if (dateType === "dateWeekFull") {
                            dateFormat = 'YYYY/MM/DD dddd';
                            valueFormat = 'YYYY/MM/DD';
                        }
                        // else {
                        //    dateFormat = 'YYYY/MM/DD';
                        //    valueFormat = 'YYYY/MM/DD';
                        //}
                        var ISOFormat = uk.text.getISOFormat(dateFormat);
                        var hasDayofWeek = (ISOFormat.indexOf("ddd") !== -1);
                        var dayofWeekFormat = ISOFormat.replace(/[^d]/g, "");
                        ISOFormat = ISOFormat.replace(/d/g, "").trim();
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        var button = (data.button !== undefined) ? ko.unwrap(data.button) : false;
                        var startDate = (data.startDate !== undefined) ? ko.unwrap(data.startDate) : null;
                        var endDate = (data.endDate !== undefined) ? ko.unwrap(data.endDate) : null;
                        var focus = (data.focus !== undefined) ? ko.unwrap(data.focus) : false;
                        var autoHide = (data.autoHide !== undefined) ? ko.unwrap(data.autoHide) : true;
                        var acceptJapaneseCalendar = (data.acceptJapaneseCalendar !== undefined) ? ko.unwrap(data.acceptJapaneseCalendar) : true;
                        var valueType = typeof value();
                        //            value.extend({ notify: 'always' });
                        if (valueType === "string") {
                            valueFormat = (valueFormat) ? valueFormat : uk.text.getISOFormat("ISO");
                        }
                        else if (valueType === "number") {
                            valueFormat = (valueFormat) ? valueFormat : ISOFormat;
                        }
                        else if (valueType === "object") {
                            if (moment.isDate(value())) {
                                valueType = "date";
                            }
                            else if (moment.isMoment(value())) {
                                valueType = "moment";
                            }
                        }
                        var idString;
                        if (!container.attr("id")) {
                            idString = nts.uk.util.randomId();
                        }
                        else {
                            idString = container.attr("id");
                            container.removeAttr("id");
                        }
                        container.removeAttr("tabindex");
                        var containerClass = container.attr('class');
                        container.removeClass(containerClass);
                        container.addClass("ntsControl nts-datepicker-wrapper").data("init", true);
                        var inputClass = (ISOFormat.length < 10) ? "yearmonth-picker" : "";
                        var $input = $("<input id='" + container.attr("id") + "' class='ntsDatepicker nts-input reset-element' tabindex='" + tabIndex + "' autocomplete='off'/>").addClass(inputClass);
                        $input.addClass(containerClass).attr("id", idString).attr("data-name", container.data("name"));
                        container.append($input);
                        $input.data("required", required);
                        var $prevButton, $nextButton;
                        if (jumpButtonsDisplay) {
                            $prevButton = $("<button/>").addClass("ntsDateNextButton ntsButton ntsDatePickerButton ntsDatePicker_Component auto-height")
                                .text("◀").css("margin-right", "3px").attr("tabIndex", tabIndex);
                            $nextButton = $("<button/>").addClass("ntsDatePrevButton ntsButton ntsDatePickerButton ntsDatePicker_Component auto-height")
                                .text("▶").css("margin-left", "3px").attr("tabIndex", tabIndex);
                            $input.before($prevButton).after($nextButton);
                        }
                        if (data.dateFormat === "YYYY") {
                            var $yearType = $("<label/>").attr("for", idString)
                                .css({ "position": "absolute",
                                "line-height": "30px",
                                "right": jumpButtonsDisplay ? "40px" : "5px" });
                            var labelText = fiscalYear ? "年度" : "年";
                            $yearType.text(labelText);
                            container.append($yearType);
                        }
                        if (hasDayofWeek) {
                            var lengthClass = (dayofWeekFormat.length > 3) ? "long-day" : "short-day";
                            var $label = $("<label id='" + idString + "-label' for='" + idString + "' class='dayofweek-label' />");
                            $input.addClass(lengthClass);
                            container.append($label);
                        }
                        // Init Datepicker
                        $input.datepicker({
                            language: 'ja-JP',
                            format: ISOFormat,
                            startDate: startDate,
                            endDate: endDate,
                            autoHide: autoHide,
                            weekStart: 0,
                            zIndex: 11000
                        }).data("dateNormalizer", DatePickerNormalizer.getInstance($input, $prevButton, $nextButton).setCssRanger(data.cssRanger)
                            .fiscalMonthsMode(data.fiscalMonthsMode)
                            .setDefaultCss(data.defaultClass || ""));
                        name = nts.uk.resource.getControlName(name);
                        if (pickOnly) {
                            $input.attr("readonly", true);
                            $input.css("cursor", "default");
                        }
                        $input.on("change", function (e) {
                            //                var onChanging = container.data("changed");
                            //                if(onChanging === true){
                            //                    return;
                            //                }
                            if ($input.data("change")) {
                                $input.data("change", false);
                                return;
                            }
                            var newText = $input.val();
                            var validator = new ui.validation.TimeValidator(name, constraintName, { required: $input.data("required"),
                                outputFormat: nts.uk.util.isNullOrEmpty(valueFormat) ? ISOFormat : valueFormat,
                                valueType: valueType, acceptJapaneseCalendar: acceptJapaneseCalendar,
                                inputFormat: ISOFormat });
                            var result = validator.validate(newText);
                            $input.ntsError('clear');
                            if (result.isValid) {
                                //if(!validateMinMax(result.parsedValue)){
                                //   return;
                                //}
                                validateMinMax(result.parsedValue);
                                // Day of Week
                                if (hasDayofWeek) {
                                    if (uk.util.isNullOrEmpty(result.parsedValue))
                                        $label.text("");
                                    else
                                        $label.text("(" + uk.time.formatPattern(newText, "", dayofWeekFormat) + ")");
                                }
                                //                    container.data("changed", true);
                                if (typeof result.parsedValue === "string") {
                                    $input.data("change", true);
                                    if (_.has(data, "type") && ko.toJS(data.type) === "date") {
                                        var momentDate = moment(result.parsedValue);
                                        value(new Date(Date.UTC(momentDate.year(), momentDate.month(), momentDate.date())));
                                    }
                                    else {
                                        value(result.parsedValue);
                                    }
                                    $input.data("change", false);
                                    var dateFormatValue = (value() !== "") ? uk.text.removeFromStart(uk.time.formatPattern(value(), valueFormat, ISOFormat), "0") : "";
                                    if (dateFormatValue !== "" && dateFormatValue !== "Invalid date") {
                                        $input.data("change", true);
                                        $input.datepicker('setDate', new Date(dateFormatValue.replace(/\//g, "-")));
                                    }
                                }
                                else {
                                    value(result.parsedValue);
                                }
                                value.valueWillMutate();
                            }
                            else {
                                $input.ntsError('set', result.errorMessage, result.errorCode, false);
                                //                    container.data("changed", true);
                                value(newText);
                            }
                            //$input.focus();
                        });
                        $input.on("blur", function () {
                            var newText = $input.val();
                            var validator = new ui.validation.TimeValidator(name, constraintName, { required: $input.data("required"),
                                outputFormat: nts.uk.util.isNullOrEmpty(valueFormat) ? ISOFormat : valueFormat,
                                valueType: valueType, acceptJapaneseCalendar: acceptJapaneseCalendar,
                                inputFormat: ISOFormat });
                            var result = validator.validate(newText);
                            if (!result.isValid) {
                                $input.ntsError('set', result.errorMessage, result.errorCode, false);
                            }
                            else if (acceptJapaneseCalendar) {
                                // Day of Week
                                if (hasDayofWeek) {
                                    if (uk.util.isNullOrEmpty(result.parsedValue))
                                        $label.text("");
                                    else
                                        $label.text("(" + uk.time.formatPattern(newText, "", dayofWeekFormat) + ")");
                                }
                                //                    if(!util.isNullOrEmpty(result.parsedValue)){
                                //                        $input.val(moment(result.parsedValue).format(ISOFormat));
                                //                    }
                            }
                        });
                        var validateMinMax = function (parsedValue) {
                            if (nts.uk.util.isNullOrEmpty(parsedValue)) {
                                return true;
                            }
                            var mmRs = new nts.uk.time.MomentResult();
                            var otFormat = nts.uk.util.isNullOrEmpty(valueFormat) ? ISOFormat : valueFormat;
                            var minDate = !nts.uk.util.isNullOrUndefined($input.data('startDate')) ? moment($input.data('startDate'), otFormat) : mmRs.systemMin();
                            var maxDate = !nts.uk.util.isNullOrUndefined($input.data('endDate')) ? moment($input.data('endDate'), otFormat) : mmRs.systemMax();
                            var momentCurrent = moment(parsedValue, otFormat);
                            var error = false;
                            if (momentCurrent.isBefore(minDate, 'day')) {
                                error = true;
                            }
                            else if (momentCurrent.isAfter(maxDate, 'day')) {
                                error = true;
                            }
                            if (error) {
                                var isHasYear = (nts.uk.util.isNullOrEmpty(otFormat) ? false : otFormat.indexOf("Y") >= 0) || otFormat.indexOf("Y") >= 0;
                                var isHasMonth = (nts.uk.util.isNullOrEmpty(otFormat) ? false : otFormat.indexOf("M") >= 0) || otFormat.indexOf("M") >= 0;
                                var isHasDay = (nts.uk.util.isNullOrEmpty(otFormat) ? false : otFormat.indexOf("D") >= 0) || otFormat.indexOf("D") >= 0;
                                var mesId = "MsgB_20";
                                var fm = "YYYY";
                                if (isHasDay && isHasMonth && isHasYear) {
                                    mesId = "MsgB_18", fm = "YYYY/MM/DD";
                                }
                                else if (isHasMonth && isHasYear) {
                                    mesId = "MsgB_19", fm = "YYYY/MM";
                                }
                                $input.ntsError('set', { messageId: mesId, messageParams: [name, minDate.format(fm), maxDate.format(fm)] }, mesId, false);
                                if (hasDayofWeek) {
                                    $label.text("");
                                }
                                // value(null);
                                return false;
                            }
                            return true;
                        };
                        $input.on('validate', (function (e) {
                            var newText = $input.val();
                            var validator = new ui.validation.TimeValidator(name, constraintName, { required: $input.data("required"),
                                outputFormat: nts.uk.util.isNullOrEmpty(valueFormat) ? ISOFormat : valueFormat,
                                valueType: valueType, acceptJapaneseCalendar: acceptJapaneseCalendar,
                                inputFormat: ISOFormat });
                            var result = validator.validate(newText);
                            $input.ntsError('clearKibanError');
                            if (!result.isValid) {
                                $input.ntsError('set', result.errorMessage, result.errorCode, false);
                            }
                            else if (acceptJapaneseCalendar) {
                                // Day of Week
                                if (hasDayofWeek) {
                                    if (uk.util.isNullOrEmpty(result.parsedValue))
                                        $label.text("");
                                    else
                                        $label.text("(" + uk.time.formatPattern(newText, "", dayofWeekFormat) + ")");
                                }
                                //                    if(!util.isNullOrEmpty(result.parsedValue)){
                                //                        $input.val(moment(result.parsedValue).format(ISOFormat));
                                //                    }
                            }
                        }));
                        new nts.uk.util.value.DefaultValue().onReset($input, data.value);
                        container.data("init", false);
                        $input.ntsDatepicker("bindFlip");
                        $input.data('startDate', startDate);
                        $input.data('endDate', endDate);
                    };
                    /**
                     * Update
                     */
                    DatePickerBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var value = data.value;
                        var dateFormat = (data.dateFormat !== undefined) ? ko.unwrap(data.dateFormat) : "YYYY/MM/DD";
                        var valueFormat = (data.valueFormat !== undefined) ? ko.unwrap(data.valueFormat) : ISOFormat;
                        var fiscalYear = data.fiscalYear !== undefined ? ko.unwrap(data.fiscalYear) : false;
                        var dateType = (data.type !== undefined) ? ko.unwrap(data.type) : "";
                        if (dateType === "yearmonth") {
                            dateFormat = 'yearmonth';
                            valueFormat = 'YYYYMM';
                        }
                        else if (dateType === "year") {
                            dateFormat = 'YYYY';
                            valueFormat = 'YYYY';
                        }
                        else if (dateType === "fiscalYear") {
                            dateFormat = 'YYYY';
                            valueFormat = 'YYYY';
                            fiscalYear = true;
                        }
                        else if (dateType === "dateWeek") {
                            dateFormat = 'YYYY/MM/DD ddd';
                            valueFormat = 'YYYY/MM/DD';
                        }
                        else if (dateType === "dateWeekFull") {
                            dateFormat = 'YYYY/MM/DD dddd';
                            valueFormat = 'YYYY/MM/DD';
                        }
                        // else {
                        //    dateFormat = 'YYYY/MM/DD';
                        //   valueFormat = 'YYYY/MM/DD';
                        //}
                        var ISOFormat = uk.text.getISOFormat(dateFormat);
                        var hasDayofWeek = (ISOFormat.indexOf("ddd") !== -1);
                        var dayofWeekFormat = ISOFormat.replace(/[^d]/g, "");
                        ISOFormat = ISOFormat.replace(/d/g, "").trim();
                        var disabled = (data.disabled !== undefined) ? ko.unwrap(data.disabled) : false;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : undefined;
                        var startDate = (data.startDate !== undefined) ? ko.unwrap(data.startDate) : null;
                        var endDate = (data.endDate !== undefined) ? ko.unwrap(data.endDate) : null;
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        var focus = (data.focus !== undefined) ? ko.unwrap(data.focus) : false;
                        var container = $(element);
                        var dateNormalizer = container.find("input").data("dateNormalizer");
                        if (dateNormalizer) {
                            if (data.cssRanger) {
                                dateNormalizer.setCssRanger(ko.unwrap(data.cssRanger));
                            }
                        }
                        var init = container.data("init");
                        var $input = container.find(".nts-input");
                        var $label = container.find(".dayofweek-label");
                        // Properties Binding
                        $input.datepicker('setStartDate', startDate);
                        $input.datepicker('setEndDate', endDate);
                        $input.data('startDate', startDate);
                        $input.data('endDate', endDate);
                        // Value Binding
                        if (value() !== $input.val()) {
                            var dateFormatValue = (value() !== "") ? uk.text.removeFromStart(uk.time.formatPattern(value(), valueFormat, ISOFormat), "0") : "";
                            if (dateFormatValue !== "" && dateFormatValue !== "Invalid date") {
                                // Check equals to avoid multi datepicker with same value
                                $input.datepicker('setDate', new Date(dateFormatValue.replace(/\//g, "-")));
                                $label.text("(" + uk.time.formatPattern(value(), valueFormat, dayofWeekFormat) + ")");
                            }
                            else if (dateFormatValue === "Invalid date" && (typeof value() === "string" || value() instanceof String)) {
                                $input.val(value());
                                $label.text("");
                                $input.trigger("validate");
                            }
                            else {
                                $input.val("");
                                $label.text("");
                            }
                        }
                        //            container.data("changed", false);
                        $input.data("required", required);
                        if (enable !== undefined) {
                            $input.prop("disabled", !enable);
                            container.find(".ntsDatePickerButton").prop("disabled", !enable);
                        }
                        else {
                            $input.prop("disabled", disabled);
                            container.find(".ntsDatePickerButton").prop("disabled", disabled);
                        }
                        if ($input.prop("disabled") === true) {
                            new nts.uk.util.value.DefaultValue().applyReset($input, value);
                        }
                        if (data.button)
                            container.find('.datepicker-btn').prop("disabled", disabled);
                        if (focus) {
                            $input.focus();
                        }
                    };
                    return DatePickerBindingHandler;
                }());
                ko.bindingHandlers['ntsDatePicker'] = new DatePickerBindingHandler();
                var ViewLocation;
                (function (ViewLocation) {
                    ViewLocation[ViewLocation["PREV"] = 0] = "PREV";
                    ViewLocation[ViewLocation["CURRENT"] = 1] = "CURRENT";
                    ViewLocation[ViewLocation["NEXT"] = 2] = "NEXT";
                })(ViewLocation || (ViewLocation = {}));
                var DatePickerNormalizer = /** @class */ (function () {
                    function DatePickerNormalizer() {
                        this.fiscalMonth = 1;
                        // Constants
                        this.NAMESPACE = "datepicker";
                        this.YEARS = "years";
                        this.MONTHS = "months";
                        this.DAYS = "days";
                        this.WEEK = "week";
                        this.PICKER = " picker";
                        this.YEAR = "year";
                        this.MONTH = "month";
                        this.DAY = "day";
                        this.YEAR_TEXT = "年";
                        this.MONTH_TEXT = "月";
                        this.PERIOD_TEXT = "度";
                        this.structure = { 0: this.YEARS, 1: this.MONTHS, 2: this.DAYS };
                        this.EVENT_SHOW = "show." + this.NAMESPACE;
                        this.EVENT_KEYUP = "keyup." + this.NAMESPACE;
                        this.EVENT_PICK = "pick." + this.NAMESPACE;
                        this.EVENT_CLICK = "click";
                        this.Y_FORMAT = "YYYY";
                        this.YM_FORMAT = "YYYY/MM";
                        this.YMD_FORMAT = "YYYY/MM/DD";
                        this.DATE_SPLITTER = "/";
                    }
                    // Use this method to get an instance.
                    DatePickerNormalizer.getInstance = function ($input, $prev, $next) {
                        var instance = new DatePickerNormalizer();
                        instance.$input = $input;
                        instance.$prev = $prev;
                        instance.$next = $next;
                        return instance.onShow().onKeyup().onPick().onJump();
                    };
                    DatePickerNormalizer.prototype.setCssRanger = function (range) {
                        this.cssRanger = range;
                        return this;
                    };
                    DatePickerNormalizer.prototype.setFiscalMonth = function (month) {
                        this.fiscalMonth = month;
                        return this;
                    };
                    DatePickerNormalizer.prototype.setDefaultCss = function (clazz) {
                        this.defaultCss = clazz;
                        return this;
                    };
                    DatePickerNormalizer.prototype.fiscalMonthsMode = function (value) {
                        if (value === true)
                            this.setFiscalMonth(4);
                        return this;
                    };
                    DatePickerNormalizer.prototype.getPicker = function () {
                        return this.$input.data(this.NAMESPACE).$picker;
                    };
                    DatePickerNormalizer.prototype.getYearsPicker = function () {
                        return this.$input.data(this.NAMESPACE).$yearsPicker;
                    };
                    DatePickerNormalizer.prototype.getMonthsPicker = function () {
                        return this.$input.data(this.NAMESPACE).$monthsPicker;
                    };
                    DatePickerNormalizer.prototype.getYearsBoard = function () {
                        return this.$input.data(this.NAMESPACE).$years;
                    };
                    DatePickerNormalizer.prototype.getMonthsBoard = function () {
                        return this.$input.data(this.NAMESPACE).$months;
                    };
                    DatePickerNormalizer.prototype.getCurrentYear = function () {
                        return this.$input.data(this.NAMESPACE).$yearCurrent;
                    };
                    DatePickerNormalizer.prototype.getView = function (view, isCurrentView) {
                        var pickerView, viewPart, currentViewPart;
                        var viewName = this.structure[view];
                        switch (viewName) {
                            case this.YEARS:
                                pickerView = this.YEARS + this.PICKER;
                                viewPart = this.YEARS;
                                currentViewPart = "current year";
                                break;
                            case this.MONTHS:
                                pickerView = this.MONTHS + this.PICKER;
                                viewPart = this.MONTHS;
                                currentViewPart = "current month";
                                break;
                            case this.DAYS:
                                pickerView = this.DAYS + this.PICKER;
                                viewPart = this.DAYS;
                                break;
                            case this.WEEK:
                                pickerView = this.DAYS + this.PICKER;
                                viewPart = this.WEEK;
                                break;
                        }
                        return $(this.getPicker()[0]).children().filter(function (idx, elm) {
                            return $(elm).data("view") === pickerView;
                        }).find("ul").filter(function (idx, elm) {
                            if (isCurrentView === true)
                                return idx === 0;
                            else
                                return $(elm).data("view") === viewPart;
                        });
                    };
                    DatePickerNormalizer.prototype.getMutedClass = function () {
                        return this.options !== undefined ? this.options.mutedClass : "";
                    };
                    DatePickerNormalizer.prototype.getPickedClass = function () {
                        return this.options !== undefined ? this.options.pickedClass : "";
                    };
                    DatePickerNormalizer.prototype.setColorLevel = function () {
                        if (this.options.format === this.Y_FORMAT)
                            this.colorLevel = this.YEARS;
                        else if (this.options.format === this.YM_FORMAT)
                            this.colorLevel = this.MONTHS;
                        else if (this.options.format === this.YMD_FORMAT)
                            this.colorLevel = this.DAYS;
                        // Only set to colorLevel in initialization.
                        if (this.selectedView === undefined)
                            this.selectedView = this.colorLevel;
                    };
                    DatePickerNormalizer.prototype.color = function () {
                        var _this = this;
                        if (this.cssRanger === undefined)
                            return;
                        // Year only picker
                        if (this.cssRanger.constructor === Array) {
                            _.each(this.cssRanger, function (cell) { return _this.colorCell(cell, ViewLocation.CURRENT, -1); });
                            return;
                        }
                        this.colorNode(this.cssRanger, ViewLocation.CURRENT, 0);
                        this.colorNode(this.cssRanger, ViewLocation.NEXT, 0);
                        this.colorNode(this.cssRanger, ViewLocation.PREV, 0);
                    };
                    DatePickerNormalizer.prototype.colorNode = function (holders, location, currentLayer) {
                        var _this = this;
                        var holder;
                        var handledYear = location === ViewLocation.CURRENT ? this.viewYear : this.viewYear + 1;
                        // If processing layer is 1 level above leaf layer
                        if (this.colorLevel === this.structure[currentLayer + 1]) {
                            switch (currentLayer) {
                                case 0:
                                    holder = handledYear;
                                    break;
                                case 1:
                                    if (location === ViewLocation.CURRENT)
                                        holder = this.viewMonth;
                                    else if (location === ViewLocation.PREV)
                                        holder = this.viewMonth - 1;
                                    else
                                        holder = this.viewMonth + 1;
                                    break;
                                case 2:
                                    holder = this.date;
                                    break;
                                default:
                                    holder = handledYear;
                                    currentLayer = 0;
                                    break;
                            }
                        }
                        else {
                            switch (currentLayer) {
                                case 0:
                                    holder = this.viewYear;
                                    break;
                                case 1:
                                    holder = this.viewMonth;
                                    break;
                                case 2:
                                    holder = this.date;
                                    break;
                                default:
                                    holder = this.viewYear;
                                    currentLayer = 0;
                                    break;
                            }
                        }
                        if (holders.hasOwnProperty(holder)) {
                            if (holders[holder].constructor === Array) {
                                _.each(holders[holder], function (cell) { return _this.colorCell(cell, location, currentLayer); });
                                return;
                            }
                            currentLayer++;
                            this.colorNode(holders[holder], location, currentLayer);
                        }
                    };
                    DatePickerNormalizer.prototype.colorCell = function (cell, location, layer) {
                        var self = this;
                        var data = typeof cell === "object" ? Object.keys(cell)[0] : cell;
                        var $target = this.$view.children().filter(function (idx, elm) {
                            if (self.structure[layer] === self.YEARS) {
                                return $(elm).text() === self.defaultMonths[data - 1]
                                    && ((location === ViewLocation.PREV && $(elm).data("view").indexOf("prev") !== -1)
                                        || (location === ViewLocation.NEXT && $(elm).data("view").indexOf("next") !== -1)
                                        || location === ViewLocation.CURRENT && $(elm).data("view").indexOf("prev") === -1
                                            && $(elm).data("view").indexOf("next") === -1);
                            }
                            else if (self.structure[layer] === self.MONTHS) {
                                return $(elm).text() === data.toString()
                                    && ((location === ViewLocation.PREV && $(elm).data("view").indexOf("prev") !== -1)
                                        || (location === ViewLocation.NEXT && $(elm).data("view").indexOf("next") !== -1)
                                        || location === ViewLocation.CURRENT && $(elm).data("view").indexOf("prev") === -1
                                            && $(elm).data("view").indexOf("next") === -1);
                            }
                            else if (layer === -1) {
                                return $(elm).text() === data.toString();
                            }
                        });
                        if ($target.length > 0) {
                            $target.addClass((typeof cell === "object" && cell[data] !== undefined) ? cell[data] : this.defaultCss);
                        }
                    };
                    DatePickerNormalizer.prototype.fillFiscalMonthsInYear = function () {
                        var self = this;
                        if (this.fiscalMonth === 1)
                            return;
                        var nextYearMonths = this.defaultMonths.slice(0, this.fiscalMonth - 1);
                        var currentYearMonths = this.defaultMonths.slice(this.fiscalMonth - 1);
                        var newMonths = $.merge(currentYearMonths, nextYearMonths);
                        var nextYearMark = 12 - this.fiscalMonth;
                        this.getMonthsBoard().children().each(function (idx, elm) {
                            $(elm).text(newMonths[idx]);
                            if (idx > nextYearMark)
                                $(elm).addClass(self.getMutedClass()).attr("data-view", "fiscalMonth next")
                                    .data("view", "fiscalMonth next").css("font-size", "inherit");
                        });
                        var $currentYear = this.getCurrentYear();
                        if ($currentYear.length > 0)
                            $currentYear.text(this.viewYear + this.yearText());
                    };
                    DatePickerNormalizer.prototype.allowPickMonth = function () {
                        return (this.viewMonth < this.fiscalMonth && this.viewYear === this.year - 1)
                            || (this.viewMonth >= this.fiscalMonth && this.viewYear === this.year);
                    };
                    DatePickerNormalizer.prototype.allowPickDate = function () {
                        return this.viewYear === this.year && this.viewMonth === this.month;
                    };
                    DatePickerNormalizer.prototype.pickMonth = function () {
                        var self = this;
                        if (self.fiscalMonth === 1)
                            return;
                        var month = self.month + self.MONTH_TEXT;
                        this.getMonthsBoard().children().each(function (idx, elm) {
                            var view;
                            if ($(elm).text() === month.toString()) {
                                view = "month picked";
                                $(elm).addClass(self.getPickedClass()).attr("data-view", view).data("view", view);
                            }
                            else if ($(elm).hasClass(self.getPickedClass())) {
                                view = $(elm).data("view").split(" ")[0];
                                $(elm).removeClass(self.getPickedClass()).attr("data-view", view).data("view", view);
                            }
                        });
                    };
                    DatePickerNormalizer.prototype.pickDate = function () {
                        var self = this;
                        if (self.colorLevel !== self.DAYS || self.fiscalMonth === 1)
                            return;
                        var date = self.date;
                        this.$view.children().each(function (idx, elm) {
                            if ($(elm).text() === date.toString() && $(elm).data("view").indexOf("prev") === -1
                                && $(elm).data("view").indexOf("next") === -1) {
                                $(elm).addClass(self.getPickedClass()).attr("data-view", "day picked").data("view", "day picked");
                            }
                            else if ($(elm).hasClass(self.getPickedClass())) {
                                $(elm).removeClass(self.getPickedClass()).attr("data-view", "day").data("view", "day");
                            }
                        });
                    };
                    DatePickerNormalizer.prototype.clearPicked = function () {
                        var self = this;
                        var view = self.colorLevel === self.MONTHS ? "month" : "day";
                        var $selectedBoard;
                        if (this.selectedView === this.MONTHS) {
                            $selectedBoard = this.getMonthsBoard();
                        }
                        else if (this.selectedView === this.DAYS) {
                            $selectedBoard = this.getYearsBoard();
                        }
                        if ($selectedBoard === undefined)
                            return;
                        $selectedBoard.children().filter(function (idx, elm) {
                            return $(elm).data("view").indexOf("picked") !== -1;
                        }).removeClass(self.getPickedClass()).attr("data-view", view).data("view", view);
                    };
                    DatePickerNormalizer.prototype.yearText = function () {
                        return this.fiscalMonth !== 1 ? this.YEAR_TEXT + this.PERIOD_TEXT : this.YEAR_TEXT;
                    };
                    DatePickerNormalizer.prototype.onClick = function () {
                        var self = this;
                        var picker = this.getPicker();
                        picker.off("click", this._click);
                        picker.on("click", $.proxy(this._click, this));
                    };
                    DatePickerNormalizer.prototype._click = function (evt) {
                        var $target = $(evt.target);
                        var view = $target.data("view");
                        switch (view) {
                            case "years prev":
                            case "years next":
                                this.updateYearsView();
                                break;
                            case "year prev":
                                this.viewYear--;
                                this.updateMonthsView();
                                break;
                            case "year next":
                                this.viewYear++;
                                this.updateMonthsView();
                                break;
                            case "month prev":
                                if (this.viewMonth == 1) {
                                    this.viewMonth = 12;
                                    this.viewYear--;
                                }
                                else
                                    this.viewMonth--;
                                this.updateDaysView();
                                break;
                            case "month next":
                                if (this.viewMonth == 12) {
                                    this.viewMonth = 1;
                                    this.viewYear++;
                                }
                                else
                                    this.viewMonth++;
                                this.updateDaysView();
                                break;
                            case "day prev":
                                this.updateDaysView();
                                break;
                            case "day next":
                                this.updateDaysView();
                                break;
                            case "fiscalMonth next":
                                if ($target.hasClass(this.getPickedClass()))
                                    return;
                                var pickedMonth = this.defaultMonths.indexOf($target.text());
                                this._clickFiscalNextMonth(pickedMonth);
                                this.$input.datepicker("hide");
                                if (this.colorLevel === this.DAYS) {
                                    this.$input.datepicker("show");
                                }
                                break;
                            case "year current":
                                this.selectedView = this.YEARS;
                                break;
                            case "month current":
                                this.selectedView = this.MONTHS;
                                if (this.viewMonth < this.fiscalMonth)
                                    this.viewYear--;
                                this.updateMonthsView();
                                break;
                        }
                    };
                    DatePickerNormalizer.prototype.updateYearsView = function () {
                        this.color();
                    };
                    DatePickerNormalizer.prototype.updateMonthsView = function () {
                        if (this.fiscalMonth !== 1) {
                            this.fillFiscalMonthsInYear();
                        }
                        if (this.colorLevel === this.MONTHS) {
                            this.color();
                        }
                        if (this.allowPickMonth())
                            this.pickMonth();
                        if (this.viewMonth < this.fiscalMonth && this.viewYear === this.year)
                            this.clearPicked();
                    };
                    DatePickerNormalizer.prototype.updateDaysView = function () {
                        if (this.colorLevel === this.DAYS) {
                            this.color();
                        }
                        if (this.allowPickDate())
                            this.pickDate();
                    };
                    DatePickerNormalizer.prototype._beforeShow = function () {
                        this.options = this.$input.data(this.NAMESPACE).options;
                        this.setColorLevel();
                        this.defaultMonths = this.options.monthsShort;
                        var text = this.$input.val();
                        var parsedTextTime = this.parseDate(text);
                        if (parsedTextTime !== undefined && parsedTextTime.month === 2) {
                            this.viewYear = this.year = parsedTextTime.year;
                            this.viewMonth = this.month = parsedTextTime.month;
                            this.date = parsedTextTime.date;
                        }
                        else {
                            var initValue = this.$input.datepicker("getDate", true);
                            var viewTime = this.$input.data(this.NAMESPACE).viewDate;
                            this.viewYear = viewTime.getFullYear();
                            this.viewMonth = viewTime.getMonth() + 1;
                            var parsedTime = this.parseDate(initValue);
                            if (parsedTime !== undefined) {
                                this.year = parsedTime.year;
                                this.month = parsedTime.month;
                                this.date = parsedTime.date;
                            }
                            else
                                return;
                        }
                        var colorLevel = this.colorLevel;
                        var layer;
                        if (colorLevel === this.YEARS) {
                            layer = 0;
                        }
                        else if (colorLevel === this.MONTHS) {
                            layer = 1;
                        }
                        else if (colorLevel === this.DAYS) {
                            layer = 2;
                        }
                        this.$view = this.getView(layer);
                        this.$currentView = this.getView(layer, true);
                        // Body contents of picker is showing months
                        if (this.selectedView === this.MONTHS) {
                            if (this.viewMonth < this.fiscalMonth)
                                this.viewYear--;
                            this.fillFiscalMonthsInYear();
                        }
                        this.color();
                        // Pick time
                        if (this.selectedView === this.MONTHS && this.allowPickMonth()) {
                            if (this.viewMonth < this.fiscalMonth && this.viewYear === this.year)
                                this.clearPicked();
                            this.pickMonth();
                        }
                        else if (this.selectedView === this.DAYS && this.allowPickDate()) {
                            this.pickDate();
                        }
                    };
                    DatePickerNormalizer.prototype.parseDate = function (date) {
                        var exp = /\d+(\/\d+)?(\/\d+)?/;
                        if (exp.test(date) === false)
                            return;
                        var dateParts = date.split(this.DATE_SPLITTER);
                        return {
                            year: parseInt(dateParts[0]),
                            month: parseInt(dateParts[1]),
                            date: dateParts[2] !== undefined ? parseInt(dateParts[2]) : undefined
                        };
                    };
                    DatePickerNormalizer.prototype.onShow = function () {
                        var self = this;
                        this.$input.on(this.EVENT_SHOW, function (evt) {
                            var _self = self;
                            setTimeout(function () {
                                if (!_self.validDate())
                                    return;
                                _self._beforeShow.call(_self);
                                _self.onClick.call(_self);
                            }, 0);
                        });
                        return self;
                    };
                    DatePickerNormalizer.prototype.onKeyup = function () {
                        //            this.$input.off(this.EVENT_KEYUP, this._beforeShow);
                        //            this.$input.on(this.EVENT_KEYUP, $.proxy(this._beforeShow, this));
                        var self = this;
                        this.$input.on(this.EVENT_KEYUP, function () {
                            self.validDate();
                        });
                        return this;
                    };
                    DatePickerNormalizer.prototype.validDate = function () {
                        var self = this;
                        var current, prev, next, b, ns = self.$input.data(self.NAMESPACE);
                        if (!isNaN(ns.date))
                            return true;
                        if (!self.colorLevel)
                            self.setColorLevel();
                        if (self.colorLevel === self.YEARS) {
                            current = ns.$yearsCurrent;
                            prev = ns.$yearsPrev;
                            next = ns.$yearsNext;
                            b = ns.$years;
                        }
                        else if (self.colorLevel === self.MONTHS) {
                            current = ns.$yearCurrent;
                            prev = ns.$yearPrev;
                            next = ns.$yearNext;
                            b = ns.$months;
                        }
                        else if (self.colorLevel === self.DAYS) {
                            current = ns.$monthCurrent;
                            prev = ns.$monthPrev;
                            next = ns.$monthNext;
                            b = ns.$days;
                        }
                        current.html("");
                        current.addClass(ns.options.disabledClass);
                        prev.addClass(ns.options.disabledClass);
                        next.addClass(ns.options.disabledClass);
                        b.find("li").each(function () {
                            var e = $(this);
                            e.addClass(ns.options.disabledClass);
                            if (self.colorLevel === self.YEARS) {
                                e.html("");
                            }
                        });
                    };
                    DatePickerNormalizer.prototype.onPick = function () {
                        var self = this;
                        this.$input.on(this.EVENT_PICK, function (evt) {
                            var view = evt.view; // month | year
                            if (view === self.DAY) {
                                self.date = evt.date.getDate();
                                self.month = evt.date.getMonth() + 1;
                                self.viewMonth = self.month;
                                self.year = evt.date.getFullYear();
                                self.viewYear = self.year;
                            }
                            else if (view === self.MONTH) {
                                self._clickFiscalNextMonth.call(self, evt.date.getMonth());
                            }
                            else if (view === self.YEAR) {
                                var _self = self;
                                setTimeout(function () {
                                    _self.year = evt.date.getFullYear();
                                    _self.viewYear = _self.year;
                                    _self.month = _self.viewMonth;
                                    if (_self.viewMonth < _self.fiscalMonth)
                                        _self.viewYear--;
                                    _self.updateMonthsView.call(_self);
                                }, 0);
                            }
                            if (!_.isNil(view) && view !== "") {
                                self.$input.focus();
                            }
                        });
                        return self;
                    };
                    DatePickerNormalizer.prototype._clickFiscalNextMonth = function (pickedMonth) {
                        var self = this;
                        self.month = pickedMonth + 1;
                        self.viewMonth = self.month;
                        // Fiscal month mode
                        if (self.fiscalMonth !== 1) {
                            self.year = self.month >= self.fiscalMonth ? self.viewYear : (self.viewYear + 1);
                            self.viewYear = self.year;
                            self.$input.datepicker("setDate", new Date(self.year, self.month - 1, self.date || 1));
                        }
                    };
                    DatePickerNormalizer.prototype.onJump = function () {
                        var self = this;
                        if (uk.util.isNullOrUndefined(self.$prev) || uk.util.isNullOrUndefined(self.$next))
                            return self;
                        this.$prev.on(this.EVENT_CLICK, function (evt) {
                            self.addTime(-1);
                        });
                        this.$next.on(this.EVENT_CLICK, function (evt) {
                            self.addTime(1);
                        });
                        return self;
                    };
                    DatePickerNormalizer.prototype.addTime = function (value) {
                        var self = this;
                        var year, month, date;
                        if (self.options === undefined)
                            self.options = self.$input.data(self.NAMESPACE).options;
                        var time = self.$input.datepicker("getDate", true);
                        var parsedTime = self.parseDate(time);
                        if (parsedTime !== undefined) {
                            if (self.options.format === self.YMD_FORMAT) {
                                year = parsedTime.year;
                                month = parsedTime.month - 1;
                                date = parsedTime.date + value;
                            }
                            else if (self.options.format === self.YM_FORMAT) {
                                var postCalcVal = parsedTime.month + value;
                                date = 1;
                                if (postCalcVal < 1) {
                                    year = parsedTime.year - 1;
                                    month = 11;
                                }
                                else if (postCalcVal > 12) {
                                    year = parsedTime.year + 1;
                                    month = postCalcVal - 13;
                                }
                                else {
                                    year = parsedTime.year;
                                    month = postCalcVal - 1;
                                }
                            }
                            else if (self.options.format === self.Y_FORMAT) {
                                var postCalcVal = parsedTime.year + value;
                                if (postCalcVal < 1900) {
                                    year = 9999;
                                }
                                else if (postCalcVal > 9999) {
                                    year = 1900;
                                }
                                else
                                    year = postCalcVal;
                                month = 1;
                                date = 1;
                            }
                        }
                        self.$input.datepicker("setDate", new Date(year, month, date));
                    };
                    return DatePickerNormalizer;
                }());
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                var PS = window.parent;
                /**
                 * Dialog binding handler
                 */
                var NtsDialogBindingHandler = /** @class */ (function () {
                    function NtsDialogBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsDialogBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    };
                    /**
                     * Update
                     */
                    NtsDialogBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var option = ko.unwrap(data.option);
                        var title = ko.unwrap(data.title);
                        var message = ko.unwrap(data.message);
                        var modal = ko.unwrap(option.modal);
                        var show = ko.unwrap(option.show);
                        var buttons = ko.unwrap(option.buttons);
                        var $dialog = $("<div id='ntsDialog'></div>");
                        if (show == true) {
                            $('body').append($dialog);
                            // Create Buttons
                            var dialogbuttons = [];
                            var _loop_1 = function (button) {
                                dialogbuttons.push({
                                    text: ko.unwrap(button.text),
                                    "class": ko.unwrap(button.class) + ko.unwrap(button.size) + " " + ko.unwrap(button.color),
                                    click: function () { button.click(bindingContext.$data, $dialog); }
                                });
                            };
                            for (var _i = 0, buttons_1 = buttons; _i < buttons_1.length; _i++) {
                                var button = buttons_1[_i];
                                _loop_1(button);
                            }
                            // Create dialog
                            $dialog.dialog({
                                title: title,
                                modal: modal,
                                closeOnEscape: false,
                                buttons: dialogbuttons,
                                dialogClass: "no-close",
                                open: function () {
                                    $(this).parent().find('.ui-dialog-buttonset > button.yes').focus();
                                    $(this).parent().find('.ui-dialog-buttonset > button').removeClass('ui-button ui-corner-all ui-widget');
                                    $('.ui-widget-overlay').last().css('z-index', 120000);
                                },
                                close: function (event) {
                                    bindingContext.$data.option.show(false);
                                }
                            }).text(message);
                        }
                        else {
                            // Destroy dialog
                            if ($('#ntsDialog').dialog("instance") != null)
                                $('#ntsDialog').dialog("destroy");
                            $('#ntsDialog').remove();
                        }
                    };
                    return NtsDialogBindingHandler;
                }());
                function getCurrentWindow() {
                    var self = nts.uk.ui.windows.getSelf();
                    var dfd = $.Deferred();
                    if (!nts.uk.util.isNullOrUndefined(self)) {
                        dfd.resolve(self);
                    }
                    else {
                        if (nts.uk.util.isInFrame()) {
                            dfd.resolve({ isFrame: true });
                        }
                        nts.uk.deferred.repeat(function (conf) { return conf
                            .task(function () {
                            var def = $.Deferred();
                            self = nts.uk.ui.windows.getSelf();
                            if (!nts.uk.util.isNullOrUndefined(self)) {
                                dfd.resolve(self);
                            }
                            def.resolve(self);
                            return def.promise();
                        })
                            .while(function (c) { return nts.uk.util.isNullOrUndefined(c); })
                            .pause(300); });
                    }
                    return dfd.promise();
                }
                /**
                 * Error Dialog binding handler
                 */
                var NtsErrorDialogBindingHandler = /** @class */ (function () {
                    function NtsErrorDialogBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsErrorDialogBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var option = ko.unwrap(data.option);
                        var title = ko.unwrap(data.title);
                        var headers = ko.unwrap(option.headers);
                        var modal = ko.unwrap(option.modal);
                        var show = ko.unwrap(option.show);
                        var buttons = ko.unwrap(option.buttons);
                        var displayrows = ko.unwrap(option.displayrows);
                        getCurrentWindow().done(function (self) {
                            var idX = "";
                            if (self.isFrame) {
                                idX = nts.uk.util.randomId();
                                self = PS.window.parent.nts.uk.ui.windows.getSelf();
                                PS = PS.window.parent;
                            }
                            else {
                                idX = self.id;
                            }
                            var id = 'ntsErrorDialog_' + idX;
                            var $dialog = $("<div>", { "id": id, "class": "ntsErrorDialog" });
                            if (self.isRoot) {
                                PS.$('body').append($dialog);
                            }
                            else {
                                var temp = self;
                                while (!nts.uk.util.isNullOrUndefined(temp)) {
                                    if (temp.isRoot) {
                                        $(temp.globalContext.document.getElementsByTagName("body")).append($dialog);
                                        temp = null;
                                    }
                                    else {
                                        temp = temp.parent;
                                    }
                                }
                            }
                            // Create Buttons
                            var dialogbuttons = [];
                            var _loop_2 = function (button) {
                                dialogbuttons.push({
                                    text: ko.unwrap(button.text),
                                    "class": ko.unwrap(button.class) + ko.unwrap(button.size) + " " + ko.unwrap(button.color),
                                    click: function () { button.click(bindingContext.$data, $dialog); }
                                });
                            };
                            for (var _i = 0, buttons_2 = buttons; _i < buttons_2.length; _i++) {
                                var button = buttons_2[_i];
                                _loop_2(button);
                            }
                            $dialog.data("winid", idX);
                            // Calculate width
                            var dialogWidth = 40 + 35 + 17;
                            headers.forEach(function (header, index) {
                                if (ko.unwrap(header.visible)) {
                                    if (typeof ko.unwrap(header.width) === "number") {
                                        dialogWidth += ko.unwrap(header.width);
                                    }
                                    else {
                                        dialogWidth += 200;
                                    }
                                }
                            });
                            // Create dialog
                            $dialog.dialog({
                                title: title,
                                modal: modal,
                                autoOpen: false,
                                closeOnEscape: false,
                                width: dialogWidth,
                                maxHeight: 500,
                                buttons: dialogbuttons,
                                dialogClass: "no-close",
                                open: function () {
                                    $(this).parent().find('.ui-dialog-buttonset > button.yes').focus();
                                    $(this).parent().find('.ui-dialog-buttonset > button').removeClass('ui-button ui-corner-all ui-widget');
                                    $('.ui-widget-overlay').last().css('z-index', nts.uk.ui.dialog.getMaxZIndex());
                                    var offsetDraged = $dialog.data("stopdrop");
                                    if (nts.uk.util.isNullOrUndefined(offsetDraged)) {
                                        $dialog.ntsDialogEx("centerUp", self);
                                    }
                                    else {
                                        $dialog.closest(".ui-dialog").offset(offsetDraged);
                                    }
                                },
                                close: function (event) {
                                    bindingContext.$data.option().show(false);
                                }
                            }).dialogPositionControl();
                            $dialog.on("dialogopen", function () {
                                var maxrowsHeight = 0;
                                var index = 0;
                                $(this).find("table tbody tr").each(function () {
                                    if (index < displayrows) {
                                        index++;
                                        maxrowsHeight += $(this).height();
                                    }
                                });
                                maxrowsHeight = maxrowsHeight + 33 + 20 + 20 + 55 + 4 + $(this).find("table thead").height();
                                if (maxrowsHeight > $dialog.dialog("option", "maxHeight")) {
                                    maxrowsHeight = $dialog.dialog("option", "maxHeight");
                                }
                                $dialog.dialog("option", "height", maxrowsHeight);
                            });
                            PS.$("body").data(self.id, $dialog);
                            $(element).data("dialogX", $dialog);
                            if (self.isRoot) {
                                $("body").bind("dialogclosed", function (evt, eData) {
                                    //                            console.log(eData.dialogId);
                                    var $cDialog = $("#ntsErrorDialog_" + eData.dialogId);
                                    if (!nts.uk.util.isNullOrEmpty($cDialog)) {
                                        $("body").data(eData.dialogId).dialog("destroy");
                                        //                            $cDialog.dialog().dialog("destroy");
                                        //                            console.log("destroyed");
                                        $cDialog.remove();
                                    }
                                });
                            }
                        });
                    };
                    /**
                     * Update
                     */
                    NtsErrorDialogBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var option = ko.unwrap(data.option);
                        var title = ko.unwrap(data.title);
                        var errors = ko.unwrap(data.errors);
                        var headers = ko.unwrap(option.headers);
                        var displayrows = ko.unwrap(option.displayrows);
                        //var maxrows: number = ko.unwrap(option.maxrows);
                        var autoclose = ko.unwrap(option.autoclose);
                        var show = ko.unwrap(option.show);
                        var isNotFunctionArea = _.isEmpty($('#functions-area')) && _.isEmpty($('#functions-area-bottom'));
                        var isNotSideBar = _.isEmpty($('#sidebar'));
                        var isFrame = nts.uk.util.isInFrame();
                        if (isNotFunctionArea && isNotSideBar && isFrame) {
                            if (!_.isEmpty(errors)) {
                                var mesArr_1 = [], mesCodeArr_1 = _.map(errors, function (error) { return error.errorCode; });
                                _.forEach(errors, function (error) {
                                    mesArr_1.push(error.messageText);
                                    mesCodeArr_1.push(error.errorCode);
                                });
                                var totalMes = _.join(_.uniq(mesArr_1), '\n');
                                var totalMesCode = _.join(_.uniq(mesCodeArr_1), ', ');
                                var mainD = PS.window.parent.nts.uk.ui.windows.getSelf();
                                while (!mainD.isRoot) {
                                    mainD = mainD.parent;
                                }
                                //nts.uk.ui.errors.clearAll();
                                mainD.globalContext.nts.uk.ui.dialog.error({ message: totalMes, messageId: totalMesCode }).then(function () {
                                });
                            }
                            return;
                        }
                        getCurrentWindow().done(function (self) {
                            var $dialog = $(element).data("dialogX");
                            if (show == true) {
                                // Create Error Table
                                var $errorboard = $("<div id='error-board'></div>");
                                var $errortable = $("<table></table>");
                                // Header
                                var $header = $("<thead></thead>");
                                var $headerRow_1 = $("<tr></tr>");
                                $headerRow_1.append("<th style='display:none;'></th>");
                                headers.forEach(function (header, index) {
                                    if (ko.unwrap(header.visible)) {
                                        var $headerElement = $("<th>" + ko.unwrap(header.text) + "</th>").width(ko.unwrap(header.width));
                                        $headerRow_1.append($headerElement);
                                    }
                                });
                                $header.append($headerRow_1);
                                $errortable.append($header);
                                // Body
                                var $body = $("<tbody></tbody>");
                                errors.forEach(function (error, index) {
                                    // Row
                                    var $row = $("<tr></tr>");
                                    $row.click(function () {
                                        error.$control.eq(0).exposeOnTabPanel().focus();
                                        var $dialogContainer = $dialog.closest("[role='dialog']");
                                        var $self = nts.uk.ui.windows.getSelf();
                                        var additonalTop = 0;
                                        var additonalLeft = 0;
                                        if (!$self.isRoot) {
                                            var $currentDialog = $self.$dialog.closest("[role='dialog']");
                                            var $currentHeadBar = $currentDialog.find(".ui-dialog-titlebar");
                                            var currentDialogOffset = $currentDialog.offset();
                                            additonalTop = currentDialogOffset.top + $currentHeadBar.height();
                                            additonalLeft = currentDialogOffset.left;
                                        }
                                        var currentControlOffset = error.$control.offset();
                                        //change for compatibility with IE
                                        var doc = document.documentElement;
                                        var scrollX = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
                                        var scrollY = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
                                        var top = additonalTop + currentControlOffset.top + error.$control.outerHeight() - scrollY;
                                        //                    let top = additonalTop + currentControlOffset.top  + element.outerHeight() - window.scrollY;
                                        var left = additonalLeft + currentControlOffset.left - scrollX;
                                        //                    let left = additonalLeft + currentControlOffset.left - window.scrollX;
                                        var $errorDialogOffset = $dialogContainer.offset();
                                        var maxLeft = $errorDialogOffset.left + $dialogContainer.width();
                                        var maxTop = $errorDialogOffset.top + $dialogContainer.height();
                                        if ($errorDialogOffset.top < top && top < maxTop) {
                                            $dialogContainer.css("top", top + 15);
                                        }
                                        if (($errorDialogOffset.left < left && left < maxLeft)) {
                                            $dialogContainer.css("left", left);
                                        }
                                    });
                                    $row.append("<td style='display:none;'>" + (index + 1) + "</td>");
                                    headers.forEach(function (header) {
                                        if (ko.unwrap(header.visible))
                                            if (error.hasOwnProperty(ko.unwrap(header.name))) {
                                                // TD
                                                var $column = $("<td>" + error[ko.unwrap(header.name)] + "</td>");
                                                $row.append($column);
                                            }
                                    });
                                    $body.append($row);
                                });
                                $errortable.append($body);
                                $errorboard.append($errortable);
                                // Errors over maxrows message
                                var $message = $("<div></div>");
                                $dialog.html("");
                                $dialog.append($errorboard).append($message);
                                var $container = $dialog.closest("[role='dialog']");
                                $container
                                    .show()
                                    // hide "x" button
                                    .find(".ui-dialog-titlebar-close").hide();
                                //$dialog.dialog("open");
                                var $dialogs = window.top.$('body>[role="dialog"]').toArray();
                                var zIndex = _.chain($dialogs)
                                    .map(function (el) { return document.defaultView.getComputedStyle(el, null).getPropertyValue('z-index'); })
                                    .filter(function (index) { return index.match(/^\d+$/); })
                                    .map(function (index) { return parseInt(index); })
                                    .orderBy(function (index) { return index; })
                                    .last();
                                // fixbug show error dialog after main modal
                                if (!$container.data('ziv')) {
                                    var zIdx = zIndex.value() || 10000001;
                                    $container.data('ziv', zIdx).css('z-index', zIdx);
                                }
                            }
                            else {
                                $dialog.closest("[role='dialog']").hide();
                                //$dialog.dialog("close");
                            }
                        });
                    };
                    return NtsErrorDialogBindingHandler;
                }());
                ko.bindingHandlers['ntsDialog'] = new NtsDialogBindingHandler();
                ko.bindingHandlers['ntsErrorDialog'] = new NtsErrorDialogBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                var validation = nts.uk.ui.validation;
                var disable;
                (function (disable) {
                    var DATA_API_SET_VALUE = "api-set-value-for-disable";
                    var DATA_DEFAULT_VALUE = "default-value-for-disable";
                    function saveApiSetValue($input, value) {
                        $input.data(DATA_API_SET_VALUE, value);
                    }
                    disable.saveApiSetValue = saveApiSetValue;
                    function saveDefaultValue($input, value) {
                        $input.data(DATA_DEFAULT_VALUE, value);
                    }
                    disable.saveDefaultValue = saveDefaultValue;
                    function on($input) {
                        $input.attr('disabled', 'disabled') /*.ntsError("clear");
                        return $input.data(DATA_DEFAULT_VALUE) !== undefined
                            ? $input.data(DATA_DEFAULT_VALUE)
                            : $input.data(DATA_API_SET_VALUE)*/;
                    }
                    disable.on = on;
                    function off($input) {
                        $input.removeAttr('disabled');
                    }
                    disable.off = off;
                })(disable || (disable = {}));
                var valueChanging;
                (function (valueChanging) {
                    var DATA_CHANGED_BY_USER = "changed-by-user";
                    var DATA_CURRENT_VALUE = "current-value";
                    function markUserChange($input) {
                        $input.data(DATA_CHANGED_BY_USER, true);
                    }
                    valueChanging.markUserChange = markUserChange;
                    function unmarkUserChange($input) {
                        $input.data(DATA_CHANGED_BY_USER, false);
                    }
                    valueChanging.unmarkUserChange = unmarkUserChange;
                    function setNewValue($input, value) {
                        $input.data(DATA_CURRENT_VALUE, value);
                    }
                    valueChanging.setNewValue = setNewValue;
                    function isChangingValueByApi($input, newValue) {
                        return !isUserChange($input) && isChangedValue($input, newValue);
                    }
                    valueChanging.isChangingValueByApi = isChangingValueByApi;
                    function isUserChange($input) {
                        return $input.data(DATA_CHANGED_BY_USER) === true;
                    }
                    function isChangedValue($input, newValue) {
                        return $input.data(DATA_CURRENT_VALUE) !== newValue;
                    }
                })(valueChanging || (valueChanging = {}));
                /**
                 * BaseEditor Processor
                 */
                var EditorProcessor = /** @class */ (function () {
                    function EditorProcessor() {
                    }
                    EditorProcessor.prototype.init = function ($input, data) {
                        var _this = this;
                        var DATA_CHANGE_EVENT_STATUS = "change-event-status";
                        var self = this;
                        var value = data.value;
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var constraint = validation.getConstraint(constraintName);
                        var immediate = false;
                        var readonly = (data.readonly !== undefined) ? ko.unwrap(data.readonly) : false;
                        var valueUpdate = (immediate === true) ? 'input' : 'change';
                        var option = (data.option !== undefined) ? ko.mapping.toJS(data.option) : {};
                        this.editorOption = $.extend(this.getDefaultOption(), option);
                        var setValOnRequiredError = (data.setValOnRequiredError !== undefined) ? ko.unwrap(data.setValOnRequiredError) : false;
                        $input.data("setValOnRequiredError", setValOnRequiredError);
                        var characterWidth = 9;
                        if (constraint && constraint.maxLength && !$input.is("textarea")) {
                            var autoWidth = constraint.maxLength * characterWidth;
                            $input.width(autoWidth);
                        }
                        $input.addClass('nts-editor nts-input');
                        $input.wrap("<span class= 'nts-editor-wrapped ntsControl'/>");
                        setEnterHandlerIfRequired($input, data);
                        $input.on("keydown", function (e) {
                            // prevent backspace in readonly editor
                            if (ko.unwrap(data.readonly) && e.keyCode === 8) {
                                e.preventDefault();
                            }
                        });
                        $input.on(valueUpdate, function (e) {
                            if ($input.data(DATA_CHANGE_EVENT_STATUS) === "doing") {
                                return;
                            }
                            $input.data(DATA_CHANGE_EVENT_STATUS, "doing");
                            _.defer(function () { return $input.data(DATA_CHANGE_EVENT_STATUS, "done"); });
                            var newText = $input.val();
                            var validator = _this.getValidator(data);
                            var result = validator.validate(newText);
                            if (result.isValid) {
                                $input.ntsError('clear');
                                valueChanging.markUserChange($input);
                                value(result.parsedValue);
                                // why is valueHasMutated needed?? (kitahira)
                                valueChanging.markUserChange($input);
                                value.valueHasMutated();
                            }
                            else {
                                var error = $input.ntsError('getError');
                                if (nts.uk.util.isNullOrEmpty(error) || error.messageText !== result.errorMessage) {
                                    $input.ntsError('clear');
                                    $input.ntsError('set', result.errorMessage, result.errorCode, false);
                                }
                                if ($input.data("setValOnRequiredError") && nts.uk.util.isNullOrEmpty(newText)) {
                                    valueChanging.markUserChange($input);
                                }
                                value(newText);
                                // valueChanging.markUserChange($input);
                                // value(newText);
                            }
                        });
                        // Format on blur
                        $input.blur(function () {
                            if (!$input.attr('readonly')) {
                                var formatter = self.getFormatter(data);
                                var newText = $input.val();
                                var validator = self.getValidator(data);
                                var result = validator.validate(newText);
                                if (result.isValid) {
                                    $input.ntsError('clearKibanError');
                                    $input.val(formatter.format(result.parsedValue));
                                    /**
                                     On window-8.1 with IE browser, the 'change' event is not called automatically.
                                     So, we trigger it manually when the 'value' isn't equals the result.parsedValue.
                                     See more information at 106538
                                    */
                                    if (value() != result.parsedValue) {
                                        $input.trigger(valueUpdate);
                                    }
                                }
                                else {
                                    var error = $input.ntsError('getError');
                                    if (nts.uk.util.isNullOrEmpty(error) || error.messageText !== result.errorMessage) {
                                        $input.ntsError('clearKibanError');
                                        $input.ntsError('set', result.errorMessage, result.errorCode, false);
                                    }
                                    // valueChanging.markUserChange($input);
                                    // value(newText);
                                }
                            }
                        });
                        $input.on('validate', (function (e) {
                            var newText = $input.val();
                            var validator = self.getValidator(data);
                            var result = validator.validate(newText);
                            $input.ntsError('clearKibanError');
                            if (!result.isValid) {
                                $input.ntsError('set', result.errorMessage, result.errorCode, false);
                            }
                        }));
                        var tabIndex = $input.attr("tabindex");
                        $input.data("tabindex", tabIndex);
                    };
                    EditorProcessor.prototype.update = function ($input, data) {
                        var value = ko.unwrap(data.value);
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var readonly = (data.readonly !== undefined) ? ko.unwrap(data.readonly) : false;
                        var option = (data.option !== undefined) ? ko.mapping.toJS(data.option) : {};
                        this.editorOption = $.extend(this.getDefaultOption(), option);
                        var placeholder = this.editorOption.placeholder;
                        var textalign = this.editorOption.textalign;
                        var width = this.editorOption.width;
                        var setValOnRequiredError = (data.setValOnRequiredError !== undefined) ? ko.unwrap(data.setValOnRequiredError) : false;
                        var constraint = !_.isNil(data.constraint) ? ko.unwrap(data.constraint) : undefined;
                        $input.data("setValOnRequiredError", setValOnRequiredError);
                        disable.saveDefaultValue($input, option.defaultValue);
                        if (valueChanging.isChangingValueByApi($input, value)) {
                            disable.saveApiSetValue($input, value);
                        }
                        valueChanging.setNewValue($input, value);
                        valueChanging.unmarkUserChange($input);
                        // Properties
                        if (enable !== false) {
                            disable.off($input);
                        }
                        else {
                            disable.on($input);
                            //data.value(value);
                        }
                        if (readonly === false) {
                            $input.removeAttr('readonly');
                            if ($input.data("tabindex") !== undefined) {
                                $input.attr("tabindex", $input.data("tabindex"));
                            }
                            else {
                                $input.removeAttr("tabindex");
                            }
                        }
                        else {
                            $input.attr('readonly', 'readonly');
                            $input.attr("tabindex", -1);
                        }
                        $input.attr('placeholder', placeholder);
                        $input.css('text-align', textalign);
                        if (width.trim() != "")
                            $input.width(width);
                        if (constraint !== "StampNumber" && constraint !== "EmployeeCode") {
                            // Format value
                            var formatted = $input.ntsError('hasError') ? value : this.getFormatter(data).format(value);
                            $input.val(formatted);
                        }
                        else {
                            $input.val(value);
                        }
                        //            $input.trigger("validate");
                    };
                    EditorProcessor.prototype.getDefaultOption = function () {
                        return {};
                    };
                    EditorProcessor.prototype.getFormatter = function (data) {
                        return new uk.format.NoFormatter();
                    };
                    EditorProcessor.prototype.getValidator = function (data) {
                        return new validation.NoValidator();
                    };
                    return EditorProcessor;
                }());
                /**
                 * TextEditor Processor
                 */
                var TextEditorProcessor = /** @class */ (function (_super) {
                    __extends(TextEditorProcessor, _super);
                    function TextEditorProcessor() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    TextEditorProcessor.prototype.init = function ($input, data) {
                        var self = this;
                        var value = data.value;
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var setWidthByConstraint = (data.setWidthByConstraint !== undefined) ? ko.unwrap(data.setWidthByConstraint) : false;
                        var readonly = (data.readonly !== undefined) ? ko.unwrap(data.readonly) : false;
                        var setValOnRequiredError = (data.setValOnRequiredError !== undefined) ? ko.unwrap(data.setValOnRequiredError) : false;
                        var constraint = !_.isNil(data.constraint) ? ko.unwrap(data.constraint) : undefined;
                        $input.data("setValOnRequiredError", setValOnRequiredError);
                        self.setWidthByConstraint(constraintName, $input);
                        $input.addClass('nts-editor nts-input');
                        $input.wrap("<span class= 'nts-editor-wrapped ntsControl'/>");
                        setEnterHandlerIfRequired($input, data);
                        $input.on("keydown", function (e) {
                            // prevent backspace in readonly editor
                            if (ko.unwrap(data.readonly) && e.keyCode === 8) {
                                e.preventDefault();
                            }
                        });
                        $input.on("keyup", function (e) {
                            if ($input.attr('readonly')) {
                                return;
                            }
                            var code = e.keyCode || e.which;
                            if (_.includes(uk.KeyCodes.NotValueKeys, code)) {
                                return;
                            }
                            var validator = self.getValidator(data);
                            var newText = $input.val();
                            var result = validator.validate(newText, { isCheckExpression: true });
                            $input.ntsError('clear');
                            if (!result.isValid) {
                                $input.ntsError('set', result.errorMessage, result.errorCode, false);
                            }
                        });
                        // Format on blur
                        $input.blur(function () {
                            if (!$input.attr('readonly')) {
                                var validator = self.getValidator(data);
                                var newText = $input.val();
                                var result = validator.validate(newText, { isCheckExpression: true });
                                if (!result.isValid) {
                                    var oldError = $input.ntsError('getError');
                                    if (nts.uk.util.isNullOrEmpty(oldError)) {
                                        $input.ntsError('set', result.errorMessage, result.errorCode, false);
                                    }
                                    else {
                                        var inListError = _.find(oldError, function (o) { return o.errorCode === result.errorCode; });
                                        if (nts.uk.util.isNullOrUndefined(inListError)) {
                                            $input.ntsError('set', result.errorMessage, result.errorCode, false);
                                        }
                                    }
                                }
                                else {
                                    $input.ntsError('clearKibanError');
                                    if (constraint === "StampNumber" || constraint === "EmployeeCode") {
                                        var formatter = self.getFormatter(data);
                                        var formatted = formatter.format(result.parsedValue);
                                        //$input.val(formatted);
                                        value(formatted);
                                    }
                                }
                            }
                        });
                        $input.on("change", function (e) {
                            if (!$input.attr('readonly')) {
                                var validator = self.getValidator(data);
                                var newText = $input.val();
                                var result = validator.validate(newText, { isCheckExpression: true });
                                //$input.ntsError('clear');
                                if (result.isValid) {
                                    $input.ntsError('clear');
                                    if (value() === result.parsedValue) {
                                        $input.val(result.parsedValue);
                                    }
                                    else {
                                        valueChanging.markUserChange($input);
                                        value(result.parsedValue);
                                    }
                                }
                                else {
                                    var oldError = $input.ntsError('getError');
                                    if (nts.uk.util.isNullOrEmpty(oldError)) {
                                        $input.ntsError('set', result.errorMessage, result.errorCode, false);
                                    }
                                    else {
                                        var inListError = _.find(oldError, function (o) { return o.errorCode === result.errorCode; });
                                        if (nts.uk.util.isNullOrUndefined(inListError)) {
                                            $input.ntsError('set', result.errorMessage, result.errorCode, false);
                                        }
                                    }
                                    if ($input.data("setValOnRequiredError") && nts.uk.util.isNullOrEmpty(newText)) {
                                        valueChanging.markUserChange($input);
                                    }
                                    value(newText);
                                    // valueChanging.markUserChange($input);
                                    // value(newText);
                                }
                            }
                        });
                        $input.on('validate', (function (e) {
                            var validator = self.getValidator(data);
                            var newText = $input.val();
                            var result = validator.validate(newText);
                            $input.ntsError('clearKibanError');
                            if (!result.isValid) {
                                $input.ntsError('set', result.errorMessage, result.errorCode, false);
                            }
                        }));
                        new nts.uk.util.value.DefaultValue().onReset($input, data.value);
                        var tabIndex = $input.attr("tabindex");
                        $input.data("tabindex", tabIndex);
                        $input.tooltipWhenReadonly();
                    };
                    TextEditorProcessor.prototype.update = function ($input, data) {
                        var self = this;
                        self.$input = $input;
                        _super.prototype.update.call(this, $input, data);
                        var textmode = this.editorOption.textmode;
                        $input.attr('type', textmode);
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var setWidthByConstraint = (data.setWidthByConstraint !== undefined) ? ko.unwrap(data.setWidthByConstraint) : false;
                        if (setWidthByConstraint) {
                            self.setWidthByConstraint(constraintName, $input);
                        }
                        // このif文は何のため？ ユーザが入力操作をしたときしかtrueにならないか？
                        if (!$input.ntsError('hasError') && data.value() !== $input.val()) {
                            valueChanging.markUserChange($input);
                            data.value($input.val());
                        }
                    };
                    TextEditorProcessor.prototype.getDefaultOption = function () {
                        return new nts.uk.ui.option.TextEditorOption();
                    };
                    TextEditorProcessor.prototype.getFormatter = function (data) {
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var constraint = validation.getConstraint(constraintName);
                        this.editorOption = this.editorOption || {};
                        if (constraint && constraint.formatOption) {
                            $.extend(this.editorOption, constraint.formatOption);
                        }
                        this.editorOption.autofill = (constraint && constraint.isZeroPadded) ? constraint.isZeroPadded : this.editorOption.autofill;
                        return new uk.text.StringFormatter({ constraintName: constraintName, constraint: constraint, editorOption: this.editorOption });
                    };
                    TextEditorProcessor.prototype.getValidator = function (data) {
                        var name = data.name !== undefined ? ko.unwrap(data.name) : "";
                        name = nts.uk.resource.getControlName(name);
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        if (data.constraint == "WorkplaceCode") {
                            return new validation.WorkplaceCodeValidator(name, constraintName, { required: required });
                        }
                        if (data.constraint == "DepartmentCode") {
                            return new validation.DepartmentCodeValidator(name, constraintName, { required: required });
                        }
                        if (data.constraint == "PostCode") {
                            return new validation.PostCodeValidator(name, constraintName, { required: required });
                        }
                        if (data.constraint == "StampNumber") {
                            return new validation.PunchCardNoValidator(name, constraintName, { required: required });
                        }
                        if (data.constraint === "EmployeeCode") {
                            return new validation.EmployeeCodeValidator(name, { required: required });
                        }
                        return new validation.StringValidator(name, constraintName, { required: required });
                    };
                    TextEditorProcessor.prototype.setWidthByConstraint = function (constraintName, $input) {
                        var self = this;
                        var characterWidth = 9;
                        var constraint = validation.getConstraint(constraintName);
                        if (constraint && constraint.maxLength && !$input.is("textarea")) {
                            var autoWidth = constraint.maxLength * characterWidth;
                            $input.width(autoWidth);
                        }
                    };
                    return TextEditorProcessor;
                }(EditorProcessor));
                /**
                 * MultilineEditor Processor
                 */
                var MultilineEditorProcessor = /** @class */ (function (_super) {
                    __extends(MultilineEditorProcessor, _super);
                    function MultilineEditorProcessor() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MultilineEditorProcessor.prototype.init = function ($input, data) {
                        _super.prototype.init.call(this, $input, data);
                        var self = this, immediateValidate = !_.isNil(data.immediateValidate) ? ko.unwrap(data.immediateValidate) : false;
                        if (immediateValidate) {
                            $input.on("keyup", function () {
                                var formatter = self.getFormatter(data);
                                var text = $input.val();
                                var validator = self.getValidator(data);
                                var result = validator.validate(text);
                                if (result.isValid) {
                                    $input.ntsError('clearKibanError');
                                    $input.val(formatter.format(result.parsedValue));
                                }
                                else {
                                    var error = $input.ntsError('getError');
                                    if (nts.uk.util.isNullOrEmpty(error) || error.messageText !== result.errorMessage) {
                                        $input.ntsError('clearKibanError');
                                        $input.ntsError('set', result.errorMessage, result.errorCode, false);
                                    }
                                }
                            });
                        }
                    };
                    MultilineEditorProcessor.prototype.update = function ($input, data) {
                        _super.prototype.update.call(this, $input, data);
                        var resizeable = this.editorOption.resizeable;
                        $input.css('resize', (resizeable) ? "both" : "none");
                    };
                    MultilineEditorProcessor.prototype.getDefaultOption = function () {
                        return new ui.option.MultilineEditorOption();
                    };
                    MultilineEditorProcessor.prototype.getFormatter = function (data) {
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var constraint = validation.getConstraint(constraintName);
                        return new uk.text.StringFormatter({ constraintName: constraintName, constraint: constraint, editorOption: this.editorOption });
                    };
                    MultilineEditorProcessor.prototype.getValidator = function (data) {
                        var name = data.name !== undefined ? ko.unwrap(data.name) : "";
                        name = nts.uk.resource.getControlName(name);
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        return new validation.StringValidator(name, constraintName, { required: required });
                    };
                    return MultilineEditorProcessor;
                }(EditorProcessor));
                /**
                 * NumberEditor Processor
                 */
                var NumberEditorProcessor = /** @class */ (function (_super) {
                    __extends(NumberEditorProcessor, _super);
                    function NumberEditorProcessor() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    NumberEditorProcessor.prototype.init = function ($input, data) {
                        _super.prototype.init.call(this, $input, data);
                        $input.on('focus', function () {
                            if (!$input.attr('readonly')) {
                                $input.val(data.value());
                                // If focusing is caused by Tab key, select text
                                // this code is needed because removing separator deselects.
                                if (ui.keyboardStream.wasKeyDown(uk.KeyCodes.Tab, 500)) {
                                    $input.select();
                                }
                            }
                        });
                        var _rg = '__rg__', _kc = '__kcode_', _val = '__value_';
                        $input.attr('type', 'text');
                        $input.attr('autocomplete', 'off');
                        $input.on('keydown', function (evt) {
                            var target = evt.target, start = target.selectionStart, end = target.selectionEnd;
                            $input.data(_kc, evt);
                            $input.data(_rg, { start: start, end: end });
                            $input.data(_val, target.value);
                        });
                        $input.on('paste', function (evt) {
                            var rd = ko.toJS(data), constraint = rd.constraint, str = evt.originalEvent.clipboardData.getData('text');
                            $input.select();
                            setTimeout(function () {
                                if (str.match(/^(-?)(\d+\.\d+|\d+)$/)) {
                                    if (constraint) {
                                        var numb = Number(str), primitive = window['__viewContext'].primitiveValueConstraints[constraint];
                                        if (primitive) {
                                            var min = primitive.min, max = primitive.max, dlen = primitive.mantissaMaxLength || 0;
                                            if (numb >= min && numb <= max) {
                                                var m = str.match(/\.\d*$/);
                                                if (!m) {
                                                    $input.val(str);
                                                }
                                                else {
                                                    if (m[0] === '.5' && primitive.valueType === 'HalfInt') {
                                                        $input.val(str);
                                                    }
                                                    else if (m[0].length <= dlen + 1) {
                                                        $input.val(str);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        var dl = (rd.option || {}).decimallength;
                                        if (dl) {
                                            var m = str.match(/\.\d*$/);
                                            if (m && m[0].length <= dl + 1) {
                                                $input.val(str);
                                            }
                                        }
                                        else {
                                            if (!str.match(/\.\d*$/)) {
                                                $input.val(str);
                                            }
                                        }
                                    }
                                }
                            }, 100);
                            evt.preventDefault();
                        });
                        $input.on('input', function (evt) {
                            var rd = ko.toJS(data), constraint = rd.constraint, orgi = evt.originalEvent, targ = evt.target, srg = $input.data(_rg), devt = $input.data(_kc), dorgi = devt.originalEvent, ival = evt.target.value, dval = $input.data(_val);
                            ival = ival
                                .replace(/。/, '.')
                                .replace(/ー/, '-')
                                .replace(/０/, '0')
                                .replace(/１/, '1')
                                .replace(/２/, '2')
                                .replace(/３/, '3')
                                .replace(/４/, '4')
                                .replace(/５/, '5')
                                .replace(/６/, '6')
                                .replace(/７/, '7')
                                .replace(/８/, '8')
                                .replace(/９/, '9')
                                .replace(/./g, function (k) {
                                if (['.', '-', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].indexOf(k) == -1) {
                                    return '';
                                }
                                return k;
                            });
                            if (ival.match(/^0+$/)) {
                                ival = '0';
                            }
                            // prevent multi . character
                            if (ival.indexOf('.') != ival.lastIndexOf('.')) {
                                var first_1 = true;
                                ival = ival.replace(/\./g, function (k) {
                                    if (!first_1) {
                                        return '';
                                    }
                                    first_1 = false;
                                    return k;
                                });
                            }
                            // prevent multi - character
                            if (ival.indexOf('-') != ival.lastIndexOf('-') || ival.indexOf('-') > 0) {
                                ival = ival.replace(/\-/g, function (k, i) {
                                    if (!!i) {
                                        return '';
                                    }
                                    return k;
                                });
                            }
                            // clear value of input
                            $input.val('');
                            if (ival) {
                                if (ival.match(/^\.+$/)) {
                                    ival = '0.';
                                }
                                if (dval) {
                                    if (ival.match(/^(-?)(\d+\.\d+|\d+)$/)) {
                                        ival = ival;
                                    }
                                    else if (ival.match(/^\-+$/)) {
                                        ival = '-';
                                    }
                                    else if (ival.match(/^\.+$/)) {
                                        ival = '0.';
                                    }
                                    else if (ival.match(/^\-+(0*)\.+$/)) {
                                        ival = '-0.';
                                    }
                                    else {
                                        ival = ival;
                                    }
                                }
                                else if (ival.match(/(-?)(\d*)(\.*)(\d*)/)) {
                                    ival = ival;
                                }
                                if (constraint) {
                                    var primitive = window['__viewContext'].primitiveValueConstraints[constraint];
                                    if (primitive) { // if primitive is avaiable
                                        var min = primitive.min, max = primitive.max, maxL = primitive.maxLength, dlen = primitive.mantissaMaxLength || 0;
                                        switch (primitive.valueType) {
                                            case 'String': // check length
                                                if (maxL && ival.length > maxL) {
                                                    ival = dval;
                                                }
                                                if (ival.match(/^0\d+$/)) {
                                                    ival = ival.replace(/^0+/, '0');
                                                    ival = Number(ival).toString();
                                                }
                                                ival = ival.replace(/./g, function (k) {
                                                    if (k == '.' || k == '-') {
                                                        return '';
                                                    }
                                                    return k;
                                                });
                                                $input.val(ival);
                                                break;
                                            default:
                                            case 'Decimal':
                                                var dcval = Number(ival), dmatch = ival.match(/\.+\d*$/);
                                                if ((min >= 0 ? true : min <= dcval) && dcval <= max && (dmatch ? dmatch[0].length <= dlen + 1 : true)) {
                                                    if (ival.match(/\.$/)) {
                                                        if (dcval == max || dlen == 0) {
                                                            ival = ival.replace(/\./g, '');
                                                        }
                                                    }
                                                    if (ival.match(/^0\d+$/)) {
                                                        ival = ival.replace(/^0+/, '0');
                                                        ival = Number(ival).toString();
                                                    }
                                                    if (min >= 0) {
                                                        ival = ival.replace(/\-/g, '');
                                                        if (min >= 1) {
                                                            ival = ival
                                                                .replace(/^0+/, '')
                                                                .replace(/^\.+/, '');
                                                        }
                                                    }
                                                    else if (min == dval) {
                                                        ival = ival.replace(/\.+$/, '');
                                                    }
                                                    $input.val(ival);
                                                }
                                                else if (min < 0 && ival == '-') {
                                                    $input.val(ival);
                                                }
                                                else {
                                                    if ([8, 46].indexOf(dorgi.keyCode) == -1) {
                                                        ival = dval;
                                                        $input.val(dval);
                                                    }
                                                    else { // delete event
                                                        if (ival.match(/^0\d+$/)) {
                                                            ival = ival.replace(/^0+/, '0');
                                                            ival = Number(ival).toString();
                                                        }
                                                        $input.val(ival);
                                                    }
                                                }
                                                break;
                                            case 'HalfInt':
                                                var hival = Number(ival), himatch = ival.match(/\.+\d*$/);
                                                if ((min >= 0 ? true : min <= hival) && hival <= max && (himatch ? (himatch[0] === '.5' || himatch[0] === '.') : true)) {
                                                    if (himatch && himatch[0] == '.') {
                                                        if (hival == max) {
                                                            ival = ival.replace(/\./g, '');
                                                        }
                                                    }
                                                    if (ival.match(/^0\d+$/)) {
                                                        ival = ival.replace(/^0+/, '0');
                                                        ival = Number(ival).toString();
                                                    }
                                                    if (min >= 0) {
                                                        ival = ival.replace(/\-/g, '');
                                                        if (min >= 1) {
                                                            ival = ival
                                                                .replace(/^0+/, '')
                                                                .replace(/^\.+/, '');
                                                        }
                                                    }
                                                    else if (min == hival) {
                                                        ival = ival.replace(/\.+$/, '');
                                                    }
                                                    $input.val(ival);
                                                }
                                                else if (min < 0 && ival == '-') {
                                                    $input.val(ival);
                                                }
                                                else {
                                                    if ([8, 46].indexOf(dorgi.keyCode) == -1) {
                                                        ival = dval;
                                                        $input.val(dval);
                                                    }
                                                    else { // delete event
                                                        if (ival.match(/^0\d+$/)) {
                                                            ival = ival.replace(/^0+/, '0');
                                                            ival = Number(ival).toString();
                                                        }
                                                        $input.val(ival);
                                                    }
                                                }
                                                break;
                                            case 'Integer':
                                                var value = Number(ival);
                                                if ((min >= 0 ? true : min <= value) && value <= max && !ival.match(/\.+\d*$/)) {
                                                    if (ival.match(/^0\d+$/)) {
                                                        ival = ival.replace(/^0+/, '0');
                                                        ival = Number(ival).toString();
                                                    }
                                                    if (min >= 0) {
                                                        ival = ival.replace(/\-/g, '');
                                                        if (min > 0) {
                                                            ival = ival.replace(/^0+/, '');
                                                        }
                                                    }
                                                    $input.val(ival);
                                                }
                                                else if (min < 0 && ival == '-') {
                                                    $input.val(ival);
                                                }
                                                else {
                                                    if ([8, 46].indexOf(dorgi.keyCode) == -1) {
                                                        ival = dval;
                                                        $input.val(dval);
                                                    }
                                                    else { // delete event
                                                        if (ival.match(/^0\d+$/)) {
                                                            ival = ival.replace(/^0+/, '0');
                                                            ival = Number(ival).toString();
                                                        }
                                                        $input.val(ival);
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                    else {
                                        if (ival.match(/^0\d+$/)) {
                                            ival = ival.replace(/^0+/, '0');
                                            ival = Number(ival).toString();
                                        }
                                        $input.val(ival);
                                    }
                                }
                                else {
                                    // check length & decimal length
                                    var dlen = rd.option.decimallength;
                                    if (dlen) {
                                        var match = ival.match(/\.\d+$/);
                                        if (match && match[0].length > dlen + 1) {
                                            ival = dval;
                                        }
                                    }
                                    if (ival.match(/^0\d+$/)) {
                                        ival = ival.replace(/^0+/, '0');
                                        ival = Number(ival).toString();
                                    }
                                    $input.val(ival);
                                }
                                // set carret position
                                setTimeout(function () {
                                    if (dval === ival) {
                                        if (ival.length == 1) {
                                            targ.selectionStart = 1;
                                            targ.selectionEnd = 1;
                                        }
                                        else {
                                            targ.selectionStart = srg.start;
                                            targ.selectionEnd = srg.end;
                                        }
                                    }
                                    else if (ival.length - dval.length === 1) {
                                        targ.selectionStart = srg.start + 1;
                                        targ.selectionEnd = srg.end + 1;
                                    }
                                    else if (dval.length - ival.length === 1) {
                                        if (dorgi.keyCode === 46) {
                                            targ.selectionStart = srg.start;
                                            targ.selectionEnd = srg.end;
                                        }
                                        else if (dorgi.keyCode == 8) {
                                            targ.selectionStart = srg.start - 1;
                                            targ.selectionEnd = srg.end - 1;
                                        }
                                    }
                                }, 0);
                            }
                        });
                        $input.on('blur', function (evt) {
                            var value = $input.val();
                            if (value.match(/\.$/)) {
                                value = value.replace(/\.$/, '');
                                // fix value if input en with [.]
                                $input
                                    .val(value)
                                    .trigger('blur');
                            }
                        });
                    };
                    NumberEditorProcessor.prototype.update = function ($input, data) {
                        _super.prototype.update.call(this, $input, data);
                        var $parent = $input.parent();
                        var width = this.editorOption.width;
                        var parentTag = $parent.parent().prop("tagName").toLowerCase();
                        if (parentTag === "td" || parentTag === "th" || parentTag === "a" || width === "100%") {
                            $parent.css({ 'width': '100%' });
                        }
                        if (this.editorOption.currencyformat !== undefined && this.editorOption.currencyformat !== null) {
                            $parent.addClass("symbol").addClass(this.editorOption.currencyposition === 'left' ? 'symbol-left' : 'symbol-right');
                            var format = this.editorOption.currencyformat === "JPY" ? "\u00A5" : '$';
                            $parent.attr("data-content", format);
                        }
                        else {
                            if (!nts.uk.util.isNullOrEmpty(this.editorOption.unitID)) {
                                var unit = uk.text.getNumberUnit(this.editorOption.unitID);
                                this.editorOption.symbolChar = unit.unitText;
                                this.editorOption.symbolPosition = unit.position;
                                this.setupUnit($input, width);
                            }
                            else if (!nts.uk.util.isNullOrEmpty(this.editorOption.symbolChar) && !nts.uk.util.isNullOrEmpty(this.editorOption.symbolPosition)) {
                                this.setupUnit($input, width);
                            }
                            // remove currency symbol if number mode
                            //                $parent.removeClass('symbol').removeClass('symbol-left').removeClass('symbol-right');
                        }
                        if (!nts.uk.util.isNullOrEmpty(this.editorOption.defaultValue)
                            && nts.uk.util.isNullOrEmpty(data.value())) {
                            data.value(this.editorOption.defaultValue);
                        }
                    };
                    NumberEditorProcessor.prototype.setupUnit = function ($input, width) {
                        var $parent = $input.parent();
                        var padding = nts.uk.text.countHalf(this.editorOption.symbolChar) * 8;
                        if (padding < 20) {
                            padding = 20;
                        }
                        $parent.addClass("symbol").addClass(this.editorOption.symbolPosition === 'right' ? 'symbol-right' : 'symbol-left');
                        $parent.attr("data-content", this.editorOption.symbolChar);
                        var css = this.editorOption.symbolPosition === 'right' ? { "padding-right": padding + "px" } : { "padding-left": padding + "px" };
                        $input.css(css);
                        if (width.trim() != "") {
                            $input.innerWidth(parseInt(width) - 2); //　-　$input.innerWidth() + $input.width()) - ($input.outerWidth() - $input.innerWidth());
                        }
                    };
                    NumberEditorProcessor.prototype.getDefaultOption = function () {
                        return new nts.uk.ui.option.NumberEditorOption();
                    };
                    NumberEditorProcessor.prototype.getFormatter = function (data) {
                        var option = !nts.uk.util.isNullOrUndefined(data.option) ? ko.toJS(data.option) : {};
                        if (option.numberGroup == true) {
                            this.editorOption.grouplength = 3;
                        }
                        else if (option.numberGroup == false) {
                            this.editorOption.grouplength = 0;
                        }
                        return new uk.text.NumberFormatter({ option: this.editorOption });
                    };
                    NumberEditorProcessor.prototype.getValidator = function (data) {
                        var option = !nts.uk.util.isNullOrUndefined(data.option) ? ko.toJS(data.option) : {}, eOption = $.extend(this.getDefaultOption(), option), required = (data.required !== undefined) ? ko.unwrap(data.required) : false, constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "", name = nts.uk.resource.getControlName(data.name !== undefined ? ko.unwrap(data.name) : "");
                        if (option.numberGroup == true) {
                            option.grouplength = 3;
                        }
                        else if (option.numberGroup == false) {
                            option.grouplength = 0;
                        }
                        // update editor option
                        $.extend(this.editorOption, {
                            required: required,
                            decimallength: Number(eOption.decimallength),
                            grouplength: Number(eOption.grouplength),
                            decimalseperator: eOption.decimalseperator
                        });
                        return new validation.NumberValidator(name, constraintName, this.editorOption);
                    };
                    return NumberEditorProcessor;
                }(EditorProcessor));
                /**
                 * TimeEditor Processor
                 */
                var TimeEditorProcessor = /** @class */ (function (_super) {
                    __extends(TimeEditorProcessor, _super);
                    function TimeEditorProcessor() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    TimeEditorProcessor.prototype.update = function ($input, data) {
                        _super.prototype.update.call(this, $input, data);
                        var option = (data.option !== undefined) ? ko.mapping.toJS(data.option) : this.getDefaultOption();
                        var width = option.width;
                        var $parent = $input.parent();
                        var parentTag = $parent.parent().prop("tagName").toLowerCase();
                        if (parentTag === "td" || parentTag === "th" || parentTag === "a" || width === "100%") {
                            $parent.css({ 'width': '100%' });
                        }
                        if (!nts.uk.util.isNullOrEmpty(data.mode) && (data.mode === "year" || data.mode === "fiscal")) {
                            var symbolText = data.mode === "year" ? nts.uk.text.getNumberUnit("YEARS") : nts.uk.text.getNumberUnit("FIS_YEAR");
                            $parent.addClass("symbol").addClass('symbol-right');
                            $parent.attr("data-content", symbolText.unitText);
                            var css = data.mode === "year" ? { "padding-right": "20px" } : { "padding-right": "35px" };
                            $input.css(css);
                        }
                        if (!nts.uk.util.isNullOrEmpty(option.defaultValue)
                            && nts.uk.util.isNullOrEmpty(data.value())) {
                            data.value(option.defaultValue);
                        }
                    };
                    TimeEditorProcessor.prototype.getDefaultOption = function () {
                        return new nts.uk.ui.option.TimeEditorOption();
                    };
                    TimeEditorProcessor.prototype.getFormatter = function (data) {
                        var option = (data.option !== undefined) ? ko.mapping.toJS(data.option) : this.getDefaultOption();
                        var inputFormat = (data.inputFormat !== undefined) ? ko.unwrap(data.inputFormat) : option.inputFormat;
                        var mode = (data.mode !== undefined) ? ko.unwrap(data.mode) : "";
                        return new uk.text.TimeFormatter({ inputFormat: inputFormat, mode: mode });
                    };
                    TimeEditorProcessor.prototype.getValidator = function (data) {
                        var name = data.name !== undefined ? ko.unwrap(data.name) : "";
                        name = nts.uk.resource.getControlName(name);
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var option = (data.option !== undefined) ? ko.mapping.toJS(data.option) : this.getDefaultOption();
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        var inputFormat = (data.inputFormat !== undefined) ? ko.unwrap(data.inputFormat) : option.inputFormat;
                        var mode = (data.mode !== undefined) ? ko.unwrap(data.mode) : "";
                        var validateOption = $.extend({ required: required, outputFormat: inputFormat, mode: mode }, option);
                        return new validation.TimeValidator(name, constraintName, validateOption);
                    };
                    return TimeEditorProcessor;
                }(EditorProcessor));
                /**
                 * TimeWithDayAttrEditor Processor
                 */
                var TimeWithDayAttrEditorProcessor = /** @class */ (function (_super) {
                    __extends(TimeWithDayAttrEditorProcessor, _super);
                    function TimeWithDayAttrEditorProcessor() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    TimeWithDayAttrEditorProcessor.prototype.init = function ($input, data) {
                        _super.prototype.init.call(this, $input, data);
                        $input.focus(function () {
                            if ($input.attr('readonly')) {
                                return;
                            }
                            if ($input.ntsError('hasError')) {
                                return;
                            }
                            if (!nts.uk.util.isNullOrEmpty(data.value())) {
                                var timeWithDayAttr = uk.time.minutesBased.clock.dayattr.create(data.value());
                                $input.val(timeWithDayAttr.shortText);
                            }
                            else {
                                $input.val("");
                            }
                            // If focusing is caused by Tab key, select text
                            // this code is needed because removing separator deselects.
                            if (ui.keyboardStream.wasKeyDown(uk.KeyCodes.Tab, 500)) {
                                $input.select();
                            }
                        });
                    };
                    TimeWithDayAttrEditorProcessor.prototype.update = function ($input, data) {
                        _super.prototype.update.call(this, $input, data);
                        var value = ko.unwrap(data.value);
                        if ($input.ntsError("hasError") && typeof (value) === "number") {
                            $input.ntsError("clearKibanError");
                            $input.val(this.getFormatter(data).format(value));
                        }
                    };
                    TimeWithDayAttrEditorProcessor.prototype.getDefaultOption = function () {
                        return new nts.uk.ui.option.TimeWithDayAttrEditorOption();
                    };
                    TimeWithDayAttrEditorProcessor.prototype.getFormatter = function (data) {
                        var option = (data.option !== undefined) ? ko.mapping.toJS(data.option) : this.getDefaultOption();
                        return new uk.text.TimeWithDayFormatter(option);
                    };
                    TimeWithDayAttrEditorProcessor.prototype.getValidator = function (data) {
                        //TODO:
                        var name = data.name !== undefined ? ko.unwrap(data.name) : "";
                        name = nts.uk.resource.getControlName(name);
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        return new validation.TimeWithDayValidator(name, constraintName, { required: required });
                    };
                    return TimeWithDayAttrEditorProcessor;
                }(EditorProcessor));
                /**
                 * Base Editor
                 */
                var NtsEditorBindingHandler = /** @class */ (function () {
                    function NtsEditorBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new EditorProcessor().init($(element), valueAccessor());
                    };
                    /**
                     * Update
                     */
                    NtsEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new EditorProcessor().update($(element), valueAccessor());
                    };
                    return NtsEditorBindingHandler;
                }());
                /**
                 * TextEditor
                 */
                var NtsTextEditorBindingHandler = /** @class */ (function (_super) {
                    __extends(NtsTextEditorBindingHandler, _super);
                    function NtsTextEditorBindingHandler() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    /**
                     * Init.
                     */
                    NtsTextEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new TextEditorProcessor().init($(element), valueAccessor());
                    };
                    /**
                     * Update
                     */
                    NtsTextEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new TextEditorProcessor().update($(element), valueAccessor());
                    };
                    return NtsTextEditorBindingHandler;
                }(NtsEditorBindingHandler));
                /**
                 * NumberEditor
                 */
                var NtsNumberEditorBindingHandler = /** @class */ (function () {
                    function NtsNumberEditorBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsNumberEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new NumberEditorProcessor().init($(element), valueAccessor());
                    };
                    /**
                     * Update
                     */
                    NtsNumberEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new NumberEditorProcessor().update($(element), valueAccessor());
                    };
                    return NtsNumberEditorBindingHandler;
                }());
                /**
                 * TimeEditor
                 */
                var NtsTimeEditorBindingHandler = /** @class */ (function () {
                    function NtsTimeEditorBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsTimeEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new TimeEditorProcessor().init($(element), valueAccessor());
                    };
                    /**
                     * Update
                     */
                    NtsTimeEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        new TimeEditorProcessor().update($(element), valueAccessor());
                    };
                    return NtsTimeEditorBindingHandler;
                }());
                /**
                 * MultilineEditor
                 */
                var NtsMultilineEditorBindingHandler = /** @class */ (function (_super) {
                    __extends(NtsMultilineEditorBindingHandler, _super);
                    function NtsMultilineEditorBindingHandler() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    /**
                     * Init.
                     */
                    NtsMultilineEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new MultilineEditorProcessor().init($(element), valueAccessor());
                    };
                    /**
                     * Update
                     */
                    NtsMultilineEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new MultilineEditorProcessor().update($(element), valueAccessor());
                    };
                    return NtsMultilineEditorBindingHandler;
                }(NtsEditorBindingHandler));
                /**
                 * TimeWithDayAttr
                 */
                var NtsTimeWithDayAttrEditorBindingHandler = /** @class */ (function (_super) {
                    __extends(NtsTimeWithDayAttrEditorBindingHandler, _super);
                    function NtsTimeWithDayAttrEditorBindingHandler() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    /**
                     * Init.
                     */
                    NtsTimeWithDayAttrEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new TimeWithDayAttrEditorProcessor().init($(element), valueAccessor());
                    };
                    /**
                     * Update
                     */
                    NtsTimeWithDayAttrEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new TimeWithDayAttrEditorProcessor().update($(element), valueAccessor());
                    };
                    return NtsTimeWithDayAttrEditorBindingHandler;
                }(NtsEditorBindingHandler));
                function setEnterHandlerIfRequired($input, data) {
                    var handlesEnterKey = (typeof data.enterkey === "function");
                    var onEnterKey = handlesEnterKey ? data.enterkey : $.noop;
                    if (handlesEnterKey) {
                        $input.addClass("enterkey")
                            .onkey("down", uk.KeyCodes.Enter, function (e) {
                            if ($(".blockUI").length > 0) {
                                return;
                            }
                            $input.change();
                            onEnterKey.call(ko.dataFor(e.target), e);
                        });
                    }
                }
                ko.bindingHandlers['ntsTextEditor'] = new NtsTextEditorBindingHandler();
                ko.bindingHandlers['ntsNumberEditor'] = new NtsNumberEditorBindingHandler();
                ko.bindingHandlers['ntsTimeEditor'] = new NtsTimeEditorBindingHandler();
                ko.bindingHandlers['ntsMultilineEditor'] = new NtsMultilineEditorBindingHandler();
                ko.bindingHandlers['ntsTimeWithDayEditor'] = new NtsTimeWithDayAttrEditorBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * FormLabel
                 */
                var NtsFormLabelBindingHandler = /** @class */ (function () {
                    function NtsFormLabelBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsFormLabelBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        element.classList.add('form-label');
                    };
                    /**
                     * Update
                     */
                    NtsFormLabelBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var accessor = valueAccessor(), label = element.querySelector('label'), constraint = element.querySelector('i'), isInline = ko.unwrap(accessor.inline) === true, isEnable = ko.unwrap(accessor.enable) !== false, isRequired = ko.unwrap(accessor.required) === true, text = !_.isNil(accessor.text) ? ko.unwrap(accessor.text) : (!!label ? label.innerHTML : element.innerHTML), cssClass = !_.isNil(accessor.cssClass) ? ko.unwrap(accessor.cssClass) : '', primitive = !_.isNil(accessor.constraint) ? ko.unwrap(accessor.constraint) : '';
                        // clear old html
                        element.innerHTML = '';
                        // show enable or disabled style
                        if (!isEnable) {
                            element.classList.add('disabled');
                        }
                        else {
                            element.classList.remove('disabled');
                        }
                        // show inline mode or broken mode
                        if (!!isRequired) {
                            element.classList.add('required');
                        }
                        else {
                            element.classList.remove('required');
                        }
                        if (!!isInline) {
                            element.classList.add('inline');
                            element.classList.remove('broken');
                            // fix height (inline mode)
                            element.style.height = '37px';
                            element.style.lineHeight = '37px';
                        }
                        else {
                            element.classList.remove('inline');
                        }
                        // init new label element
                        if (!label) {
                            label = document.createElement('label');
                        }
                        // init new constraint element
                        if (!constraint) {
                            constraint = document.createElement('i');
                        }
                        // append label tag to control
                        element
                            .appendChild(label);
                        label.innerHTML = text;
                        // add css class to label
                        if (!!cssClass) {
                            label.classList.add(cssClass);
                        }
                        // show primitive constraint if exist
                        if (!!primitive) {
                            if (!isInline) {
                                element.classList.add('broken');
                            }
                            // append constraint
                            element.appendChild(constraint);
                            if (_.isArray(primitive)) {
                                var miss = _.map(primitive, function (p) { return __viewContext.primitiveValueConstraints[p]; });
                                if (miss.indexOf(false) > -1) {
                                    constraint.innerHTML = 'UNKNOW_PRIMITIVE';
                                }
                                else {
                                    constraint.innerHTML = uk.util.getConstraintMes(primitive);
                                }
                            }
                            else {
                                if (!__viewContext.primitiveValueConstraints[primitive]) {
                                    constraint.innerHTML = 'UNKNOW_PRIMITIVE';
                                }
                                else {
                                    constraint.innerHTML = uk.util.getConstraintMes(primitive);
                                }
                            }
                        }
                    };
                    return NtsFormLabelBindingHandler;
                }());
                ko.bindingHandlers['ntsFormLabel'] = new NtsFormLabelBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_8) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * GridList binding handler
                 */
                var NtsGridListBindingHandler = /** @class */ (function () {
                    function NtsGridListBindingHandler() {
                    }
                    NtsGridListBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var HEADER_HEIGHT = 27;
                        var ROW_HEIGHT = 23;
                        var DIFF_NUMBER = 2;
                        var $grid = $(element).addClass("nts-gridlist");
                        var gridId = $grid.attr('id');
                        if (nts.uk.util.isNullOrUndefined(gridId)) {
                            throw new Error('the element NtsGridList must have id attribute.');
                        }
                        var data = valueAccessor();
                        var optionsValue = data.primaryKey !== undefined ? data.primaryKey : data.optionsValue;
                        var options = ko.unwrap(data.dataSource !== undefined ? data.dataSource : data.options);
                        var deleteOptions = ko.unwrap(data.deleteOptions);
                        var observableColumns = _.cloneDeep(ko.unwrap(data.columns));
                        var selectionDisables = ko.unwrap(data.selectionDisables);
                        var showNumbering = ko.unwrap(data.showNumbering) === true ? true : false;
                        var columnResize = ko.unwrap(data.columnResize);
                        var enable = ko.unwrap(data.enable);
                        var value = ko.unwrap(data.value);
                        var rowVirtualization = ko.unwrap(data.rowVirtualization) ? true : false;
                        var virtualization = true;
                        var rows = ko.unwrap(data.rows);
                        $grid.data("init", true);
                        $grid.data("selectionDisables", selectionDisables);
                        $grid.data("initValue", value);
                        if (data.multiple) {
                            ROW_HEIGHT = 24;
                            // Internet Explorer 6-11
                            var _document = document;
                            var isIE = /*@cc_on!@*/ false || !!_document.documentMode;
                            // Edge 20+
                            var _window = window;
                            var isEdge = !isIE && !!_window.StyleMedia;
                            if (isIE || isEdge) {
                                DIFF_NUMBER = -2;
                            }
                        }
                        var features = [];
                        features.push({ name: 'Selection', multipleSelection: data.multiple });
                        if (data.multiple || showNumbering) {
                            features.push({
                                name: 'RowSelectors',
                                enableCheckBoxes: data.multiple,
                                enableRowNumbering: false,
                                rowSelectorColumnWidth: 25
                            });
                        }
                        if (columnResize) {
                            features.push({
                                name: "Resizing"
                            });
                        }
                        var tabIndex = $grid.attr("tabindex");
                        $grid.data("tabindex", nts.uk.util.isNullOrEmpty(tabIndex) ? "0" : tabIndex);
                        $grid.attr("tabindex", "-1");
                        var gridFeatures = ko.unwrap(data.features);
                        var iggridColumns = _.map(observableColumns, function (c) {
                            c["key"] = c["key"] === undefined ? c["prop"] : c["key"];
                            c["dataType"] = 'string';
                            var formatter = c["formatter"];
                            if (c["controlType"] === "switch") {
                                var switchF = _.find(gridFeatures, function (s) {
                                    return s["name"] === "Switch";
                                });
                                if (!uk.util.isNullOrUndefined(switchF)) {
                                    features.push({ name: 'Updating', enableAddRow: false, enableDeleteRow: false, editMode: 'none' });
                                    var switchOptions_1 = ko.unwrap(switchF['options']);
                                    var switchValue_1 = switchF['optionsValue'];
                                    var switchText_1 = switchF['optionsText'];
                                    c["formatter"] = function createButton(val, row) {
                                        var result = $('<div class="ntsControl"/>');
                                        var rVal = nts.uk.util.isNullOrUndefined(formatter) ? val : formatter(val, row);
                                        result.attr("data-value", rVal);
                                        _.forEach(switchOptions_1, function (opt) {
                                            var value = opt[switchValue_1];
                                            var text = opt[switchText_1];
                                            var btn = $('<button class="nts-switch-button" tabindex="-1"/>').text(text);
                                            if ($grid.data("enable") === false) {
                                                btn.attr("disabled", "disabled");
                                            }
                                            btn.attr('data-value', value);
                                            if (rVal == value) {
                                                btn.addClass('selected');
                                            }
                                            btn.appendTo(result);
                                        });
                                        return result[0].outerHTML;
                                    };
                                    $grid.on("click", ".nts-switch-button", function (evt, ui) {
                                        var $element = $(this);
                                        var selectedValue = $element.attr('data-value');
                                        var $tr = $element.closest("tr");
                                        $grid.ntsGridListFeature('switch', 'setValue', $tr.attr("data-id"), c["key"], selectedValue);
                                    });
                                    ROW_HEIGHT = 30;
                                }
                            }
                            else {
                                var formatter_1 = c.formatter;
                                c.formatter = function (val, row) {
                                    if (row) {
                                        setTimeout(function () {
                                            var id = row[optionsValue];
                                            var disables = $grid.data("selectionDisables");
                                            if (!disables)
                                                return;
                                            _.forEach(disables, function (d) {
                                                if (id === d) {
                                                    var $row = $grid.igGrid("rowById", id, false);
                                                    if (!$row.hasClass("row-disable"))
                                                        $row.addClass("row-disable");
                                                    return false;
                                                }
                                            });
                                        }, 0);
                                    }
                                    return nts.uk.util.isNullOrUndefined(formatter_1) ? val : formatter_1(val, row);
                                };
                            }
                            return c;
                        });
                        var isDeleteButton = !uk.util.isNullOrUndefined(deleteOptions) && !uk.util.isNullOrUndefined(deleteOptions.deleteField)
                            && deleteOptions.visible === true;
                        var height = data.height;
                        if (!nts.uk.util.isNullOrEmpty(rows)) {
                            if (isDeleteButton) {
                                ROW_HEIGHT = 30;
                            }
                            height = rows * ROW_HEIGHT + HEADER_HEIGHT - DIFF_NUMBER;
                            var colSettings_1 = [];
                            _.forEach(iggridColumns, function (c) {
                                if (c["hidden"] === undefined || c["hidden"] === false) {
                                    colSettings_1.push({ columnKey: c["key"], allowTooltips: true });
                                    if (nts.uk.util.isNullOrEmpty(c["columnCssClass"])) {
                                        c["columnCssClass"] = "text-limited";
                                    }
                                    else {
                                        c["columnCssClass"] += " text-limited";
                                    }
                                }
                            });
                            features.push({
                                name: "Tooltips",
                                columnSettings: colSettings_1,
                                visibility: "overflow",
                                showDelay: 200,
                                hideDelay: 200
                            });
                            $grid.addClass("row-limited");
                        }
                        $grid.data("height", height);
                        var scrollHeightSet = true;
                        $grid.igGrid({
                            width: data.width,
                            height: height,
                            primaryKey: optionsValue,
                            columns: iggridColumns,
                            virtualization: virtualization,
                            virtualizationMode: 'continuous',
                            rowVirtualization: rowVirtualization,
                            features: features,
                            tabIndex: -1,
                            dataBound: function () {
                                if (window.navigator.userAgent.indexOf("Edge") > -1) {
                                    var scrollContainer_1 = $("#" + $grid.attr("id") + "_scrollContainer");
                                    var height_1 = scrollContainer_1.height();
                                    if (scrollHeightSet) {
                                        scrollContainer_1.height(0);
                                        scrollHeightSet = false;
                                    }
                                    setTimeout(function () {
                                        if (!scrollHeightSet) {
                                            scrollContainer_1.height(height_1);
                                            scrollHeightSet = true;
                                        }
                                    }, 1);
                                }
                            }
                        });
                        if (data.itemDraggable) {
                            new SwapHandler().setModel(new GridSwapList($grid, optionsValue)).enableDragDrop(data.dataSource);
                        }
                        if (isDeleteButton) {
                            var sources = (data.dataSource !== undefined ? data.dataSource : data.options);
                            $grid.ntsGridList("setupDeleteButton", {
                                deleteField: deleteOptions.deleteField,
                                sourceTarget: sources
                            });
                        }
                        $grid.ntsGridList('setupSelecting');
                        if (data.multiple) {
                            $grid.bind('iggridrowselectorscheckboxstatechanging', function (eventObject, data) {
                                if (String($grid.data("enable")) === "false")
                                    return false;
                                var disables = $grid.data("selectionDisables");
                                if (disables && !uk.util.isNullOrUndefined(_.find(disables, function (d) { return data.rowKey === d; }))) {
                                    return false;
                                }
                                return true;
                            });
                        }
                        $grid.bind('iggridselectionrowselectionchanging', function (eventObject, ui) {
                            if (String($grid.data("enable")) === "false")
                                return false;
                            var disables = $grid.data("selectionDisables");
                            if (disables && uk.util.isNullOrUndefined(ui.startIndex)
                                && !uk.util.isNullOrUndefined(_.find(disables, function (d) { return ui.row.id === d; }))) {
                                return false;
                            }
                            if (disables && uk.util.isNullOrUndefined(ui.startIndex)
                                && uk.util.isNullOrUndefined(ui.row.id)) {
                                setTimeout(function () {
                                    _.forEach(_.intersection(disables, value), function (iv) {
                                        $grid.igGridSelection("selectRowById", iv);
                                    });
                                    $grid.trigger("selectionchanged", [true]);
                                }, 0);
                            }
                            return true;
                        });
                        var $oselect, $iselect;
                        var checkAll = function () {
                            if ($oselect && $iselect && $oselect.attr("data-chk") === "off") {
                                $oselect.attr("data-chk", "on");
                                $iselect.removeClass("ui-igcheckbox-normal-off");
                                $iselect.addClass("ui-igcheckbox-normal-on");
                            }
                        };
                        $grid.bind('selectionchanged', function (event, isUserAction) {
                            if (isUserAction) {
                                $grid.data('user-action', true);
                            }
                            $grid.data("ui-changed", true);
                            if (data.multiple) {
                                var selected_1 = $grid.ntsGridList('getSelected');
                                var disables_1 = $grid.data("selectionDisables");
                                var disableIds_1 = [];
                                if (disables_1) {
                                    _.forEach(selected_1, function (s, i) {
                                        _.forEach(disables_1, function (d) {
                                            if (d === s.id && uk.util.isNullOrUndefined(_.find(value, function (iv) { return iv === d; }))) {
                                                $grid.igGridSelection("deselectRowById", d);
                                                disableIds_1.push(i);
                                                return false;
                                            }
                                        });
                                    });
                                    disableIds_1.sort(function (i1, i2) { return i2 - i1; }).forEach(function (d) {
                                        selected_1.splice(d, 1);
                                    });
                                    var valueCount = _.intersection(disables_1, value).length;
                                    var ds = $grid.igGrid("option", "dataSource");
                                    if (selected_1.length === ds.length - disables_1.length + valueCount) {
                                        checkAll();
                                    }
                                }
                                if (!nts.uk.util.isNullOrEmpty(selected_1)) {
                                    var newValue = _.map(selected_1, function (s) { return s.id; });
                                    newValue = _.union(_.intersection(disables_1, value), newValue);
                                    data.value(newValue);
                                }
                                else {
                                    data.value([]);
                                }
                            }
                            else {
                                var selected = $grid.ntsGridList('getSelected');
                                if (!nts.uk.util.isNullOrEmpty(selected)) {
                                    data.value(selected.id);
                                }
                                else {
                                    data.value('');
                                }
                            }
                        });
                        $grid.on("iggridvirtualrecordsrender", function (evt, ui) {
                            var disables = $grid.data("selectionDisables");
                            var $header = ui.owner._headerParent;
                            if (!disables || !$header)
                                return;
                            var data = ui.owner.dataSource._data;
                            var selected = $grid.ntsGridList('getSelected');
                            var valueCount = _.intersection(disables, value).length;
                            var selector = $header.find(".ui-iggrid-rowselector-header span");
                            if (selector.length > 1) {
                                $oselect = $(selector[0]);
                                $iselect = $(selector[1]);
                            }
                            if (selected && (data.length - disables.length + valueCount) === selected.length) {
                                checkAll();
                            }
                        });
                        $grid.setupSearchScroll("igGrid", virtualization);
                        $grid.ntsGridList("setupScrollWhenBinding");
                        $grid.bind("switchvaluechanged", function (evt, dataX) {
                            setTimeout(function () {
                                var source = _.cloneDeep(data.dataSource !== undefined ? data.dataSource() : data.options());
                                _.forEach(source, function (o) {
                                    if (o[optionsValue] === dataX.rowKey) {
                                        o[dataX.columnKey] = dataX.value;
                                        return true;
                                    }
                                });
                                $grid.data("ui-changed", true);
                                if (data.dataSource !== undefined) {
                                    data.dataSource(source);
                                }
                                else {
                                    data.options(source);
                                }
                            }, 100);
                        });
                        $grid.bind("checknewitem", function (evt) {
                            return false;
                        });
                    };
                    NtsGridListBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var $grid = $(element);
                        var data = valueAccessor();
                        var enable = ko.unwrap(data.enable);
                        var optionsValue = data.primaryKey !== undefined ? data.primaryKey : data.optionsValue;
                        var gridSource = $grid.igGrid('option', 'dataSource');
                        var sources = (data.dataSource !== undefined ? data.dataSource() : data.options());
                        var disables = ko.unwrap(data.selectionDisables);
                        if ($grid.data("enable") !== enable) {
                            if (!enable) {
                                $grid.ntsGridList('unsetupSelecting');
                                $grid.addClass("disabled");
                            }
                            else {
                                $grid.ntsGridList('setupSelecting');
                                $grid.removeClass("disabled");
                            }
                        }
                        $grid.data("enable", enable);
                        var currentDisables = $grid.data("selectionDisables");
                        if (currentDisables && disables
                            && !_.isEqual(disables.sort(function (d1, d2) { return d2 - d1; }), currentDisables.sort(function (d1, d2) { return d2 - d1; }))) {
                            $grid.data("selectionDisables", disables);
                            var disableRows = function (arr) {
                                _.forEach(arr, function (d) {
                                    var $row = $grid.igGrid("rowById", d, false);
                                    if ($row && !$row.hasClass("row-disable")) {
                                        $row.addClass("row-disable");
                                    }
                                });
                            };
                            if (disables.length > currentDisables.length) {
                                disableRows(_.difference(disables, currentDisables));
                            }
                            else {
                                _.forEach(currentDisables, function (d) {
                                    var $row = $grid.igGrid("rowById", d, false);
                                    if ($row && $row.hasClass("row-disable")) {
                                        $row.removeClass("row-disable");
                                    }
                                });
                                disableRows(disables);
                            }
                        }
                        var currentSources = sources.slice();
                        var currentSelectedItems = $grid.ntsGridList('getSelected');
                        var removed = _.differenceWith(currentSelectedItems, currentSources, function (c1, c2) { return _.isEqual(c1.id.toString(), c2[optionsValue].toString()); });
                        if (!_.isEmpty(removed)) {
                            _.forEach(removed, function (e) {
                                $grid.igGridSelection("deselectRowById", e.id);
                            });
                            $grid.trigger("selectionchanged");
                            currentSelectedItems = $grid.ntsGridList('getSelected');
                        }
                        if (String($grid.attr("filtered")) === "true") {
                            var filteredSource_1 = [];
                            _.forEach(gridSource, function (item) {
                                var itemX = _.find(sources, function (s) {
                                    return s[optionsValue] === item[optionsValue];
                                });
                                if (!nts.uk.util.isNullOrUndefined(itemX)) {
                                    filteredSource_1.push(itemX);
                                }
                            });
                            if (!_.isEqual(filteredSource_1, gridSource)) {
                                $grid.igGrid('option', 'dataSource', _.cloneDeep(filteredSource_1));
                                $grid.igGrid("dataBind");
                            }
                        }
                        else {
                            var observableColumns = _.filter(ko.unwrap(data.columns), function (c) {
                                c["key"] = c["key"] === undefined ? c["prop"] : c["key"];
                                return c["isDateColumn"] !== undefined && c["isDateColumn"] !== null && c["isDateColumn"] === true;
                            });
                            if (!nts.uk.util.isNullOrEmpty(observableColumns)) {
                                _.forEach(currentSources, function (s) {
                                    _.forEach(observableColumns, function (c) {
                                        var key = c["key"] === undefined ? c["prop"] : c["key"];
                                        s[key] = moment(s[key]).format(c["format"]);
                                    });
                                });
                            }
                            if (!_.isEqual(currentSources, gridSource)) {
                                $grid.igGrid('option', 'dataSource', _.cloneDeep(currentSources));
                                $grid.igGrid("dataBind");
                            }
                        }
                        var isEqual = _.isEqualWith(currentSelectedItems, data.value(), function (current, newVal) {
                            if ((current === undefined && newVal === undefined) || (current !== undefined && current.id === newVal)) {
                                return true;
                            }
                        });
                        if (!isEqual) {
                            var clickCheckBox = false;
                            if (!nts.uk.util.isNullOrEmpty(data.value())) {
                                var isSameSource_1 = true, sortedValue = _.sortBy(data.value()), sortedSource_1 = _.sortBy(sources, [optionsValue]);
                                if (sortedValue.length === sortedSource_1.length) {
                                    _.forEach(sortedValue, function (v, i) {
                                        if (v !== sortedSource_1[i][optionsValue]) {
                                            isSameSource_1 = false;
                                            return false;
                                        }
                                    });
                                }
                                else {
                                    isSameSource_1 = false;
                                }
                                if (isSameSource_1 && data.value().length == sources.length && $grid.igGridSelection('option', 'multipleSelection')) {
                                    var features = _.find($grid.igGrid("option", "features"), function (f) {
                                        return f.name === "RowSelectors";
                                    });
                                    clickCheckBox = !nts.uk.util.isNullOrUndefined(features.enableCheckBoxes) && features.enableCheckBoxes;
                                }
                            }
                            if (clickCheckBox) {
                                var $checkBox = $grid.closest('.ui-iggrid').find(".ui-iggrid-rowselector-header").find("span[data-role='checkbox']");
                                if ($checkBox.length > 0 && $checkBox[0].getAttribute("data-chk") === "off") {
                                    $checkBox.click();
                                }
                            }
                            else {
                                $grid.ntsGridList('setSelected', data.value());
                            }
                            var initVal = $grid.data("initValue");
                            if (!disables || !initVal || _.intersection(disables, initVal).length === 0) {
                                _.defer(function () { $grid.trigger("selectChange"); });
                            }
                        }
                        _.defer(function () {
                            if ($grid.data('user-action')) {
                                $grid.data('user-action', false);
                            }
                            else {
                                $grid.ntsGridList("scrollToSelected");
                            }
                        });
                        $grid.data("ui-changed", false);
                        $grid.closest('.ui-iggrid').addClass('nts-gridlist').height($grid.data("height")).attr("tabindex", $grid.data("tabindex"));
                    };
                    return NtsGridListBindingHandler;
                }());
                ko.bindingHandlers['ntsGridList'] = new NtsGridListBindingHandler();
                var SwapHandler = /** @class */ (function () {
                    function SwapHandler() {
                    }
                    SwapHandler.prototype.setModel = function (model) {
                        this.model = model;
                        return this;
                    };
                    Object.defineProperty(SwapHandler.prototype, "Model", {
                        get: function () {
                            return this.model;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SwapHandler.prototype.handle = function (value) {
                        var self = this;
                        var model = this.model;
                        var options = {
                            items: "tbody > tr",
                            containment: this.model.$grid,
                            cursor: "move",
                            connectWith: this.model.$grid,
                            placeholder: "ui-state-highlight",
                            helper: this._createHelper,
                            appendTo: this.model.$grid,
                            start: function (evt, ui) {
                                self.model.transportBuilder.setList(self.model.$grid.igGrid("option", "dataSource"));
                            },
                            beforeStop: function (evt, ui) {
                                self._beforeStop.call(this, model, evt, ui);
                            },
                            update: function (evt, ui) {
                                self._update.call(this, model, evt, ui, value);
                            }
                        };
                        this.model.$grid.sortable(options).disableSelection();
                    };
                    SwapHandler.prototype._createHelper = function (evt, ui) {
                        var selectedRowElms = $(evt.currentTarget).igGrid("selectedRows");
                        // Set the orders same as on grid
                        selectedRowElms.sort(function (one, two) {
                            return one.index - two.index;
                        });
                        var $helper;
                        if ($(evt.currentTarget).hasClass("multiple-drag") && selectedRowElms.length > 1) {
                            $helper = $("<div><table><tbody></tbody></table></div>").addClass("select-drag");
                            var rowId = ui.data("row-idx");
                            var selectedItems = selectedRowElms.map(function (elm) { return elm.element; });
                            var height = 0;
                            $.each(selectedItems, function () {
                                $helper.find("tbody").append($(this).clone());
                                height += $(this).outerHeight();
                                if (rowId !== this.data("row-idx"))
                                    $(this).hide();
                            });
                            $helper.height(height);
                            $helper.find("tr").first().children().each(function (idx) {
                                $(this).width(ui.children().eq(idx).width());
                            });
                        }
                        else {
                            $helper = ui.clone();
                            $helper.children().each(function (idx) {
                                $(this).width(ui.children().eq(idx).width());
                            });
                        }
                        return $helper[0];
                    };
                    SwapHandler.prototype._beforeStop = function (model, evt, ui) {
                        model.transportBuilder.toAdjacent(model.neighbor(ui)).target(model.target(ui));
                        // In case of multiple selections
                        if (ui.helper.hasClass("select-drag")) {
                            var rowsInHelper = ui.helper.find("tr");
                            var rows = rowsInHelper.toArray();
                            $(this).sortable("cancel");
                            for (var idx in rows) {
                                model.$grid.find("tbody").children().eq($(rows[idx]).data("row-idx")).show();
                            }
                        }
                    };
                    SwapHandler.prototype._update = function (model, evt, ui, value) {
                        if (ui.item.closest("table").length === 0)
                            return;
                        model.transportBuilder.update();
                        model.$grid.igGrid("option", "dataSource", model.transportBuilder.getList());
                        value(model.transportBuilder.getList());
                        setTimeout(function () { model.dropDone(); }, 0);
                    };
                    SwapHandler.prototype.enableDragDrop = function (value) {
                        this.model.enableDrag(this, value, this.handle);
                    };
                    return SwapHandler;
                }());
                var SwapModel = /** @class */ (function () {
                    function SwapModel($grid, primaryKey) {
                        this.$grid = $grid;
                        this.primaryKey = primaryKey;
                        this.transportBuilder = new ListItemTransporter().primary(this.primaryKey);
                    }
                    return SwapModel;
                }());
                var GridSwapList = /** @class */ (function (_super) {
                    __extends(GridSwapList, _super);
                    function GridSwapList() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    GridSwapList.prototype.target = function (opts) {
                        if (opts.helper !== undefined && opts.helper.hasClass("select-drag")) {
                            return opts.helper.find("tr").map(function () {
                                return $(this).data("id");
                            });
                        }
                        return [opts.item.data("id")];
                    };
                    GridSwapList.prototype.neighbor = function (opts) {
                        return opts.item.prev().length === 0 ? "ceil" : opts.item.prev().data("id");
                    };
                    GridSwapList.prototype.dropDone = function () {
                        var self = this;
                        self.$grid.igGridSelection("clearSelection");
                        setTimeout(function () {
                            self.$grid.igGrid("virtualScrollTo", self.transportBuilder.incomeIndex);
                        }, 0);
                    };
                    GridSwapList.prototype.enableDrag = function (ctx, value, cb) {
                        var self = this;
                        this.$grid.on("iggridrowsrendered", function (evt, ui) {
                            cb.call(ctx, value);
                        });
                    };
                    return GridSwapList;
                }(SwapModel));
                var ListItemTransporter = /** @class */ (function () {
                    function ListItemTransporter() {
                    }
                    ListItemTransporter.prototype.primary = function (primaryKey) {
                        this.primaryKey = primaryKey;
                        return this;
                    };
                    ListItemTransporter.prototype.target = function (targetIds) {
                        this.targetIds = targetIds;
                        return this;
                    };
                    ListItemTransporter.prototype.toAdjacent = function (adjId) {
                        if (adjId === null)
                            adjId = "ceil";
                        this.adjacentIncomeId = adjId;
                        return this;
                    };
                    ListItemTransporter.prototype.indexOf = function (list, targetId) {
                        var _this = this;
                        return _.findIndex(list, function (elm) { return elm[_this.primaryKey].toString() === targetId.toString(); });
                    };
                    ListItemTransporter.prototype.update = function () {
                        for (var i = 0; i < this.targetIds.length; i++) {
                            this.outcomeIndex = this.indexOf(this.list, this.targetIds[i]);
                            if (this.outcomeIndex === -1)
                                return;
                            var target = this.list.splice(this.outcomeIndex, 1);
                            this.incomeIndex = this.indexOf(this.list, this.adjacentIncomeId) + 1;
                            if (this.incomeIndex === 0) {
                                if (this.adjacentIncomeId === "ceil")
                                    this.incomeIndex = 0;
                                else if (target !== undefined) {
                                    this.list.splice(this.outcomeIndex, 0, target[0]);
                                    return;
                                }
                            }
                            this.list.splice(this.incomeIndex + i, 0, target[0]);
                        }
                    };
                    ListItemTransporter.prototype.getList = function () {
                        return this.list;
                    };
                    ListItemTransporter.prototype.setList = function (list) {
                        this.list = list;
                    };
                    return ListItemTransporter;
                }());
            })(koExtentions = ui_8.koExtentions || (ui_8.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * ListBox binding handler
                 */
                var ListBoxBindingHandler = /** @class */ (function () {
                    /**
                     * Constructor.
                     */
                    function ListBoxBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    ListBoxBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        // Get options
                        var options = ko.unwrap(data.options);
                        // Get options value
                        var optionValue = ko.unwrap(data.primaryKey === undefined ? data.optionsValue : data.primaryKey);
                        var optionText = ko.unwrap(data.primaryText === undefined ? data.optionsText : data.primaryText);
                        var selectedValue = ko.unwrap(data.value);
                        var isMultiSelect = ko.unwrap(data.multiple);
                        var enable = ko.unwrap(data.enable);
                        //            var required = ko.unwrap(data.required) || false;
                        var columns = data.columns;
                        // Container
                        var $element = $(element);
                        var elementId = $element.addClass("listbox-wrapper").attr("id");
                        if (nts.uk.util.isNullOrUndefined($element.attr("tabindex"))) {
                            $element.attr("tabindex", "0");
                        }
                        $element.data("tabindex", $element.attr("tabindex"));
                        var gridId = elementId;
                        if (nts.uk.util.isNullOrUndefined(gridId)) {
                            gridId = nts.uk.util.randomId();
                        }
                        else {
                            gridId += "_grid";
                        }
                        $element.append("<table id='" + gridId + "' class='ntsListBox ntsControl'/>");
                        var container = $element.find("#" + gridId);
                        container.data("options", options.slice());
                        container.data("init", true);
                        container.data("enable", enable);
                        // Create changing event.
                        var changeEvent = new CustomEvent("selectionChange", {
                            detail: {},
                        });
                        container.data("selectionChange", changeEvent);
                        var features = [];
                        features.push({ name: 'Selection', multipleSelection: isMultiSelect });
                        var maxWidthCharacter = 15;
                        var SCROLL_WIDTH = 20;
                        var gridFeatures = ko.unwrap(data.features);
                        var width = 0;
                        var iggridColumns = [];
                        if (nts.uk.util.isNullOrUndefined(columns)) {
                            iggridColumns.push({ "key": optionValue, "width": 10 * maxWidthCharacter + 20, "headerText": '', "columnCssClass": 'nts-column', 'hidden': true });
                            iggridColumns.push({ "key": optionText, "width": 10 * maxWidthCharacter + 20, "headerText": '', "columnCssClass": 'nts-column' });
                            width += 10 * maxWidthCharacter + 20;
                            container.data("fullValue", true);
                        }
                        else {
                            var isHaveKey_1 = false;
                            iggridColumns = _.map(columns, function (c, index, columns) {
                                c["key"] = c["key"] === undefined ? c["prop"] : c["key"];
                                var columnWidth = c["length"] * maxWidthCharacter + 20;
                                if (index = columns.length - 1) {
                                    columnWidth += SCROLL_WIDTH;
                                }
                                c["width"] = columnWidth;
                                c["headerText"] = '';
                                c["columnCssClass"] = 'nts-column';
                                width += columnWidth;
                                if (optionValue === c["key"]) {
                                    isHaveKey_1 = true;
                                }
                                return c;
                            });
                            if (!isHaveKey_1) {
                                iggridColumns.push({ "key": optionValue, "width": 10 * maxWidthCharacter + 20, "headerText": '', "columnCssClass": 'nts-column', 'hidden': true });
                            }
                        }
                        var gridHeaderHeight = 24;
                        container.igGrid({
                            width: width + "px",
                            height: (data.rows * 23 + gridHeaderHeight) + "px",
                            primaryKey: optionValue,
                            columns: iggridColumns,
                            virtualization: true,
                            virtualizationMode: 'continuous',
                            features: features,
                            tabIndex: -1
                        });
                        container.ntsGridList('setupSelecting');
                        container.bind('iggridselectionrowselectionchanging', function (evt, uiX) {
                            if (container.data("enable") === false) {
                                return false;
                            }
                            var itemSelected = uiX.row.id;
                            var dataSource = container.igGrid('option', "dataSource");
                            if (container.data("fullValue")) {
                                itemSelected = _.find(dataSource, function (d) {
                                    return d[optionValue].toString() === itemSelected.toString();
                                });
                            }
                            var changingEvent = new CustomEvent("selectionChanging", {
                                detail: itemSelected,
                                bubbles: true,
                                cancelable: false,
                            });
                            container.data("chaninged", true);
                            document.getElementById(elementId).dispatchEvent(changingEvent);
                        });
                        container.bind('selectionchanged', function () {
                            //                console.log(ui);
                            var itemSelected;
                            if (container.igGridSelection('option', 'multipleSelection')) {
                                var selected = container.ntsGridList('getSelected');
                                if (!nts.uk.util.isNullOrEmpty(selected)) {
                                    itemSelected = _.map(selected, function (s) { return s.id; });
                                }
                                else {
                                    itemSelected = [];
                                }
                            }
                            else {
                                var selected = container.ntsGridList('getSelected');
                                if (!nts.uk.util.isNullOrEmpty(selected)) {
                                    itemSelected = selected.id;
                                }
                                else {
                                    itemSelected = ('');
                                }
                            }
                            container.data("selected", itemSelected);
                            var isMultiOld = container.igGridSelection('option', 'multipleSelection');
                            if (container.data("fullValue")) {
                                var dataSource = container.igGrid('option', "dataSource");
                                if (isMultiOld) {
                                    itemSelected = _.filter(dataSource, function (d) {
                                        itemSelected.indexOf(d[optionValue].toString()) >= 0;
                                    });
                                }
                                else {
                                    itemSelected = _.find(dataSource, function (d) {
                                        return d[optionValue].toString() === itemSelected.toString();
                                    });
                                }
                            }
                            if (container.data("chaninged") !== true) {
                                var changingEvent = new CustomEvent("selectionChanging", {
                                    detail: itemSelected,
                                    bubbles: true,
                                    cancelable: false,
                                });
                                document.getElementById(container.attr('id')).dispatchEvent(changingEvent);
                            }
                            container.data("chaninged", false);
                            container.data("ui-changed", true);
                            if (!_.isEqual(itemSelected, data.value())) {
                                data.value(itemSelected);
                            }
                        });
                        container.setupSearchScroll("igGrid", true);
                        container.ntsGridList("setupScrollWhenBinding");
                        container.data("multiple", isMultiSelect);
                        $("#" + gridId + "_container").find("#" + gridId + "_headers").closest("tr").hide();
                        $("#" + gridId + "_container").height($("#" + gridId + "_container").height() - gridHeaderHeight);
                        // add validate event
                        $element
                            .on('validate', function () {
                            var $container = $("#" + $element.attr('id') + "_grid");
                            if ($element.data('nts_validate')) {
                                if (ko.toJS(data.required) && _.isEmpty(ko.toJS(data.value)) && $container.data("enable")) {
                                    $element
                                        .addClass('error')
                                        .ntsError("set", nts.uk.resource.getMessage("MsgB_2", [ko.toJS(data.name)]), "MsgB_2");
                                }
                                else {
                                    $element.removeClass('error')
                                        .ntsError("clear");
                                }
                            }
                            else {
                                $element.data('nts_validate', true);
                            }
                        });
                        $element.prepend($('<style>', {
                            type: 'text/css',
                            text: "\n                    #" + $element.attr('id') + ".error {\n                        border-color: #ff6666;\n                    }\n\n                    table[id='" + $element.attr('id') + "_grid'] .ui-iggrid-tablebody tr,\n                    table[id='" + $element.attr('id') + "_grid'] .ui-iggrid-tablebody tr:hover {\n                        outline: none;\n                    }\n\n                    table[id='" + $element.attr('id') + "_grid'] .ui-iggrid-tablebody tr,\n                    table[id='" + $element.attr('id') + "_grid'] .ui-iggrid-tablebody tr:hover {\n                        cursor: pointer;\n                    }"
                        }));
                    };
                    /**
                     * Update
                     */
                    ListBoxBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        // Get options.
                        var sources = (data.dataSource !== undefined ? data.dataSource() : data.options());
                        // Get options value.
                        var optionValue = ko.unwrap(data.primaryKey === undefined ? data.optionsValue : data.primaryKey);
                        var optionText = ko.unwrap(data.primaryText === undefined ? data.optionsText : data.primaryText);
                        var selectedValue = ko.unwrap(data.value);
                        var isMultiSelect = ko.unwrap(data.multiple);
                        var enable = ko.unwrap(data.enable);
                        var columns = data.columns;
                        var rows = data.rows;
                        // Container.
                        var container = $(element).find(".ntsListBox");
                        var currentSource = container.igGrid('option', 'dataSource');
                        if (container.data("enable") !== enable) {
                            if (!enable) {
                                container.ntsGridList('unsetupSelecting');
                                container.addClass("disabled");
                                $(element).attr("tabindex", "-1");
                            }
                            else {
                                container.ntsGridList('setupSelecting');
                                container.removeClass("disabled");
                                $(element).attr("tabindex", $(element).data("tabindex"));
                            }
                        }
                        container.data("enable", enable);
                        if (!((String(container.attr("filtered")) === "true") || container.data("ui-changed") === true)) {
                            var currentSources = sources.slice();
                            var observableColumns = _.filter(ko.unwrap(data.columns), function (c) {
                                c["key"] = c["key"] === undefined ? c["prop"] : c["key"];
                                return c["isDateColumn"] !== undefined && c["isDateColumn"] !== null && c["isDateColumn"] === true;
                            });
                            _.forEach(currentSources, function (s) {
                                _.forEach(observableColumns, function (c) {
                                    var key = c["key"] === undefined ? c["prop"] : c["key"];
                                    s[key] = moment(s[key]).format(c["format"]);
                                });
                            });
                            if (!_.isEqual(currentSources, container.igGrid('option', 'dataSource'))) {
                                container.igGrid('option', 'dataSource', currentSources);
                                container.igGrid("dataBind");
                            }
                        }
                        else if (String(container.attr("filtered")) === "true") {
                            var filteredSource_2 = [];
                            _.forEach(currentSource, function (item) {
                                var itemX = _.find(sources, function (s) {
                                    return s[optionValue] === item[optionValue];
                                });
                                if (!nts.uk.util.isNullOrUndefined(itemX)) {
                                    filteredSource_2.push(itemX);
                                }
                            });
                            if (!_.isEqual(filteredSource_2, currentSource)) {
                                container.igGrid('option', 'dataSource', _.cloneDeep(filteredSource_2));
                                container.igGrid("dataBind");
                            }
                        }
                        var isMultiOld = container.igGridSelection('option', 'multipleSelection');
                        if (isMultiOld !== isMultiSelect) {
                            container.igGridSelection('option', 'multipleSelection', isMultiSelect);
                            if (isMultiOld && !nts.uk.util.isNullOrUndefined(data.value()) && data.value().length > 0) {
                                data.value(data.value()[0]);
                            }
                            else if (!isMultiOld && !nts.uk.util.isNullOrUndefined(data.value())) {
                                data.value([data.value()]);
                            }
                            var dataValue = data.value();
                            if (container.data("fullValue")) {
                                if (isMultiOld) {
                                    dataValue = _.map(dataValue, optionValue);
                                }
                                else {
                                    dataValue = dataValue[optionValue];
                                }
                            }
                            container.ntsGridList('setSelected', dataValue);
                        }
                        else {
                            var dataValue = data.value();
                            if (container.data("fullValue")) {
                                if (isMultiOld) {
                                    dataValue = _.map(dataValue, optionValue);
                                }
                                else {
                                    dataValue = dataValue[optionValue];
                                }
                            }
                            var currentSelectedItems = container.ntsGridList('getSelected');
                            if (isMultiOld) {
                                if (currentSelectedItems) {
                                    currentSelectedItems = _.map(currentSelectedItems, function (s) { return s["id"]; });
                                }
                                else {
                                    currentSelectedItems = [];
                                }
                                if (dataValue) {
                                    dataValue = _.map(dataValue, function (s) { return s.toString(); });
                                }
                            }
                            else {
                                if (currentSelectedItems) {
                                    currentSelectedItems = currentSelectedItems.id;
                                }
                                else {
                                    currentSelectedItems = ('');
                                }
                                if (dataValue) {
                                    dataValue = dataValue.toString();
                                }
                            }
                            var isEqual = _.isEqual(currentSelectedItems, dataValue);
                            if (!isEqual) {
                                _.defer(function () { container.trigger("selectChange"); });
                                container.ntsGridList('setSelected', dataValue);
                            }
                        }
                        container.data("ui-changed", false);
                        container.closest('.ui-iggrid').addClass('nts-gridlist').height(data.height);
                        // add validate event
                        $(element).trigger('validate');
                    };
                    return ListBoxBindingHandler;
                }());
                ko.bindingHandlers['ntsListBox'] = new ListBoxBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_9) {
            var koExtentions;
            (function (koExtentions) {
                var NtsRadioBoxBindingHandler = /** @class */ (function () {
                    function NtsRadioBoxBindingHandler() {
                    }
                    /**
                     * Init
                     */
                    NtsRadioBoxBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var optionValue = ko.unwrap(data.optionValue);
                        var optionText = ko.unwrap(data.optionText);
                        var dataName = ko.unwrap(data.name);
                        var option = ko.unwrap(data.option);
                        var group = ko.unwrap(data.group);
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var selectedValue = ko.unwrap(data.checked);
                        var container = $(element);
                        container.addClass("ntsControl radio-wrapper");
                        container.data("enable", enable);
                        if (nts.uk.util.isNullOrUndefined(container.attr("tabindex"))) {
                            container.attr("tabindex", "0");
                        }
                        container.data("tabindex", container.attr("tabindex"));
                        container.keydown(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (code === 32) {
                                evt.preventDefault();
                            }
                        });
                        container.keyup(function (evt, ui) {
                            if (container.data("enable") !== false) {
                                var code = evt.which || evt.keyCode;
                                if (code === 32) {
                                    var checkitem = container.find("input[type='radio']");
                                    if (!container.find("input[type='radio']").is(":checked")) {
                                        checkitem.prop("checked", true);
                                        data.checked(container.find("input[type='radio']").data("value"));
                                    }
                                    else {
                                        checkitem.prop("checked", false);
                                        data.checked(undefined);
                                    }
                                    container.focus();
                                }
                            }
                        });
                        var radioBoxLabel = drawRadio(data.checked, option, dataName, optionValue, enable, optionText, false);
                        radioBoxLabel.appendTo(container);
                        var radio = container.find("input[type='radio']");
                        radio.attr("name", group).bind('selectionchanged', function () {
                            data.checked(radio.data("value"));
                        });
                        // Default value
                        new nts.uk.util.value.DefaultValue().onReset(container, data.value);
                    };
                    /**
                     * Update
                     */
                    NtsRadioBoxBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var option = data.option === undefined ? [] : ko.unwrap(data.option);
                        var optionValue = ko.unwrap(data.optionValue);
                        var optionText = ko.unwrap(data.optionText);
                        var selectedValue = data.checked;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Container
                        var container = $(element);
                        container.data("enable", enable);
                        container.find(".label").text(nts.uk.util.isNullOrUndefined(option) ? optionText : option[optionText]);
                        if (selectedValue() === getOptionValue(option, optionValue)) {
                            container.find("input[type='radio']").prop("checked", true);
                        }
                        else {
                            container.find("input[type='radio']").prop("checked", false);
                        }
                        // Enable
                        if (enable === true) {
                            container.find("input[type='radio']").removeAttr("disabled");
                            container.attr("tabindex", container.data("tabindex"));
                        }
                        else if (enable === false) {
                            container.find("input[type='radio']").attr("disabled", "disabled");
                            if (!nts.uk.util.isNullOrUndefined(data.value)) {
                                new nts.uk.util.value.DefaultValue().applyReset(container, data.value);
                            }
                            container.attr("tabindex", "-1");
                        }
                        //            }
                    };
                    return NtsRadioBoxBindingHandler;
                }());
                /**
                 * RadioBoxGroup binding handler
                 */
                var NtsRadioBoxGroupBindingHandler = /** @class */ (function () {
                    function NtsRadioBoxGroupBindingHandler() {
                    }
                    /**
                     * Init
                     */
                    NtsRadioBoxGroupBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var optionValue = ko.unwrap(data.optionsValue);
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var container = $(element);
                        container.addClass("ntsControl radio-wrapper");
                        container.data("enable", enable);
                        if (nts.uk.util.isNullOrUndefined(container.attr("tabindex"))) {
                            container.attr("tabindex", "0");
                        }
                        container.data("tabindex", container.attr("tabindex"));
                        container.keydown(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (code === 32) {
                                evt.preventDefault();
                            }
                        });
                        container.keyup(function (evt, ui) {
                            if (container.data("enable") !== false) {
                                var code = evt.which || evt.keyCode;
                                var checkitem = void 0;
                                if (code === 32) {
                                    checkitem = $(_.find(container.find("input[type='radio']"), function (radio, idx) {
                                        return $(radio).attr("disabled") !== "disabled";
                                    }));
                                }
                                else if (code === 37 || code === 38) {
                                    var inputList = _.filter(container.find("input[type='radio']"), function (radio, idx) {
                                        return $(radio).attr("disabled") !== "disabled";
                                    });
                                    //                        let inputList = container.find("input[type='radio']");
                                    var currentSelect = _.findIndex(inputList, function (item) {
                                        return $(item).is(":checked");
                                    });
                                    checkitem = $(inputList[currentSelect - 1]);
                                }
                                else if (code === 39 || code === 40) {
                                    var inputList = _.filter(container.find("input[type='radio']"), function (radio, idx) {
                                        return $(radio).attr("disabled") !== "disabled";
                                    });
                                    var currentSelect = _.findIndex(inputList, function (item) {
                                        return $(item).is(":checked");
                                    });
                                    checkitem = $(inputList[currentSelect + 1]);
                                }
                                if (checkitem !== undefined && checkitem.length > 0) {
                                    checkitem.prop("checked", true);
                                    data.value(optionValue === undefined ? checkitem.data("option") : checkitem.data("option")[optionValue]);
                                }
                                container.focus();
                            }
                        });
                        //            container.find(".ntsRadioBox").focus(function (evt, ui){
                        //                console.log(evt);
                        //            });
                        // Default value
                        new nts.uk.util.value.DefaultValue().onReset(container, data.value);
                    };
                    /**
                     * Update
                     */
                    NtsRadioBoxGroupBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var options = data.options === undefined ? [] : JSON.parse(ko.toJSON(data.options));
                        var optionValue = ko.unwrap(data.optionsValue);
                        var optionText = ko.unwrap(data.optionsText);
                        var selectedValue = data.value;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Container
                        var container = $(element);
                        container.data("enable", enable);
                        // Render
                        if (!_.isEqual(container.data("options"), options)) {
                            var radioName = uk.util.randomId();
                            container.empty();
                            _.forEach(options, function (option) {
                                var radioBoxLabel = drawRadio(selectedValue, option, radioName, optionValue, option["enable"], optionText, false);
                                radioBoxLabel.appendTo(container);
                            });
                            // Save a clone
                            container.data("options", _.cloneDeep(options));
                        }
                        // Checked
                        //var checkedRadio = _.find(container.find("input[type='radio']"), (item) => {
                        //    return _.isEqual(selectedValue(), $(item).data("value"));
                        //});
                        //if (checkedRadio !== undefined)
                        //    $(checkedRadio).prop("checked", true);
                        if (!nts.uk.util.isNullOrUndefined(selectedValue())) {
                            // Checked
                            var checkedRadio = _.find(container.find("input[type='radio']"), function (item) {
                                return _.isEqual(JSON.parse(ko.toJSON(selectedValue())), $(item).data("value"));
                            });
                            if (checkedRadio !== undefined)
                                $(checkedRadio).prop("checked", true);
                        }
                        // Enable
                        if (enable === true) {
                            _.forEach(container.find("input[type='radio']"), function (radio) {
                                var dataOpion = $(radio).data("option");
                                if (dataOpion["enable"] !== false) {
                                    $(radio).removeAttr("disabled");
                                }
                            });
                            container.attr("tabindex", container.data("tabindex"));
                        }
                        else if (enable === false) {
                            container.find("input[type='radio']").attr("disabled", "disabled");
                            new nts.uk.util.value.DefaultValue().applyReset(container, data.value);
                            container.attr("tabindex", "-1");
                        }
                        //            }
                    };
                    return NtsRadioBoxGroupBindingHandler;
                }());
                function getOptionValue(item, optionValue) {
                    if (nts.uk.util.isNullOrUndefined(item)) {
                        return nts.uk.util.isNullOrUndefined(optionValue) ? true : optionValue;
                    }
                    return (optionValue === undefined) ? item : item[optionValue];
                }
                ;
                function drawRadio(selectedValue, option, radioName, optionValue, disableOption, optionText, booleanValue) {
                    var radioBoxLabel = $("<label class='ntsRadioBox'></label>").on('click', function () {
                        $(this).parent().focus();
                    });
                    var radioBox = $('<input type="radio">').data("option", option).addClass("unselectable").attr("name", radioName)
                        .data("value", getOptionValue(option, optionValue)).attr("unselectable", "on")
                        .on("change", function () {
                        var self = $(this);
                        if (self.is(":checked") && !booleanValue) {
                            selectedValue(self.data("value"));
                        }
                        else if (booleanValue) {
                            var name = self.attr("name");
                            if (nts.uk.util.isNullOrUndefined(name)) {
                                selectedValue(self.is(":checked"));
                            }
                            else {
                                var selector = 'input[name=' + name + ']';
                                $(selector).each(function (idx, e) {
                                    $(e).triggerHandler('selectionchanged');
                                });
                            }
                        }
                    });
                    if (!nts.uk.util.isNullOrUndefined(disableOption) && (disableOption === false)) {
                        radioBox.attr("disabled", "disabled");
                    }
                    radioBox.appendTo(radioBoxLabel);
                    var box = $("<span class='box'></span>").appendTo(radioBoxLabel);
                    //        if (option[optionText] && option[optionText].length > 0)
                    var label = $("<span class='label'></span>").text(nts.uk.util.isNullOrUndefined(option) ? optionText : option[optionText]).appendTo(radioBoxLabel);
                    return radioBoxLabel;
                }
                ko.bindingHandlers['ntsRadioButton'] = new NtsRadioBoxBindingHandler();
                ko.bindingHandlers['ntsRadioBoxGroup'] = new NtsRadioBoxGroupBindingHandler();
            })(koExtentions = ui_9.koExtentions || (ui_9.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_10) {
            var koExtentions;
            (function (koExtentions) {
                var $ = window['$'], _ = window['_'], ko = window['ko'];
                /**
                * SearchBox Binding Handler
                */
                var SearchBox = /** @class */ (function () {
                    function SearchBox(source, searchField, childField, key) {
                        this.childField = childField;
                        this.source = _.isEmpty(source) ? [] : this.cloneDeep(source);
                        this.searchField = searchField;
                        this.key = key;
                    }
                    SearchBox.prototype.filter = function (searchKey) {
                        var self = this;
                        return self.filterWithSource(searchKey, this.source);
                    };
                    SearchBox.prototype.computeSelectingIndex = function (dataSource, selectedItems, key) {
                        var selectingIndex = -1;
                        if (!_.isEmpty(selectedItems)) {
                            var firstItemValue_1 = $.isArray(selectedItems)
                                ? selectedItems[0]["id"].toString() : selectedItems["id"].toString();
                            selectingIndex = _.findIndex(dataSource, function (item) {
                                return item[key].toString() === firstItemValue_1;
                            });
                        }
                        return selectingIndex;
                    };
                    SearchBox.prototype.search = function (searchKey, selectedItems) {
                        var self = this;
                        var flatArr = nts.uk.util.flatArray(self.source, this.childField);
                        var fromIndex = this.computeSelectingIndex(flatArr, selectedItems, self.key);
                        // search in the next array
                        var nextSource = flatArr.slice(fromIndex + 1);
                        var nextFilterdItems = self.filterWithSource(searchKey, nextSource);
                        if (nextFilterdItems.length > 0) {
                            return nextFilterdItems[0];
                        }
                        // search in the previous array
                        var previousSource = flatArr.slice(0, fromIndex + 1);
                        var previouseFilteredItems = self.filterWithSource(searchKey, previousSource);
                        if (previouseFilteredItems.length > 0) {
                            return previouseFilteredItems[0];
                        }
                        // if not match searchKey
                        return null;
                    };
                    SearchBox.prototype.filterWithSource = function (searchKey, source) {
                        var self = this;
                        if (_.isEmpty(source)) {
                            return [];
                        }
                        var filtered = _.filter(source, function (item) {
                            return _.find(self.searchField, function (x) {
                                if (x !== undefined && x !== null) {
                                    var val = item[x].toString();
                                    return val.indexOf(searchKey.toString()) >= 0;
                                }
                                return false;
                            }) !== undefined;
                        });
                        return filtered;
                    };
                    SearchBox.prototype.setDataSource = function (source) {
                        this.source = _.isEmpty(source) ? [] : this.cloneDeep(source);
                    };
                    SearchBox.prototype.getDataSource = function () {
                        return this.cloneDeep(this.source);
                    };
                    SearchBox.prototype.cloneDeep = function (source) {
                        var self = this;
                        return self.cloneDeepX(source);
                    };
                    SearchBox.prototype.cloneDeepX = function (source) {
                        return _.cloneDeep(source);
                    };
                    return SearchBox;
                }());
                koExtentions.SearchBox = SearchBox;
                var SearchResult = /** @class */ (function () {
                    function SearchResult() {
                        this.options = [];
                        this.selectItems = [];
                    }
                    return SearchResult;
                }());
                koExtentions.SearchResult = SearchResult;
                var SearchPub = /** @class */ (function () {
                    function SearchPub(key, mode, source, searchField, childField) {
                        this.seachBox = new SearchBox(source, searchField, childField, key);
                        this.mode = _.isEmpty(mode) ? "highlight" : mode;
                        this.key = key;
                    }
                    SearchPub.prototype.search = function (searchKey, selectedItems) {
                        var result = new SearchResult();
                        var key = this.key;
                        if (this.mode === "highlight") {
                            var dataSource = this.seachBox.getDataSource();
                            var selectItem = this.seachBox.search(searchKey, selectedItems);
                            if (selectItem == null) {
                                return result;
                            }
                            result.options = dataSource;
                            result.selectItems = [selectItem];
                            return result;
                        }
                        else {
                            var filtered = this.seachBox.filter(searchKey);
                            if (_.isEmpty(filtered)) {
                                return result;
                            }
                            var selectItem = _.filter(filtered, function (itemFilterd) {
                                return _.find(selectedItems, function (item) {
                                    var itemVal = itemFilterd[key];
                                    if (_.isNil(itemVal) || _.isNil(item["id"])) {
                                        return false;
                                    }
                                    return itemVal.toString() === item["id"].toString();
                                }) !== undefined;
                            });
                            result.options = filtered;
                            result.selectItems = selectItem;
                            return result;
                        }
                    };
                    SearchPub.prototype.setDataSource = function (source) {
                        this.seachBox.setDataSource(source);
                    };
                    SearchPub.prototype.getDataSource = function () {
                        return this.seachBox.getDataSource();
                    };
                    return SearchPub;
                }());
                koExtentions.SearchPub = SearchPub;
                var NtsSearchBoxBindingHandler = /** @class */ (function () {
                    function NtsSearchBoxBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsSearchBoxBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var minusWidth = 0;
                        var data = ko.unwrap(valueAccessor());
                        var fields = ko.unwrap(data.fields);
                        var placeHolder = (data.placeHolder !== undefined) ? ko.unwrap(data.placeHolder) : ui_10.toBeResource.searchByCodeName;
                        var searchMode = (data.searchMode !== undefined) ? ko.unwrap(data.searchMode) : "highlight";
                        var defaultSearchText = (searchMode === 'highlight') ? ui_10.toBeResource.search : ui_10.toBeResource.filter;
                        var searchText = (data.searchText !== undefined) ? ko.unwrap(data.searchText) : defaultSearchText;
                        var label = (data.label !== undefined) ? ko.unwrap(data.label) : "";
                        var enable = ko.unwrap(data.enable);
                        var selectedKey = null;
                        if (data.selectedKey) {
                            selectedKey = ko.unwrap(data.selectedKey);
                        }
                        var dataSource = ko.unwrap(data.items);
                        var childField = null;
                        if (data.childField) {
                            childField = ko.unwrap(data.childField);
                        }
                        var targetMode = data.mode;
                        if (targetMode === "listbox") {
                            targetMode = "igGrid";
                        }
                        var $container = $(element);
                        var tabIndex = _.isEmpty($container.attr("tabindex")) ? "0" : $container.attr("tabindex");
                        $container.addClass("nts-searchbbox-wrapper").removeAttr("tabindex");
                        $container.append("<div class='input-wrapper'><span class='nts-editor-wrapped ntsControl'><input class='ntsSearchBox nts-editor ntsSearchBox_Component' type='text' /></span></div>");
                        $container.append("<div class='input-wrapper'><button class='search-btn caret-bottom ntsSearchBox_Component'>" + searchText + "</button></div>");
                        if (!_.isEmpty(label)) {
                            var $formLabel = $("<div>", { text: label });
                            $formLabel.prependTo($container);
                            ko.bindingHandlers["ntsFormLabel"].init($formLabel[0], function () { return ({}); }, allBindingsAccessor, viewModel, bindingContext);
                            ko.bindingHandlers["ntsFormLabel"].update($formLabel[0], function () { return ({}); }, allBindingsAccessor, viewModel, bindingContext);
                            minusWidth += $formLabel.outerWidth(true);
                        }
                        var $button = $container.find("button.search-btn");
                        var $input = $container.find("input.ntsSearchBox");
                        minusWidth += $button.outerWidth(true);
                        if (searchMode === "filter") {
                            $container.append("<button class='clear-btn ntsSearchBox_Component'>" + nts.uk.ui.toBeResource.clear + "</button>");
                            var $clearButton = $container.find("button.clear-btn");
                            minusWidth += $clearButton.outerWidth(true);
                            $clearButton.click(function (evt, ui) {
                                var component = $("#" + ko.unwrap(data.comId));
                                if (component.hasClass("listbox-wrapper")) {
                                    component = $("#" + ko.unwrap(data.comId)).find(".ntsListBox");
                                }
                                var srh = $container.data("searchObject");
                                $input.val("");
                                component.igGrid("option", "dataSource", srh.seachBox.getDataSource());
                                component.igGrid("dataBind");
                                $container.data("searchKey", null);
                                component.attr("filtered", "false");
                                _.defer(function () {
                                    component.trigger("selectChange");
                                });
                            });
                        }
                        $input.attr("placeholder", placeHolder);
                        $input.attr("data-name", nts.uk.ui.toBeResource.searchBox);
                        $input.outerWidth($container.outerWidth(true) - minusWidth);
                        var primaryKey = ko.unwrap(data.targetKey);
                        var searchObject = new SearchPub(primaryKey, searchMode, dataSource, fields, childField);
                        $container.data("searchObject", searchObject);
                        var search = function (searchKey) {
                            if (targetMode) {
                                var selectedItems = void 0, isMulti = void 0;
                                var component_1 = $("#" + ko.unwrap(data.comId));
                                if (targetMode == 'igGrid') {
                                    if (component_1.hasClass("listbox-wrapper")) {
                                        component_1 = $("#" + ko.unwrap(data.comId)).find(".ntsListBox");
                                    }
                                    selectedItems = component_1.ntsGridList("getSelected");
                                    isMulti = component_1.igGridSelection('option', 'multipleSelection');
                                }
                                else if (targetMode == 'igTree') {
                                    selectedItems = component_1.ntsTreeView("getSelected");
                                    isMulti = component_1.igTreeGridSelection('option', 'multipleSelection');
                                }
                                else if (targetMode == 'igTreeDrag') {
                                    selectedItems = component_1.ntsTreeDrag("getSelected");
                                    isMulti = component_1.ntsTreeDrag('option', 'isMulti');
                                }
                                var srh = $container.data("searchObject");
                                var result = srh.search(searchKey, selectedItems);
                                if (_.isEmpty(result.options)) {
                                    var mes = '';
                                    if (searchMode === "highlight") {
                                        mes = nts.uk.resource.getMessage("MsgB_25");
                                    }
                                    else {
                                        mes = nts.uk.ui.toBeResource.targetNotFound;
                                    }
                                    nts.uk.ui.dialog.alert(mes).then(function () {
                                        $input.focus();
                                        $input.select();
                                    });
                                    return false;
                                }
                                var selectedProperties = _.map(result.selectItems, primaryKey);
                                component_1.trigger("searchfinishing", { selected: selectedProperties, searchMode: searchMode, options: result.options });
                                if (targetMode === 'igGrid') {
                                    component_1.ntsGridList("setSelected", selectedProperties);
                                    if (searchMode === "filter") {
                                        $container.data("filteredSrouce", result.options);
                                        component_1.attr("filtered", "true");
                                        //selected(selectedValue);
                                        //selected.valueHasMutated();
                                        //                            let source = _.filter(data.items(), function (item: any){
                                        //                                             return _.find(result.options, function (itemFilterd: any){
                                        //                                            return itemFilterd[primaryKey] === item[primaryKey];
                                        //                                                }) !== undefined || _.find(srh.getDataSource(), function (oldItem: any){
                                        //                                             return oldItem[primaryKey] === item[primaryKey];
                                        //                                            }) === undefined;
                                        //                            });
                                        //                            component.igGrid("option", "dataSource", _.cloneDeep(source));
                                        component_1.igGrid("option", "dataSource", _.cloneDeep(result.options));
                                        component_1.igGrid("dataBind");
                                        //                            if(_.isEmpty(selectedProperties)){
                                        component_1.trigger("selectionchanged");
                                        //                            }
                                    }
                                    else {
                                        component_1.trigger("selectionchanged");
                                    }
                                }
                                else if (targetMode == 'igTree') {
                                    component_1.ntsTreeView("setSelected", selectedProperties);
                                    component_1.trigger("selectionchanged");
                                    //selected(selectedValue);
                                }
                                else if (targetMode == 'igTreeDrag') {
                                    component_1.ntsTreeDrag("setSelected", selectedProperties);
                                }
                                _.defer(function () {
                                    component_1.trigger("selectChange");
                                });
                                $container.data("searchKey", searchKey);
                            }
                            return true;
                        };
                        var nextSearch = function () {
                            var searchKey = $input.val();
                            if (_.isEmpty(searchKey)) {
                                nts.uk.ui.dialog.alert(nts.uk.resource.getMessage("MsgB_24")).then(function () {
                                    $input.focus();
                                    //                        $input.select();
                                });
                                return false;
                            }
                            return search(searchKey);
                        };
                        $input.keydown(function (event) {
                            if (event.which == 13) {
                                event.preventDefault();
                                var result_1 = nextSearch();
                                _.defer(function () {
                                    if (result_1) {
                                        $input.focus();
                                    }
                                });
                            }
                        });
                        $button.click(function () {
                            nextSearch();
                        });
                        $container.find(".ntsSearchBox_Component").attr("tabindex", tabIndex);
                        if (enable === false) {
                            $container.find(".ntsSearchBox_Component").attr('disabled', 'disabled');
                        }
                        return { 'controlsDescendantBindings': true };
                    };
                    NtsSearchBoxBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var $searchBox = $(element);
                        var data = valueAccessor();
                        var arr = ko.unwrap(data.items);
                        var searchMode = ko.unwrap(data.searchMode);
                        var primaryKey = ko.unwrap(data.targetKey);
                        var enable = ko.unwrap(data.enable);
                        var component;
                        if (data.mode === "listbox") {
                            component = $("#" + ko.unwrap(data.comId)).find(".ntsListBox");
                        }
                        else {
                            component = $("#" + ko.unwrap(data.comId));
                        }
                        var srhX = $searchBox.data("searchObject");
                        if (component.attr("filtered") === "true") {
                            var isCheck = component.triggerHandler("checknewitem");
                            if (isCheck !== false) {
                                var currentSoruce_1 = srhX.getDataSource();
                                var newItems = _.filter(arr, function (i) {
                                    return _.find(currentSoruce_1, function (ci) {
                                        return ci[primaryKey] === i[primaryKey];
                                    }) === undefined;
                                });
                                if (!_.isEmpty(newItems)) {
                                    var gridSources_1 = component.igGrid("option", "dataSource");
                                    _.forEach(newItems, function (item) {
                                        gridSources_1.push(item);
                                    });
                                    component.igGrid("option", "dataSource", _.cloneDeep(gridSources_1));
                                    component.igGrid("dataBind");
                                }
                            }
                        }
                        srhX.setDataSource(arr);
                        if (enable === false) {
                            $searchBox.find(".ntsSearchBox_Component").attr('disabled', 'disabled');
                        }
                        else {
                            $searchBox.find(".ntsSearchBox_Component").removeAttr('disabled');
                        }
                    };
                    return NtsSearchBoxBindingHandler;
                }());
                ko.bindingHandlers['ntsSearchBox'] = new NtsSearchBoxBindingHandler();
            })(koExtentions = ui_10.koExtentions || (ui_10.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_11) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * SwapList binding handler
                 */
                var NtsSwapListBindingHandler = /** @class */ (function () {
                    /**
                     * Constructor.
                     */
                    function NtsSwapListBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsSwapListBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var HEADER_HEIGHT = 27;
                        var CHECKBOX_WIDTH = 40;
                        var SEARCH_AREA_HEIGHT = 45;
                        var BUTTON_SEARCH_WIDTH = 70;
                        var INPUT_SEARCH_PADDING = 65;
                        var $swap = $(element);
                        var elementId = $swap.attr('id');
                        if (nts.uk.util.isNullOrUndefined(elementId)) {
                            throw new Error('the element NtsSwapList must have id attribute.');
                        }
                        var tabIndex = nts.uk.util.isNullOrEmpty($swap.attr("tabindex")) ? "0" : $swap.attr("tabindex");
                        $swap.data("tabindex", tabIndex);
                        $swap.attr("tabindex", "-1");
                        var data = valueAccessor();
                        var originalSource = ko.unwrap(data.dataSource !== undefined ? data.dataSource : data.options);
                        //            var selectedValues = ko.unwrap(data.value);
                        var totalWidth = ko.unwrap(data.width);
                        var disableMove = ko.unwrap(data.disableMoveButton);
                        var height = ko.unwrap(data.height);
                        var showSearchBox = ko.unwrap(data.showSearchBox);
                        var primaryKey = data.primaryKey !== undefined ? data.primaryKey : data.optionsValue;
                        var leftColumns = data.leftColumns || data.columns;
                        var rightColumns = data.rightColumns || data.columns;
                        var enableRowNumbering = false;
                        var defaultSearchText = (data.placeHolder !== undefined) ? ko.unwrap(data.placeHolder) : ui_11.toBeResource.searchByCodeName;
                        var beforeLeft = nts.uk.util.isNullOrUndefined(data.beforeMoveLeft) ? $.noop : data.beforeMoveLeft;
                        var beforeRight = nts.uk.util.isNullOrUndefined(data.beforeMoveRight) ? $.noop : data.beforeMoveRight;
                        var beforeAllL = nts.uk.util.isNullOrUndefined(data.beforeAllLeft) ? $.noop : data.beforeAllLeft;
                        var beforeAllR = nts.uk.util.isNullOrUndefined(data.beforeAllRight) ? $.noop : data.beforeAllRight;
                        var afterLeft = nts.uk.util.isNullOrUndefined(data.afterMoveLeft) ? $.noop : data.afterMoveLeft;
                        var afterRight = nts.uk.util.isNullOrUndefined(data.afterMoveRight) ? $.noop : data.afterMoveRight;
                        var afterAllL = nts.uk.util.isNullOrUndefined(data.afterAllLeft) ? $.noop : data.afterAllLeft;
                        var afterAllR = nts.uk.util.isNullOrUndefined(data.afterAllRight) ? $.noop : data.afterAllRight;
                        // 動作が不安定なので、使わないようにする
                        data.draggable = false;
                        $swap.wrap("<div class= 'ntsComponent ntsSwapList' id='" + elementId + "_container' tabindex='-1'/>");
                        if (totalWidth !== undefined) {
                            $swap.parent().width(totalWidth);
                        }
                        $swap.parent().height(height);
                        $swap.addClass("ntsSwapList-container");
                        var leftGridWidth = _.sumBy(leftColumns(), function (c) {
                            return c.width;
                        });
                        var rightGridWidth = _.sumBy(rightColumns(), function (c) {
                            return c.width;
                        });
                        var leftIggridColumns = _.map(leftColumns(), function (c) {
                            c["key"] = c.key === undefined ? c.prop : c.key;
                            c["dataType"] = 'string';
                            return c;
                        });
                        var rightIggridColumns = _.map(rightColumns(), function (c) {
                            c["key"] = c.key === undefined ? c.prop : c.key;
                            c["dataType"] = 'string';
                            return c;
                        });
                        var gridHeight = (height - 20);
                        var grid1Id = "#" + elementId + "-grid1";
                        var grid2Id = "#" + elementId + "-grid2";
                        //var defaultSearchText = "コード・名称で検索・・・"; // nts.uk.resource.getText("");
                        if (!uk.util.isNullOrUndefined(showSearchBox) && (showSearchBox.showLeft || showSearchBox.showRight)) {
                            var initSearchArea = function ($SearchArea, searchMode, searchText) {
                                $SearchArea.append("<div class='ntsSearchTextContainer'/>")
                                    .append("<div class='ntsSearchButtonContainer'/>");
                                if (searchMode === "filter") {
                                    $SearchArea.append("<div class='ntsClearButtonContainer'/>");
                                    $SearchArea.find(".ntsClearButtonContainer")
                                        .append("<button id = " + searchAreaId + "-clear-btn" + " class='ntsSearchButton clear-btn ntsSwap_Component'/>");
                                    $SearchArea.find(".clear-btn").text(ui_11.toBeResource.clear);
                                }
                                $SearchArea.find(".ntsSearchTextContainer")
                                    .append("<input id = " + searchAreaId + "-input" + " class = 'ntsSearchInput ntsSwap_Component ntsSearchBox nts-editor ntsSearchBox_Component'/>");
                                $SearchArea.find(".ntsSearchButtonContainer")
                                    .append("<button id = " + searchAreaId + "-btn" + " class='ntsSearchButton search-btn caret-bottom ntsSwap_Component'/>");
                                $SearchArea.find(".ntsSearchInput").attr("placeholder", searchText).wrap("<span class='nts-editor-wrapped ntsControl'/>");
                                $SearchArea.find(".search-btn").text(ui_11.toBeResource.search);
                            };
                            var searchAreaId = elementId + "-search-area";
                            $swap.append("<div class = 'nts-searchbbox-wrapper ntsSearchArea' id = " + searchAreaId + "/>");
                            var $searchArea = $swap.find(".ntsSearchArea");
                            $searchArea.append("<div class='ntsSwapSearchLeft'/>")
                                .append("<div class='ntsSwapSearchRight'/>");
                            $searchArea.css({ position: "relative" });
                            var searchAreaWidth = leftGridWidth + CHECKBOX_WIDTH;
                            if (showSearchBox.showLeft) {
                                var $searchLeftContainer = $swap.find(".ntsSwapSearchLeft");
                                $searchLeftContainer.width(searchAreaWidth).css({ position: "absolute", left: 0 });
                                initSearchArea($searchLeftContainer, data.searchMode, data.leftSearchBoxText || defaultSearchText);
                                $searchLeftContainer.find(".ntsSearchBox").width(searchAreaWidth - BUTTON_SEARCH_WIDTH - INPUT_SEARCH_PADDING - (data.searchMode === "filter" ? BUTTON_SEARCH_WIDTH : 0));
                            }
                            if (showSearchBox.showRight) {
                                var $searchRightContainer = $swap.find(".ntsSwapSearchRight");
                                $searchRightContainer.width(rightGridWidth + CHECKBOX_WIDTH).css({ position: "absolute", right: 0 });
                                initSearchArea($searchRightContainer, "highlight", data.rightSearchBoxText || defaultSearchText);
                                $searchRightContainer.find(".ntsSearchBox").width(rightGridWidth + CHECKBOX_WIDTH - BUTTON_SEARCH_WIDTH - INPUT_SEARCH_PADDING);
                            }
                            $searchArea.height(SEARCH_AREA_HEIGHT);
                            gridHeight -= SEARCH_AREA_HEIGHT;
                        }
                        $swap.append("<div class= 'ntsSwapArea ntsGridArea'/>");
                        $swap.find(".ntsGridArea").append("<div class = 'ntsSwapGridArea ntsSwapComponent' id = " + elementId + "-gridArea1" + "/>")
                            .append("<div class = 'ntsMoveDataArea ntsSwapComponent' id = " + elementId + "-move-data" + "/>")
                            .append("<div class = 'ntsSwapGridArea ntsSwapComponent' id = " + elementId + "-gridArea2" + "/>");
                        $swap.find("#" + elementId + "-gridArea1").append("<table class = 'ntsSwapGrid' id = " + elementId + "-grid1" + "/>");
                        $swap.find("#" + elementId + "-gridArea2").append("<table class = 'ntsSwapGrid' id = " + elementId + "-grid2" + "/>");
                        var $grid1 = $swap.find(grid1Id);
                        var $grid2 = $swap.find(grid2Id);
                        var features = [{ name: 'Selection', multipleSelection: true },
                            //                            { name: 'Sorting', type: 'local' },
                            { name: 'RowSelectors', enableCheckBoxes: true, enableRowNumbering: enableRowNumbering, rowSelectorColumnWidth: 25 }];
                        $swap.find("#" + elementId + "-gridArea1").width(leftGridWidth + CHECKBOX_WIDTH);
                        $swap.find("#" + elementId + "-gridArea2").width(rightGridWidth + CHECKBOX_WIDTH);
                        var leftCriterion = _.map(leftColumns(), function (c) { return c.key === undefined ? c.prop : c.key; });
                        var rightCriterion = _.map(rightColumns(), function (c) { return c.key === undefined ? c.prop : c.key; });
                        var swapParts = new Array();
                        swapParts.push(new GridSwapPart().listControl($grid1)
                            .searchControl($swap.find(".ntsSwapSearchLeft").find(".search-btn"))
                            .clearControl($swap.find(".ntsSwapSearchLeft").find(".clear-btn"))
                            .searchBox($swap.find(".ntsSwapSearchLeft").find(".ntsSearchBox"))
                            .withDataSource(originalSource)
                            .setSearchCriterion(data.leftSearchCriterion || data.searchCriterion || leftCriterion)
                            .setSearchMode(data.searchMode || "highlight")
                            .setColumns(leftColumns())
                            .setPrimaryKey(primaryKey)
                            .setInnerDrop((data.innerDrag && data.innerDrag.left !== undefined) ? data.innerDrag.left : true)
                            .setOuterDrop((data.outerDrag && data.outerDrag.left !== undefined) ? data.outerDrag.left : true)
                            .setItemsLimit((data.itemsLimit && data.itemsLimit.left !== undefined) ? data.itemsLimit.left : null)
                            .build());
                        swapParts.push(new GridSwapPart().listControl($grid2)
                            .searchControl($swap.find(".ntsSwapSearchRight").find(".search-btn"))
                            .clearControl($swap.find(".ntsSwapSearchRight").find(".clear-btn"))
                            .searchBox($swap.find(".ntsSwapSearchRight").find(".ntsSearchBox"))
                            .withDataSource(data.value())
                            .setSearchCriterion(data.rightSearchCriterion || data.searchCriterion || rightCriterion)
                            .setSearchMode("highlight")
                            .setColumns(rightColumns())
                            .setPrimaryKey(primaryKey)
                            .setInnerDrop((data.innerDrag && data.innerDrag.right !== undefined) ? data.innerDrag.right : true)
                            .setOuterDrop((data.outerDrag && data.outerDrag.right !== undefined) ? data.outerDrag.right : true)
                            .setItemsLimit((data.itemsLimit && data.itemsLimit.right !== undefined) ? data.itemsLimit.right : null)
                            .build());
                        this.swapper = new SwapHandler().setModel(new GridSwapList($swap, swapParts));
                        $grid1.igGrid({
                            //width: leftGridWidth + CHECKBOX_WIDTH,
                            height: (gridHeight) + "px",
                            primaryKey: primaryKey,
                            columns: leftIggridColumns,
                            virtualization: true,
                            virtualizationMode: 'continuous',
                            features: features,
                            tabIndex: -1
                        });
                        $grid1.closest('.ui-iggrid')
                            .addClass('nts-gridlist')
                            .height(gridHeight)
                            .attr("tabindex", tabIndex);
                        $grid1.ntsGridList('setupSelecting');
                        $grid2.igGrid({
                            //width: rightGridWidth + CHECKBOX_WIDTH,
                            height: (gridHeight) + "px",
                            primaryKey: primaryKey,
                            columns: rightIggridColumns,
                            virtualization: true,
                            virtualizationMode: 'continuous',
                            features: features,
                            tabIndex: -1
                        });
                        if (data.draggable === true) {
                            this.swapper.enableDragDrop(data.value);
                            if (data.multipleDrag && data.multipleDrag.left === true) {
                                this.swapper.Model.swapParts[0].$listControl.addClass("multiple-drag");
                            }
                            if (data.multipleDrag && data.multipleDrag.right === true) {
                                this.swapper.Model.swapParts[1].$listControl.addClass("multiple-drag");
                            }
                        }
                        $grid2.closest('.ui-iggrid')
                            .addClass('nts-gridlist')
                            .height(gridHeight)
                            .attr("tabindex", tabIndex);
                        $grid2.ntsGridList('setupSelecting');
                        var $moveArea = $swap.find("#" + elementId + "-move-data")
                            .append("<button class='move-button move-forward ntsSwap_Component'><i class='img-icon icon-next'></i></button>")
                            .append("<button class='move-button move-back ntsSwap_Component'><i class='img-icon icon-prev'></i></button>");
                        var $moveForward = $moveArea.find(".move-forward");
                        var $moveBack = $moveArea.find(".move-back");
                        var swapper = this.swapper;
                        $moveForward.click(function () {
                            swapper.Model.move(true, data.value, false, beforeRight, afterRight);
                        });
                        $moveBack.click(function () {
                            swapper.Model.move(false, data.value, false, beforeLeft, afterLeft);
                        });
                        $swap.find(".ntsSwap_Component").attr("tabindex", tabIndex);
                        this.swapper.Model.$container.bind("swaplistgridsizeexceed", function (evt, data) {
                            nts.uk.ui.dialog.alertError({ messageId: "Msg_887" });
                        });
                        $swap.find(".ntsSwapGrid").bind("listfilterred", function (evt, data) {
                            var $gridX = $(this);
                            var currentDataSource = $gridX.igGrid('option', 'dataSource');
                            var selected = $gridX.ntsGridList('getSelected');
                            var selectItems = _.filter(currentDataSource, function (itemFilterd) {
                                return _.find(selected, function (item) {
                                    var itemVal = itemFilterd[primaryKey];
                                    if (nts.uk.util.isNullOrUndefined(itemVal) || nts.uk.util.isNullOrUndefined(item["id"])) {
                                        return false;
                                    }
                                    return itemVal.toString() === item["id"].toString();
                                }) !== undefined;
                            });
                            $gridX.ntsGridList("setSelected", _.map(selectItems, primaryKey));
                        });
                    };
                    /**
                     * Update
                     */
                    NtsSwapListBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var $swap = $(element);
                        var disableMove = ko.unwrap(data.disableMoveButton);
                        if (disableMove === true) {
                            $swap.find(".move-button").attr("disabled", "disabled");
                        }
                        else {
                            $swap.find(".move-button").removeAttr("disabled");
                        }
                        var elementId = this.swapper.Model.$container.attr('id');
                        var primaryKey = this.swapper.Model.swapParts[0].primaryKey;
                        if (nts.uk.util.isNullOrUndefined(elementId)) {
                            throw new Error('the element NtsSwapList must have id attribute.');
                        }
                        var $grid1 = this.swapper.Model.swapParts[0].$listControl;
                        var $grid2 = this.swapper.Model.swapParts[1].$listControl;
                        var currentSource = $grid1.igGrid('option', 'dataSource');
                        var currentSelectedList = $grid2.igGrid('option', 'dataSource');
                        var newSources = (data.dataSource !== undefined ? data.dataSource() : data.options());
                        var newSelectedList = data.value();
                        _.remove(newSources, function (item) {
                            return _.find(newSelectedList, function (selected) {
                                return selected[primaryKey] === item[primaryKey];
                            }) !== undefined;
                        });
                        //            if (!_.isEqual(currentSource, newSources)) {
                        this.swapper.Model.swapParts[0].setDataSource(newSources.slice());
                        this.swapper.Model.transportBuilder.setFirst(newSources);
                        //            }
                        //            if (!_.isEqual(currentSelectedList, newSelectedList)) {
                        this.swapper.Model.swapParts[1].setDataSource(newSelectedList.slice());
                        this.swapper.Model.transportBuilder.setSecond(newSelectedList);
                        //            }
                    };
                    /**
                     * Share swapper b/w init and update
                     */
                    NtsSwapListBindingHandler.prototype.makeBindings = function () {
                        var handler = this;
                        return {
                            init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                                var newHandler = Object.create(handler);
                                if (handler.init) {
                                    handler.init.call(newHandler, element, valueAccessor, allBindings, viewModel, bindingContext);
                                }
                                if (handler.update) {
                                    ko.computed({
                                        read: handler.update.bind(newHandler, element, valueAccessor, allBindings, viewModel, bindingContext),
                                        disposeWhenNodeIsRemoved: element
                                    });
                                }
                            }
                        };
                    };
                    return NtsSwapListBindingHandler;
                }());
                ko.bindingHandlers['ntsSwapList'] = new NtsSwapListBindingHandler().makeBindings();
                var SwapHandler = /** @class */ (function () {
                    function SwapHandler() {
                    }
                    SwapHandler.prototype.setModel = function (model) {
                        this.model = model;
                        return this;
                    };
                    Object.defineProperty(SwapHandler.prototype, "Model", {
                        get: function () {
                            return this.model;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SwapHandler.prototype.handle = function (parts, value) {
                        var self = this;
                        var model = this.model;
                        for (var id in parts) {
                            var options = {
                                items: "tbody > tr",
                                containment: this.model.$container,
                                cursor: "move",
                                connectWith: ".ntsSwapGrid",
                                placeholder: "ui-state-highlight",
                                helper: this._createHelper,
                                appendTo: this.model.$container,
                                start: function (evt, ui) {
                                    model.transportBuilder.at(model.sender(ui));
                                },
                                beforeStop: function (evt, ui) {
                                    self._beforeStop.call(this, model, evt, ui);
                                },
                                update: function (evt, ui) {
                                    self._update.call(this, model, evt, ui, value);
                                }
                            };
                            this.model.swapParts[parts[id]].initDraggable(options);
                        }
                    };
                    SwapHandler.prototype._createHelper = function (evt, ui) {
                        var selectedRowElms = $(evt.currentTarget).igGrid("selectedRows");
                        // Set the orders same as on grid
                        selectedRowElms.sort(function (one, two) {
                            return one.index - two.index;
                        });
                        var $helper;
                        if ($(evt.currentTarget).hasClass("multiple-drag") && selectedRowElms.length > 1) {
                            $helper = $("<div><table><tbody></tbody></table></div>").addClass("select-drag");
                            var rowId = ui.data("row-idx");
                            var selectedItems = selectedRowElms.map(function (elm) { return elm.element; });
                            var height = 0;
                            $.each(selectedItems, function () {
                                $helper.find("tbody").append($(this).clone());
                                height += $(this).outerHeight();
                                if (rowId !== this.data("row-idx"))
                                    $(this).hide();
                            });
                            $helper.height(height);
                            $helper.find("tr").first().children().each(function (idx) {
                                $(this).width(ui.children().eq(idx).width());
                            });
                        }
                        else {
                            $helper = ui.clone();
                            $helper.children().each(function (idx) {
                                $(this).width(ui.children().eq(idx).width());
                            });
                        }
                        return $helper[0];
                    };
                    SwapHandler.prototype._beforeStop = function (model, evt, ui) {
                        var partId = model.transportBuilder.startAt === "first" ? 0 : 1;
                        var destPartId = model.receiver(ui) === "first" ? 0 : 1;
                        model.transportBuilder.toAdjacent(model.neighbor(ui)).target(model.target(ui));
                        var max = model.swapParts[destPartId].itemsLimit;
                        // In case of multiple selections
                        if (ui.helper.hasClass("select-drag") === true) {
                            var rowsInHelper = ui.helper.find("tr");
                            var rows = rowsInHelper.toArray();
                            if (model.transportBuilder.startAt === model.receiver(ui)
                                || (model.swapParts[partId].outerDrop === false
                                    && model.transportBuilder.startAt !== model.receiver(ui))
                                || (!uk.util.isNullOrUndefined(max) && (rows.length + model.swapParts[destPartId].dataSource.length > max))) {
                                $(this).sortable("cancel");
                                for (var idx in rows) {
                                    model.swapParts[partId].$listControl.find("tbody").children()
                                        .eq($(rows[idx]).data("row-idx")).show();
                                }
                                if (!uk.util.isNullOrUndefined(max) && (rows.length + model.swapParts[destPartId].dataSource.length > max)) {
                                    model.$container.trigger($.Event("swaplistgridsizeexceed"), [model.swapParts[destPartId].$listControl, max]);
                                }
                                return;
                            }
                            else {
                                var standardIdx = ui.placeholder.index();
                                var targetIdx = ui.item.data("row-idx");
                                var rowsBefore = new Array();
                                var rowsAfter = new Array();
                                for (var id in rows) {
                                    if ($(rows[id]).data("row-idx") < targetIdx)
                                        rowsBefore.push(rows[id]);
                                    else if ($(rows[id]).data("row-idx") > targetIdx)
                                        rowsAfter.push(rows[id]);
                                }
                                model.swapParts[destPartId].$listControl.find("tbody").children()
                                    .eq(standardIdx - 1).before(rowsBefore).after(rowsAfter);
                                // Remove rows in source
                                var sourceRows = model.swapParts[partId].$listControl.find("tbody").children();
                                for (var index = rowsAfter.length - 1; index >= 0; index--) {
                                    if ($(rows[index]).data("row-idx") === targetIdx)
                                        continue;
                                    sourceRows.eq($(rowsAfter[index]).data("row-idx") - 1).remove();
                                }
                                for (var val in rowsBefore) {
                                    sourceRows.eq($(rowsBefore[val]).data("row-idx")).remove();
                                }
                            }
                        }
                        else if ((model.swapParts[partId].innerDrop === false
                            && model.transportBuilder.startAt === model.receiver(ui))
                            || (model.swapParts[partId].outerDrop === false
                                && model.transportBuilder.startAt !== model.receiver(ui))
                            || (!uk.util.isNullOrUndefined(max) && model.swapParts[destPartId].dataSource.length >= max)) {
                            $(this).sortable("cancel");
                            if (!uk.util.isNullOrUndefined(max) && model.swapParts[destPartId].dataSource.length >= max) {
                                model.$container.trigger($.Event("swaplistgridsizeexceed"), [model.swapParts[destPartId].$listControl, max]);
                            }
                        }
                    };
                    SwapHandler.prototype._update = function (model, evt, ui, value) {
                        if (ui.item.closest("table").length === 0)
                            return;
                        model.transportBuilder.directTo(model.receiver(ui)).update();
                        if (model.transportBuilder.startAt === model.transportBuilder.direction) {
                            model.transportBuilder.startAt === "first"
                                ? model.swapParts[0].bindData(model.transportBuilder.getFirst())
                                : model.swapParts[1].bindData(model.transportBuilder.getSecond());
                        }
                        else {
                            model.swapParts[0].bindData(model.transportBuilder.getFirst());
                            model.swapParts[1].bindData(model.transportBuilder.getSecond());
                        }
                        value(model.transportBuilder.getSecond());
                        setTimeout(function () { model.dropDone(); }, 0);
                    };
                    SwapHandler.prototype.enableDragDrop = function (value, parts) {
                        parts = parts || [0, 1];
                        this.model.enableDrag(this, value, parts, this.handle);
                    };
                    return SwapHandler;
                }());
                var SwapModel = /** @class */ (function () {
                    function SwapModel($container, swapParts) {
                        this.$container = $container;
                        this.swapParts = swapParts;
                        this.transportBuilder = new ListItemTransporter(this.swapParts[0].dataSource, this.swapParts[1].dataSource)
                            .primary(this.swapParts[0].primaryKey);
                    }
                    return SwapModel;
                }());
                var SearchResult = /** @class */ (function () {
                    function SearchResult(results, indices) {
                        this.data = results;
                        this.indices = indices;
                    }
                    return SearchResult;
                }());
                var SwapPart = /** @class */ (function () {
                    function SwapPart() {
                        this.searchMode = "highlight"; // highlight & filter - Default: highlight
                        this.innerDrop = true;
                        this.outerDrop = true;
                    }
                    SwapPart.prototype.listControl = function ($listControl) {
                        this.$listControl = $listControl;
                        return this;
                    };
                    SwapPart.prototype.searchControl = function ($searchControl) {
                        this.$searchControl = $searchControl;
                        return this;
                    };
                    SwapPart.prototype.clearControl = function ($clearControl) {
                        this.$clearControl = $clearControl;
                        return this;
                    };
                    SwapPart.prototype.searchBox = function ($searchBox) {
                        this.$searchBox = $searchBox;
                        return this;
                    };
                    SwapPart.prototype.setSearchMode = function (searchMode) {
                        this.searchMode = searchMode;
                        return this;
                    };
                    SwapPart.prototype.setSearchCriterion = function (searchCriterion) {
                        this.searchCriterion = searchCriterion;
                        return this;
                    };
                    SwapPart.prototype.withDataSource = function (dataSource) {
                        this.dataSource = dataSource;
                        this.resetOriginalDataSource();
                        return this;
                    };
                    SwapPart.prototype.setDataSource = function (dataSource) {
                        this.bindData(dataSource);
                        this.resetOriginalDataSource();
                        return this;
                    };
                    SwapPart.prototype.setColumns = function (columns) {
                        this.columns = columns;
                        return this;
                    };
                    SwapPart.prototype.setPrimaryKey = function (primaryKey) {
                        this.primaryKey = primaryKey;
                        return this;
                    };
                    SwapPart.prototype.setInnerDrop = function (innerDrop) {
                        this.innerDrop = innerDrop;
                        return this;
                    };
                    SwapPart.prototype.setOuterDrop = function (outerDrop) {
                        this.outerDrop = outerDrop;
                        return this;
                    };
                    SwapPart.prototype.setItemsLimit = function (itemsLimit) {
                        this.itemsLimit = itemsLimit;
                        return this;
                    };
                    SwapPart.prototype.initDraggable = function (opts) {
                        this.$listControl.sortable(opts).disableSelection();
                    };
                    SwapPart.prototype.resetOriginalDataSource = function () {
                        this.originalDataSource = _.cloneDeep(this.dataSource);
                        this.$listControl.data("dataSource", this.originalDataSource);
                    };
                    SwapPart.prototype.search = function () {
                        var searchContents = this.$searchBox.val();
                        var orders = new Array();
                        if (nts.uk.util.isNullOrEmpty(searchContents)) {
                            nts.uk.ui.dialog.alert(nts.uk.resource.getMessage("MsgB_24"));
                            return null;
                        }
                        var searchCriterion = this.searchCriterion;
                        if (this.originalDataSource === undefined)
                            this.resetOriginalDataSource();
                        var results = _.filter(this.originalDataSource, function (value, index) {
                            var found = false;
                            _.forEach(searchCriterion, function (criteria) {
                                if (value[criteria].toString().indexOf(searchContents) !== -1) {
                                    found = true;
                                    return false;
                                }
                                else
                                    return true;
                            });
                            orders.push(index);
                            return found;
                        });
                        return new SearchResult(results, orders);
                    };
                    SwapPart.prototype.bindData = function (src) {
                        this.bindIn(src);
                        this.dataSource = src;
                    };
                    SwapPart.prototype.bindSearchEvent = function () {
                        var self = this;
                        var proceedSearch = this.proceedSearch;
                        var clearFilter = this.clearFilter;
                        this.$searchControl.click(function (evt, ui) {
                            proceedSearch.apply(self);
                        });
                        this.$clearControl.click(function (evt, ui) {
                            clearFilter.apply(self);
                            ;
                        });
                        this.$searchBox.keydown(function (evt, ui) {
                            var $input = this;
                            if (evt.which === 13) {
                                proceedSearch.apply(self);
                                _.defer(function () {
                                    $input.focus();
                                });
                            }
                        });
                    };
                    SwapPart.prototype.proceedSearch = function () {
                        if (this.searchMode === "filter") {
                            var results = this.search();
                            if (results === null)
                                return;
                            this.bindData(results.data);
                            this.$listControl.trigger("listfilterred");
                            this.$listControl.data("filter", true);
                            return results.data;
                        }
                        else {
                            this.highlightSearch();
                        }
                    };
                    SwapPart.prototype.clearFilter = function () {
                        if (this.searchMode === "filter") {
                            if (this.originalDataSource === undefined) {
                                this.resetOriginalDataSource();
                            }
                            this.bindData(this.originalDataSource);
                            this.$searchBox.val('');
                            this.$listControl.data("filter", false);
                        }
                    };
                    SwapPart.prototype.build = function () {
                        this.bindSearchEvent();
                        return this;
                    };
                    return SwapPart;
                }());
                var GridSwapPart = /** @class */ (function (_super) {
                    __extends(GridSwapPart, _super);
                    function GridSwapPart() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    GridSwapPart.prototype.search = function () {
                        return _super.prototype.search.call(this);
                    };
                    GridSwapPart.prototype.highlightSearch = function () {
                        var value = this.$searchBox.val();
                        if (nts.uk.util.isNullOrEmpty(value)) {
                            nts.uk.ui.dialog.alert(nts.uk.resource.getMessage("MsgB_24"));
                            return;
                        }
                        var source = this.dataSource.slice();
                        var selected = this.$listControl.ntsGridList("getSelected");
                        if (selected.length > 0) {
                            var gotoEnd = source.splice(0, selected[0].index + 1);
                            source = source.concat(gotoEnd);
                        }
                        /*var iggridColumns = _.map(this.columns, c => {
                            c["key"] = c.key === undefined ? c.prop : c.key;
                            c["dataType"] = 'string';
                            return c;
                        });*/
                        var searchCriterion = this.searchCriterion;
                        var searchedValues = _.find(source, function (val) {
                            return _.find(searchCriterion, function (x) {
                                //return x !== undefined && x !== null && val[x["key"]].toString().indexOf(value) >= 0;
                                return val[x].toString().indexOf(value) >= 0;
                            }) !== undefined;
                        });
                        if (searchedValues === undefined) {
                            nts.uk.ui.dialog.alert(nts.uk.resource.getMessage("MsgB_25"));
                            return;
                        }
                        this.$listControl.ntsGridList('setSelected', searchedValues !== undefined ? [searchedValues[this.primaryKey]] : []);
                        if (searchedValues !== undefined && (selected.length === 0 ||
                            selected[0].id !== searchedValues[this.primaryKey])) {
                            var current = this.$listControl.igGrid("selectedRows");
                            if (current.length > 0 && this.$listControl.igGrid("hasVerticalScrollbar")) {
                                this.$listControl.igGrid("virtualScrollTo", current[0].index === source.length - 1
                                    ? current[0].index : current[0].index + 1);
                            }
                        }
                    };
                    GridSwapPart.prototype.bindIn = function (src) {
                        this.$listControl.igGrid("option", "dataSource", src);
                        this.$listControl.igGrid("dataBind");
                    };
                    return GridSwapPart;
                }(SwapPart));
                var GridSwapList = /** @class */ (function (_super) {
                    __extends(GridSwapList, _super);
                    function GridSwapList() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    GridSwapList.prototype.sender = function (opts) {
                        return opts.item.closest("table")[0].id == this.swapParts[0].$listControl.attr("id")
                            ? "first" : "second";
                    };
                    GridSwapList.prototype.receiver = function (opts) {
                        return opts.item.closest("table")[0].id == this.swapParts[1].$listControl.attr("id")
                            ? "second" : "first";
                    };
                    GridSwapList.prototype.target = function (opts) {
                        if (opts.helper !== undefined && opts.helper.hasClass("select-drag")) {
                            return opts.helper.find("tr").map(function () {
                                return $(this).data("id");
                            });
                        }
                        return [opts.item.data("id")];
                    };
                    GridSwapList.prototype.neighbor = function (opts) {
                        return opts.item.prev().length === 0 ? "ceil" : opts.item.prev().data("id");
                    };
                    GridSwapList.prototype.dropDone = function () {
                        var self = this;
                        self.swapParts[0].$listControl.igGridSelection("clearSelection");
                        self.swapParts[1].$listControl.igGridSelection("clearSelection");
                        setTimeout(function () {
                            (self.transportBuilder.direction === "first"
                                ? self.swapParts[0].$listControl
                                : self.swapParts[1].$listControl).igGrid("virtualScrollTo", self.transportBuilder.incomeIndex);
                            (self.transportBuilder.startAt === "first"
                                ? self.swapParts[0].$listControl
                                : self.swapParts[1].$listControl).igGrid("virtualScrollTo", self.transportBuilder.outcomeIndex + 1);
                        }, 0);
                    };
                    GridSwapList.prototype.enableDrag = function (ctx, value, parts, cb) {
                        var self = this;
                        for (var idx in parts) {
                            this.swapParts[parts[idx]].$listControl.on("iggridrowsrendered", function (evt, ui) {
                                cb.call(ctx, parts, value);
                            });
                        }
                    };
                    GridSwapList.prototype.move = function (forward, value, moveAll, beforMove, afterMove) {
                        var primaryKey = this.transportBuilder.primaryKey;
                        var $source = forward === true ? this.swapParts[0].$listControl : this.swapParts[1].$listControl;
                        var sourceList = forward === true ? this.swapParts[0].dataSource : this.swapParts[1].dataSource;
                        var $dest = forward === true ? this.swapParts[1].$listControl : this.swapParts[0].$listControl;
                        var destList = forward === true ? this.swapParts[1].dataSource : this.swapParts[0].dataSource;
                        var max = forward === true ? this.swapParts[1].itemsLimit : this.swapParts[0].itemsLimit;
                        var oldSource = _.cloneDeep(destList);
                        if (moveAll) {
                            var selectedIds = sourceList.map(function (row) { return row[primaryKey]; });
                            if (beforMove(forward, oldSource, selectedIds) == false) {
                                return;
                            }
                            if (!uk.util.isNullOrUndefined(max) && (selectedIds.length + destList.length > max)) {
                                this.$container.trigger($.Event("swaplistgridsizeexceed"), [$dest, max]);
                                return;
                            }
                            this.transportBuilder.at(forward ? "first" : "second").directTo(forward ? "second" : "first")
                                .toAdjacent(destList.length > 0 ? destList[destList.length - 1][primaryKey] : null).update(moveAll);
                        }
                        else {
                            var selectedRows = $source.igGrid("selectedRows");
                            if (nts.uk.util.isNullOrEmpty(selectedRows)) {
                                return;
                            }
                            if (!uk.util.isNullOrUndefined(max) && (selectedRows.length + destList.length > max)) {
                                this.$container.trigger($.Event("swaplistgridsizeexceed"), [$dest, max]);
                                return;
                            }
                            selectedRows.sort(function (one, two) {
                                return one.index - two.index;
                            });
                            var firstSelected = selectedRows[0];
                            var selectedIds = selectedRows.map(function (row) { return row.id; });
                            if (beforMove(forward, oldSource, selectedIds) == false) {
                                return;
                            }
                            this.transportBuilder.at(forward ? "first" : "second").directTo(forward ? "second" : "first")
                                .target(selectedIds).toAdjacent(destList.length > 0 ? destList[destList.length - 1][primaryKey] : null).update(moveAll);
                        }
                        var firstSource = this.transportBuilder.getFirst();
                        var secondSource = this.transportBuilder.getSecond();
                        this.swapParts[0].setDataSource(firstSource);
                        this.swapParts[1].setDataSource(secondSource);
                        value(secondSource);
                        var searchResult, srcIndex = forward ? 0 : 1, destIndex = forward ? 1 : 0;
                        if (this.swapParts[srcIndex].$searchBox.val() === "") {
                            this.swapParts[srcIndex].$listControl.data("filter", false);
                        }
                        if (this.swapParts[destIndex].$searchBox.val() === "") {
                            this.swapParts[destIndex].$listControl.data("filter", false);
                        }
                        if (this.swapParts[srcIndex].$listControl.data("filter")) {
                            searchResult = this.swapParts[srcIndex].proceedSearch();
                        }
                        if (this.swapParts[destIndex].$listControl.data("filter")) {
                            this.swapParts[destIndex].proceedSearch();
                        }
                        $source.igGridSelection("clearSelection");
                        $dest.igGridSelection("clearSelection");
                        afterMove(forward, oldSource, _.cloneDeep(forward ? secondSource : firstSource));
                        if (forward) {
                            var arr = searchResult ? searchResult : firstSource;
                            var selectIndex = arr.length === 0 ? -1
                                : (arr.length - 1 < firstSelected.index ? arr.length - 1 : firstSelected.index);
                        }
                        else {
                            var arr = searchResult ? searchResult : secondSource;
                            var selectIndex = arr.length === 0 ? -1
                                : (arr.length - 1 < firstSelected.index ? arr.length - 1 : firstSelected.index);
                        }
                        setTimeout(function () {
                            $source.igGrid("virtualScrollTo", selectIndex);
                            $dest.igGrid("virtualScrollTo", destList.length - 1);
                            //                if(selectIndex >= 0){
                            //                    let selectId;
                            //                    if (searchResult) {
                            //                        selectId = searchResult[selectIndex][primaryKey];
                            //                    } else if (forward) {
                            //                        selectId = firstSource[selectIndex][primaryKey];
                            //                    } else {
                            //                        selectId = secondSource[selectIndex][primaryKey];
                            //                    }
                            //
                            //                    $source.igGridSelection("selectRowById", selectId);
                            //                }
                            //                if(!forward){
                            //                    $dest.ntsGridList("setSelected", selectedIds);
                            //                }
                        }, 10);
                    };
                    return GridSwapList;
                }(SwapModel));
                var ListItemTransporter = /** @class */ (function () {
                    function ListItemTransporter(firstList, secondList) {
                        this.firstList = firstList;
                        this.secondList = secondList;
                    }
                    ListItemTransporter.prototype.first = function (firstList) {
                        this.firstList = firstList;
                        return this;
                    };
                    ListItemTransporter.prototype.second = function (secondList) {
                        this.secondList = secondList;
                        return this;
                    };
                    ListItemTransporter.prototype.at = function (startAt) {
                        this.startAt = startAt;
                        return this;
                    };
                    ListItemTransporter.prototype.directTo = function (direction) {
                        this.direction = direction;
                        return this;
                    };
                    ListItemTransporter.prototype.out = function (index) {
                        this.outcomeIndex = index;
                        return this;
                    };
                    ListItemTransporter.prototype.into = function (index) {
                        this.incomeIndex = index;
                        return this;
                    };
                    ListItemTransporter.prototype.primary = function (primaryKey) {
                        this.primaryKey = primaryKey;
                        return this;
                    };
                    ListItemTransporter.prototype.target = function (targetIds) {
                        this.targetIds = targetIds;
                        return this;
                    };
                    ListItemTransporter.prototype.toAdjacent = function (adjId) {
                        if (adjId === null)
                            adjId = "ceil";
                        this.adjacentIncomeId = adjId;
                        return this;
                    };
                    ListItemTransporter.prototype.indexOf = function (list, targetId) {
                        var _this = this;
                        return _.findIndex(list, function (elm) { return elm[_this.primaryKey].toString() === targetId.toString(); });
                    };
                    ListItemTransporter.prototype.move = function (src, dest, moveAll) {
                        if (moveAll) {
                            this.moveAllItems(src, dest);
                        }
                        else {
                            this.moveNormal(src, dest);
                        }
                    };
                    ListItemTransporter.prototype.moveNormal = function (src, dest) {
                        for (var i = 0; i < this.targetIds.length; i++) {
                            this.outcomeIndex = this.indexOf(src, this.targetIds[i]);
                            if (this.outcomeIndex === -1)
                                return;
                            var target = src.splice(this.outcomeIndex, 1);
                            this.incomeIndex = this.indexOf(dest, this.adjacentIncomeId) + 1;
                            if (this.incomeIndex === 0) {
                                if (this.adjacentIncomeId === "ceil")
                                    this.incomeIndex = 0;
                                else if (target !== undefined) {
                                    src.splice(this.outcomeIndex, 0, target[0]);
                                    return;
                                }
                            }
                            dest.splice(this.incomeIndex + i, 0, target[0]);
                        }
                    };
                    ListItemTransporter.prototype.moveAllItems = function (src, dest) {
                        dest.push.apply(dest, src);
                        //            dest.splice(0, 0, src);
                        _.remove(src);
                    };
                    ListItemTransporter.prototype.determineDirection = function () {
                        if (this.startAt.toLowerCase() !== this.direction.toLowerCase()
                            && this.direction.toLowerCase() === "second") {
                            return "firstToSecond";
                        }
                        else if (this.startAt.toLowerCase() !== this.direction.toLowerCase()
                            && this.direction.toLowerCase() === "first") {
                            return "secondToFirst";
                        }
                        else if (this.startAt.toLowerCase() === this.direction.toLowerCase()
                            && this.direction.toLowerCase() === "first") {
                            return "insideFirst";
                        }
                        else
                            return "insideSecond";
                    };
                    ListItemTransporter.prototype.update = function (moveAll) {
                        switch (this.determineDirection()) {
                            case "firstToSecond":
                                this.move(this.firstList, this.secondList, moveAll);
                                break;
                            case "secondToFirst":
                                this.move(this.secondList, this.firstList, moveAll);
                                break;
                            case "insideFirst":
                                this.move(this.firstList, this.firstList, moveAll);
                                break;
                            case "insideSecond":
                                this.move(this.secondList, this.secondList, moveAll);
                                break;
                        }
                    };
                    ListItemTransporter.prototype.getFirst = function () {
                        return this.firstList;
                    };
                    ListItemTransporter.prototype.getSecond = function () {
                        return this.secondList;
                    };
                    ListItemTransporter.prototype.setFirst = function (first) {
                        this.firstList = first;
                    };
                    ListItemTransporter.prototype.setSecond = function (second) {
                        this.secondList = second;
                    };
                    return ListItemTransporter;
                }());
                $.fn.swapList = function (method, param) {
                    switch (method) {
                        case "dataSource":
                            var id = $(this).attr("id") + "-grid" + (param + 1);
                            var dataSource = $("#" + id).data("dataSource");
                            return dataSource ? dataSource : [];
                    }
                };
            })(koExtentions = ui_11.koExtentions || (ui_11.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_12) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * SwitchButton binding handler
                 */
                var NtsSwitchButtonBindingHandler = /** @class */ (function () {
                    /**
                     * Constructor.
                     */
                    function NtsSwitchButtonBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsSwitchButtonBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var container = $(element);
                        if (nts.uk.util.isNullOrUndefined(container.attr("tabindex")))
                            container.attr("tabindex", "0");
                        container.data("tabindex", container.attr("tabindex"));
                        container.keydown(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (code === 32) {
                                evt.preventDefault();
                            }
                        });
                        container.keyup(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (container.data("enable") !== false) {
                                if (code === 32) {
                                    var selectedCode = container.find(".nts-switch-button:first").data('swbtn');
                                    data.value(selectedCode);
                                    //                        container.focus();
                                }
                                else if (code === 37 || code === 38) {
                                    var inputList = container.find(".nts-switch-button");
                                    var currentSelect = _.findIndex(inputList, function (item) {
                                        return $(item).data('swbtn') === data.value();
                                    });
                                    var selectedCode = $(inputList[currentSelect - 1]).data('swbtn');
                                    if (!nts.uk.util.isNullOrUndefined(selectedCode)) {
                                        data.value(selectedCode);
                                    }
                                    //                        container.focus();
                                }
                                else if (code === 39 || code === 40) {
                                    var inputList = container.find(".nts-switch-button");
                                    var currentSelect = _.findIndex(inputList, function (item) {
                                        return $(item).data('swbtn') === data.value();
                                    });
                                    var selectedCode = $(inputList[currentSelect + 1]).data('swbtn');
                                    if (!nts.uk.util.isNullOrUndefined(selectedCode)) {
                                        data.value(selectedCode);
                                    }
                                    //                        container.focus();
                                }
                            }
                        });
                        // Default value.
                        var defVal = new nts.uk.util.value.DefaultValue().onReset(container, data.value);
                        container.bind("validate", function () {
                            if (container.ctState("required", "get") && !container.ctState("selected", "get")) {
                                container.ntsError("set", uk.resource.getMessage("MsgB_2", [container.ctState("name", "get")]), "MsgB_2");
                            }
                            else {
                                container.ntsError("clear");
                            }
                        });
                        ui.bindErrorStyle.useDefaultErrorClass(container);
                    };
                    /**
                     * Update
                     */
                    NtsSwitchButtonBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var selectedCssClass = 'selected';
                        // Get options.
                        var options = ko.unwrap(data.options);
                        // Get options value.
                        var optionValue = ko.unwrap(data.optionsValue);
                        var optionText = ko.unwrap(data.optionsText);
                        var selectedValue = ko.unwrap(data.value);
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Container.
                        var container = $(element);
                        container.data("enable", enable);
                        container.addClass("ntsControl switchButton-wrapper");
                        container.ctState("required", "set", ko.unwrap(data.required) === true);
                        container.ctState("name", "set", ko.unwrap(data.name));
                        // Remove deleted button.
                        $('button', container).each(function (index, btn) {
                            var $btn = $(btn);
                            var btnValue = $(btn).data('swbtn');
                            // Check if btn is contained in options.
                            var foundFlag = _.findIndex(options, function (opt) {
                                return opt[optionValue] == btnValue;
                            }) != -1;
                            if (!foundFlag) {
                                $btn.remove();
                                return;
                            }
                        });
                        // Start binding new state.
                        _.forEach(options, function (opt) {
                            var value = opt[optionValue];
                            var text = opt[optionText];
                            // Find button.
                            var targetBtn = NtsSwitchButtonBindingHandler.setSelectedClass(container, selectedCssClass, selectedValue, value);
                            if (targetBtn) {
                                // Do nothing.
                            }
                            else {
                                // Recreate
                                var btn = $('<button>').text(text)
                                    .addClass('nts-switch-button unselectable')
                                    .data('swbtn', value)
                                    .attr('tabindex', "-1")
                                    .attr('unselectable', "on")
                                    .on('click', function () {
                                    var selectedValue = $(this).data('swbtn');
                                    data.value(selectedValue);
                                    $('button', container).removeClass(selectedCssClass);
                                    $(this).addClass(selectedCssClass);
                                    container.focus();
                                });
                                if (selectedValue == value) {
                                    btn.addClass(selectedCssClass);
                                    container.ctState("selected", "set", true);
                                }
                                container.append(btn);
                            }
                        });
                        if (enable === true) {
                            $('button', container).prop("disabled", false);
                            container.attr("tabindex", container.data("tabindex"));
                        }
                        else {
                            $('button', container).prop("disabled", true);
                            new nts.uk.util.value.DefaultValue().applyReset(container, data.value);
                            container.attr("tabindex", "-1");
                        }
                    };
                    NtsSwitchButtonBindingHandler.setSelectedClass = function ($container, selectedCssClass, selectedValue, optValue) {
                        var targetBtn;
                        $container.ctState("selected", "set", false);
                        $('button', $container).each(function (index, btn) {
                            var btnValue = $(btn).data('swbtn');
                            if (btnValue == optValue) {
                                targetBtn = $(btn);
                            }
                            if (btnValue == selectedValue) {
                                $(btn).addClass(selectedCssClass);
                                $container.ctState("selected", "set", true);
                                $container.ntsError("clear");
                            }
                            else {
                                $(btn).removeClass(selectedCssClass);
                            }
                        });
                        return targetBtn;
                    };
                    return NtsSwitchButtonBindingHandler;
                }());
                ko.bindingHandlers['ntsSwitchButton'] = new NtsSwitchButtonBindingHandler();
            })(koExtentions = ui_12.koExtentions || (ui_12.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_13) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * TabPanel Binding Handler
                 */
                var TabPanelBindingHandler = /** @class */ (function () {
                    /**
                     * Constructor.
                     */
                    function TabPanelBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    TabPanelBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var tabs = ko.unwrap(data.dataSource);
                        var direction = ko.unwrap(data.direction || "horizontal");
                        // Container.
                        var container = $(element);
                        if (nts.uk.util.isNullOrUndefined(container.attr("tabindex")))
                            container.attr("tabindex", "0");
                        container.data("tabindex", container.attr("tabindex"));
                        // Create title.
                        container.prepend('<ul></ul>');
                        var titleContainer = container.children('ul');
                        for (var i = 0; i < tabs.length; i++) {
                            var id = tabs[i].id;
                            var title = tabs[i].title;
                            titleContainer.append('<li><a href="#' + id + '">' + title + '</a></li>');
                            // Wrap content.
                            var content = tabs[i].content;
                            container.children(content).wrap('<div id="' + id + '"></div>');
                        }
                        container.bind("parentactived", function (evt, dataX) {
                            dataX.child.find("div[role='tabpanel'][aria-hidden='false']:first").removeClass("disappear");
                            //                data.active.valueHasMutated();
                        });
                        container.bind("change-tab", function (e, newTabId) {
                            data.active(newTabId);
                            // nested tabの場合にpropagationすると困る。tabIdは別なので。
                            e.stopPropagation();
                        });
                        container.tabs({
                            create: function (event, ui) {
                                container.find('.ui-tabs-panel').addClass('disappear');
                                ui.panel.removeClass('disappear');
                            },
                            activate: function (evt, ui) {
                                data.active(ui.newPanel[0].id);
                                container.find('.ui-tabs-panel').addClass('disappear');
                                ui.newPanel.removeClass('disappear');
                                container.children('ul').children('.ui-tabs-active').addClass('active');
                                container.children('ul').children('li').not('.ui-tabs-active').removeClass('active');
                                container.children('ul').children('.ui-state-disabled').addClass('disabled');
                                container.children('ul').children('li').not('.ui-state-disabled').removeClass('disabled');
                                var child = ui.newPanel.children().find(".ui-tabs:first");
                                child.trigger("parentactived", { child: child });
                            }
                        }).addClass(direction);
                    };
                    /**
                     * Update
                     */
                    TabPanelBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        // Get tab list.
                        var tabs = ko.unwrap(data.dataSource);
                        // Container.
                        var container = $(element);
                        // Select tab.
                        var activeTab = _.find(tabs, function (tab) {
                            return tab.id == data.active();
                        });
                        var indexActive = tabs.indexOf(activeTab);
                        var oldIndexActive = container.tabs("option", "active");
                        if (oldIndexActive !== indexActive) {
                            container.tabs("option", "active", indexActive);
                        }
                        if (!activeTab.enable() || !activeTab.visible()) {
                            var firstActiveTab = _.find(tabs, function (tab) {
                                return tab.enable() && tab.visible();
                            });
                            if (!nts.uk.util.isNullOrUndefined(firstActiveTab)) {
                                data.active(firstActiveTab.id);
                                var firstIndexActive = tabs.indexOf(firstActiveTab);
                                container.tabs("option", "active", firstIndexActive);
                            }
                        }
                        // Disable & visible tab.
                        tabs.forEach(function (tab) {
                            if (tab.enable()) {
                                container.tabs("enable", '#' + tab.id);
                                container.children('#' + tab.id).children('div').show();
                                container.children('ul').children('li[aria-controls="' + tab.id + '"]').removeClass('disabled');
                            }
                            else {
                                container.tabs("disable", '#' + tab.id);
                                container.children('#' + tab.id).children('div').hide();
                                container.children('ul').children('li[aria-controls="' + tab.id + '"]').addClass('disabled');
                            }
                            if (!tab.visible()) {
                                container.children('ul').children('li[aria-controls="' + tab.id + '"]').hide();
                            }
                            else {
                                container.children('ul').children('li[aria-controls="' + tab.id + '"]').show();
                            }
                        });
                        container.attr('tabindex', container.data("tabindex"));
                        _.defer(function () { container.children('ul').children('li').attr("tabindex", container.data("tabindex")); });
                    };
                    return TabPanelBindingHandler;
                }());
                ko.bindingHandlers['ntsTabPanel'] = new TabPanelBindingHandler();
            })(koExtentions = ui_13.koExtentions || (ui_13.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Panel binding handler
                 */
                var NtsPanelBindingHandler = /** @class */ (function () {
                    function NtsPanelBindingHandler() {
                    }
                    /**
                     * Init
                     */
                    NtsPanelBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var width = (data.width !== undefined) ? ko.unwrap(data.width) : null;
                        var height = (data.height !== undefined) ? ko.unwrap(data.height) : null;
                        var direction = (data.direction !== undefined) ? ko.unwrap(data.direction) : "right";
                        var showIcon = (data.showIcon !== undefined) ? ko.unwrap(data.showIcon) : false;
                        var visible = (data.visible !== undefined) ? ko.unwrap(data.visible) : true;
                        var container = $(element);
                        container.addClass("panel ntsPanel caret-background");
                        var caretClass = "caret-" + direction;
                        container.addClass(caretClass + " direction-" + direction);
                        if (showIcon === true) {
                            container.append("<i class='icon icon-searchbox'></i>");
                        }
                    };
                    /**
                     * Update
                     */
                    NtsPanelBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var width = (data.width !== undefined) ? ko.unwrap(data.width) : null;
                        var height = (data.height !== undefined) ? ko.unwrap(data.height) : null;
                        var direction = (data.direction !== undefined) ? ko.unwrap(data.direction) : "right";
                        var showIcon = (data.showIcon !== undefined) ? ko.unwrap(data.showIcon) : false;
                        var visible = (data.visible !== undefined) ? ko.unwrap(data.visible) : null;
                        // Container
                        var container = $(element);
                        if (!nts.uk.util.isNullOrEmpty(width))
                            container.width(width);
                        if (!nts.uk.util.isNullOrEmpty(height))
                            container.height(height);
                        if (!nts.uk.util.isNullOrEmpty(visible)) {
                            if (visible === true)
                                container.show();
                            else
                                container.hide();
                        }
                    };
                    return NtsPanelBindingHandler;
                }());
                ko.bindingHandlers['ntsPanel'] = new NtsPanelBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_14) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * TreeGrid binding handler
                 */
                var NtsTreeGridViewBindingHandler = /** @class */ (function () {
                    /**
                     * Constructor.
                     */
                    function NtsTreeGridViewBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsTreeGridViewBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var ROW_HEIGHT = 24;
                        var HEADER_HEIGHT = 24;
                        // Get data.
                        var data = valueAccessor();
                        var options = ko.unwrap(data.dataSource !== undefined ? data.dataSource : data.options);
                        var optionsValue = ko.unwrap(data.primaryKey !== undefined ? data.primaryKey : data.optionsValue);
                        var optionsText = ko.unwrap(data.primaryText !== undefined ? data.primaryText : data.optionsText);
                        var optionsChild = ko.unwrap(data.childDataKey !== undefined ? data.childDataKey : data.optionsChild);
                        var extColumns = ko.unwrap(data.columns !== undefined ? data.columns : data.extColumns);
                        var initialExpandDepth = ko.unwrap(data.initialExpandDepth);
                        var selectedValues = ko.unwrap(data.selectedValues);
                        var singleValue = ko.unwrap(data.value);
                        var rows = ko.unwrap(data.rows);
                        var virtualization = ko.unwrap(!uk.util.isNullOrUndefined(data.virtualization) ? data.virtualization : false);
                        var virtualizationMode = ko.unwrap(!uk.util.isNullOrUndefined(data.virtualizationMode) ? data.virtualizationMode : "");
                        var isFilter = ko.unwrap(!uk.util.isNullOrUndefined(data.filter) ? data.filter : false);
                        // Default.
                        var showCheckBox = data.showCheckBox !== undefined ? ko.unwrap(data.showCheckBox) : true;
                        var enable = data.enable !== undefined ? ko.unwrap(data.enable) : true;
                        var height = ko.unwrap(data.height !== undefined ? data.height : 0);
                        var width = ko.unwrap(data.width !== undefined ? data.width : 0);
                        if (extColumns !== undefined && extColumns !== null) {
                            var displayColumns = extColumns;
                        }
                        else {
                            var displayColumns = [
                                { headerText: ui_14.toBeResource.code, key: optionsValue, dataType: "string", hidden: true },
                                { headerText: ui_14.toBeResource.codeAndName, key: optionsText, dataType: "string" }
                            ];
                        }
                        var $treegrid = $(element);
                        var tabIndex = nts.uk.util.isNullOrEmpty($treegrid.attr("tabindex")) ? "0" : $treegrid.attr("tabindex");
                        $treegrid.attr("tabindex", "-1");
                        var features = [];
                        features.push({
                            name: "Selection",
                            multipleSelection: true,
                            activation: true,
                            rowSelectionChanged: function (evt, ui) {
                                var selectedRows = ui.selectedRows;
                                if (ko.unwrap(data.multiple)) {
                                    if (ko.isObservable(data.selectedValues)) {
                                        data.selectedValues(_.map(selectedRows, function (row) {
                                            return row.id;
                                        }));
                                    }
                                }
                                else {
                                    if (ko.isObservable(data.value)) {
                                        var valueX = selectedRows.length <= 0 ? undefined : ui.row.id;
                                        if (data.value() === valueX) {
                                            data.value.valueHasMutated();
                                        }
                                        else {
                                            data.value(selectedRows.length <= 0 ? undefined : ui.row.id);
                                        }
                                    }
                                }
                            }, rowSelectionChanging: function (evt, ui) {
                                var disabledRows = $treegrid.data("rowDisabled");
                                if (!_.isEmpty(disabledRows)) {
                                    _.remove(ui.selectedRows, function (r) {
                                        return disabledRows.includes(r.id);
                                    });
                                }
                            }
                        });
                        features.push({
                            name: "RowSelectors",
                            enableCheckBoxes: showCheckBox,
                            rowSelectorColumnWidth: showCheckBox ? 25 : 0,
                            enableRowNumbering: false,
                            checkBoxMode: "biState"
                        });
                        features.push({ name: "Resizing" });
                        if (!nts.uk.util.isNullOrEmpty(rows)) {
                            height = rows * ROW_HEIGHT + HEADER_HEIGHT;
                            if (window.navigator.userAgent.indexOf("MSIE") > -1 || window.navigator.userAgent.match(/trident/i)
                                || window.navigator.userAgent.indexOf("Edge") > -1) {
                                height += rows * 0.4;
                            }
                            var colSettings_2 = [];
                            _.forEach(displayColumns, function (c) {
                                if (c["hidden"] === undefined || c["hidden"] === false) {
                                    colSettings_2.push({ columnKey: c["key"], allowTooltips: true });
                                    if (nts.uk.util.isNullOrEmpty(c["columnCssClass"])) {
                                        c["columnCssClass"] = "text-limited";
                                    }
                                    else {
                                        c["columnCssClass"] += " text-limited";
                                    }
                                }
                            });
                            features.push({
                                name: "Tooltips",
                                columnSettings: colSettings_2,
                                visibility: "overflow",
                                showDelay: 200,
                                hideDelay: 200
                            });
                            $treegrid.addClass("row-limited");
                        }
                        if (isFilter) {
                            features.push({ name: "Filtering", filterDelay: 100, filterDropDownAnimationDuration: 100,
                                dataFiltered: function (evt, ui) {
                                    var disabled = $treegrid.data("rowDisabled");
                                    if (!_.isEmpty(disabled)) {
                                        $treegrid.ntsTreeView("disableRows", disabled);
                                    }
                                }, dataFiltering: function (evt, ui) {
                                    var disabled = $treegrid.data("rowDisabled"), currentCol = _.find(ui.owner.grid.options.columns, function (c) { return c.key === ui.columnKey; }), shouldRemove = $treegrid.data("customExpression");
                                    _.remove(ui.newExpressions, function (ex) { return _.isNil(ex.expr); });
                                    if (!_.isEmpty(shouldRemove)) {
                                        _.remove(ui.newExpressions, function (ex) { return !_.isNil(_.find(shouldRemove, function (sr) { return _.isEqual(sr, ex); })); });
                                        $treegrid.data("customExpression", []);
                                    }
                                    if (!_.isNil(currentCol) && currentCol.formatType === "checkbox" && !_.isNil(currentCol.filterOpts)) {
                                        var currentExp = _.find(ui.newExpressions, function (exp) { return exp.fieldName === ui.columnKey; });
                                        if (!_.isNil(currentExp)) {
                                            var isFilterTrue = currentExp.expr.toLowerCase() === "check";
                                            ui.owner._currentTarget.closest(".ui-iggrid-filtercell").find(".ui-iggrid-filtereditor")
                                                .val(isFilterTrue ? currentCol.filterOpts.trueOpt : currentCol.filterOpts.falseOpt);
                                        }
                                    }
                                    if (!_.isEmpty(disabled) && !_.isEmpty(ui.newExpressions)) {
                                        var shouldRemove_1 = [];
                                        _.forEach(disabled, function (rId) {
                                            var newExp = { fieldName: optionsValue, cond: "doesNotEqual", expr: rId };
                                            ui.newExpressions.push(newExp);
                                            shouldRemove_1.push(newExp);
                                        });
                                        $treegrid.data("customExpression", shouldRemove_1);
                                    }
                                    $treegrid.data("filterIdx", 0);
                                    $treegrid.data("previousCol", null);
                                }, dropDownOpening: function (evt, ui) {
                                    var colName = ui.dropDown.attr("aria-describedby"), currentCol = _.find(ui.owner.grid.options.columns, function (c) { return c.key === colName; });
                                    if (!_.isNil(currentCol) && currentCol.formatType === "checkbox") {
                                        var filterOpts = ui.dropDown.find(".ui-iggrid-filterddlistitemicons"), trueOpt = _.find(filterOpts, function (f) { return !_.isNil($(f).data("cond")) && $(f).data("cond").toString().toLowerCase().contains("check"); }), falseOpt = _.find(filterOpts, function (f) { return !_.isNil($(f).data("cond")) && $(f).data("cond").toString().toLowerCase().contains("noncheck"); }), norTrueOpt = _.find(filterOpts, function (f) { return !_.isNil($(f).data("cond")) && $(f).data("cond").toString().toLowerCase() === "true"; }), norFalseOpt = _.find(filterOpts, function (f) { return !_.isNil($(f).data("cond")) && $(f).data("cond").toString().toLowerCase() === "false"; });
                                        $(norTrueOpt).remove();
                                        $(norFalseOpt).remove();
                                        if (!_.isNil(currentCol.filterOpts)) {
                                            $(trueOpt).find(".ui-iggrid-filterddlistitemcontainer").html(currentCol.filterOpts.trueOpt); //nts.uk.resource.getText("Enum_UseAtr_Use"));
                                            $(falseOpt).find(".ui-iggrid-filterddlistitemcontainer").html(currentCol.filterOpts.falseOpt); //nts.uk.resource.getText("Enum_UseAtr_NotUse"));
                                        }
                                    }
                                }, dropDownClosed: function (evt, ui) {
                                    ui.owner._currentTarget.closest(".ui-iggrid-filtercell").find(".ui-iggrid-filterbutton").removeClass("ui-state-active ui-iggrid-filterbuttonactive");
                                }, filterSummaryAlwaysVisible: false });
                        }
                        $treegrid.data("expand", new ExpandNodeHolder());
                        $treegrid.data("autoExpanding", false);
                        var colSet = _.map(displayColumns, function (col) {
                            return { columnKey: col.key, readOnly: true };
                        });
                        features.push({ name: "Updating", editMode: "cell", enableAddChild: false,
                            enableAddRow: false, enableDeleteRow: false, columnSettings: colSet });
                        var cols = $treegrid.ntsTreeView("formatColumns", displayColumns, features);
                        // Init ig grid.
                        $treegrid.igTreeGrid({
                            width: width,
                            height: height,
                            indentation: "12px",
                            dataSource: _.cloneDeep(options),
                            primaryKey: optionsValue,
                            columns: cols,
                            autoCommit: true,
                            childDataKey: optionsChild,
                            initialExpandDepth: nts.uk.util.isNullOrUndefined(initialExpandDepth) ? 10 : initialExpandDepth,
                            tabIndex: -1,
                            features: features,
                            virtualization: virtualization,
                            virtualizationMode: virtualizationMode,
                            rowExpanded: function (evt, ui) {
                                if (!$treegrid.data("autoExpanding")) {
                                    var holder = $treegrid.data("expand");
                                    holder.addNode(ui["dataRecord"][optionsValue]);
                                    $treegrid.data("expand", holder);
                                }
                                var disabledRows = $treegrid.data("rowDisabled");
                                if (!_.isEmpty(disabledRows)) {
                                    $treegrid.ntsTreeView("disableRows", disabledRows);
                                }
                            }, rowCollapsed: function (evt, ui) {
                                if (!$treegrid.data("autoExpanding")) {
                                    var holder = $treegrid.data("expand");
                                    holder.removeNodeAndChilds(ui["dataRecord"], optionsValue, optionsChild);
                                    $treegrid.data("expand", holder);
                                }
                            }, rowsRendered: function (evt, ui) {
                                $treegrid.data("autoExpanding", true);
                                var holder = $treegrid.data("expand");
                                //                    if(!nts.uk.util.isNullOrEmpty(holder.nodes)){
                                //                    _.forEach(holder.nodes, function(node: any){
                                //                        $treegrid.igTreeGrid("expandRow", node);
                                //                    });
                                //                    }
                                if (virtualization) {
                                    var disabledRows = $treegrid.data("rowDisabled");
                                    if (!_.isEmpty(disabledRows)) {
                                        $treegrid.ntsTreeView("disableRows", disabledRows);
                                    }
                                }
                                $treegrid.data("autoExpanding", false);
                            }
                        });
                        var treeGridId = $treegrid.attr('id');
                        $treegrid.closest('.ui-igtreegrid').addClass('nts-treegridview').attr("tabindex", tabIndex);
                        $treegrid.bind('selectionchanged', function () {
                            if (data.multiple) {
                                var selected = $treegrid.ntsTreeView('getSelected');
                                if (!nts.uk.util.isNullOrEmpty(selected)) {
                                    data.selectedValues(_.map(selected, function (s) { return s.id; }));
                                }
                                else {
                                    data.selectedValues([]);
                                }
                            }
                            else {
                                var selected = $treegrid.ntsTreeView('getSelected');
                                if (!nts.uk.util.isNullOrEmpty(selected)) {
                                    data.value(selected.id);
                                }
                                else {
                                    data.value('');
                                }
                            }
                        });
                        $treegrid.bind('cellChanging', function () {
                            $treegrid.data("notUpdate", true);
                            var optionX = data.dataSource !== undefined ? data.dataSource : data.options;
                            optionX($treegrid.igTreeGrid("option", "dataSource"));
                        });
                        $treegrid.setupSearchScroll("igTreeGrid");
                        if (showCheckBox != true) {
                            $treegrid.closest(".nts-treegridview").addClass("no-selector");
                            $treegrid.closest(".nts-treegridview").find("col[data-skip='true']").addClass("no-width");
                        }
                    };
                    /**
                     * Update
                     */
                    NtsTreeGridViewBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var options = ko.unwrap(data.dataSource !== undefined ? data.dataSource : data.options);
                        var selectedValues = ko.unwrap(data.selectedValues);
                        var singleValue = ko.unwrap(data.value);
                        var multiple = data.multiple != undefined ? ko.unwrap(data.multiple) : true;
                        var $treegrid = $(element);
                        if ($treegrid.data("notUpdate") === true) {
                            $treegrid.data("notUpdate", false);
                            return;
                        }
                        var disabledRows = $treegrid.data("rowDisabled");
                        if (!_.isEmpty(disabledRows)) {
                            if (multiple) {
                                _.remove(selectedValues, function (r) {
                                    return disabledRows.includes(r);
                                });
                                if (!_.isEqual(selectedValues, data.selectedValues())) {
                                    data.selectedValues(selectedValues);
                                    return;
                                }
                            }
                            else {
                                if (!_.isNil(singleValue) && disabledRows.includes(singleValue)) {
                                    data.value(null);
                                    return;
                                }
                            }
                            $treegrid.ntsTreeView("disableRows", disabledRows);
                        }
                        // Update datasource.
                        var originalSource = $(element).igTreeGrid('option', 'dataSource');
                        if (!_.isEqual(originalSource, options)) {
                            $treegrid.igTreeGrid("option", "dataSource", _.cloneDeep(options));
                            $treegrid.igTreeGrid("dataBind");
                        }
                        if ($treegrid.igTreeGridSelection("option", "multipleSelection") !== multiple) {
                            $treegrid.igTreeGridSelection("option", "multipleSelection", multiple);
                        }
                        // Set show checkbox.
                        var showCheckBox = ko.unwrap(data.showCheckBox != undefined ? data.showCheckBox : true);
                        if ($treegrid.igTreeGridRowSelectors("option", "enableCheckBoxes") !== showCheckBox) {
                            $treegrid.igTreeGridRowSelectors("option", "enableCheckBoxes", showCheckBox);
                        }
                        // Clear selection.
                        if ((selectedValues === null || selectedValues === undefined) && (singleValue === null || singleValue === undefined)) {
                            $treegrid.igTreeGridSelection("clearSelection");
                        }
                        else {
                            // Compare value.
                            var uiSR = $treegrid.ntsTreeView('getSelected');
                            //                _.map($treegrid.igTreeGridSelection("selectedRow") as Array<any>, function(row: any) {
                            //                    return row.id;
                            //                });
                            // Not change, do nothing.
                            if (multiple) {
                                var olds = _.map(uiSR, function (row) {
                                    return row.id;
                                });
                                if (_.isEqual(selectedValues.sort(), olds.sort())) {
                                    return;
                                }
                                // Update.
                                $treegrid.igTreeGridSelection("clearSelection");
                                selectedValues.forEach(function (val) {
                                    $treegrid.igTreeGridSelection("selectRowById", val);
                                });
                            }
                            else {
                                if (uiSR !== undefined && uiSR.id === singleValue) {
                                    return;
                                }
                                $treegrid.igTreeGridSelection("clearSelection");
                                $treegrid.igTreeGridSelection("selectRowById", singleValue);
                                ui.ig.tree.grid.expandTo(singleValue, $treegrid);
                            }
                        }
                    };
                    return NtsTreeGridViewBindingHandler;
                }());
                var isEmpty = nts.uk.util.isNullOrEmpty;
                var ExpandNodeHolder = /** @class */ (function () {
                    function ExpandNodeHolder() {
                        this.nodes = [];
                    }
                    ExpandNodeHolder.prototype.isEmpty = function () {
                        return isEmpty(this.nodes);
                    };
                    ExpandNodeHolder.prototype.addNode = function (nodeId) {
                        this.nodes.push(nodeId);
                    };
                    ExpandNodeHolder.prototype.removeNodeAndChilds = function (nodeSource, nodeKey, nodeChildKey) {
                        var ids = Helper.getAllIdFromNodeSource(_.cloneDeep(nodeSource), nodeKey, nodeChildKey);
                        _.remove(this.nodes, function (node) {
                            return ids.indexOf(node) >= 0;
                        });
                    };
                    return ExpandNodeHolder;
                }());
                koExtentions.ExpandNodeHolder = ExpandNodeHolder;
                var Helper;
                (function (Helper) {
                    function getAllIdFromNodeSource(nodeSource, nodeKey, childKey) {
                        var ids = [nodeSource[nodeKey]];
                        var children = [].concat(nodeSource[childKey]);
                        while (!isEmpty(children)) {
                            var currentNode = children.shift();
                            ids.push(currentNode[nodeKey]);
                            if (!isEmpty(currentNode) && !isEmpty(currentNode[childKey])) {
                                children = children.concat(currentNode[childKey]);
                            }
                        }
                        return ids;
                    }
                    Helper.getAllIdFromNodeSource = getAllIdFromNodeSource;
                    function flatTree(tree, childKey) {
                        var ids = [];
                        _.forEach(tree, function (nodeSource) {
                            ids.push(nodeSource);
                            var children = [].concat(nodeSource[childKey]);
                            while (!isEmpty(children)) {
                                var currentNode = children.shift();
                                ids.push(currentNode);
                                if (!isEmpty(currentNode)) {
                                    children = children.concat(currentNode[childKey]);
                                }
                            }
                        });
                        return ids;
                    }
                    Helper.flatTree = flatTree;
                    function getAllParentId(tree, id, nodeKey, childKey) {
                        var source = _.cloneDeep(tree.igTreeGrid("option", "dataSource"));
                        var parentIds = [];
                        _.forEach(source, function (node) {
                            var result = checkIfInBranch(node, id, nodeKey, childKey);
                            if (result.inThis) {
                                parentIds = [node[nodeKey]].concat(result.ids);
                                return false;
                            }
                        });
                        return parentIds;
                    }
                    Helper.getAllParentId = getAllParentId;
                    function checkIfInBranch(source, id, nodeKey, childKey) {
                        if (source[nodeKey] === id) {
                            return {
                                inThis: true,
                                ids: []
                            };
                        }
                        else {
                            var result_2 = {
                                inThis: false,
                                ids: []
                            };
                            _.forEach(source[childKey], function (node) {
                                result_2 = checkIfInBranch(node, id, nodeKey, childKey);
                                if (result_2.inThis) {
                                    result_2.ids = [node[nodeKey]].concat(result_2.ids);
                                    return false;
                                }
                            });
                            return result_2;
                        }
                    }
                })(Helper || (Helper = {}));
                var ExpandNode = /** @class */ (function () {
                    function ExpandNode(source, nodeKey, childKey, element, nodeLevel) {
                        this.nodeSource = source;
                        this.nodeLevel = nodeLevel;
                        this.element = element;
                        this.nodeKey = nodeKey;
                        this.childKey = childKey;
                    }
                    ExpandNode.prototype.getNode = function () {
                        return this.nodeSource;
                    };
                    return ExpandNode;
                }());
                ko.bindingHandlers['ntsTreeGridView'] = new NtsTreeGridViewBindingHandler();
            })(koExtentions = ui_14.koExtentions || (ui_14.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_15) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * UpDownButton binding handler
                 */
                var NtsUpDownBindingHandler = /** @class */ (function () {
                    /**
                     * Constructor.
                     */
                    function NtsUpDownBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsUpDownBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var $upDown = $(element);
                        if ($upDown.prop("tagName").toLowerCase() !== "div") {
                            throw new Error('The element must be a div');
                        }
                        var data = valueAccessor();
                        var tabIndex = nts.uk.util.isNullOrEmpty($upDown.attr("tabindex")) ? "0" : $upDown.attr("tabindex");
                        $upDown.attr("tabindex", "-1");
                        var elementId = $upDown.attr('id');
                        var comId = ko.unwrap(data.comId);
                        var childField = ko.unwrap(data.childDataKey);
                        var primaryKey = ko.unwrap(data.primaryKey);
                        var height = ko.unwrap(data.height);
                        var targetType = ko.unwrap(data.type);
                        var swapTarget = ko.unwrap(data.swapTarget);
                        if (nts.uk.util.isNullOrUndefined(elementId)) {
                            throw new Error('The element NtsSwapList must have id attribute.');
                        }
                        if (nts.uk.util.isNullOrUndefined(comId)) {
                            throw new Error('The target element of NtsUpDown is required.');
                        }
                        $upDown.addClass("ntsComponent ntsUpDown").append("<div class='upDown-container'/>");
                        $upDown.find(".upDown-container")
                            .append("<button class = 'ntsUpButton ntsButton ntsUpDownButton auto-height' id= '" + elementId + "-up'/>")
                            .append("<button class = 'ntsDownButton ntsButton ntsUpDownButton auto-height' id= '" + elementId + "-down'/>");
                        var $target = $(comId);
                        if (height !== undefined) {
                            $upDown.height(height);
                            $upDown.find(".upDown-container").height(height);
                        }
                        else {
                            var targetHeight = $(comId + "_container").height();
                            if (targetHeight === undefined) {
                                var h = _.find($(comId).attr("data-bind").split(","), function (attr) {
                                    return attr.indexOf("height") >= 0;
                                });
                                if (h !== undefined) {
                                    targetHeight = parseFloat(h.split(":")[1]);
                                }
                            }
                            $upDown.height(targetHeight);
                            $upDown.find(".upDown-container").height(targetHeight);
                        }
                        var $up = $upDown.find(".ntsUpButton");
                        var $down = $upDown.find(".ntsDownButton");
                        $up.append("<i class='icon icon-button-arrow-top'/>");
                        $down.append("<i class='icon icon-button-arrow-bottom'/>");
                        var move = function (upDown, $targetElement) {
                            var multiSelectedRaw = $targetElement.igGrid("selectedRows");
                            var singleSelectedRaw = $targetElement.igGrid("selectedRow");
                            var selected = [];
                            if (multiSelectedRaw !== null) {
                                selected = _.filter(multiSelectedRaw, function (item) {
                                    return item["index"] >= 0;
                                });
                            }
                            else if (singleSelectedRaw !== null && singleSelectedRaw.index > -1) {
                                selected.push(singleSelectedRaw);
                            }
                            else {
                                return;
                            }
                            var source = _.cloneDeep($targetElement.igGrid("option", "dataSource"));
                            var group = 1;
                            var grouped = { "group1": [] };
                            if (selected.length > 0 && selected.length < source.length) {
                                _.forEach(selected, function (sle) {
                                    if (nts.uk.util.isNullOrEmpty($(sle.element).attr("data-row-idx"))) {
                                        var correctIndex = _.findIndex(source, function (s) {
                                            return s[primaryKey].toString() === sle.id.toString();
                                        });
                                        sle.index = correctIndex;
                                    }
                                    else {
                                        sle.index = parseInt($(sle.element).attr("data-row-idx"));
                                    }
                                });
                                var size = selected.length;
                                selected = _.sortBy(selected, "index");
                                _.forEach(selected, function (item, idx) {
                                    grouped["group" + group].push(item);
                                    if (idx !== size - 1 && item["index"] + 1 !== selected[idx + 1]["index"]) {
                                        group++;
                                        grouped["group" + group] = [];
                                    }
                                });
                                var moved = false;
                                _.forEach(_.valuesIn(grouped), function (items) {
                                    var firstIndex = items[0].index;
                                    var lastIndex = items[items.length - 1].index;
                                    if (upDown < 0) {
                                        var canMove = firstIndex > 0;
                                    }
                                    else {
                                        var canMove = lastIndex < source.length - 1;
                                    }
                                    if (canMove) {
                                        var removed = source.splice(firstIndex, items.length);
                                        _.forEach(removed, function (item, idx) {
                                            source.splice(firstIndex + upDown + idx, 0, item);
                                        });
                                        moved = true;
                                    }
                                });
                                if (moved) {
                                    //                        $targetElement.igGrid("virtualScrollTo", 0);
                                    data.targetSource(source);
                                    //                        $targetElement.igGrid("option", "dataSource", source);
                                    //                        $targetElement.igGrid("dataBind");
                                    //                        var index = upDown + grouped["group1"][0].index;
                                    var id = grouped["group1"][0].id;
                                    //                        var index = $targetElement.igGrid("selectedRows")[0].index;
                                    _.defer(function () {
                                        var row = { element: $targetElement.igGrid("rowById", id), id: id };
                                        if ($targetElement.igGrid("option").virtualization === true) {
                                            nts.uk.ui.ig.grid.virtual.expose(row, $targetElement);
                                        }
                                        else {
                                            nts.uk.ui.ig.grid.expose(row, $targetElement);
                                        }
                                    });
                                }
                            }
                        };
                        var moveTree = function (upDown, $targetElement) {
                            var multiSelectedRaw = $targetElement.igTreeGrid("selectedRows");
                            var singleSelectedRaw = $targetElement.igTreeGrid("selectedRow");
                            //                var targetSource = ko.unwrap(data.targetSource);
                            var selected;
                            if (multiSelectedRaw !== null) {
                                if (multiSelectedRaw.length !== 1) {
                                    return;
                                }
                                selected = multiSelectedRaw[0];
                            }
                            else if (singleSelectedRaw !== null) {
                                selected.push(singleSelectedRaw);
                            }
                            else {
                                return;
                            }
                            if (selected["index"] < 0) {
                                return;
                            }
                            //                var targetSource = ko.unwrap(data.targetSource);
                            var source = _.cloneDeep($targetElement.igTreeGrid("option", "dataSource"));
                            var result = findChild(upDown, selected["id"], source, false, false);
                            var moved = result.moved;
                            var changed = result.changed;
                            source = result.source;
                            if (moved && changed) {
                                data.targetSource(source);
                                //                    $targetElement.igTreeGrid("option", "dataSource", source);
                                //                    $targetElement.igTreeGrid("dataBind");
                                //                    data.targetSource(source);
                                var virtualization = $targetElement.igTreeGrid("option", "virtualization");
                                if (virtualization) {
                                    var selectedRow_1 = $targetElement.igTreeGrid("selectedRows")[0];
                                    setTimeout(function () {
                                        $targetElement.ntsTreeView("virtualScrollTo", selectedRow_1.id);
                                    }, 0);
                                    return;
                                }
                                var index = $targetElement.igTreeGrid("selectedRows")[0].index;
                                if (index !== selected["index"]) {
                                    var scrollTo = _.sumBy(_.filter($target.igTreeGrid("allRows"), function (row) {
                                        return $(row).attr("data-row-idx") < index;
                                    }), function (row) {
                                        return $(row).height();
                                    });
                                    $targetElement.igTreeGrid("scrollContainer").scrollTop(scrollTo);
                                }
                            }
                        };
                        var findChild = function (upDown, key, children, moved, changed) {
                            var index = -1;
                            if (children !== undefined && children !== null && children.length > 0 && !moved && !changed) {
                                _.forEach(children, function (child, idx) {
                                    if (!moved) {
                                        if (child[primaryKey] === key) {
                                            index = idx;
                                            return false;
                                        }
                                        else {
                                            var result = findChild(upDown, key, child[childField], moved, changed);
                                            child[childField] = result.source;
                                            moved = result.moved;
                                            changed = result.changed;
                                        }
                                    }
                                    else {
                                        return false;
                                    }
                                });
                                if (index >= 0) {
                                    if (upDown < 0) {
                                        var canMove = index > 0;
                                    }
                                    else {
                                        var canMove = index < children.length - 1;
                                    }
                                    if (canMove) {
                                        var removed = children.splice(index, 1);
                                        children.splice(index + upDown, 0, removed[0]);
                                        changed = true;
                                    }
                                    moved = true;
                                }
                                return {
                                    source: children,
                                    moved: moved,
                                    changed: changed
                                };
                            }
                            return {
                                source: children,
                                moved: moved,
                                changed: changed
                            };
                        };
                        $up.click(function (event, ui) {
                            if (targetType === "tree") {
                                moveTree(-1, $target);
                            }
                            else if (targetType === "grid") {
                                move(-1, $target);
                            }
                            else if (targetType === "swap") {
                                var swapTargetGrid = swapTarget.toLocaleLowerCase() === "left" ? "-grid1" : "-grid2";
                                move(-1, $(comId + swapTargetGrid));
                            }
                        });
                        $down.click(function (event, ui) {
                            if (targetType === "tree") {
                                moveTree(1, $target);
                            }
                            else if (targetType === "grid") {
                                move(1, $target);
                            }
                            else if (targetType === "swap") {
                                var swapTargetGrid = swapTarget.toLocaleLowerCase() === "left" ? "-grid1" : "-grid2";
                                move(1, $(comId + swapTargetGrid));
                            }
                        });
                        $upDown.find(".ntsUpDownButton").attr("tabindex", tabIndex);
                    };
                    /**
                     * Update
                     */
                    NtsUpDownBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var $upDown = $(element);
                        var elementId = $upDown.attr('id');
                        if (nts.uk.util.isNullOrUndefined(elementId)) {
                            throw new Error('the element NtsSwapList must have id attribute.');
                        }
                        var data = valueAccessor();
                        var enable = ko.unwrap(data.enable);
                        if (enable === false) {
                            $upDown.find(".ntsUpDownButton").prop('disabled', true);
                        }
                        else {
                            $upDown.find(".ntsUpDownButton").prop('disabled', false);
                        }
                    };
                    return NtsUpDownBindingHandler;
                }());
                ko.bindingHandlers['ntsUpDown'] = new NtsUpDownBindingHandler();
            })(koExtentions = ui_15.koExtentions || (ui_15.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Wizard binding handler
                 */
                var WizardBindingHandler = /** @class */ (function () {
                    /**
                     * Constructor.
                     */
                    function WizardBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    WizardBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        // Get step list
                        var options = ko.unwrap(data.steps);
                        var theme = ko.unwrap(data.theme);
                        var cssClass = "nts-wizard " + "theme-" + theme;
                        var active = ko.isObservable(data.active) ? data.active : ko.observable(data.active || 0);
                        // Container
                        var container = $(element);
                        // Create steps
                        for (var i = 0; i < options.length; i++) {
                            var contentClass = ko.unwrap(options[i].content);
                            var htmlStep = container.children('.steps').children(contentClass).html();
                            var htmlContent = container.children('.contents').children(contentClass).html();
                            container.append('<h1 class="' + contentClass + '">' + htmlStep + '</h1>');
                            container.append('<div>' + htmlContent + '</div>');
                        }
                        var icon = container.find('.header .image').data('icon');
                        // Remove html
                        var header = container.children('.header');
                        container.children('.header').remove();
                        container.children('.steps').remove();
                        container.children('.contents').remove();
                        // Create wizard
                        container.steps({
                            headerTag: "h1",
                            bodyTag: "div",
                            transitionEffect: "slideLeft",
                            stepsOrientation: "vertical",
                            titleTemplate: '<div>#title#</div>',
                            enablePagination: false,
                            enableFinishButton: false,
                            autoFocus: false,
                            enableKeyNavigation: false,
                            onStepChanged: function () {
                                // Remove old class.
                                container.children('.steps').children('ul').children('li').removeClass('step-current');
                                container.children('.steps').children('ul').children('li').removeClass('step-prev');
                                container.children('.steps').children('ul').children('li').removeClass('step-next');
                                // Add new class.
                                container.children('.steps').children('ul').children('.done').addClass('disabled');
                                container.children('.steps').children('ul').children('.current').addClass('step-current');
                                container.children('.steps').children('ul').children('.done').addClass('step-prev');
                                container.children('.steps').children('ul').children('.step-current').nextAll('li').not('.done').addClass('step-next');
                                active(container.steps("getCurrentIndex"));
                                if (container.data("waitStepShowed")) {
                                    container.trigger("stepShowed");
                                }
                                return true;
                            }
                        }).data("length", options.length);
                        // Add default class
                        container.addClass(cssClass);
                        container.children('.steps').children('ul').children('li').children('a').before('<div class="nts-steps"></div>');
                        container.children('.steps').children('ul').children('li').children('a').addClass('nts-step-contents');
                        //container.children('.steps').children('ul').children('.first').addClass('begin');
                        container.children('.steps').children('ul').children('.last').addClass('end');
                        container.children('.steps').children('ul').children('li').not('.begin').not('.end').children('.nts-steps').addClass('nts-steps-middle');
                        container.find('.nts-steps-middle').append('<div class="nts-vertical-line"></div><div class="nts-bridge"><div class="nts-point"></div><div class="nts-horizontal-line"></div></div>');
                        // Remove old class
                        container.children('.steps').children('ul').children('li').removeClass('step-current');
                        container.children('.steps').children('ul').children('li').removeClass('step-prev');
                        container.children('.steps').children('ul').children('li').removeClass('step-next');
                        // Add new class
                        container.children('.steps').children('ul').children('.current').addClass('step-current');
                        container.children('.steps').children('ul').children('.done').addClass('step-prev');
                        container.children('.steps').children('ul').children('.step-current').nextAll('li').not('.done').addClass('step-next');
                        // Remove content
                        container.find('.actions').hide();
                        // Add Header
                        container.children('.steps').prepend(header);
                        container.find('.header .image').attr('style', 'background-image: url("' + icon + '")');
                        container.find('.content.clearfix').height("100%");
                    };
                    /**
                     * Update
                     */
                    WizardBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var active = (data.active !== undefined) ? ko.unwrap(data.active) : 0;
                        // Container
                        var container = $(element);
                        if (container.steps("getCurrentIndex") != active) {
                            container.setStep(active);
                        }
                    };
                    return WizardBindingHandler;
                }());
                ko.bindingHandlers['ntsWizard'] = new WizardBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                var NtsLegentButtonBindingHandler = /** @class */ (function () {
                    function NtsLegentButtonBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsLegentButtonBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var $container = $(element);
                        $container.text("■ " + ui.toBeResource.legendExample);
                        $container.click(function () {
                            showLegendPanel($container, data);
                        });
                    };
                    /**
                     * Update
                     */
                    NtsLegentButtonBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    };
                    return NtsLegentButtonBindingHandler;
                }());
                function getColorCodeFromItem(legendItem) {
                    return uk.util.optional.of(legendItem.cssClass)
                        .map(function (cc) { return getColorCodeFromCssClass(cc); })
                        .orElse(legendItem.colorCode);
                }
                function getColorCodeFromCssClass(legendCssClass) {
                    var $temp = $('<span/>').addClass(legendCssClass.className)
                        .hide()
                        .appendTo('body');
                    var colorCode = $temp.css(legendCssClass.colorPropertyName);
                    $temp.remove();
                    return colorCode;
                }
                function showLegendPanel($legendButton, options) {
                    var legendSize = 18;
                    var hasTemplate = !nts.uk.util.isNullOrEmpty(options.template);
                    var $panel = $('<div/>').addClass('nts-legendbutton-panel');
                    options.items.forEach(function (item) {
                        if (hasTemplate) {
                            $('<div/>').addClass('legend-item')
                                .append(extractTemplate(options.template, item))
                                .appendTo($panel);
                        }
                        else {
                            $('<div/>').addClass('legend-item')
                                .append($('<div/>')
                                .addClass('legend-item-symbol')
                                .css({
                                'background-color': getColorCodeFromItem(item),
                                width: legendSize + 'px',
                                height: legendSize + 'px'
                            })
                                .text('　'))
                                .append($('<div/>')
                                .addClass('legend-item-label')
                                .text(item.labelText))
                                .appendTo($panel);
                        }
                    });
                    $panel.appendTo('body').position({
                        my: 'left top',
                        at: 'left bottom',
                        of: $legendButton
                    });
                    _.defer(function () {
                        $(window).bind('mousedown.legendpanel', function () {
                            $panel.remove();
                            $(window).unbind('mousedown.legendpanel');
                        });
                    });
                }
                function extractTemplate(template, item) {
                    var extracted = _.clone(template);
                    var changeTextIndex = extracted.indexOf("#{");
                    while (changeTextIndex > -1) {
                        var closeComa = extracted.indexOf("}", changeTextIndex);
                        var textToChange = extracted.substring(changeTextIndex, closeComa + 1);
                        extracted = extracted.replace(new RegExp(textToChange, 'g'), item[textToChange.substring(2, textToChange.length - 1)]);
                        changeTextIndex = extracted.indexOf("#{");
                    }
                    return extracted;
                }
                ko.bindingHandlers['ntsLegendButton'] = new NtsLegentButtonBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var enums;
        (function (enums) {
            enums.NtsCharset = [
                {
                    value: 1,
                    fieldName: "UTF8",
                    localizedName: "UTF-8"
                },
                {
                    value: 2,
                    fieldName: "UTF8_WITH_BOM",
                    localizedName: "UTF-8 BOM"
                },
                {
                    value: 3,
                    fieldName: "SHIFT_JIS",
                    localizedName: "Shift-JIS"
                },
            ];
        })(enums = uk.enums || (uk.enums = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_16) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Accordion binding handler
                 */
                var NtsCharsetSettingBindingHandler = /** @class */ (function () {
                    function NtsCharsetSettingBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsCharsetSettingBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var value = (data.value !== undefined) ? ko.unwrap(data.value) : null;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var container = $(element);
                        container.addClass("ntsControl nts-charset-setting");
                        if (nts.uk.util.isNullOrUndefined(container.attr("tabindex"))) {
                            container.attr("tabindex", "0");
                        }
                        container.keypress(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (code === 32) {
                                container.igCombo("openDropDown");
                                evt.preventDefault();
                            }
                        });
                        container.igCombo({
                            dataSource: nts.uk.enums.NtsCharset,
                            valueKey: "value",
                            textKey: 'localizedName',
                            mode: "dropdown",
                            visibleItemsCount: 5,
                            disabled: !enable,
                            placeHolder: '',
                            tabIndex: -1,
                            enableClearButton: false,
                            initialSelectedItems: [
                                { value: value }
                            ],
                            selectionChanged: function (evt, ui) {
                                if (ui.items.length > 0) {
                                    data.value(ui.items[0].data["value"]);
                                }
                            }
                        });
                    };
                    /**
                     * Update
                     */
                    NtsCharsetSettingBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var value = (data.value !== undefined) ? ko.unwrap(data.value) : null;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var container = $(element);
                        container.igCombo("option", "disabled", !enable);
                        if (!nts.uk.util.isNullOrUndefined(value) && container.igCombo("value") != value) {
                            container.igCombo("value", value);
                        }
                    };
                    return NtsCharsetSettingBindingHandler;
                }());
                ko.bindingHandlers['ntsCharsetSetting'] = new NtsCharsetSettingBindingHandler();
            })(koExtentions = ui_16.koExtentions || (ui_16.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_17) {
            var contextmenu;
            (function (contextmenu) {
                var ContextMenu = /** @class */ (function () {
                    /**
                     * Create an instance of ContextMenu. Auto call init() method
                     *
                     * @constructor
                     * @param {selector} Jquery selector for elements need to show ContextMenu
                     * @param {items} List ContextMenuItem for ContextMenu
                     * @param {enable} (Optinal) Set enable/disable for ContextMenu
                     */
                    function ContextMenu(selector, items, enable) {
                        this.selector = selector;
                        this.items = items;
                        this.enable = (enable !== undefined) ? enable : true;
                        this.init();
                    }
                    /**
                     * Create ContextMenu and bind event in DOM
                     */
                    ContextMenu.prototype.init = function () {
                        var self = this;
                        // Remove ContextMenu with same 'selector' (In case Ajax call will re-create DOM elements)
                        $('body .ntsContextMenu').each(function () {
                            if ($(this).data("selector") === self.selector) {
                                $("body").off("contextmenu", self.selector);
                                $(this).remove();
                            }
                        });
                        // Initial
                        self.guid = nts.uk.util.randomId();
                        var $contextMenu = $("<ul id='" + self.guid + "' class='ntsContextMenu'></ul>").data("selector", self.selector).hide();
                        self.createMenuItems($contextMenu);
                        $('body').append($contextMenu);
                        // Binding contextmenu event
                        $("html").on("contextmenu", self.selector, function (event) {
                            if (self.enable === true) {
                                event.preventDefault();
                                self.target = event.target;
                                $contextMenu.show().position({
                                    my: "left+2 top+2",
                                    of: event,
                                    collision: "fit"
                                });
                            }
                        });
                        // Hiding when click outside
                        $("html").on("mousedown", function (event) {
                            if (!$contextMenu.is(event.target) && $contextMenu.has(event.target).length === 0) {
                                $contextMenu.hide();
                            }
                        });
                    };
                    /**
                     * Remove and unbind ContextMenu event
                     */
                    ContextMenu.prototype.destroy = function () {
                        // Unbind contextmenu event
                        $("html").off("contextmenu", this.selector);
                        $("#" + this.guid).remove();
                    };
                    /**
                     * Re-create ContextMenu. Useful when you change various things in ContextMenu.items
                     */
                    ContextMenu.prototype.refresh = function () {
                        this.destroy();
                        this.init();
                    };
                    /**
                     * Get a ContextMenuItem instance
                     *
                     * @param {target} Can be string or number. String type will select item by "key", Number type will select item by index
                     * @return {any} Return ContextMenuItem if found or undefiend
                     */
                    ContextMenu.prototype.getItem = function (target) {
                        if (typeof target === "number") {
                            return this.items[target];
                        }
                        else if (typeof target === "string") {
                            return _.find(this.items, ["key", target]);
                        }
                        else {
                            return undefined;
                        }
                    };
                    /**
                     * Add an ContextMenuItem instance to ContextMenu
                     *
                     * @param {item} An ContextMenuItem instance
                     */
                    ContextMenu.prototype.addItem = function (item) {
                        this.items.push(item);
                        this.refresh();
                    };
                    /**
                     * Remove item with given "key" or index
                     *
                     * @param {target} Can be string or number. String type will select item by "key", Number type will select item by index
                     */
                    ContextMenu.prototype.removeItem = function (target) {
                        var item = this.getItem(target);
                        if (item !== undefined) {
                            _.remove(this.items, item);
                            this.refresh();
                        }
                    };
                    /**
                     * Enable/Disable ContextMenu. If disable right-click will have default behavior
                     *
                     * @param {enable} A boolean value set enable/disable
                     */
                    ContextMenu.prototype.setEnable = function (enable) {
                        this.enable = enable;
                    };
                    /**
                     * Enable/Disable item with given "key" or index
                     *
                     * @param {enable} A boolean value set enable/disable
                     * @param {target} Can be string or number. String type will select item by "key", Number type will select item by index
                     */
                    ContextMenu.prototype.setEnableItem = function (enable, target) {
                        var item = this.getItem(target);
                        item.enable = enable;
                        this.refresh();
                    };
                    /**
                     * Show/Hide item with given "key" or index
                     *
                     * @param {enable} A boolean value set visible/hidden
                     * @param {target} Can be string or number. String type will select item by "key", Number type will select item by index
                     */
                    ContextMenu.prototype.setVisibleItem = function (visible, target) {
                        var item = this.getItem(target);
                        item.visible = visible;
                        this.refresh();
                    };
                    ContextMenu.prototype.createMenuItems = function (container) {
                        var self = this;
                        _.forEach(self.items, function (item) {
                            if (item.key !== "divider") {
                                var menuClasses = "menu-item ";
                                menuClasses += (item.enable === true) ? "" : "disabled ";
                                menuClasses += (item.visible === true) ? "" : "hidden ";
                                var menuItem = $("<li class='" + menuClasses + "'><span class='menu-icon " + item.icon + "'></span>" + item.text + "</li>")
                                    .data("key", item.key)
                                    .on("click", function () {
                                    if (!$(this).hasClass("disabled")) {
                                        item.handler(self.target);
                                        container.hide();
                                    }
                                }).appendTo(container);
                            }
                            else {
                                var menuItem = $("<li class='menu-item divider'></li>").appendTo(container);
                            }
                        });
                    };
                    return ContextMenu;
                }());
                contextmenu.ContextMenu = ContextMenu;
                var ContextMenuItem = /** @class */ (function () {
                    function ContextMenuItem(key, text, handler, icon, visible, enable) {
                        this.key = key;
                        this.text = text;
                        this.handler = (handler !== undefined) ? handler : $.noop;
                        this.icon = (icon) ? icon : "";
                        this.visible = (visible !== undefined) ? visible : true;
                        this.enable = (enable !== undefined) ? enable : true;
                    }
                    return ContextMenuItem;
                }());
                contextmenu.ContextMenuItem = ContextMenuItem;
            })(contextmenu = ui_17.contextmenu || (ui_17.contextmenu = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_18) {
            var mgrid;
            (function (mgrid) {
                var MGRID = "mgrid";
                var FIXED = "mgrid-fixed";
                var FREE = "mgrid-free";
                var HEADER = "mgrid-header";
                var BODY = "mgrid-body";
                var Default = "default";
                var SheetDef = "_sheetDef";
                var DISTANCE = 1;
                var BODY_ROW_HEIGHT = 29;
                var SUM_HEIGHT = 27;
                var defaultOptions = { columns: [], features: [] };
                var _scrollWidth, _maxFixedWidth = 0, _maxFreeWidth, _columnsMap = {}, _dataSource, _secColumn = {}, _hasFixed, _validators = {}, _mDesc, _mEditor, _cloud, _hr, _direction, _errors = [], _errorColumns, _errorsOnPage, _$grid, _pk, _pkType, _summaries, _objId, _getObjId, _idIntpl, _hasSum, _pageSize, _currentPage, _currentSheet, _start, _end, _headerHeight, _zeroHidden, _paging = false, _sheeting = false, _copie = false, _mafollicle = {}, _vessel = function () { return _mafollicle[_currentPage][_currentSheet]; }, _cstifle = function () { return _mafollicle[SheetDef][_currentSheet].columns; }, _mafCurrent = function () { return _mafollicle[_currentPage]; }, _specialColumn = {}, _specialLinkColumn = {}, _histoire = [], _flexFitWidth, _copieer, _collerer, _fixedHiddenColumns = [], _hiddenColumns = [], _fixedColumns, _selected = {}, _dirties = {}, _headerWrappers, _bodyWrappers, _sumWrappers, _linkage = [], _fixedControlMap = {}, _cellStates, _features, _leftAlign, _header, _rid = {}, _remainWidth = 240, _remainHeight = 190, _redimension = false, _prtDiv = document.createElement("div"), _prtCell = document.createElement("td");
                var MGrid = /** @class */ (function () {
                    function MGrid($container, options) {
                        this.fixedHeader = { containerClass: FIXED };
                        this.fixedBody = { containerClass: FIXED };
                        this.header = { containerClass: FREE };
                        this.body = { containerClass: FREE };
                        this.fixedSummaries = { containerClass: FIXED + "-summaries" };
                        this.summaries = { containerClass: FREE + "-summaries" };
                        var self = this;
                        self.$container = $container;
                        _$grid = $($container);
                        _pk = options.primaryKey;
                        _pkType = options.primaryKeyDataType;
                        _features = options.features;
                        _objId = options.userId;
                        _getObjId = options.getUserId;
                        _idIntpl = options.idGen;
                        _errorColumns = options.errorColumns;
                        _errorsOnPage = options.errorsOnPage;
                        _headerHeight = options.headerHeight;
                        _zeroHidden = options.hideZero;
                        if (options.useOptions) {
                            _.assignIn(self, options);
                        }
                        else {
                            //            _.assignIn(self, _.cloneDeep(options));
                            ti.cloneDeep(options, self);
                        }
                        self.makeDefault();
                    }
                    /**
                     * MakeDefault.
                     */
                    MGrid.prototype.makeDefault = function () {
                        var self = this;
                        self.$container.tabIndex = -1;
                        self.fixedHeader = _.assignIn(self.fixedHeader, _.cloneDeep(defaultOptions), { ntsControls: self.ntsControls });
                        self.fixedBody = _.assignIn(self.fixedBody, _.cloneDeep(defaultOptions));
                        self.header = _.assignIn(self.header, _.cloneDeep(defaultOptions), { ntsControls: self.ntsControls });
                        self.body = _.assignIn(self.body, _.cloneDeep(defaultOptions));
                        _$grid.mGrid({});
                        self.compreOptions();
                        if (self.enter) {
                            _$grid.data("enterDirect", self.enter);
                        }
                        if (!_.isNil(self.subWidth)) {
                            _remainWidth = parseFloat(self.subWidth);
                        }
                        if (!_.isNil(self.subHeight)) {
                            _remainHeight = parseFloat(self.subHeight);
                        }
                    };
                    /**
                     * CompreOptions.
                     */
                    MGrid.prototype.compreOptions = function () {
                        var self = this;
                        if (self.notice) {
                            _$grid.mGrid("option", "notice", self.notice);
                        }
                        if (self.features) {
                            var columnFixFt = tn.find(self.features, tn.COLUMN_FIX);
                            var colParts = void 0;
                            var tooltipFt = tn.find(self.features, tn.INFOBULLE);
                            if (tooltipFt && tooltipFt.error) {
                                khl._infobulle = _prtDiv.cloneNode(true);
                                khl._infobulle.className = khl.ERR_MSG_CLS;
                            }
                            var pageFt = tn.find(self.features, tn.PAGING);
                            if (pageFt) {
                                _paging = true;
                                _pageSize = pageFt.pageSize;
                                _currentPage = pageFt.currentPageIndex;
                                self.pload = pageFt.loaded;
                                var remainder = void 0, pageSources = void 0, size = self.dataSource.length;
                                var noPage = Math.floor(size / _pageSize);
                                for (var i = 0; i < noPage; i++) {
                                    var s = i * _pageSize;
                                    var src = _.slice(self.dataSource, s, s + _pageSize);
                                    _mafollicle[i] = { dataSource: src, origDs: ti.cloneDeep(src), voilRows: {} };
                                }
                                if ((remainder = size % _pageSize) !== 0) {
                                    var s = _pageSize * noPage;
                                    var src = _.slice(self.dataSource, s, s + _pageSize);
                                    _mafollicle[noPage] = { dataSource: src, origDs: ti.cloneDeep(src), voilRows: {} };
                                }
                                if (_.keys(_mafollicle).length === 0) {
                                    _mafollicle[0] = { dataSource: [], origDs: [], voilRows: {} };
                                }
                            }
                            else {
                                _currentPage = Default;
                                _mafollicle[_currentPage] = { dataSource: self.dataSource, origDs: ti.cloneDeep(self.dataSource), voilRows: {} };
                            }
                            var sheetFt = tn.find(self.features, tn.SHEET);
                            var headerStyles = void 0, savingFt_1 = tn.find(self.features, tn.WIDTH_SAVE);
                            _$grid.mGrid("option", "widthMem", savingFt_1);
                            var sheetDef_1 = {};
                            if (sheetFt) {
                                _sheeting = true;
                                _currentSheet = sheetFt.initialDisplay;
                                _.forEach(sheetFt.sheets, function (s) {
                                    var sheetCols = [];
                                    _.forEach(s.columns, function (c) {
                                        var sc = _.find(self.columns, function (col) {
                                            if (col.group) {
                                                _.forEach(col.group, function (gc) {
                                                    if (_.isNil(_secColumn[gc.key])) {
                                                        _secColumn[gc.key] = gc;
                                                    }
                                                });
                                                return col.group[0].key === c;
                                            }
                                            else
                                                return col.key === c;
                                        });
                                        if (sc && !sc.group && !_secColumn[sc.key]) {
                                            _secColumn[sc.key] = sc;
                                        }
                                        if (sc)
                                            sheetCols.push(sc);
                                    });
                                    sheetDef_1[s.name] = { columns: sheetCols, text: s.text };
                                });
                            }
                            else {
                                _currentSheet = Default;
                                sheetDef_1[Default] = { columns: self.columns, text: "Sheet" };
                            }
                            _mafollicle[SheetDef] = sheetDef_1;
                            var sortingFt = tn.find(self.features, tn.SORTING), movingFt = tn.find(self.features, tn.MOVING);
                            if (columnFixFt && columnFixFt.columnSettings) {
                                var fixedColumns_1 = _.filter(columnFixFt.columnSettings, function (c) { return c.isFixed; });
                                if (_sheeting) {
                                    var fixedCols = _.filter(self.columns, function (c) {
                                        if (c.group && _.some(fixedColumns_1, function (f) { return f.columnKey === c.group[0].key; }))
                                            return true;
                                        return _.some(fixedColumns_1, function (f) { return f.columnKey === c.key; });
                                    });
                                    colParts = [fixedCols, _cstifle()];
                                }
                                else {
                                    colParts = _.partition(self.columns, function (c) {
                                        if (c.group && _.some(fixedColumns_1, function (f) { return f.columnKey === c.group[0].key; }))
                                            return true;
                                        return _.some(fixedColumns_1, function (f) { return f.columnKey === c.key; });
                                    });
                                }
                                _.forEach(colParts, function (c, i) { return kt.turfSurf(c, !i, savingFt_1); });
                                _fixedColumns = colParts[0];
                                self.fixedHeader.columns = colParts[0];
                                self.fixedHeader.height = self.headerHeight;
                                self.fixedBody.columns = colParts[0];
                                self.header.columns = colParts[1];
                                self.header.height = self.headerHeight;
                                self.body.columns = colParts[1];
                                _hasFixed = true;
                                headerStyles = tn.find(self.features, tn.HEADER_STYLE);
                                if (headerStyles) {
                                    var styleParts = _.partition(headerStyles.columns, function (c) {
                                        return _.some(fixedColumns_1, function (f) { return f.columnKey === c.key; });
                                    });
                                    self.fixedHeader.features.push({ name: tn.HEADER_STYLE, columns: styleParts[0] });
                                    self.header.features.push({ name: tn.HEADER_STYLE, columns: styleParts[1] });
                                }
                                if (sortingFt) {
                                    self.fixedHeader.features.push(sortingFt);
                                    self.header.features.push(sortingFt);
                                    if (_.find(sortingFt.columnSettings, function (s) { return s.columnKey === "rowNumber"; })) {
                                        _.forEach(_.keys(_mafollicle), function (m) {
                                            if (m === SheetDef || !_mafollicle[m].dataSource)
                                                return;
                                            var rank = {};
                                            _.forEach(_mafollicle[m].dataSource, function (dt, i) {
                                                rank[dt[_pk]] = i + 1;
                                            });
                                            _mafollicle[m].rank = rank;
                                        });
                                    }
                                }
                                if (movingFt) {
                                    self.fixedHeader.features.push(movingFt);
                                    self.header.features.push(movingFt);
                                }
                            }
                            else {
                                self.header.columns = self.columns;
                                self.body.columns = self.columns;
                                kt.turfSurf(self.columns, null, savingFt_1);
                                colParts = [self.columns];
                                headerStyles = tn.find(self.features, tn.HEADER_STYLE);
                                if (headerStyles) {
                                    self.header.features.push({ name: tn.HEADER_STYLE, columns: headerStyles.columns });
                                }
                                if (sortingFt) {
                                    self.header.features.push(sortingFt);
                                    if (_.find(sortingFt.columnSettings, function (s) { return s.columnKey === "rowNumber"; })) {
                                        _.forEach(_.keys(_mafollicle), function (m) {
                                            if (m === SheetDef || !_mafollicle[m].dataSource)
                                                return;
                                            var rank = {};
                                            _.forEach(_mafollicle[m].dataSource, function (dt, i) {
                                                rank[dt[_pk]] = i + 1;
                                            });
                                            _mafollicle[m].rank = rank;
                                        });
                                    }
                                }
                                if (movingFt) {
                                    self.header.features.push(movingFt);
                                }
                            }
                            var summaries = tn.find(self.features, tn.SUMMARIES);
                            if (summaries) {
                                _summaries = {};
                                if (colParts.length > 1) {
                                    self.fixedSummaries.columns = colParts[0];
                                    self.fixedSummaries.height = SUM_HEIGHT + "px";
                                    self.summaries.columns = colParts[1];
                                    self.summaries.height = SUM_HEIGHT + "px";
                                }
                                else {
                                    self.summaries.columns = colParts[0];
                                    self.summaries.height = SUM_HEIGHT + "px";
                                }
                                _.forEach(summaries.columnSettings, function (s) {
                                    var sum = { calculator: s.summaryCalculator, formatter: s.formatter };
                                    if (s.summaryCalculator === "Time") {
                                        sum[_currentPage] = moment.duration("0:00");
                                    }
                                    else if (s.summaryCalculator === "Number") {
                                        sum[_currentPage] = 0;
                                    }
                                    _summaries[s.columnKey] = sum;
                                });
                            }
                            var resizing = tn.find(self.features, tn.RESIZING);
                            if (resizing)
                                _redimension = true;
                            if (tn.isEnable(self.features, tn.COPY))
                                _copie = true;
                            _$grid.mGrid("option", "errOccurred", self.errorOccurred);
                            _$grid.mGrid("option", "errResolved", self.errorResolved);
                            _$grid.mGrid("option", "errDismissed", self.errorDismissed);
                        }
                    };
                    /**
                     * Create.
                     */
                    MGrid.prototype.create = function () {
                        var self = this;
                        var left = "0px";
                        var top = "0px";
                        var start = performance.now();
                        self.headers = _.filter([self.fixedHeader, self.header], function (h) {
                            return h && h.columns;
                        });
                        self.bodies = _.filter([self.fixedBody, self.body], function (b) {
                            return b && b.columns;
                        });
                        self.$container.classList.add(MGRID);
                        $.data(self.$container, MGRID, self);
                        var pTable = $.data(self.$container, MGRID);
                        pTable.owner = { headers: [], bodies: [] };
                        var scrollWidth = ti.getScrollWidth();
                        var headerWrappers = [], bodyWrappers = [], sumWrappers = [], headerColGroup = [], bodyColGroup = [], sumColGroup = [], $fixedHeaderTbl, painters = [], controlMap = {};
                        var $frag = document.createDocumentFragment();
                        var freeWrapperWidth;
                        self.headers.forEach(function (headPart, i) {
                            if (!_.isNil(self.headers[i]) && headPart.columns.length > 0) {
                                headPart.overflow = "hidden";
                                if (headPart.containerClass === FREE) {
                                    freeWrapperWidth = parseFloat(self.width) - _maxFixedWidth;
                                    headPart.width = freeWrapperWidth + "px";
                                }
                                headPart.isHeader = true;
                                var $headerWrapper = v.createWrapper("0px", left, headPart);
                                pTable.owner.headers.push($headerWrapper);
                                $headerWrapper.classList.add(HEADER);
                                //                    self.$container.appendChild($headerWrapper);
                                $frag.appendChild($headerWrapper);
                                var tablePart = v.process($headerWrapper, headPart);
                                var $tbl = tablePart.$table;
                                painters.push(tablePart.painter);
                                if (headPart.containerClass === FIXED) {
                                    left = (parseInt(left) + _maxFixedWidth + DISTANCE) + "px";
                                    $fixedHeaderTbl = $tbl;
                                    _fixedControlMap = tablePart.controlMap;
                                    kt._fixedGroups.push(tablePart.cols);
                                }
                                else {
                                    if ($fixedHeaderTbl)
                                        $fixedHeaderTbl.style.height = self.headerHeight;
                                    $tbl.style.height = self.headerHeight;
                                    top = (parseFloat(self.headerHeight) + DISTANCE) + "px";
                                    _mafollicle[_currentPage][_currentSheet] = {};
                                    _vessel().$hGroup = $tbl.querySelector("colgroup");
                                    _vessel().$hBody = $tbl.querySelector("tbody");
                                    _mafollicle[SheetDef][_currentSheet].hColArr = tablePart.cols;
                                }
                                headerWrappers.push($headerWrapper);
                                headerColGroup.push(tablePart.cols);
                                _.assignIn(controlMap, tablePart.controlMap);
                            }
                            if (i === self.headers.length - 1) {
                                _header = headPart;
                                _mafollicle[SheetDef][_currentSheet].levelStruct = headPart.levelStruct;
                            }
                        });
                        _headerWrappers = headerWrappers;
                        var bodyHeight = parseFloat(self.height) - parseFloat(self.headerHeight);
                        self.bodies.forEach(function (bodyPart, i) {
                            var $bodyWrapper, alignLeft = 0;
                            if (!_.isNil(bodyPart) && bodyPart.columns.length > 0) {
                                bodyPart.rowHeight = BODY_ROW_HEIGHT + "px";
                                if (bodyPart.containerClass === FIXED) {
                                    bodyPart.height = bodyHeight + "px";
                                    bodyPart.width = _maxFixedWidth + "px";
                                }
                                else {
                                    bodyPart.height = bodyHeight + "px";
                                    bodyPart.width = (parseFloat(self.headers[i].width) + scrollWidth) + "px";
                                    alignLeft = left;
                                }
                                $bodyWrapper = v.createWrapper(top, alignLeft, bodyPart);
                                pTable.owner.bodies.push($bodyWrapper);
                                bodyWrappers.push($bodyWrapper);
                                $frag.appendChild($bodyWrapper);
                                if (bodyPart.containerClass === FREE && !_.isNil($bodyWrapper)) {
                                    bodyPart.overflow = "scroll";
                                    tc.syncDoubDirVerticalScrolls(bodyWrappers);
                                    if (!self.summaries || !self.summaries.columns) {
                                        tc.syncHorizontalScroll(headerWrappers[i], $bodyWrapper);
                                    }
                                    tc.bindVertWheel($bodyWrapper, true);
                                }
                                else {
                                    bodyPart.overflowX = "scroll";
                                    tc.bindVertWheel($bodyWrapper);
                                }
                                var result = v.table($bodyWrapper, bodyPart);
                                if (bodyPart.containerClass === FREE) {
                                    _vessel().$bGroup = result.$table.querySelector("colgroup");
                                    _mafollicle[SheetDef][_currentSheet].bColArr = result.cols;
                                }
                                else {
                                    kt._fixedGroups.push(result.cols);
                                }
                                bodyColGroup.push(result.cols);
                            }
                        });
                        _hasSum = !_.isNil(self.summaries.columns);
                        var artifactOptions = { primaryKey: self.primaryKey, controlMap: controlMap, features: self.features, hasSum: _hasSum };
                        _dataSource = _mafollicle[_currentPage].dataSource;
                        v._voilerRows = _mafollicle[_currentPage].voilRows;
                        _mafollicle[SheetDef][_currentSheet].controlMap = controlMap;
                        _mafollicle[SheetDef][_currentSheet].painters = painters;
                        _mafollicle[SheetDef][_currentSheet].maxWidth = _maxFreeWidth;
                        if (!_.isNil(self.maxRows) && self.maxRows >= 31) {
                            artifactOptions.noBlocRangee = self.maxRows;
                            artifactOptions.noGrappeBloc = 2;
                        }
                        v.construe(self.$container, bodyWrappers, artifactOptions);
                        _bodyWrappers = bodyWrappers;
                        var dWrapper = _hasFixed ? bodyWrappers[1] : bodyWrappers[0];
                        _vessel().$bBody = dWrapper.querySelector("tbody");
                        top = parseFloat(self.height) + DISTANCE - scrollWidth - SUM_HEIGHT;
                        ti.calcTotal();
                        [self.fixedSummaries, self.summaries].filter(function (s) { return s && s.columns; }).forEach(function (sumPart, i) {
                            if (!sumPart.columns || sumPart.columns.length === 0)
                                return;
                            var alignLeft = i === 0 ? 0 : left;
                            if (sumPart.containerClass === FREE + "-summaries") {
                                sumPart.width = self.headers[i].width;
                            }
                            var $sumDiv = v.createWrapper(top + "px", alignLeft, sumPart);
                            $frag.appendChild($sumDiv);
                            var $tbl = document.createElement("table");
                            $sumDiv.appendChild($tbl);
                            var $tbody = document.createElement("tbody");
                            $tbl.appendChild($tbody);
                            var $colGroup = document.createElement("colgroup");
                            $tbl.insertBefore($colGroup, $tbody);
                            var ptr, cols = [], $tr = document.createElement("tr");
                            $tr.style.height = "27px";
                            $tbody.appendChild($tr);
                            if (sumPart.containerClass === FREE + "-summaries") {
                                _.forEach(bodyColGroup[bodyColGroup.length > 1 ? 1 : 0], function (c) {
                                    var col = c.cloneNode(true);
                                    $colGroup.appendChild(col);
                                    cols.push(col);
                                });
                                if (painters.length > 1)
                                    ptr = painters[1];
                                else
                                    ptr = painters[0];
                                tc.syncDoubDirHorizontalScrolls([headerWrappers[i], bodyWrappers[i], $sumDiv]);
                                _mafollicle[SheetDef][_currentSheet].sumColArr = cols;
                            }
                            else {
                                _.forEach(bodyColGroup[0], function (c) {
                                    var col = c.cloneNode(true);
                                    $colGroup.appendChild(col);
                                    cols.push(col);
                                });
                                ptr = painters[0];
                                kt._fixedGroups.push(cols);
                            }
                            sumColGroup.push(cols);
                            _.forEach(ptr.columns, function (c) {
                                var sum = _summaries[c.key];
                                var $td = _prtCell.cloneNode();
                                if (!ptr.visibleColumnsMap[c.key]) {
                                    $td.style.display = "none";
                                }
                                $tr.appendChild($td);
                                if (!sum)
                                    return;
                                if (sum.calculator === "Time") {
                                    $td.textContent = ti.momentToString(sum[_currentPage]);
                                    sum[_currentSheet] = $td;
                                }
                                else if (sum.calculator === "Number") {
                                    if (sum.formatter === "Currency") {
                                        $td.textContent = ti.asCurrency(sum[_currentPage]);
                                    }
                                    else
                                        $td.textContent = sum[_currentPage];
                                    sum[_currentSheet] = $td;
                                }
                                else {
                                    $td.textContent = sum.calculator;
                                }
                            });
                            _vessel().$sumGroup = $colGroup;
                            _vessel().$sumBody = $tbody;
                            sumWrappers.push($sumDiv);
                        });
                        _sumWrappers = sumWrappers;
                        var btmw = Math.min(parseFloat(self.width), _maxFixedWidth + _maxFreeWidth);
                        gp.imiPages($frag, top, btmw + "px", self.pload);
                        gp.imiSheets($frag, _paging ? top + gp.PAGE_HEIGHT : top, btmw + "px");
                        _leftAlign = left;
                        if (_redimension) {
                            var sizeUi = { headerWrappers: headerWrappers, bodyWrappers: bodyWrappers,
                                sumWrappers: sumWrappers, headerColGroup: headerColGroup,
                                bodyColGroup: bodyColGroup, sumColGroup: sumColGroup };
                            var freeAdjuster = new kt.ColumnAdjuster([_maxFixedWidth, freeWrapperWidth], self.headerHeight, sizeUi, self.float);
                            kt._adjuster = freeAdjuster;
                            freeAdjuster.handle();
                        }
                        su.binding(self.$container, self.autoFitWindow, self.minRows, self.maxRows);
                        lch.checkUp(self.$container);
                        self.$container.appendChild($frag);
                        kt.screenLargeur(self.minRows, self.maxRows);
                    };
                    return MGrid;
                }());
                mgrid.MGrid = MGrid;
                var tn;
                (function (tn) {
                    tn.COLUMN_FIX = "ColumnFixing";
                    tn.SUMMARIES = "Summaries";
                    tn.PAGING = "Paging";
                    tn.SHEET = "Sheet";
                    tn.RESIZING = "Resizing";
                    tn.SORTING = "Sorting";
                    tn.MOVING = "ColumnMoving";
                    tn.HEADER_STYLE = "HeaderStyles";
                    tn.CELL_STYLE = "CellStyles";
                    tn.COPY = "Copy";
                    tn.WIDTH_SAVE = "WidthSaving";
                    tn.INFOBULLE = "Tooltip";
                    /**
                     * Is enable.
                     */
                    function isEnable(features, name) {
                        return _.find(features, function (feature) {
                            return feature.name === name;
                        }) !== undefined;
                    }
                    tn.isEnable = isEnable;
                    /**
                     * Find.
                     */
                    function find(features, name) {
                        return _.find(features, function (feature) {
                            return feature.name === name;
                        });
                    }
                    tn.find = find;
                })(tn || (tn = {}));
                var v;
                (function (v_1) {
                    v_1.CELL_CLS = "mcell";
                    v_1.STT_CLS = "mgrid-no";
                    v_1.DATA = "md";
                    v_1.INIT_MAN_EDIT = "init-man-edit";
                    v_1.FACON_BTN = "mgrid-facon-button";
                    v_1.VFACON_ASC = "view-facon-asc";
                    v_1.FACON_ASC = "facon-asc";
                    v_1.FACON_DESC = "facon-desc";
                    v_1.ALIGN_LEFT = "halign-left";
                    v_1.ALIGN_RIGHT = "halign-right";
                    v_1.DefaultRowConfig = { css: { height: BODY_ROW_HEIGHT } };
                    v_1._voilerRows = {};
                    v_1._encarRows = [];
                    v_1._chasser = [];
                    /**
                     * Process.
                     */
                    function process($container, options, isUpdate) {
                        var levelStruct = synthesizeHeaders(options);
                        options.levelStruct = levelStruct;
                        if (isUpdate && !_.isNil($container.style.maxWidth) && !_.isEmpty($container.style.maxWidth)) {
                            var maxWidth = calcWidth(options.columns);
                            if (!options.isHeader && options.overflow === "scroll") {
                                $container.style.maxWidth = (maxWidth + ti.getScrollWidth()) + "px";
                            }
                            else {
                                $container.style.maxWidth = maxWidth + "px";
                            }
                        }
                        if (options.isHeader) {
                            if (Object.keys(levelStruct).length > 1) {
                                return groupHeader($container, options, isUpdate);
                            }
                        }
                        else {
                            options.float = options.float === false ? false : true;
                        }
                        var result = table($container, options, isUpdate);
                        var painter = paint($container, options);
                        return { $table: result.$table, cols: result.cols, controlMap: result.controlMap, painter: painter };
                    }
                    v_1.process = process;
                    /**
                     * Group header.
                     */
                    function groupHeader($container, options, isUpdate) {
                        var $table = selector.create("table").html("<tbody></tbody>").addClass(options.containerClass + "-table")
                            .css({ position: "relative", "table-layout": "fixed", width: "100%",
                            //                                "border-collapse": "separate",
                            "user-select": "none" }).getSingle();
                        $container.appendChild($table);
                        var $tbody = $table.getElementsByTagName("tbody")[0];
                        if (!isUpdate) {
                            $container.style.height = options.height;
                            $container.style.width = options.width;
                        }
                        if (!uk.util.isNullOrUndefined(options.overflow))
                            $container.style.overflow = options.overflow;
                        else if (!uk.util.isNullOrUndefined(options.overflowX) && !uk.util.isNullOrUndefined(options.overflowY)) {
                            $container.style.overflowX = options.overflowX;
                            $container.style.overflowY = options.overflowY;
                        }
                        var $colGroup = document.createElement("colgroup");
                        $table.insertBefore($colGroup, $tbody);
                        var colGroup = generateColGroup($colGroup, options.columns, options.ntsControls);
                        var painter = new GroupHeaderPainter(options);
                        painter.rows($tbody, tn.find(options.features, tn.MOVING));
                        return { $table: $table, cols: colGroup.cols, controlMap: colGroup.controlMap, painter: painter };
                    }
                    /**
                     * Generate column group.
                     */
                    function generateColGroup($colGroup, columns, ntsControls) {
                        var cols = [], controlMap = {};
                        _.forEach(columns, function (col) {
                            if (!_.isNil(col.group)) {
                                var colGroup = generateColGroup($colGroup, col.group, ntsControls);
                                if (colGroup) {
                                    colGroup.cols.forEach(function (c) { return cols.push(c); });
                                    _.assignIn(controlMap, colGroup.controlMap);
                                }
                                return;
                            }
                            var $col = document.createElement("col");
                            $col.style.width = col.width;
                            $colGroup.appendChild($col);
                            cols.push($col);
                            if (ntsControls && col.ntsControl) {
                                var foundControl = _.find(ntsControls, function (c) { return c.name === col.ntsControl; });
                                if (foundControl)
                                    controlMap[col.key] = foundControl;
                            }
                            if (col.hidden === true)
                                $col.style.display = "none";
                        });
                        return { cols: cols, controlMap: controlMap };
                    }
                    /**
                     * Table.
                     */
                    function table($container, options, isUpdate) {
                        var $table = document.createElement("table");
                        $table.innerHTML = "<tbody></tbody>";
                        $table.className = options.containerClass + "-table";
                        $container.appendChild($table);
                        var $tbody = $table.getElementsByTagName("tbody")[0];
                        if (!isUpdate) {
                            $container.style.height = options.height;
                            $container.style.width = options.width;
                        }
                        if (!_.isNil(options.overflow))
                            $container.style.overflow = options.overflow;
                        else if (!_.isNil(options.overflowX)) {
                            $container.style.overflowX = options.overflowX;
                        }
                        else if (!_.isNil(options.overflowY)) {
                            $container.style.overflowY = options.overflowY;
                        }
                        var $colGroup = document.createElement("colgroup");
                        $table.insertBefore($colGroup, $tbody);
                        var colDef = generateColGroup($colGroup, options.columns, options.ntsControls);
                        return { $table: $table, cols: colDef.cols, controlMap: colDef.controlMap };
                    }
                    v_1.table = table;
                    /**
                     * Paint.
                     */
                    function paint($container, options) {
                        var dataSource;
                        if (!_.isNil(options.dataSource)) {
                            dataSource = options.dataSource;
                        }
                        else {
                            var item_2 = {};
                            _.forEach(options.columns, function (col) {
                                item_2[col.key] = col.headerText;
                            });
                            dataSource = [item_2];
                        }
                        return normal($container, dataSource, options);
                    }
                    v_1.paint = paint;
                    /**
                     * Normal.
                     */
                    function normal($container, dataSource, options) {
                        var painter = new Painter($container, options);
                        //            $.data($container, lo.CANON, { _origDs: ti.cloneDeep(dataSource), dataSource: dataSource, primaryKey: options.primaryKey, painter: painter });
                        var $tbody = $container.querySelector("tbody");
                        _.forEach(dataSource, function (item, index) {
                            var $tr = painter.row(item, undefined, index);
                            $tbody.appendChild($tr);
                        });
                        return painter;
                    }
                    v_1.normal = normal;
                    /**
                     * Construe.
                     */
                    function construe($container, containers, options, single, fails) {
                        if (options.features) {
                            var cellStyleFt_1 = tn.find(options.features, tn.CELL_STYLE);
                            if (cellStyleFt_1) {
                                if (_cellStates)
                                    options.states = _cellStates;
                                else {
                                    ["states"].forEach(function (ft) {
                                        if (cellStyleFt_1[ft]) {
                                            var typeFt_1 = _.groupBy(cellStyleFt_1[ft], "rowId");
                                            _.forEach(typeFt_1, function (value, key) {
                                                typeFt_1[key] = _.groupBy(typeFt_1[key], function (item) {
                                                    return item.columnKey;
                                                });
                                            });
                                            _cellStates = typeFt_1;
                                            options[ft] = _cellStates;
                                        }
                                    });
                                }
                            }
                        }
                        if (!_cloud)
                            _cloud = new aho.Platrer(containers, options);
                        var res = single ? _cloud.renderSideRows(true, fails) : _cloud.renderRows(true);
                        if (!res)
                            return;
                        var start = res.start, end = res.end, cursor;
                        if (_.isNil(_mDesc)) {
                            _mDesc = {};
                            $.data($container, lo.DESC, _mDesc);
                            if (!_.isNil(res.fixedColIdxes)) {
                                _mDesc.fixedColIdxes = res.fixedColIdxes;
                            }
                            if (_.isNil(_mDesc.fixedRows)) {
                                _mDesc.fixedRows = [];
                                _mDesc.fixedRowElements = [];
                            }
                            _mDesc.rows = [];
                            _mDesc.rowElements = [];
                        }
                        if (!_.isNil(res.colIdxes) && (_.isNil(_mDesc.colIdxes) || _mDesc.colIdxes.length === 0)) {
                            _mDesc.colIdxes = res.colIdxes;
                        }
                        for (var i = start; i <= end; i++) {
                            cursor = i - start;
                            if (!_mDesc.fixedRows[i] && res.fixedRows[cursor]) {
                                _mDesc.fixedRows[i] = res.fixedRows[cursor];
                                _mDesc.fixedRowElements[i] = res.fixedRowElements[cursor];
                            }
                            _mDesc.rows[i] = res.rows[cursor];
                            _mDesc.rowElements[i] = res.rowElements[cursor];
                        }
                        if (!_vessel()) {
                            _mafollicle[_currentPage][_currentSheet] = {};
                        }
                        _vessel().desc = _mDesc;
                        _vessel().errors = _errors;
                        _vessel().dirties = _dirties;
                        _vessel().zeroHidden = _zeroHidden;
                        _vessel().selected = _selected;
                        _vessel().histoire = _histoire;
                        if (!_.isNil(_currentPage)) {
                            var openRange = _pageSize * _currentPage;
                            var closeRange = _pageSize * (_currentPage + 1) - 1;
                        }
                    }
                    v_1.construe = construe;
                    /**
                     * Synthesize headers.
                     */
                    function synthesizeHeaders(options) {
                        var level = {};
                        peelStruct(options.columns, level, 0);
                        var rowCount = Object.keys(level).length;
                        if (rowCount > 1) {
                            _.forEach(Object.keys(level), function (key) {
                                _.forEach(level[key], function (col) {
                                    if (uk.util.isNullOrUndefined(col.colspan)) {
                                        col.rowspan = rowCount - parseInt(key);
                                    }
                                });
                            });
                        }
                        return level;
                    }
                    v_1.synthesizeHeaders = synthesizeHeaders;
                    /**
                     * Peel struct.
                     */
                    function peelStruct(columns, level, currentLevel, parent) {
                        var colspan = 0, noGroup = 0;
                        _.forEach(columns, function (col) {
                            var clonedCol = _.clone(col);
                            var colCount = 0;
                            if (!_.isNil(col.group)) {
                                colCount = col.group.length;
                                noGroup++;
                                var ret = peelStruct(col.group, level, currentLevel + 1, col.headerText);
                                if (!uk.util.isNullOrUndefined(ret)) {
                                    colCount += ret;
                                }
                                clonedCol.colspan = colCount;
                            }
                            if (_.isNil(level[currentLevel])) {
                                level[currentLevel] = [];
                            }
                            level[currentLevel].push(clonedCol);
                            colspan += colCount;
                            if (col.constraint) {
                                var validator = new hpl.ColumnFieldValidator(parent, col.headerText, col.constraint.primitiveValue, col.constraint, col.key);
                                _validators[col.key] = validator;
                            }
                            var linkType = col.ntsType;
                            if (linkType) {
                                var parts = linkType.split("_");
                                if (!parts || parts.length !== 2)
                                    return;
                                if (parts[0] === "comboCode") {
                                    _specialColumn[col.key] = parts[1];
                                    _specialColumn[parts[1]] = col.key;
                                }
                                else {
                                    _specialLinkColumn[col.key] = { column: parts[1], changed: col.onChange };
                                }
                            }
                        });
                        return colspan !== 0 ? (colspan - noGroup) : undefined;
                    }
                    /**
                     * Get constraint name.
                     */
                    function getConstraintName(key) {
                        var column = _columnsMap[key];
                        if (!column)
                            return;
                        var constraint = column.constraint;
                        return constraint.primitiveValue ? ui.validation.getConstraint(constraint.primitiveValue).valueType
                            : constraint.cDisplayType;
                    }
                    v_1.getConstraintName = getConstraintName;
                    var Conditional = /** @class */ (function () {
                        function Conditional(options) {
                            this.options = options;
                            var clsColumns = ti.classifyColumns(options, true);
                            this.columns = clsColumns.columns;
                            this.visibleColumns = clsColumns.visibleColumns;
                            this.hiddenColumns = clsColumns.hiddenColumns;
                            this.visibleColumnsMap = ti.getColumnsMap(this.visibleColumns);
                            this.hiddenColumnsMap = ti.getColumnsMap(this.hiddenColumns);
                            _.assignIn(_columnsMap, this.visibleColumnsMap);
                        }
                        return Conditional;
                    }());
                    var Painter = /** @class */ (function (_super) {
                        __extends(Painter, _super);
                        function Painter($container, options) {
                            var _this = _super.call(this, options) || this;
                            _this.$container = $container;
                            _this.fixed = options.containerClass === FIXED;
                            if (options.features) {
                                var headerStyle = tn.find(options.features, tn.HEADER_STYLE);
                                if (headerStyle) {
                                    _this.styles = _.groupBy(headerStyle.columns, "key");
                                }
                                var sortingFt = tn.find(options.features, tn.SORTING);
                                if (sortingFt && sortingFt.columnSettings) {
                                    _this.sortSettings = sortingFt.columnSettings;
                                }
                                var moving = tn.find(options.features, tn.MOVING);
                                _this.moving = moving;
                            }
                            if (!_.isNil(options.levelStruct)) {
                                _this.columnsMap = ti.columnsMapFromStruct(options.levelStruct);
                            }
                            else {
                                _this.columnsMap = _.groupBy(options.columns, "key");
                            }
                            return _this;
                        }
                        /**
                         * BubColumn.
                         */
                        Painter.prototype.bubColumn = function (name, i) {
                            var self = this;
                            var col = _.remove(self.hiddenColumns, function (c) { return c.key === name; });
                            if (!col || col.length === 0)
                                return;
                            self.visibleColumns.push(col[0]);
                            if (self.hiddenColumnsMap.hasOwnProperty(name))
                                delete self.hiddenColumnsMap[name];
                            self.visibleColumnsMap[name] = col;
                            _columnsMap[name] = col;
                            _.forEach(_.keys(_mafollicle), function (k) {
                                if (k === SheetDef || k === String(_currentPage))
                                    return;
                                var maf = _mafollicle[k];
                                _.forEach(_.keys(maf), function (s) {
                                    if (maf[s].hasOwnProperty("desc")) {
                                        _.forEach(self.fixed ? maf[s].desc.fixedRows : maf[s].desc.rows, function (r) {
                                            if (!r)
                                                return;
                                            var a = r[i];
                                            if (a && a.style.display === "none") {
                                                a.style.display = "";
                                            }
                                        });
                                        return false;
                                    }
                                });
                            });
                        };
                        /**
                         * UnbubColumn.
                         */
                        Painter.prototype.unbubColumn = function (name, i) {
                            var self = this;
                            var col = _.remove(self.visibleColumns, function (c) { return c.key === name; });
                            if (!col || col.length === 0)
                                return;
                            self.hiddenColumns.push(col[0]);
                            if (self.visibleColumnsMap.hasOwnProperty(name)) {
                                delete self.visibleColumnsMap[name];
                                delete _columnsMap[name];
                            }
                            self.hiddenColumnsMap[name] = col;
                            _.forEach(_.keys(_mafollicle), function (k) {
                                if (k === SheetDef || k === String(_currentPage))
                                    return;
                                var maf = _mafollicle[k];
                                _.forEach(_.keys(maf), function (s) {
                                    if (maf[s].hasOwnProperty("desc")) {
                                        _.forEach(self.fixed ? maf[s].desc.fixedRows : maf[s].desc.rows, function (r) {
                                            if (!r)
                                                return;
                                            var a = r[i];
                                            if (a && a.style.display !== "none") {
                                                a.style.display = "none";
                                            }
                                        });
                                        return false;
                                    }
                                });
                            });
                        };
                        /**
                         * Cell.
                         */
                        Painter.prototype.cell = function (rData, rowIdx, key) {
                            var self = this;
                            var cData = rData[key];
                            var data = cData;
                            var column = self.columnsMap[key];
                            if (uk.util.isNullOrUndefined(column))
                                return;
                            var ws = column.css && column.css.whiteSpace ? column.css.whiteSpace : "nowrap";
                            var td = document.createElement("td");
                            $.data(td, lo.VIEW, rowIdx + "-" + key);
                            var tdStyle = "";
                            tdStyle += "; border-width: 1px; overflow: hidden; ";
                            if (self.options.isHeader) {
                                tdStyle += "word-break: break-all; vertical-align: top;";
                            }
                            else {
                                tdStyle += "white-space: " + ws + ";"; // position: relative;";
                            }
                            if (!self.visibleColumnsMap[key]) {
                                tdStyle += "; display: none;";
                                if (self.$container.classList.contains(FIXED))
                                    _fixedHiddenColumns.push(key);
                                else
                                    _hiddenColumns.push(key);
                            }
                            var hStyle;
                            if (self.styles && (hStyle = self.styles[key])) {
                                _.forEach(hStyle[0].colors, function (c) {
                                    if (c.indexOf('#') === 0) {
                                        tdStyle += "; background-color: " + c + ";";
                                    }
                                    else
                                        td.classList.add(c);
                                });
                            }
                            if (column.checkbox) {
                                var $checkBoxLabel = document.createElement("label");
                                $checkBoxLabel.classList.add("ntsCheckBox");
                                var count_1 = 0, $checkBox_1 = document.createElement("input");
                                $checkBox_1.setAttribute("type", "checkbox");
                                $checkBoxLabel.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                                    evt.stopPropagation();
                                });
                                $checkBox_1.addXEventListener("change", function (evt) {
                                    var allCheckKey = dkn.allCheck[key], checked = $checkBox_1.checked;
                                    if (checked) {
                                        _$grid.mGrid("checkAll", key, self.fixed);
                                        allCheckKey.stt = true;
                                        allCheckKey.count = allCheckKey.overall;
                                        allCheckKey.toggle = true;
                                    }
                                    else {
                                        _$grid.mGrid("uncheckAll", key, self.fixed);
                                        allCheckKey.stt = false;
                                        allCheckKey.count = 0;
                                        allCheckKey.toggle = false;
                                    }
                                });
                                $checkBoxLabel.appendChild($checkBox_1);
                                var $box = document.createElement("span");
                                $box.classList.add("box");
                                $checkBoxLabel.appendChild($box);
                                td.appendChild($checkBoxLabel);
                                _.forEach(_.keys(_mafollicle), function (k) {
                                    if (k === SheetDef)
                                        return;
                                    if (_mafollicle[k].dataSource)
                                        count_1 += _mafollicle[k].dataSource.length;
                                });
                                dkn.allCheck[key] = { stt: null, cb: $checkBox_1, overall: count_1, count: 0 };
                            }
                            else
                                td.innerHTML = data;
                            td.style.cssText += tdStyle;
                            var triSet = _.find(self.sortSettings, function (s) { return s.columnKey === key && s.allowSorting; });
                            if (triSet) {
                                var downArr_1 = _prtDiv.cloneNode(true);
                                downArr_1.classList.add(v_1.FACON_BTN);
                                downArr_1.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                                    var desc;
                                    if (down_1.classList.contains(v_1.VFACON_ASC)) {
                                        down_1.classList.remove(v_1.VFACON_ASC);
                                        down_1.classList.add(v_1.FACON_ASC);
                                        downArr_1.style.top = "2px";
                                    }
                                    else if (down_1.classList.contains(v_1.FACON_ASC)) {
                                        down_1.classList.remove(v_1.FACON_ASC);
                                        down_1.classList.add(v_1.FACON_DESC);
                                        downArr_1.style.top = "8px";
                                        desc = true;
                                    }
                                    else {
                                        down_1.classList.remove(v_1.FACON_DESC);
                                        down_1.classList.add(v_1.FACON_ASC);
                                        downArr_1.style.top = "2px";
                                    }
                                    ssk.trigger(_$grid[0], "falcon", [triSet.columnKey, triSet.type, desc]);
                                });
                                td.appendChild(downArr_1);
                                var down_1 = document.createElement("span");
                                down_1.className = "mg-icon " + v_1.VFACON_ASC;
                                downArr_1.appendChild(down_1);
                                td.addXEventListener(ssk.MOUSE_OVER, function (evt) {
                                    downArr_1.style.display = "inline";
                                    downArr_1.style.left = td.offsetLeft + td.offsetWidth - 20 + "px";
                                });
                                td.addXEventListener(ssk.MOUSE_OUT, function (evt) {
                                    downArr_1.style.display = "none";
                                });
                            }
                            return td;
                        };
                        /**
                         * Row.
                         */
                        Painter.prototype.row = function (data, config, rowIdx) {
                            var self = this;
                            var tr = document.createElement("tr");
                            $.data(tr, lo.VIEW, rowIdx);
                            if (config) {
                                tr.style.height = parseFloat(config.css.height) + "px";
                            }
                            _.forEach(Object.keys(data), function (key, index) {
                                if (!self.visibleColumnsMap[key] && !self.hiddenColumnsMap[key])
                                    return;
                                var cell = self.cell(data, rowIdx, key);
                                tr.appendChild(cell);
                                if (self.moving && !rowIdx) {
                                    cell.removeXEventListener(ssk.MOUSE_DOWN + ".pis");
                                    cell.addXEventListener(ssk.MOUSE_DOWN + ".pis", self.pisAction.bind(self, cell));
                                }
                            });
                            return tr;
                        };
                        Painter.prototype.pisAction = function ($cell, evt) {
                            var self = this, id = self.fixed ? 0 : 1;
                            evt.preventDefault();
                            //                evt.stopPropagation();
                            var chass = v_1._chasser[id];
                            if (_.isNil(chass)) {
                                chass = [_prtDiv.cloneNode(true), _prtDiv.cloneNode(true)];
                                chass[0].className = "mgrid-freinholder";
                                chass[1].className = "mgrid-placeholder";
                                v_1._chasser[id] = chass;
                            }
                            var div = ti.closest($cell, "div");
                            div.appendChild(chass[1]);
                            div.appendChild(chass[0]);
                            self.piston = { x: evt.pageX, y: evt.pageY, left: $cell.offsetLeft, top: $cell.offsetTop, index: selector.index($cell), cell: $cell };
                            var width = $cell.offsetWidth, height = $cell.offsetHeight;
                            chass[0].style.display = "block";
                            chass[0].style.width = width + "px";
                            chass[0].style.height = height + "px";
                            chass[0].style.left = self.piston.left + "px";
                            chass[0].style.top = self.piston.top + "px";
                            chass[0].style.backgroundColor = getComputedStyle($cell).backgroundColor;
                            chass[0].innerHTML = $cell.innerText;
                            chass[1].style.display = "block";
                            chass[1].style.width = width - 1 + "px";
                            chass[1].style.height = height + "px";
                            chass[1].style.left = self.piston.left + "px";
                            chass[1].style.top = self.piston.top + "px";
                            window.addXEventListener(ssk.MOUSE_MOVE + ".pis", function (evt) {
                                chass[0].style.left = self.piston.left + evt.pageX - self.piston.x + "px";
                            });
                            window.addXEventListener(ssk.MOUSE_UP + ".pis", self.fixed ? self.freinUp.bind(self, chass) : self.pisUp.bind(self, chass));
                        };
                        Painter.prototype.freinUp = function (chass, evt) {
                            var self = this, gripCol = 0, targetCol = 0, wrapperNo = _headerWrappers.length > 1 && !self.fixed ? 1 : 0, $hContainer = _headerWrappers[wrapperNo], $bContainer = _bodyWrappers[wrapperNo], $sContainer = _sumWrappers[wrapperNo];
                            window.removeXEventListener(ssk.MOUSE_MOVE + ".pis");
                            window.removeXEventListener(ssk.MOUSE_UP + ".pis");
                            ti.remove(chass[0]);
                            ti.remove(chass[1]);
                            chass[0].style.display = "none";
                            var target = document.elementFromPoint(evt.clientX, evt.clientY);
                            chass[0].style.display = "block";
                            if (!selector.is(target, "td") || ti.closest(target, "div") !== $hContainer) {
                                return;
                            }
                            var row = ti.closest(target, "tr"), fhGroup, fbGroup, sGroup, sBody, sBodyRow, updatedCols = {}, tbody = $hContainer.querySelector("tbody"), line = tbody.querySelector("tr"), index = selector.index(target);
                            if (index === self.piston.index) {
                                return;
                            }
                            var hgTarget, bgTarget, bbTarget, sgTarget, sbTarget, hGroup, bGroup, scGroup, gTarget;
                            fhGroup = $hContainer.querySelector("colgroup");
                            fbGroup = $bContainer.querySelector("colgroup");
                            hgTarget = selector.findAt(fhGroup, "col", index + 1);
                            bgTarget = selector.findAt(fbGroup, "col", index + 1);
                            if ($sContainer) {
                                sGroup = $sContainer.querySelector("colgroup");
                                sBody = $sContainer.querySelector("tbody");
                                sBodyRow = sBody.querySelector("tr");
                                sgTarget = selector.findAt(sGroup, "col", index + 1);
                                sbTarget = selector.findAt(sBodyRow, "td", index + 1);
                            }
                            if (self.piston.index < index) {
                                selector.insertAfter(fhGroup, selector.findAt(fhGroup, "col", self.piston.index + 1), hgTarget);
                                _.forEach(_.keys(_mafollicle), function (pg) {
                                    if (pg === SheetDef)
                                        return;
                                    _.forEach(_.keys(_mafollicle[SheetDef]), function (ash) {
                                        var pmaf = _mafollicle[pg][ash];
                                        if (_.isNil(pmaf) || _.isNil(pmaf.desc))
                                            return;
                                        _.forEach(pmaf.desc.fixedRowElements, function (r) {
                                            if (_.isNil(r))
                                                return;
                                            bbTarget = selector.findAt(r, "td", index + 1);
                                            if (pmaf.desc.fixedColIdxes[ti.getCellCoord(bbTarget).columnKey] !== index)
                                                return;
                                            selector.insertAfter(r, selector.findAt(r, "td", self.piston.index + 1), bbTarget);
                                        });
                                        _.forEach(pmaf.desc.fixedRows, function (r, z) {
                                            if (_.isNil(r))
                                                return;
                                            bbTarget = r.splice(self.piston.index, 1);
                                            r.splice(index, 0, bbTarget[0]);
                                            if (z > 0 || (_.isNumber(_currentPage) && Number(pg) !== _currentPage) || ash !== _currentSheet)
                                                return;
                                            for (var k = self.piston.index; k <= index; k++) {
                                                var coord = ti.getCellCoord(r[k]);
                                                updatedCols[coord.columnKey] = k;
                                            }
                                        });
                                    });
                                });
                                hGroup = kt._fixedGroups[0];
                                gTarget = hGroup.splice(self.piston.index, 1);
                                hGroup.splice(index, 0, gTarget[0]);
                                bGroup = kt._fixedGroups[1];
                                gTarget = bGroup.splice(self.piston.index, 1);
                                bGroup.splice(index, 0, gTarget[0]);
                                scGroup = kt._fixedGroups[2];
                                if (scGroup) {
                                    gTarget = scGroup.splice(self.piston.index, 1);
                                    scGroup.splice(index, 0, gTarget[0]);
                                }
                                _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                                    if (k === _currentSheet)
                                        return;
                                    var maf = _mafollicle[_currentPage][k];
                                });
                                self.columns.splice(index, 0, self.columns.splice(self.piston.index, 1)[0]);
                                selector.insertAfter(fbGroup, selector.findAt(fbGroup, "col", self.piston.index + 1), bgTarget);
                                if ($sContainer) {
                                    selector.insertAfter(sBodyRow, selector.findAt(sBodyRow, "td", self.piston.index + 1), sbTarget);
                                    selector.insertAfter(sGroup, selector.findAt(sGroup, "col", self.piston.index + 1), sgTarget);
                                }
                                line.insertBefore(self.piston.cell, target.nextSibling);
                            }
                            else {
                                fhGroup.insertBefore(selector.findAt(fhGroup, "col", self.piston.index + 1), hgTarget);
                                _.forEach(_.keys(_mafollicle), function (pg) {
                                    if (pg === SheetDef)
                                        return;
                                    _.forEach(_.keys(_mafollicle[SheetDef]), function (ash) {
                                        var pmaf = _mafollicle[pg][ash];
                                        if (_.isNil(pmaf) || _.isNil(pmaf.desc))
                                            return;
                                        _.forEach(pmaf.desc.fixedRowElements, function (r) {
                                            if (_.isNil(r))
                                                return;
                                            bbTarget = selector.findAt(r, "td", index + 1);
                                            if (pmaf.desc.fixedColIdxes[ti.getCellCoord(bbTarget).columnKey] !== index)
                                                return;
                                            r.insertBefore(selector.findAt(r, "td", self.piston.index + 1), bbTarget);
                                        });
                                        _.forEach(pmaf.desc.fixedRows, function (r, z) {
                                            if (_.isNil(r))
                                                return;
                                            bbTarget = r.splice(self.piston.index, 1);
                                            r.splice(index, 0, bbTarget[0]);
                                            if (z > 0 || (_.isNumber(_currentPage) && Number(pg) !== _currentPage) || ash !== _currentSheet)
                                                return;
                                            for (var k = index; k <= self.piston.index; k++) {
                                                var coord = ti.getCellCoord(r[k]);
                                                updatedCols[coord.columnKey] = k;
                                            }
                                        });
                                    });
                                });
                                hGroup = kt._fixedGroups[0];
                                gTarget = hGroup.splice(self.piston.index, 1);
                                hGroup.splice(index, 0, gTarget[0]);
                                bGroup = kt._fixedGroups[1];
                                gTarget = bGroup.splice(self.piston.index, 1);
                                bGroup.splice(index, 0, gTarget[0]);
                                scGroup = kt._fixedGroups[2];
                                if (scGroup) {
                                    gTarget = scGroup.splice(self.piston.index, 1);
                                    scGroup.splice(index, 0, gTarget[0]);
                                }
                                self.columns.splice(index, 0, self.columns.splice(self.piston.index, 1)[0]);
                                fbGroup.insertBefore(selector.findAt(fbGroup, "col", self.piston.index + 1), bgTarget);
                                if ($sContainer) {
                                    sBodyRow.insertBefore(selector.findAt(sBodyRow, "td", self.piston.index + 1), sbTarget);
                                    sGroup.insertBefore(selector.findAt(sGroup, "col", self.piston.index + 1), sgTarget);
                                }
                                line.insertBefore(self.piston.cell, target);
                            }
                            if (_.keys(updatedCols).length > 0) {
                                _.forEach(_.keys(_mafollicle), function (pg) {
                                    if (pg === SheetDef)
                                        return;
                                    _.forEach(_.keys(_mafollicle[SheetDef]), function (ash) {
                                        var pmaf = _mafollicle[pg][ash];
                                        if (_.isNil(pmaf) || _.isNil(pmaf.desc))
                                            return;
                                        var val, idxes = pmaf.desc.fixedColIdxes;
                                        _.forEach(_.keys(idxes), function (c) {
                                            val = updatedCols[c];
                                            if (!_.isNil(val)) {
                                                idxes[c] = val;
                                            }
                                        });
                                    });
                                });
                            }
                            _cloud.painter.revive();
                            if (kt._adjuster) {
                                kt._adjuster.nostal(hGroup, bGroup, scGroup, self.fixed);
                                kt._adjuster.handle();
                            }
                        };
                        Painter.prototype.pisUp = function (chass, evt) {
                            var self = this, gripCol = 0, wrapperNo = _headerWrappers.length > 1 && !self.fixed ? 1 : 0, $hContainer = _headerWrappers[wrapperNo];
                            window.removeXEventListener(ssk.MOUSE_MOVE + ".pis");
                            window.removeXEventListener(ssk.MOUSE_UP + ".pis");
                            ti.remove(chass[0]);
                            ti.remove(chass[1]);
                            chass[0].style.display = "none";
                            var target = document.elementFromPoint(evt.clientX, evt.clientY);
                            chass[0].style.display = "block";
                            if (!selector.is(target, "td") || ti.closest(target, "div") !== $hContainer) {
                                return;
                            }
                            var row = ti.closest(target, "tr"), updatedCols = {}, //= $hContainer.querySelector("tbody"),
                            index = selector.index(target);
                            if (index === self.piston.index) {
                                return;
                            }
                            _.forEach(_.keys(_mafollicle), function (pg) {
                                var hgTarget, bgTarget, bbTarget, sgTarget, sbTarget, sGroup, sBody, sBodyRow, line, tbody;
                                if (pg === SheetDef)
                                    return;
                                var pmaf = _mafollicle[pg][_currentSheet];
                                if (_.isNil(pmaf))
                                    return;
                                if (_.isNumber(_currentPage))
                                    pg = Number(pg);
                                tbody = pmaf.$hBody;
                                if (tbody) {
                                    line = tbody.querySelector("tr");
                                    hgTarget = selector.findAt(pmaf.$hGroup, "col", index + 1);
                                    bgTarget = selector.findAt(pmaf.$bGroup, "col", index + 1);
                                    sGroup = pmaf.$sumGroup;
                                    sBody = pmaf.$sumBody;
                                    if (sBody) {
                                        sBodyRow = sBody.querySelector("tr");
                                        sgTarget = selector.findAt(sGroup, "col", index + 1);
                                        sbTarget = selector.findAt(sBodyRow, "td", index + 1);
                                    }
                                }
                                if (self.piston.index < index) {
                                    if (tbody) {
                                        selector.insertAfter(pmaf.$hGroup, selector.findAt(pmaf.$hGroup, "col", self.piston.index + 1), hgTarget);
                                    }
                                    if (pmaf.desc) {
                                        _.forEach(pmaf.desc.rowElements, function (r) {
                                            if (_.isNil(r))
                                                return;
                                            bbTarget = selector.findAt(r, "td", index + 1);
                                            selector.insertAfter(r, selector.findAt(r, "td", self.piston.index + 1), bbTarget);
                                        });
                                        _.forEach(pmaf.desc.rows, function (r, z) {
                                            if (_.isNil(r))
                                                return;
                                            bbTarget = r.splice(self.piston.index, 1);
                                            r.splice(index, 0, bbTarget[0]);
                                            if (z > 0 || pg !== _currentPage)
                                                return;
                                            for (var k = self.piston.index; k <= index; k++) {
                                                var coord = ti.getCellCoord(r[k]);
                                                updatedCols[coord.columnKey] = k;
                                            }
                                        });
                                    }
                                    if (pg === _currentPage) {
                                        _.forEach(["b", "h", "sum"], function (arrType) {
                                            var arr = _mafollicle[SheetDef][_currentSheet][arrType + "ColArr"];
                                            if (_.isNil(arr))
                                                return;
                                            bbTarget = arr.splice(self.piston.index, 1);
                                            arr.splice(index, 0, bbTarget[0]);
                                        });
                                        self.columns.splice(index, 0, self.columns.splice(self.piston.index, 1)[0]);
                                    }
                                    if (tbody) {
                                        selector.insertAfter(pmaf.$bGroup, selector.findAt(pmaf.$bGroup, "col", self.piston.index + 1), bgTarget);
                                    }
                                    if (sBody) {
                                        selector.insertAfter(sBodyRow, selector.findAt(sBodyRow, "td", self.piston.index + 1), sbTarget);
                                        selector.insertAfter(sGroup, selector.findAt(sGroup, "col", self.piston.index + 1), sgTarget);
                                    }
                                    if (tbody) {
                                        line.insertBefore(self.piston.cell, target.nextSibling);
                                    }
                                }
                                else {
                                    if (tbody) {
                                        pmaf.$hGroup.insertBefore(selector.findAt(pmaf.$hGroup, "col", self.piston.index + 1), hgTarget);
                                    }
                                    if (pmaf.desc) {
                                        _.forEach(pmaf.desc.rowElements, function (r) {
                                            if (_.isNil(r))
                                                return;
                                            bbTarget = selector.findAt(r, "td", index + 1);
                                            r.insertBefore(selector.findAt(r, "td", self.piston.index + 1), bbTarget);
                                        });
                                        _.forEach(pmaf.desc.rows, function (r, z) {
                                            if (_.isNil(r))
                                                return;
                                            bbTarget = r.splice(self.piston.index, 1);
                                            r.splice(index, 0, bbTarget[0]);
                                            if (z > 0 || pg !== _currentPage)
                                                return;
                                            for (var k = index; k <= self.piston.index; k++) {
                                                var coord = ti.getCellCoord(r[k]);
                                                updatedCols[coord.columnKey] = k;
                                            }
                                        });
                                    }
                                    if (pg === _currentPage) {
                                        _.forEach(["b", "h", "sum"], function (arrType) {
                                            var arr = _mafollicle[SheetDef][_currentSheet][arrType + "ColArr"];
                                            if (_.isNil(arr))
                                                return;
                                            bbTarget = arr.splice(self.piston.index, 1);
                                            arr.splice(index, 0, bbTarget[0]);
                                        });
                                        self.columns.splice(index, 0, self.columns.splice(self.piston.index, 1)[0]);
                                    }
                                    if (tbody) {
                                        pmaf.$bGroup.insertBefore(selector.findAt(pmaf.$bGroup, "col", self.piston.index + 1), bgTarget);
                                    }
                                    if (sBody) {
                                        sBodyRow.insertBefore(selector.findAt(sBodyRow, "td", self.piston.index + 1), sbTarget);
                                        sGroup.insertBefore(selector.findAt(sGroup, "col", self.piston.index + 1), sgTarget);
                                    }
                                    if (tbody) {
                                        line.insertBefore(self.piston.cell, target);
                                    }
                                }
                                if (_.keys(updatedCols).length > 0) {
                                    var val_1, idxes_1 = pmaf.desc.colIdxes;
                                    _.forEach(_.keys(idxes_1), function (c) {
                                        val_1 = updatedCols[c];
                                        if (!_.isNil(val_1)) {
                                            idxes_1[c] = val_1;
                                        }
                                    });
                                }
                            });
                            _cloud.painter.revive();
                            if (kt._adjuster) {
                                var csd = _mafollicle[SheetDef][_currentSheet];
                                kt._adjuster.nostal(csd.hColArr, csd.bColArr, csd.sumColArr, self.fixed);
                                kt._adjuster.handle();
                            }
                        };
                        return Painter;
                    }(Conditional));
                    v_1.Painter = Painter;
                    var GroupHeaderPainter = /** @class */ (function (_super) {
                        __extends(GroupHeaderPainter, _super);
                        function GroupHeaderPainter(options) {
                            var _this = _super.call(this, options) || this;
                            _this.levelStruct = options.levelStruct;
                            _this.columnsMap = ti.columnsMapFromStruct(_this.levelStruct);
                            _this.fixed = options.containerClass === FIXED;
                            if (options.features) {
                                var styleFt = tn.find(options.features, tn.HEADER_STYLE);
                                if (styleFt) {
                                    _this.styles = _.groupBy(styleFt.columns, "key");
                                }
                                var sortingFt = tn.find(options.features, tn.SORTING);
                                if (sortingFt && sortingFt.columnSettings) {
                                    _this.sortSettings = sortingFt.columnSettings;
                                }
                            }
                            return _this;
                        }
                        /**
                         * Cell.
                         */
                        GroupHeaderPainter.prototype.cell = function (text, rowIdx, cell) {
                            var self = this;
                            var $td = document.createElement("td");
                            $.data($td, lo.VIEW, rowIdx + "-" + cell.key);
                            var tdStyle = "; border-width: 1px; overflow: hidden; word-break: break-all; vertical-align: top; border-collapse: collapse;";
                            if (!_.isNil(cell.rowspan) && cell.rowspan > 1)
                                $td.setAttribute("rowspan", cell.rowspan);
                            if (!_.isNil(cell.colspan) && cell.colspan > 1)
                                $td.setAttribute("colspan", cell.colspan);
                            else if (_.isNil(cell.colspan) && !self.visibleColumnsMap[cell.key]) {
                                tdStyle += "; display: none;";
                                if (self.options.containerClass === FIXED)
                                    _fixedHiddenColumns.push(cell.key);
                                else
                                    _hiddenColumns.push(cell.key);
                            }
                            var column = self.columnsMap[cell.key];
                            var hStyle;
                            if (self.styles && ((hStyle = self.styles[cell.key])
                                || (cell.group && (hStyle = self.styles[cell.group[0].key])))) {
                                _.forEach(hStyle[0].colors, function (c) {
                                    if (c.indexOf('#') === 0) {
                                        tdStyle += "; background-color: " + c + ";";
                                    }
                                    else
                                        $td.classList.add(c);
                                });
                            }
                            if (column && column.checkbox) {
                                var $checkBoxLabel = document.createElement("label");
                                $checkBoxLabel.classList.add("ntsCheckBox");
                                var count_2 = 0, $checkBox_2 = document.createElement("input");
                                $checkBox_2.setAttribute("type", "checkbox");
                                $checkBoxLabel.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                                    evt.stopPropagation();
                                });
                                $checkBox_2.addXEventListener("change", function (evt) {
                                    var allCheckKey = dkn.allCheck[cell.key], checked = $checkBox_2.checked;
                                    if (checked) {
                                        _$grid.mGrid("checkAll", cell.key, self.fixed);
                                        allCheckKey.stt = true;
                                        allCheckKey.count = allCheckKey.overall;
                                        allCheckKey.toggle = true;
                                    }
                                    else {
                                        _$grid.mGrid("uncheckAll", cell.key, self.fixed);
                                        allCheckKey.stt = false;
                                        allCheckKey.count = 0;
                                        allCheckKey.toggle = false;
                                    }
                                });
                                $checkBoxLabel.appendChild($checkBox_2);
                                var $box = document.createElement("span");
                                $box.classList.add("box");
                                $checkBoxLabel.appendChild($box);
                                $td.appendChild($checkBoxLabel);
                                _.forEach(_.keys(_mafollicle), function (k) {
                                    if (k === SheetDef)
                                        return;
                                    if (_mafollicle[k].dataSource)
                                        count_2 += _mafollicle[k].dataSource.length;
                                });
                                dkn.allCheck[cell.key] = { stt: null, cb: $checkBox_2, overall: count_2, count: 0 };
                            }
                            else
                                $td.innerHTML = text;
                            $td.style.cssText += tdStyle;
                            var triSet = _.find(self.sortSettings, function (s) { return s.columnKey === cell.key && s.allowSorting; });
                            if (triSet) {
                                var downArr_2 = _prtDiv.cloneNode(true);
                                downArr_2.classList.add(v_1.FACON_BTN);
                                downArr_2.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                                    var desc;
                                    if (down_2.classList.contains(v_1.VFACON_ASC)) {
                                        down_2.classList.remove(v_1.VFACON_ASC);
                                        down_2.classList.add(v_1.FACON_ASC);
                                        downArr_2.style.top = $td.offsetTop + 2 + "px";
                                    }
                                    else if (down_2.classList.contains(v_1.FACON_ASC)) {
                                        down_2.classList.remove(v_1.FACON_ASC);
                                        down_2.classList.add(v_1.FACON_DESC);
                                        downArr_2.style.top = $td.offsetTop + 8 + "px";
                                        desc = true;
                                    }
                                    else {
                                        down_2.classList.remove(v_1.FACON_DESC);
                                        down_2.classList.add(v_1.FACON_ASC);
                                        downArr_2.style.top = $td.offsetTop + 2 + "px";
                                    }
                                    ssk.trigger(_$grid[0], "falcon", [triSet.columnKey, triSet.type, desc]);
                                    evt.stopPropagation();
                                });
                                $td.appendChild(downArr_2);
                                var down_2 = document.createElement("span");
                                down_2.className = "mg-icon " + v_1.VFACON_ASC;
                                downArr_2.appendChild(down_2);
                                $td.addXEventListener(ssk.MOUSE_OVER, function (evt) {
                                    downArr_2.style.left = $td.offsetLeft + $td.offsetWidth - 20 + "px";
                                    downArr_2.style.display = "inline";
                                    downArr_2.style.top = $td.offsetTop +
                                        (down_2.classList.contains(v_1.FACON_ASC) || down_2.classList.contains(v_1.VFACON_ASC) ? 2 : 8) + "px";
                                });
                                $td.addXEventListener(ssk.MOUSE_OUT, function (evt) {
                                    downArr_2.style.display = "none";
                                });
                            }
                            return $td;
                        };
                        /**
                         * Rows.
                         */
                        GroupHeaderPainter.prototype.rows = function ($tbody, moving) {
                            var self = this;
                            _.forEach(Object.keys(self.levelStruct), function (rowIdx) {
                                var $tr = document.createElement("tr");
                                rowIdx = Number(rowIdx);
                                $.data($tr, lo.VIEW, rowIdx);
                                var oneLevel = self.levelStruct[rowIdx];
                                _.forEach(oneLevel, function (cell, index) {
                                    if (!self.visibleColumnsMap[cell.key] && !self.hiddenColumnsMap[cell.key]
                                        && _.isNil(cell.colspan))
                                        return;
                                    var $cell = self.cell(cell.headerText, rowIdx, cell);
                                    $tr.appendChild($cell);
                                    if (moving && !rowIdx) {
                                        $cell.removeXEventListener(ssk.MOUSE_DOWN + ".pis");
                                        $cell.addXEventListener(ssk.MOUSE_DOWN + ".pis", self.pisAction.bind(self, $cell));
                                    }
                                });
                                $tbody.appendChild($tr);
                            });
                        };
                        GroupHeaderPainter.prototype.pisAction = function ($cell, evt) {
                            var self = this, id = self.fixed ? 0 : 1;
                            //                evt.stopPropagation();
                            var chass = v_1._chasser[id];
                            if (!chass) {
                                chass = [_prtDiv.cloneNode(true), _prtDiv.cloneNode(true)];
                                chass[0].className = "mgrid-freinholder";
                                chass[1].className = "mgrid-placeholder";
                                v_1._chasser[id] = chass;
                            }
                            var div = ti.closest($cell, "div"), width = $cell.offsetWidth, height = $cell.offsetHeight;
                            div.appendChild(chass[1]);
                            div.appendChild(chass[0]);
                            self.piston = { x: evt.pageX, y: evt.pageY, left: $cell.offsetLeft, top: $cell.offsetTop, index: selector.index($cell), cell: $cell };
                            chass[0].style.display = "block";
                            chass[0].style.width = width + "px";
                            chass[0].style.height = height + "px";
                            chass[0].style.left = self.piston.left + "px";
                            chass[0].style.top = self.piston.top + "px";
                            chass[0].style.backgroundColor = getComputedStyle($cell).backgroundColor;
                            chass[0].innerHTML = $cell.innerText;
                            chass[1].style.display = "block";
                            chass[1].style.width = width - 1 + "px";
                            chass[1].style.height = height + "px";
                            chass[1].style.left = self.piston.left + "px";
                            chass[1].style.top = self.piston.top + "px";
                            window.addXEventListener(ssk.MOUSE_MOVE + ".pis", function (evt) {
                                chass[0].style.left = self.piston.left + evt.pageX - self.piston.x + "px";
                            });
                            window.addXEventListener(ssk.MOUSE_UP + ".pis", self.fixed ? self.freinUp.bind(self, chass) : self.pisUp.bind(self, chass));
                        };
                        GroupHeaderPainter.prototype.freinUp = function (chass, evt) {
                            var self = this, index, gripCol = 0, headInsertCol = 0, tailInsertCol = 0, colspan = parseInt(self.piston.cell.getAttribute("colspan")), headInsertIdx = 0, tailInsertIdx = 0, nlay = 0, wrapperNo = _headerWrappers.length > 1 && !self.fixed ? 1 : 0, $hContainer = _headerWrappers[wrapperNo], $bContainer = _bodyWrappers[wrapperNo], $sContainer = _sumWrappers[wrapperNo];
                            window.removeXEventListener(ssk.MOUSE_MOVE + ".pis");
                            window.removeXEventListener(ssk.MOUSE_UP + ".pis");
                            ti.remove(chass[0]);
                            ti.remove(chass[1]);
                            chass[0].style.display = "none";
                            var target = document.elementFromPoint(evt.clientX, evt.clientY);
                            chass[0].style.display = "block";
                            if (!selector.is(target, "td") || ti.closest(target, "div") !== $hContainer) {
                                return;
                            }
                            var row = ti.closest(target, "tr"), fhGroup, fbGroup, sGroup, sBody, sBodyRow, updatedCols = {}, tbody = $hContainer.querySelector("tbody"), firstLine = tbody.querySelector("tr:nth-of-type(1)");
                            if (selector.index(row) > 0) {
                                var coord_1 = ti.getCellCoord(target);
                                _.forEach(self.levelStruct[0], function (c, i) {
                                    if (c.group && _.find(c.group, function (g) { return g.key === coord_1.columnKey; })) {
                                        index = i;
                                    }
                                });
                                if (!_.isNil(index)) {
                                    target = firstLine.querySelector("td:nth-of-type(" + (index + 1) + ")");
                                }
                            }
                            else {
                                index = selector.index(target);
                            }
                            if (index === self.piston.index) {
                                return;
                            }
                            _.forEach(self.levelStruct[0], function (c, i) {
                                if (i < self.piston.index) {
                                    if (!_.isNil(c.colspan)) {
                                        nlay += c.colspan;
                                        gripCol += c.colspan;
                                    }
                                    if (c.rowspan > 1 && _.isNil(c.colspan))
                                        gripCol += 1;
                                }
                                if (i < index) {
                                    if (i === self.piston.index)
                                        return;
                                    if (!_.isNil(c.colspan)) {
                                        headInsertIdx += c.colspan;
                                        headInsertCol += c.colspan;
                                    }
                                    if (c.rowspan > 1 && _.isNil(c.colspan))
                                        headInsertCol += 1;
                                }
                                if (i > index && i > self.piston.index)
                                    return false;
                            });
                            var tColspan = target.getAttribute("colspan"), cspan, hgTarget, bgTarget, bbTarget, sgTarget, sbTarget, colTargetIdx, colGripIdx, gTarget, hGroup, bGroup, scGroup;
                            if (!_.isNil(tColspan) && tColspan !== "") {
                                tailInsertIdx = headInsertIdx + Number(tColspan) - 1;
                                tailInsertCol = headInsertCol + Number(tColspan) - 1;
                            }
                            else {
                                tailInsertIdx = headInsertIdx;
                                tailInsertCol = headInsertCol;
                            }
                            if (self.piston.index < index) {
                                cspan = isNaN(colspan) ? 1 : colspan;
                                colTargetIdx = tailInsertCol + cspan + 1;
                            }
                            else {
                                colTargetIdx = headInsertCol + 1;
                            }
                            fhGroup = $hContainer.querySelector("colgroup");
                            fbGroup = $bContainer.querySelector("colgroup");
                            hgTarget = selector.findAt(fhGroup, "col", colTargetIdx);
                            bgTarget = selector.findAt(fbGroup, "col", colTargetIdx);
                            if ($sContainer) {
                                sGroup = $sContainer.querySelector("colgroup");
                                sBody = $sContainer.querySelector("tbody");
                                sBodyRow = sBody.querySelector("tr:nth-of-type(1)");
                                sgTarget = selector.findAt(sGroup, "col", colTargetIdx);
                                sbTarget = selector.findAt(sBodyRow, "td", colTargetIdx);
                            }
                            if (!_.isNil(colspan) && colspan > 1) {
                                var secondLine = tbody.querySelector("tr:nth-of-type(2)"), sTarget = void 0, moveTd = void 0;
                                var _loop_3 = function (i) {
                                    if (self.piston.index < index) {
                                        sTarget = secondLine.querySelector("td:nth-of-type(" + (tailInsertIdx + colspan - i + 1) + ")");
                                        moveTd = selector.findAt(secondLine, "td", nlay + colspan - i);
                                        if (tailInsertIdx === headInsertIdx) {
                                            secondLine.insertBefore(moveTd, sTarget);
                                        }
                                        else {
                                            selector.insertAfter(secondLine, moveTd, sTarget);
                                        }
                                        self.levelStruct[1].splice(tailInsertIdx + colspan, 0, self.levelStruct[1].splice(nlay, 1)[0]);
                                        colGripIdx = gripCol + colspan - i;
                                        selector.insertAfter(fhGroup, selector.findAt(fhGroup, "col", colGripIdx), hgTarget);
                                        _.forEach(_.keys(_mafollicle), function (pg) {
                                            if (pg === SheetDef)
                                                return;
                                            _.forEach(_.keys(_mafollicle[SheetDef]), function (ash) {
                                                var pmaf = _mafollicle[pg][ash];
                                                if (_.isNil(pmaf) || _.isNil(pmaf.desc))
                                                    return;
                                                _.forEach(pmaf.desc.fixedRowElements, function (r) {
                                                    if (_.isNil(r))
                                                        return;
                                                    bbTarget = selector.findAt(r, "td", colTargetIdx - i);
                                                    if (pmaf.desc.fixedColIdxes[ti.getCellCoord(bbTarget).columnKey] !== colTargetIdx - 1)
                                                        return;
                                                    selector.insertAfter(r, selector.findAt(r, "td", colGripIdx), bbTarget);
                                                });
                                                _.forEach(pmaf.desc.fixedRows, function (r, z) {
                                                    if (_.isNil(r))
                                                        return;
                                                    bbTarget = r.splice(colGripIdx - 1, 1);
                                                    r.splice(colTargetIdx - 1 - i, 0, bbTarget[0]);
                                                    if (z > 0 || (_.isNumber(_currentPage) && Number(pg) !== _currentPage) || ash !== _currentSheet)
                                                        return;
                                                    for (var k = colGripIdx - 1; k < colTargetIdx - i; k++) {
                                                        var coord = ti.getCellCoord(r[k]);
                                                        updatedCols[coord.columnKey] = k;
                                                    }
                                                });
                                            });
                                        });
                                        hGroup = kt._fixedGroups[0];
                                        gTarget = hGroup.splice(colGripIdx - 1, 1);
                                        hGroup.splice(colTargetIdx - 1 - i, 0, gTarget[0]);
                                        bGroup = kt._fixedGroups[1];
                                        gTarget = bGroup.splice(colGripIdx - 1, 1);
                                        bGroup.splice(colTargetIdx - 1 - i, 0, gTarget[0]);
                                        scGroup = kt._fixedGroups[2];
                                        if (scGroup) {
                                            gTarget = scGroup.splice(colGripIdx - 1, 1);
                                            scGroup.splice(colTargetIdx - 1 - i, 0, gTarget[0]);
                                        }
                                        self.columns.splice(colTargetIdx - 1 - i, 0, self.columns.splice(colGripIdx - 1, 1)[0]);
                                        selector.insertAfter(fbGroup, selector.findAt(fbGroup, "col", colGripIdx), bgTarget);
                                        if ($sContainer) {
                                            selector.insertAfter(sBodyRow, selector.findAt(sBodyRow, "td", colGripIdx), sbTarget);
                                            selector.insertAfter(sGroup, selector.findAt(sGroup, "col", colGripIdx), sgTarget);
                                        }
                                    }
                                    else {
                                        sTarget = secondLine.querySelector("td:nth-of-type(" + (headInsertIdx + 1 + i) + ")");
                                        secondLine.insertBefore(secondLine.querySelector("td:nth-of-type(" + (nlay + 1 + i) + ")"), sTarget);
                                        self.levelStruct[1].splice(headInsertIdx, 0, self.levelStruct[1].splice(nlay + colspan - 1, 1)[0]);
                                        colGripIdx = gripCol + 1 + i;
                                        fhGroup.insertBefore(selector.findAt(fhGroup, "col", colGripIdx), hgTarget);
                                        _.forEach(_.keys(_mafollicle), function (pg) {
                                            if (pg === SheetDef)
                                                return;
                                            _.forEach(_.keys(_mafollicle[SheetDef]), function (ash) {
                                                var pmaf = _mafollicle[pg][ash];
                                                if (_.isNil(pmaf) || _.isNil(pmaf.desc))
                                                    return;
                                                _.forEach(pmaf.desc.fixedRowElements, function (r) {
                                                    if (_.isNil(r))
                                                        return;
                                                    bbTarget = selector.findAt(r, "td", colTargetIdx + i);
                                                    if (pmaf.desc.fixedColIdxes[ti.getCellCoord(bbTarget).columnKey] !== colTargetIdx - 1)
                                                        return;
                                                    r.insertBefore(selector.findAt(r, "td", colGripIdx), bbTarget);
                                                });
                                                _.forEach(pmaf.desc.fixedRows, function (r, z) {
                                                    if (_.isNil(r))
                                                        return;
                                                    bbTarget = r.splice(colGripIdx - 1, 1);
                                                    r.splice(colTargetIdx - 1 + i, 0, bbTarget[0]);
                                                    if (z > 0 || (_.isNumber(_currentPage) && Number(pg) !== _currentPage) || ash !== _currentSheet)
                                                        return;
                                                    for (var k = colTargetIdx - 1 + i; k < colGripIdx; k++) {
                                                        var coord = ti.getCellCoord(r[k]);
                                                        updatedCols[coord.columnKey] = k;
                                                    }
                                                });
                                            });
                                        });
                                        hGroup = kt._fixedGroups[0];
                                        gTarget = hGroup.splice(colGripIdx - 1, 1);
                                        hGroup.splice(colTargetIdx - 1 + i, 0, gTarget[0]);
                                        bGroup = kt._fixedGroups[1];
                                        gTarget = bGroup.splice(colGripIdx - 1, 1);
                                        bGroup.splice(colTargetIdx - 1 + i, 0, gTarget[0]);
                                        scGroup = kt._fixedGroups[2];
                                        if (scGroup) {
                                            gTarget = scGroup.splice(colGripIdx - 1, 1);
                                            scGroup.splice(colTargetIdx - 1 + i, 0, gTarget[0]);
                                        }
                                        self.columns.splice(colTargetIdx - 1 + i, 0, self.columns.splice(colGripIdx - 1, 1)[0]);
                                        fbGroup.insertBefore(selector.findAt(fbGroup, "col", colGripIdx), bgTarget);
                                        if ($sContainer) {
                                            sBodyRow.insertBefore(selector.findAt(sBodyRow, "td", colGripIdx), sbTarget);
                                            sGroup.insertBefore(selector.findAt(sGroup, "col", colGripIdx), sgTarget);
                                        }
                                    }
                                };
                                for (var i = 0; i < colspan; i++) {
                                    _loop_3(i);
                                }
                            }
                            else {
                                headInsertIdx = -1;
                                nlay = -1;
                                colGripIdx = gripCol + 1;
                                if (self.piston.index < index) {
                                    selector.insertAfter(fhGroup, selector.findAt(fhGroup, "col", colGripIdx), hgTarget);
                                    _.forEach(_.keys(_mafollicle), function (pg) {
                                        if (pg === SheetDef)
                                            return;
                                        _.forEach(_.keys(_mafollicle[SheetDef]), function (ash) {
                                            var pmaf = _mafollicle[pg][ash];
                                            if (_.isNil(pmaf) || _.isNil(pmaf.desc))
                                                return;
                                            _.forEach(pmaf.desc.fixedRowElements, function (r) {
                                                if (_.isNil(r))
                                                    return;
                                                bbTarget = selector.findAt(r, "td", colTargetIdx);
                                                if (pmaf.desc.fixedColIdxes[ti.getCellCoord(bbTarget).columnKey] !== colTargetIdx - 1)
                                                    return;
                                                selector.insertAfter(r, selector.findAt(r, "td", colGripIdx), bbTarget);
                                            });
                                            _.forEach(pmaf.desc.fixedRows, function (r, z) {
                                                if (_.isNil(r))
                                                    return;
                                                bbTarget = r.splice(colGripIdx - 1, 1);
                                                r.splice(colTargetIdx - 1, 0, bbTarget[0]);
                                                if (z > 0 || (_.isNumber(_currentPage) && Number(pg) !== _currentPage) || ash !== _currentSheet)
                                                    return;
                                                for (var k = colGripIdx - 1; k < colTargetIdx; k++) {
                                                    var coord = ti.getCellCoord(r[k]);
                                                    updatedCols[coord.columnKey] = k;
                                                }
                                            });
                                        });
                                    });
                                    hGroup = kt._fixedGroups[0];
                                    gTarget = hGroup.splice(colGripIdx - 1, 1);
                                    hGroup.splice(colTargetIdx - 1, 0, gTarget[0]);
                                    bGroup = kt._fixedGroups[1];
                                    gTarget = bGroup.splice(colGripIdx - 1, 1);
                                    bGroup.splice(colTargetIdx - 1, 0, gTarget[0]);
                                    scGroup = kt._fixedGroups[2];
                                    if (scGroup) {
                                        gTarget = scGroup.splice(colGripIdx - 1, 1);
                                        scGroup.splice(colTargetIdx - 1, 0, gTarget[0]);
                                    }
                                    self.columns.splice(colTargetIdx - 1, 0, self.columns.splice(colGripIdx - 1, 1)[0]);
                                    selector.insertAfter(fbGroup, selector.findAt(fbGroup, "col", colGripIdx), bgTarget);
                                    if ($sContainer) {
                                        selector.insertAfter(sBodyRow, selector.findAt(sBodyRow, "td", colGripIdx), sbTarget);
                                        selector.insertAfter(sGroup, selector.findAt(sGroup, "col", colGripIdx), sgTarget);
                                    }
                                }
                                else {
                                    fhGroup.insertBefore(selector.findAt(fhGroup, "col", colGripIdx), hgTarget);
                                    _.forEach(_.keys(_mafollicle), function (pg) {
                                        if (pg === SheetDef)
                                            return;
                                        _.forEach(_.keys(_mafollicle[SheetDef]), function (ash) {
                                            var pmaf = _mafollicle[pg][ash];
                                            if (_.isNil(pmaf) || _.isNil(pmaf.desc))
                                                return;
                                            _.forEach(pmaf.desc.fixedRowElements, function (r) {
                                                if (_.isNil(r))
                                                    return;
                                                bbTarget = selector.findAt(r, "td", colTargetIdx);
                                                if (pmaf.desc.fixedColIdxes[ti.getCellCoord(bbTarget).columnKey] !== colTargetIdx - 1)
                                                    return;
                                                r.insertBefore(selector.findAt(r, "td", colGripIdx), bbTarget);
                                            });
                                            _.forEach(pmaf.desc.fixedRows, function (r, z) {
                                                if (_.isNil(r))
                                                    return;
                                                bbTarget = r.splice(colGripIdx - 1, 1);
                                                r.splice(colTargetIdx - 1, 0, bbTarget[0]);
                                                if (z > 0 || (_.isNumber(_currentPage) && Number(pg) !== _currentPage) || ash !== _currentSheet)
                                                    return;
                                                for (var k = colTargetIdx - 1; k < colGripIdx; k++) {
                                                    var coord = ti.getCellCoord(r[k]);
                                                    updatedCols[coord.columnKey] = k;
                                                }
                                            });
                                        });
                                    });
                                    hGroup = kt._fixedGroups[0];
                                    gTarget = hGroup.splice(colGripIdx - 1, 1);
                                    hGroup.splice(colTargetIdx - 1, 0, gTarget[0]);
                                    bGroup = kt._fixedGroups[1];
                                    gTarget = bGroup.splice(colGripIdx - 1, 1);
                                    bGroup.splice(colTargetIdx - 1, 0, gTarget[0]);
                                    scGroup = kt._fixedGroups[2];
                                    if (scGroup) {
                                        gTarget = scGroup.splice(colGripIdx - 1, 1);
                                        scGroup.splice(colTargetIdx - 1, 0, gTarget[0]);
                                    }
                                    self.columns.splice(colTargetIdx - 1, 0, self.columns.splice(colGripIdx - 1, 1)[0]);
                                    fbGroup.insertBefore(selector.findAt(fbGroup, "col", colGripIdx), bgTarget);
                                    if ($sContainer) {
                                        sBodyRow.insertBefore(selector.findAt(sBodyRow, "td", colGripIdx), sbTarget);
                                        sGroup.insertBefore(selector.findAt(sGroup, "col", colGripIdx), sgTarget);
                                    }
                                }
                            }
                            if (self.piston.index < index) {
                                firstLine.insertBefore(self.piston.cell, target.nextSibling);
                            }
                            else {
                                firstLine.insertBefore(self.piston.cell, target);
                            }
                            if (_.keys(updatedCols).length > 0) {
                                _.forEach(_.keys(_mafollicle), function (pg) {
                                    if (pg === SheetDef)
                                        return;
                                    _.forEach(_.keys(_mafollicle[SheetDef]), function (ash) {
                                        var pmaf = _mafollicle[pg][ash];
                                        if (_.isNil(pmaf) || _.isNil(pmaf.desc))
                                            return;
                                        var val, idxes = pmaf.desc.fixedColIdxes;
                                        _.forEach(_.keys(idxes), function (c) {
                                            val = updatedCols[c];
                                            if (!_.isNil(val)) {
                                                idxes[c] = val;
                                            }
                                        });
                                    });
                                });
                            }
                            self.levelStruct[0].splice(index, 0, self.levelStruct[0].splice(self.piston.index, 1)[0]);
                            _cloud.painter.revive();
                            if (kt._adjuster) {
                                kt._adjuster.nostal(hGroup, bGroup, scGroup, self.fixed);
                                kt._adjuster.handle();
                            }
                        };
                        GroupHeaderPainter.prototype.pisUp = function (chass, evt) {
                            var self = this, index, gripCol = 0, headInsertCol = 0, tailInsertCol = 0, colspan = parseInt(self.piston.cell.getAttribute("colspan")), headInsertIdx = 0, tailInsertIdx = 0, nlay = 0, wrapperNo = _headerWrappers.length > 1 && !self.fixed ? 1 : 0, colTargetIdx, $hContainer = _headerWrappers[wrapperNo];
                            window.removeXEventListener(ssk.MOUSE_MOVE + ".pis");
                            window.removeXEventListener(ssk.MOUSE_UP + ".pis");
                            ti.remove(chass[0]);
                            ti.remove(chass[1]);
                            chass[0].style.display = "none";
                            var target = document.elementFromPoint(evt.clientX, evt.clientY);
                            chass[0].style.display = "block";
                            if (!selector.is(target, "td") || ti.closest(target, "div") !== $hContainer) {
                                return;
                            }
                            var row = ti.closest(target, "tr"), updatedCols = {}, tbody = $hContainer.querySelector("tbody"), firstLine = tbody.querySelector("tr:nth-of-type(1)");
                            if (selector.index(row) > 0) {
                                var coord_2 = ti.getCellCoord(target);
                                _.forEach(self.levelStruct[0], function (c, i) {
                                    if (c.group && _.find(c.group, function (g) { return g.key === coord_2.columnKey; })) {
                                        index = i;
                                    }
                                });
                                if (!_.isNil(index)) {
                                    target = firstLine.querySelector("td:nth-of-type(" + (index + 1) + ")");
                                }
                            }
                            else {
                                index = selector.index(target);
                            }
                            if (index === self.piston.index) {
                                return;
                            }
                            _.forEach(self.levelStruct[0], function (c, i) {
                                if (i < self.piston.index) {
                                    if (!_.isNil(c.colspan)) {
                                        nlay += c.colspan;
                                        gripCol += c.colspan;
                                    }
                                    if (c.rowspan > 1 && _.isNil(c.colspan))
                                        gripCol += 1;
                                }
                                if (i < index) {
                                    if (i === self.piston.index)
                                        return;
                                    if (!_.isNil(c.colspan)) {
                                        headInsertIdx += c.colspan;
                                        headInsertCol += c.colspan;
                                    }
                                    if (c.rowspan > 1 && _.isNil(c.colspan))
                                        headInsertCol += 1;
                                }
                                if (i > index && i > self.piston.index)
                                    return false;
                            });
                            var tColspan = target.getAttribute("colspan"), cspan;
                            if (!_.isNil(tColspan) && tColspan !== "") {
                                tailInsertIdx = headInsertIdx + Number(tColspan) - 1;
                                tailInsertCol = headInsertCol + Number(tColspan) - 1;
                            }
                            else {
                                tailInsertIdx = headInsertIdx;
                                tailInsertCol = headInsertCol;
                            }
                            if (self.piston.index < index) {
                                cspan = isNaN(colspan) ? 1 : colspan;
                                colTargetIdx = tailInsertCol + cspan + 1;
                            }
                            else {
                                colTargetIdx = headInsertCol + 1;
                            }
                            _.forEach(_.keys(_mafollicle), function (pg) {
                                if (pg === SheetDef)
                                    return;
                                var hgTarget, bgTarget, bbTarget, sgTarget, sbTarget, colGripIdx, sGroup, sBody, sBodyRow, $hGroup, pmaf = _mafollicle[pg][_currentSheet];
                                if (_.isNil(pmaf))
                                    return;
                                if (_.isNumber(_currentPage))
                                    pg = Number(pg);
                                if (pg === _currentPage) {
                                    tbody = pmaf.$hBody;
                                    if (tbody) {
                                        firstLine = tbody.querySelector("tr:nth-of-type(1)");
                                        $hGroup = _vessel().$hGroup;
                                        hgTarget = selector.findAt($hGroup, "col", colTargetIdx);
                                        bgTarget = selector.findAt(_vessel().$bGroup, "col", colTargetIdx);
                                        sGroup = _vessel().$sumGroup;
                                        sBody = _vessel().$sumBody;
                                    }
                                }
                                else {
                                    tbody = pmaf.$hBody;
                                    if (tbody) {
                                        firstLine = tbody.querySelector("tr:nth-of-type(1)");
                                        target = firstLine.querySelector("td:nth-of-type(" + (index + 1) + ")");
                                        $hGroup = pmaf.$hGroup;
                                        hgTarget = selector.findAt($hGroup, "col", colTargetIdx);
                                        bgTarget = selector.findAt(pmaf.$bGroup, "col", colTargetIdx);
                                        sGroup = pmaf.$sumGroup;
                                        sBody = pmaf.$sumBody;
                                    }
                                }
                                if (sBody) {
                                    sBodyRow = sBody.querySelector("tr:nth-of-type(1)");
                                    sgTarget = selector.findAt(sGroup, "col", colTargetIdx);
                                    sbTarget = selector.findAt(sBodyRow, "td", colTargetIdx);
                                }
                                if (!_.isNil(colspan) && colspan > 1) {
                                    var secondLine = void 0, sTarget = void 0, moveTd = void 0;
                                    if (tbody) {
                                        secondLine = tbody.querySelector("tr:nth-of-type(2)");
                                    }
                                    var _loop_4 = function (i) {
                                        if (self.piston.index < index) {
                                            if (tbody) {
                                                sTarget = secondLine.querySelector("td:nth-of-type(" + (tailInsertIdx + colspan - i + 1) + ")");
                                                moveTd = selector.findAt(secondLine, "td", nlay + colspan - i);
                                                if (tailInsertIdx === headInsertIdx) {
                                                    secondLine.insertBefore(moveTd, sTarget);
                                                }
                                                else {
                                                    selector.insertAfter(secondLine, moveTd, sTarget);
                                                }
                                            }
                                            if (pg === _currentPage) {
                                                self.levelStruct[1].splice(tailInsertIdx + colspan, 0, self.levelStruct[1].splice(nlay, 1)[0]);
                                            }
                                            colGripIdx = gripCol + colspan - i;
                                            if ($hGroup) {
                                                selector.insertAfter($hGroup, selector.findAt($hGroup, "col", colGripIdx), hgTarget);
                                            }
                                            if (pmaf.desc) {
                                                _.forEach(pmaf.desc.rowElements, function (r) {
                                                    if (_.isNil(r))
                                                        return;
                                                    bbTarget = selector.findAt(r, "td", colTargetIdx - i);
                                                    selector.insertAfter(r, selector.findAt(r, "td", colGripIdx), bbTarget);
                                                });
                                                _.forEach(pmaf.desc.rows, function (r, z) {
                                                    if (_.isNil(r))
                                                        return;
                                                    bbTarget = r.splice(colGripIdx - 1, 1);
                                                    r.splice(colTargetIdx - 1 - i, 0, bbTarget[0]);
                                                    if (z > 0 || pg !== _currentPage)
                                                        return;
                                                    for (var k = colGripIdx - 1; k < colTargetIdx - i; k++) {
                                                        var coord = ti.getCellCoord(r[k]);
                                                        updatedCols[coord.columnKey] = k;
                                                    }
                                                });
                                            }
                                            if (pg === _currentPage) {
                                                _.forEach(["b", "h", "sum"], function (arrType) {
                                                    var arr = _mafollicle[SheetDef][_currentSheet][arrType + "ColArr"];
                                                    if (_.isNil(arr))
                                                        return;
                                                    bbTarget = arr.splice(colGripIdx - 1, 1);
                                                    arr.splice(colTargetIdx - 1 - i, 0, bbTarget[0]);
                                                });
                                                self.columns.splice(colTargetIdx - 1 - i, 0, self.columns.splice(colGripIdx - 1, 1)[0]);
                                            }
                                            if (tbody) {
                                                selector.insertAfter(pmaf.$bGroup, selector.findAt(pmaf.$bGroup, "col", colGripIdx), bgTarget);
                                            }
                                            if (sBody) {
                                                selector.insertAfter(sBodyRow, selector.findAt(sBodyRow, "td", colGripIdx), sbTarget);
                                                selector.insertAfter(sGroup, selector.findAt(sGroup, "col", colGripIdx), sgTarget);
                                            }
                                        }
                                        else {
                                            if (tbody) {
                                                sTarget = secondLine.querySelector("td:nth-of-type(" + (headInsertIdx + 1 + i) + ")");
                                                secondLine.insertBefore(secondLine.querySelector("td:nth-of-type(" + (nlay + 1 + i) + ")"), sTarget);
                                            }
                                            if (pg === _currentPage) {
                                                self.levelStruct[1].splice(headInsertIdx, 0, self.levelStruct[1].splice(nlay + colspan - 1, 1)[0]);
                                            }
                                            colGripIdx = gripCol + 1 + i;
                                            if (pmaf.$hGroup) {
                                                pmaf.$hGroup.insertBefore(selector.findAt(pmaf.$hGroup, "col", colGripIdx), hgTarget);
                                            }
                                            if (pmaf.desc) {
                                                _.forEach(pmaf.desc.rowElements, function (r) {
                                                    if (_.isNil(r))
                                                        return;
                                                    bbTarget = selector.findAt(r, "td", colTargetIdx + i);
                                                    r.insertBefore(selector.findAt(r, "td", colGripIdx), bbTarget);
                                                });
                                                _.forEach(pmaf.desc.rows, function (r, z) {
                                                    if (_.isNil(r))
                                                        return;
                                                    bbTarget = r.splice(colGripIdx - 1, 1);
                                                    r.splice(colTargetIdx - 1 + i, 0, bbTarget[0]);
                                                    if (z > 0 || pg !== _currentPage)
                                                        return;
                                                    for (var k = colTargetIdx - 1 + i; k < colGripIdx; k++) {
                                                        var coord = ti.getCellCoord(r[k]);
                                                        updatedCols[coord.columnKey] = k;
                                                    }
                                                });
                                            }
                                            if (pg === _currentPage) {
                                                _.forEach(["b", "h", "sum"], function (arrType) {
                                                    var arr = _mafollicle[SheetDef][_currentSheet][arrType + "ColArr"];
                                                    if (_.isNil(arr))
                                                        return;
                                                    bbTarget = arr.splice(colGripIdx - 1, 1);
                                                    arr.splice(colTargetIdx - 1 + i, 0, bbTarget[0]);
                                                });
                                                self.columns.splice(colTargetIdx - 1 + i, 0, self.columns.splice(colGripIdx - 1, 1)[0]);
                                            }
                                            if (tbody) {
                                                pmaf.$bGroup.insertBefore(selector.findAt(pmaf.$bGroup, "col", colGripIdx), bgTarget);
                                            }
                                            if (sBody) {
                                                sBodyRow.insertBefore(selector.findAt(sBodyRow, "td", colGripIdx), sbTarget);
                                                sGroup.insertBefore(selector.findAt(sGroup, "col", colGripIdx), sgTarget);
                                            }
                                        }
                                    };
                                    for (var i = 0; i < colspan; i++) {
                                        _loop_4(i);
                                    }
                                }
                                else {
                                    headInsertIdx = -1;
                                    nlay = -1;
                                    colGripIdx = gripCol + 1;
                                    if (self.piston.index < index) {
                                        if (pmaf.$hGroup) {
                                            selector.insertAfter(pmaf.$hGroup, selector.findAt(pmaf.$hGroup, "col", colGripIdx), hgTarget);
                                        }
                                        if (pmaf.desc) {
                                            _.forEach(pmaf.desc.rowElements, function (r) {
                                                if (_.isNil(r))
                                                    return;
                                                bbTarget = selector.findAt(r, "td", colTargetIdx);
                                                selector.insertAfter(r, selector.findAt(r, "td", colGripIdx), bbTarget);
                                            });
                                            _.forEach(pmaf.desc.rows, function (r, z) {
                                                if (_.isNil(r))
                                                    return;
                                                bbTarget = r.splice(colGripIdx - 1, 1);
                                                r.splice(colTargetIdx - 1, 0, bbTarget[0]);
                                                if (z > 0 || pg !== _currentPage)
                                                    return;
                                                for (var k = colGripIdx - 1; k < colTargetIdx; k++) {
                                                    var coord = ti.getCellCoord(r[k]);
                                                    updatedCols[coord.columnKey] = k;
                                                }
                                            });
                                        }
                                        if (pg === _currentPage) {
                                            _.forEach(["b", "h", "sum"], function (arrType) {
                                                var arr = _mafollicle[SheetDef][_currentSheet][arrType + "ColArr"];
                                                if (_.isNil(arr))
                                                    return;
                                                bbTarget = arr.splice(colGripIdx - 1, 1);
                                                arr.splice(colTargetIdx - 1, 0, bbTarget[0]);
                                            });
                                            self.columns.splice(colTargetIdx - 1, 0, self.columns.splice(colGripIdx - 1, 1)[0]);
                                        }
                                        if (tbody) {
                                            selector.insertAfter(pmaf.$bGroup, selector.findAt(pmaf.$bGroup, "col", colGripIdx), bgTarget);
                                        }
                                        if (sBody) {
                                            selector.insertAfter(sBodyRow, selector.findAt(sBodyRow, "td", colGripIdx), sbTarget);
                                            selector.insertAfter(sGroup, selector.findAt(sGroup, "col", colGripIdx), sgTarget);
                                        }
                                    }
                                    else {
                                        if (pmaf.$hGroup) {
                                            pmaf.$hGroup.insertBefore(selector.findAt(pmaf.$hGroup, "col", colGripIdx), hgTarget);
                                        }
                                        if (pmaf.desc) {
                                            _.forEach(pmaf.desc.rowElements, function (r) {
                                                if (_.isNil(r))
                                                    return;
                                                bbTarget = selector.findAt(r, "td", colTargetIdx);
                                                r.insertBefore(selector.findAt(r, "td", colGripIdx), bbTarget);
                                            });
                                            _.forEach(pmaf.desc.rows, function (r, z) {
                                                if (_.isNil(r))
                                                    return;
                                                bbTarget = r.splice(colGripIdx - 1, 1);
                                                r.splice(colTargetIdx - 1, 0, bbTarget[0]);
                                                if (z > 0 || pg !== _currentPage)
                                                    return;
                                                for (var k = colTargetIdx - 1; k < colGripIdx; k++) {
                                                    var coord = ti.getCellCoord(r[k]);
                                                    updatedCols[coord.columnKey] = k;
                                                }
                                            });
                                        }
                                        if (pg === _currentPage) {
                                            _.forEach(["b", "h", "sum"], function (arrType) {
                                                var arr = _mafollicle[SheetDef][_currentSheet][arrType + "ColArr"];
                                                if (_.isNil(arr))
                                                    return;
                                                bbTarget = arr.splice(colGripIdx - 1, 1);
                                                arr.splice(colTargetIdx - 1, 0, bbTarget[0]);
                                            });
                                            self.columns.splice(colTargetIdx - 1, 0, self.columns.splice(colGripIdx - 1, 1)[0]);
                                        }
                                        if (tbody) {
                                            pmaf.$bGroup.insertBefore(selector.findAt(pmaf.$bGroup, "col", colGripIdx), bgTarget);
                                        }
                                        if (sBody) {
                                            sBodyRow.insertBefore(selector.findAt(sBodyRow, "td", colGripIdx), sbTarget);
                                            sGroup.insertBefore(selector.findAt(sGroup, "col", colGripIdx), sgTarget);
                                        }
                                    }
                                }
                                if (self.piston.index < index && tbody) {
                                    firstLine.insertBefore(self.piston.cell, target.nextSibling);
                                }
                                else if (tbody) {
                                    firstLine.insertBefore(self.piston.cell, target);
                                }
                                if (_.keys(updatedCols).length > 0) {
                                    var val_2, idxes_2 = pmaf.desc.colIdxes;
                                    _.forEach(_.keys(idxes_2), function (c) {
                                        val_2 = updatedCols[c];
                                        if (!_.isNil(val_2)) {
                                            idxes_2[c] = val_2;
                                        }
                                    });
                                }
                            });
                            self.levelStruct[0].splice(index, 0, self.levelStruct[0].splice(self.piston.index, 1)[0]);
                            _cloud.painter.revive();
                            if (kt._adjuster) {
                                var csd = _mafollicle[SheetDef][_currentSheet];
                                kt._adjuster.nostal(csd.hColArr, csd.bColArr, csd.sumColArr, self.fixed);
                                kt._adjuster.handle();
                            }
                        };
                        return GroupHeaderPainter;
                    }(Conditional));
                    v_1.GroupHeaderPainter = GroupHeaderPainter;
                    var ConcurrentPainter = /** @class */ (function () {
                        function ConcurrentPainter(ui) {
                            this.columns = [];
                            this.revive();
                            this.primaryKey = ui.primaryKey;
                            this.states = ui.states;
                            this.protoRow = document.createElement("tr");
                            this.protoCell = document.createElement("td");
                        }
                        /**
                         * Revive.
                         */
                        ConcurrentPainter.prototype.revive = function () {
                            var _this = this;
                            this.painters = _mafollicle[SheetDef][_currentSheet].painters;
                            this.columns = [];
                            _.forEach(this.painters, function (p) { return _.forEach(p.columns, function (c) {
                                _this.columns.push(c.key);
                            }); });
                            this.controlMap = _mafollicle[SheetDef][_currentSheet].controlMap;
                        };
                        /**
                         * Cell.
                         */
                        ConcurrentPainter.prototype.cell = function (rData, rowIdx, key, fixed, numText) {
                            var self = this;
                            var cData = rData[key];
                            var data = cData, columnsMap, visibleColumnsMap, paint;
                            if (fixed) {
                                paint = self.painters[0];
                            }
                            else if (self.painters.length > 1) {
                                paint = self.painters[1];
                            }
                            else {
                                paint = self.painters[0];
                            }
                            columnsMap = paint.columnsMap;
                            visibleColumnsMap = paint.visibleColumnsMap;
                            var column = columnsMap[key];
                            if (_.isNil(column))
                                return;
                            var ws = column.css && column.css.whiteSpace ? column.css.whiteSpace : "nowrap";
                            //                let td = document.createElement("td");
                            var td = self.protoCell.cloneNode(true);
                            td.classList.add(v_1.CELL_CLS);
                            td.tabIndex = -1;
                            $.data(td, lo.VIEW, rowIdx + "-" + key);
                            var tdStyle = "";
                            tdStyle += "; border-width: 1px; overflow: hidden; white-space: "
                                + ws + "; padding: 0px 2px; "; //position: relative;";
                            var col = visibleColumnsMap[key];
                            if (!col)
                                tdStyle += "; display: none;";
                            else if (!_.isNil(col[0].columnCssClass)) {
                                col[0].columnCssClass.split(' ').forEach(function (clz) {
                                    if (clz === hpl.CURRENCY_CLS || clz === "halign-right") {
                                        td.classList.add(clz);
                                    }
                                });
                            }
                            if (key === "rowNumber") {
                                td.innerHTML = cData; //!_.isNil(numText) ? numText : rowIdx + 1;
                                tdStyle += "; background-color: #CFF1A5; ";
                                td.style.cssText += tdStyle;
                                td.classList.add(v_1.STT_CLS);
                                return td;
                            }
                            var controlDef = self.controlMap[key];
                            var id = rData[self.primaryKey];
                            var rState, cState, disabled;
                            if (self.states && (rState = self.states[id]) && (cState = rState[key])) {
                                _.forEach(cState, function (s) {
                                    _.forEach(s.state, function (st) {
                                        if (st.indexOf('#') === 0) {
                                            tdStyle += "; color: " + cState + ";";
                                        }
                                        else if (st === color.ManualEditTarget || st === color.ManualEditOther) {
                                            td.classList.add(st);
                                            if (!s.suivant)
                                                $.data(td, v_1.INIT_MAN_EDIT, st);
                                        }
                                        else {
                                            if (st === color.Disable)
                                                disabled = true;
                                            td.classList.add(st);
                                        }
                                    });
                                });
                                rState = null;
                                cState = null;
                            }
                            if (_vessel().checkedErrors) {
                                var ei = _vessel().checkedErrors.length - 1;
                                while (ei >= 0) {
                                    var info = _vessel().checkedErrors[ei];
                                    if (rData[_pk] === info.id && key === info.columnKey) {
                                        info.element = td;
                                        khl.set(info, info.message, 1, true);
                                        _vessel().checkedErrors.splice(ei, 1);
                                        break;
                                    }
                                    ei--;
                                }
                            }
                            if (td.classList.contains(color.Lock)) {
                                td.style.cssText += tdStyle;
                                if (controlDef && controlDef.controlType === dkn.COMBOBOX) {
                                    dkn.getControl(controlDef.controlType)({
                                        rowIdx: rowIdx,
                                        rowId: id,
                                        columnKey: key,
                                        controlDef: controlDef,
                                        update: function (v, i, r, p) {
                                            su.wedgeCell(_$grid[0], { rowIdx: (_.isNil(i) ? rowIdx : i), columnKey: key }, v, r, null, p);
                                            if (_.isFunction(controlDef.onChange)) {
                                                controlDef.onChange(id, key, v, rData);
                                            }
                                        },
                                        deleteRow: su.deleteRow,
                                        initValue: data,
                                        rowObj: rData,
                                        enable: !td.classList.contains(color.Disable)
                                    });
                                }
                                return td;
                            }
                            if (column.ntsControl === dkn.LABEL) {
                                td.classList.add(dkn.LABEL_CLS);
                                td.innerHTML = _.isNil(data) || td.classList.contains(color.Disable) ? "" : data;
                                $.data(td, v_1.DATA, data);
                                dkn.controlType[key] = dkn.LABEL;
                            }
                            else if (controlDef) {
                                var allCheckKey = void 0, ui_19 = {
                                    rowIdx: rowIdx,
                                    rowId: id,
                                    columnKey: key,
                                    controlDef: controlDef,
                                    update: function (v, i, r, p) {
                                        su.wedgeCell(_$grid[0], { rowIdx: (_.isNil(i) ? rowIdx : i), columnKey: key }, v, r, null, p);
                                        if (_.isFunction(controlDef.onChange)) {
                                            controlDef.onChange(id, key, v, rData);
                                        }
                                    },
                                    deleteRow: su.deleteRow,
                                    initValue: data,
                                    rowObj: rData,
                                    enable: !td.classList.contains(color.Disable)
                                };
                                if (column.checkbox && (allCheckKey = dkn.allCheck[key])) {
                                    if (disabled)
                                        allCheckKey.overall--;
                                    if (allCheckKey.stt === false && _.isNil(allCheckKey.toggle) && !disabled
                                        && allCheckKey.count < allCheckKey.overall && data)
                                        allCheckKey.count++;
                                }
                                var res = void 0, control = dkn.getControl(controlDef.controlType);
                                if (control) {
                                    if (controlDef.controlType === dkn.CHECKBOX && ui_19.enable) {
                                        var origVal = _mafollicle[_currentPage].origDs[rowIdx][key];
                                        if (allCheckKey && dkn.allCheck[key].toggle === true) {
                                            ui_19.initValue = true;
                                            res = su.wedgeCell(_$grid[0], { rowIdx: rowIdx, columnKey: key }, true);
                                            if (res)
                                                td.classList.add(res);
                                        }
                                        else if (allCheckKey && dkn.allCheck[key].toggle === false) {
                                            ui_19.initValue = false;
                                            res = su.wedgeCell(_$grid[0], { rowIdx: rowIdx, columnKey: key }, false);
                                            if (res)
                                                td.classList.add(res);
                                        }
                                    }
                                    var $control = control(ui_19);
                                    if (controlDef.controlType === dkn.COMBOBOX) {
                                        td.innerHTML = $control[controlDef.optionsText];
                                        $.data(td, "code", $control[controlDef.optionsValue]);
                                    }
                                    else if (controlDef.controlType === dkn.DATE_PICKER) {
                                        td.innerHTML = data instanceof moment && !data.isValid() ? data._i : $control;
                                    }
                                    else if (controlDef.controlType === dkn.FLEX_IMAGE || controlDef.controlType === dkn.IMAGE) {
                                        tdStyle += "; text-align: center; ";
                                        td.appendChild($control);
                                    }
                                    else {
                                        td.appendChild($control);
                                    }
                                }
                                $.data(td, v_1.DATA, data);
                            }
                            else if (_zeroHidden && ti.isZero(data, key)) {
                                td.textContent = "";
                                dkn.textBox(key);
                                var formatted = su.format(column, data);
                                var disFormat = su.formatSave(column, data);
                                $.data(td, v_1.DATA, disFormat);
                            }
                            else {
                                var formatted = su.format(column, data);
                                td.innerHTML = _.isNil(formatted) ? "" : formatted;
                                dkn.textBox(key);
                                var disFormat = su.formatSave(column, data);
                                $.data(td, v_1.DATA, disFormat);
                            }
                            td.style.cssText += tdStyle;
                            //                let sum = _summaries[key];
                            //                if (sum) {
                            //                    switch (sum.calculator) {
                            //                        case "Time":
                            //                            sum.total.add(moment.duration(data));
                            //                            break;
                            //                        case "Number":
                            //                            sum.total += (!_.isNil(data) ? parseFloat(data) : 0);
                            //                            break;
                            //                    }
                            //                }
                            return td;
                        };
                        /**
                         * Row.
                         */
                        ConcurrentPainter.prototype.row = function (data, config, rowIdx, numText) {
                            var self = this;
                            var fixedColumns, fixedCount = 0;
                            if (rowIdx === 0 && self.painters.length > 1) {
                                fixedColumns = self.painters[0].columns;
                                fixedCount = fixedColumns.length;
                            }
                            var fixedVColumnsMap, dVColumnsMap, hiddenFixed, hiddenDV;
                            if (self.painters.length > 1) {
                                fixedVColumnsMap = self.painters[0].visibleColumnsMap;
                                hiddenFixed = self.painters[0].hiddenColumnsMap;
                                dVColumnsMap = self.painters[1].visibleColumnsMap;
                                hiddenDV = self.painters[1].hiddenColumnsMap;
                            }
                            else {
                                dVColumnsMap = self.painters[0].visibleColumnsMap;
                                hiddenDV = self.painters[0].hiddenColumnsMap;
                            }
                            var fixedColIdxes = {}, colIdxes = {}, fixedElements = [], elements = [], fixedTr, tr = self.protoRow.cloneNode(true); //document.createElement("tr");
                            $.data(tr, lo.VIEW, rowIdx);
                            if (fixedVColumnsMap && _.keys(fixedVColumnsMap).length > 0) {
                                //                    fixedTr = document.createElement("tr");
                                fixedTr = self.protoRow.cloneNode(true);
                                $.data(fixedTr, lo.VIEW, rowIdx);
                            }
                            if (config) {
                                if (fixedTr) {
                                    fixedTr.style.height = parseFloat(config.css.height) + "px";
                                }
                                tr.style.height = parseFloat(config.css.height) + "px";
                            }
                            _.forEach(self.columns, function (key, index) {
                                var cell;
                                if (dVColumnsMap[key] || hiddenDV[key]) {
                                    cell = self.cell(data, rowIdx, key, null, numText);
                                    tr.appendChild(cell);
                                    elements.push(cell);
                                    if (rowIdx === 0)
                                        colIdxes[key] = index - fixedCount;
                                }
                                else if (fixedVColumnsMap[key] || hiddenFixed[key]) {
                                    cell = self.cell(data, rowIdx, key, true, numText);
                                    fixedTr.appendChild(cell);
                                    fixedElements.push(cell);
                                    if (rowIdx === 0)
                                        fixedColIdxes[key] = index;
                                }
                            });
                            if (fixedTr) {
                                fixedTr.addXEventListener(ssk.MOUSE_OVER, function (evt) {
                                    self.hoover(evt);
                                });
                                fixedTr.addXEventListener(ssk.MOUSE_OUT, function (evt) {
                                    self.hoover(evt, true);
                                });
                            }
                            tr.addXEventListener(ssk.MOUSE_OVER, function (evt) {
                                self.hoover(evt);
                            });
                            tr.addXEventListener(ssk.MOUSE_OUT, function (evt) {
                                self.hoover(evt, true);
                            });
                            if (_.keys(v_1._voilerRows).length > 0
                                && _.includes(v_1._voilerRows[Math.floor(rowIdx / (aho._bloc * 2 - 1))], rowIdx)) {
                                fixedTr.style.display = "none";
                                tr.style.display = "none";
                            }
                            var ret = { fixedRow: fixedTr, row: tr, fixedElements: fixedElements, elements: elements };
                            if (rowIdx === 0) {
                                ret.fixedColIdxes = fixedColIdxes;
                                ret.colIdxes = colIdxes;
                            }
                            return ret;
                        };
                        /**
                         * Hoover.
                         */
                        ConcurrentPainter.prototype.hoover = function (evt, out) {
                            var $tCell = evt.target;
                            if (!selector.is($tCell, "td." + v_1.CELL_CLS))
                                return;
                            var coord = ti.getCellCoord($tCell);
                            if (!coord)
                                return;
                            var elms;
                            if (_mDesc.fixedRows && (elms = _mDesc.fixedRows[coord.rowIdx])) {
                                _.forEach(elms, function (c) {
                                    if (!c.classList.contains(color.HOVER) && !out) {
                                        c.classList.add(color.HOVER);
                                        _hr = coord.rowIdx;
                                    }
                                    else if (c.classList.contains(color.HOVER) && out) {
                                        c.classList.remove(color.HOVER);
                                    }
                                });
                            }
                            if (_mDesc.rows && (elms = _mDesc.rows[coord.rowIdx])) {
                                _.forEach(elms, function (c) {
                                    if (!c.classList.contains(color.HOVER) && !out) {
                                        c.classList.add(color.HOVER);
                                        _hr = coord.rowIdx;
                                    }
                                    else if (c.classList.contains(color.HOVER) && out) {
                                        c.classList.remove(color.HOVER);
                                    }
                                });
                            }
                            if (!khl._infobulle || !$tCell.classList.contains(khl.ERROR_CLS))
                                return;
                            if (!out) {
                                document.body.appendChild(khl._infobulle);
                                khl._infobulle.innerHTML = $.data($tCell, "msg");
                                dkn.openDD(khl._infobulle, $tCell, true);
                            }
                            else {
                                ti.remove(khl._infobulle);
                                dkn.closeDD(khl._infobulle, true);
                            }
                        };
                        return ConcurrentPainter;
                    }());
                    v_1.ConcurrentPainter = ConcurrentPainter;
                    var SidePainter = /** @class */ (function () {
                        function SidePainter(ui) {
                            this.revive();
                            this.primaryKey = ui.primaryKey;
                            this.states = ui.states;
                            this.protoRow = document.createElement("tr");
                            this.protoCell = document.createElement("td");
                        }
                        /**
                         * Revive.
                         */
                        SidePainter.prototype.revive = function (sht) {
                            var cst = !_.isNil(sht) ? _mafollicle[SheetDef][sht].columns : _cstifle(), colCls = ti.classifyColumns({ columns: cst });
                            this.columns = colCls.columns;
                            this.visibleColumns = colCls.visibleColumns;
                            this.visibleColumnsMap = ti.getColumnsMap(this.visibleColumns);
                            this.controlMap = _mafollicle[SheetDef][!_.isNil(sht) ? sht : _currentSheet].controlMap;
                            var levelStruct = _mafollicle[SheetDef][!_.isNil(sht) ? sht : _currentSheet].levelStruct;
                            if (!_.isNil(levelStruct)) {
                                this.columnsMap = ti.columnsMapFromStruct(levelStruct);
                            }
                            else {
                                this.columnsMap = _.groupBy(cst, "key");
                            }
                        };
                        /**
                         * Cell.
                         */
                        SidePainter.prototype.cell = function (rData, rowIdx, key, fixed) {
                            var self = this;
                            var cData = rData[key];
                            var data = cData;
                            var column = self.columnsMap[key];
                            if (_.isNil(column))
                                return;
                            var ws = column.css && column.css.whiteSpace ? column.css.whiteSpace : "nowrap";
                            //                let td = document.createElement("td");
                            var td = self.protoCell.cloneNode(true);
                            td.classList.add(v_1.CELL_CLS);
                            td.tabIndex = -1;
                            $.data(td, lo.VIEW, rowIdx + "-" + key);
                            var tdStyle = "";
                            tdStyle += "; border-width: 1px; overflow: hidden; white-space: "
                                + ws + "; padding: 0px 2px;"; // position: relative";
                            var col = self.visibleColumnsMap[key];
                            if (!col)
                                tdStyle += "; display: none;";
                            else if (!_.isNil(col[0].columnCssClass)) {
                                col[0].columnCssClass.split(' ').forEach(function (clz) {
                                    if (clz === hpl.CURRENCY_CLS || clz === "halign-right") {
                                        td.classList.add(clz);
                                    }
                                });
                            }
                            var controlDef = self.controlMap[key];
                            var id = rData[self.primaryKey];
                            var rState, cState, found, disabled;
                            if (self.states && (rState = self.states[id]) && (cState = rState[key])) {
                                _.forEach(cState, function (s) {
                                    _.forEach(s.state, function (st) {
                                        if (st.indexOf('#') === 0) {
                                            tdStyle += "; color: " + cState + ";";
                                        }
                                        else if (st === color.ManualEditTarget || st === color.ManualEditOther) {
                                            td.classList.add(st);
                                            if (!s.suivant)
                                                $.data(td, v_1.INIT_MAN_EDIT, st);
                                        }
                                        else {
                                            if (st === color.Disable)
                                                disabled = true;
                                            td.classList.add(st);
                                        }
                                    });
                                });
                                rState = null;
                                cState = null;
                            }
                            if (_vessel().checkedErrors) {
                                var ei = _vessel().checkedErrors.length - 1;
                                while (ei >= 0) {
                                    var info = _vessel().checkedErrors[ei];
                                    if (rData[_pk] === info.id && key === info.columnKey) {
                                        info.element = td;
                                        khl.set(info, info.message, null, true);
                                        _vessel().checkedErrors.splice(ei, 1);
                                        break;
                                    }
                                    ei--;
                                }
                            }
                            if (td.classList.contains(color.Lock)) {
                                td.style.cssText += tdStyle;
                                if (controlDef && controlDef.controlType === dkn.COMBOBOX) {
                                    dkn.getControl(controlDef.controlType)({
                                        rowIdx: rowIdx,
                                        rowId: id,
                                        columnKey: key,
                                        controlDef: controlDef,
                                        update: function (v, i, r, p) {
                                            su.wedgeCell(_$grid[0], { rowIdx: (_.isNil(i) ? rowIdx : i), columnKey: key }, v, r, null, p);
                                            if (_.isFunction(controlDef.onChange)) {
                                                controlDef.onChange(id, key, v, rData);
                                            }
                                        },
                                        deleteRow: su.deleteRow,
                                        initValue: data,
                                        rowObj: rData,
                                        enable: !td.classList.contains(color.Disable)
                                    });
                                }
                                return td;
                            }
                            if (self.fails) {
                                found = _.remove(self.fails[rowIdx], function (f) { return f.columnKey === key; });
                                if (found.length > 0) {
                                    td.classList.add(khl.ERROR_CLS);
                                    $.data(td, "msg", found[0].message);
                                }
                                var list = self.fails[rowIdx];
                                if (list && list.length === 0)
                                    delete self.fails[rowIdx];
                            }
                            if (column.ntsControl === dkn.LABEL) {
                                td.classList.add(dkn.LABEL_CLS);
                                td.innerHTML = _.isNil(data) || td.classList.contains(color.Disable) ? "" : data;
                                $.data(td, v_1.DATA, data);
                                dkn.controlType[key] = dkn.LABEL;
                            }
                            else if (controlDef) {
                                var allCheckKey = void 0, ui_20 = {
                                    rowIdx: rowIdx,
                                    rowId: id,
                                    columnKey: key,
                                    controlDef: controlDef,
                                    update: function (v, i, r) {
                                        su.wedgeCell(_$grid[0], { rowIdx: (_.isNil(i) ? rowIdx : i), columnKey: key }, v, r);
                                        if (_.isFunction(controlDef.onChange)) {
                                            controlDef.onChange(id, key, v, rData);
                                        }
                                    },
                                    deleteRow: su.deleteRow,
                                    initValue: data,
                                    rowObj: rData,
                                    enable: !td.classList.contains(color.Disable)
                                };
                                if (column.checkbox && (allCheckKey = dkn.allCheck[key])) {
                                    if (disabled)
                                        allCheckKey.overall--;
                                    if (allCheckKey.stt === false && _.isNil(allCheckKey.toggle) && !disabled
                                        && allCheckKey.count < allCheckKey.overall && data)
                                        allCheckKey.count++;
                                }
                                var control = dkn.getControl(controlDef.controlType);
                                if (control) {
                                    if (controlDef.controlType === dkn.CHECKBOX && ui_20.enable) {
                                        var origVal = _mafollicle[_currentPage].origDs[rowIdx][key];
                                        if (allCheckKey && dkn.allCheck[key].toggle === true) {
                                            ui_20.initValue = true;
                                            res = su.wedgeCell(_$grid[0], { rowIdx: rowIdx, columnKey: key }, true);
                                            if (res)
                                                td.classList.add(res);
                                        }
                                        else if (allCheckKey && dkn.allCheck[key].toggle === false) {
                                            ui_20.initValue = false;
                                            res = su.wedgeCell(_$grid[0], { rowIdx: rowIdx, columnKey: key }, false);
                                            if (res)
                                                td.classList.add(res);
                                        }
                                    }
                                    var $control = control(ui_20);
                                    if (controlDef.controlType === dkn.COMBOBOX) {
                                        td.innerHTML = $control[controlDef.optionsText];
                                        $.data(td, "code", $control[controlDef.optionsValue]);
                                    }
                                    else if (controlDef.controlType === dkn.DATE_PICKER) {
                                        td.innerHTML = $control;
                                    }
                                    else if (controlDef.controlType === dkn.FLEX_IMAGE || controlDef.controlType === dkn.IMAGE) {
                                        tdStyle += "; text-align: center;";
                                        td.appendChild($control);
                                    }
                                    else {
                                        td.appendChild($control);
                                    }
                                }
                                $.data(td, v_1.DATA, data);
                            }
                            else if (_zeroHidden && ti.isZero(data, key)) {
                                td.textContent = "";
                                dkn.textBox(key);
                                var formatted = su.format(column, data);
                                var disFormat = su.formatSave(column, data);
                                $.data(td, v_1.DATA, disFormat);
                            }
                            else {
                                var formatted = su.format(column, data);
                                td.innerHTML = _.isNil(formatted) ? "" : formatted;
                                dkn.textBox(key);
                                var disFormat = su.formatSave(column, data);
                                $.data(td, v_1.DATA, disFormat);
                            }
                            td.style.cssText += tdStyle;
                            //                let sum = _summaries[key];
                            //                if (sum) {
                            //                    switch (sum.calculator) {
                            //                        case "Time":
                            //                            sum.total.add(moment.duration(data));
                            //                            break;
                            //                        case "Number":
                            //                            sum.total += (!_.isNil(data) ? parseFloat(data) : 0);
                            //                            break;
                            //                    }
                            //                }
                            return td;
                        };
                        /**
                         * Row.
                         */
                        SidePainter.prototype.row = function (data, config, rowIdx) {
                            var self = this;
                            var colIdxes = {}, elements = [], tr = self.protoRow.cloneNode(true); //document.createElement("tr");
                            $.data(tr, lo.VIEW, rowIdx);
                            if (config) {
                                tr.style.height = parseFloat(config.css.height) + "px";
                            }
                            _.forEach(self.columns, function (col, index) {
                                var cell, key = col.key;
                                cell = self.cell(data, rowIdx, key);
                                tr.appendChild(cell);
                                elements.push(cell);
                                if (rowIdx === _start)
                                    colIdxes[key] = index;
                            });
                            tr.addXEventListener(ssk.MOUSE_OVER, function (evt) {
                                self.hoover(evt);
                            });
                            tr.addXEventListener(ssk.MOUSE_OUT, function (evt) {
                                self.hoover(evt, true);
                            });
                            if (_.keys(v_1._voilerRows).length > 0
                                && _.includes(v_1._voilerRows[Math.floor(rowIdx / (aho._bloc * 2 - 1))], rowIdx)) {
                                tr.style.display = "none";
                            }
                            var ret = { row: tr, elements: elements };
                            if (rowIdx === _start) {
                                ret.colIdxes = colIdxes;
                            }
                            return ret;
                        };
                        /**
                         * Hoover.
                         */
                        SidePainter.prototype.hoover = function (evt, out) {
                            var $tCell = evt.target;
                            if (!selector.is($tCell, "td." + v_1.CELL_CLS))
                                return;
                            var coord = ti.getCellCoord($tCell);
                            if (!coord)
                                return;
                            var elms;
                            if (_mDesc.fixedRows && (elms = _mDesc.fixedRows[coord.rowIdx])) {
                                _.forEach(elms, function (c) {
                                    if (!c.classList.contains(color.HOVER) && !out) {
                                        c.classList.add(color.HOVER);
                                        _hr = coord.rowIdx;
                                    }
                                    else if (c.classList.contains(color.HOVER) && out) {
                                        c.classList.remove(color.HOVER);
                                    }
                                });
                            }
                            if (_mDesc.rows && (elms = _mDesc.rows[coord.rowIdx])) {
                                _.forEach(elms, function (c) {
                                    if (!c.classList.contains(color.HOVER) && !out) {
                                        c.classList.add(color.HOVER);
                                        _hr = coord.rowIdx;
                                    }
                                    else if (c.classList.contains(color.HOVER) && out) {
                                        c.classList.remove(color.HOVER);
                                    }
                                });
                            }
                            if (!khl._infobulle || !$tCell.classList.contains(khl.ERROR_CLS))
                                return;
                            if (!out) {
                                document.body.appendChild(khl._infobulle);
                                khl._infobulle.innerHTML = $.data($tCell, "msg");
                                dkn.openDD(khl._infobulle, $tCell, true);
                            }
                            else {
                                ti.remove(khl._infobulle);
                                dkn.closeDD(khl._infobulle, true);
                            }
                        };
                        return SidePainter;
                    }());
                    v_1.SidePainter = SidePainter;
                    /**
                     * Extra.
                     */
                    function extra(className, height) {
                        var element = document.createElement("tr");
                        element.style.height = height + "px";
                        ti.addClass(element, "mgrid-" + className);
                        return element;
                    }
                    v_1.extra = extra;
                    /**
                     * Wrapper styles.
                     */
                    function wrapperStyles(top, left, width, maxWidth, height) {
                        var style = {
                            position: "absolute",
                            overflow: "hidden",
                            top: top,
                            left: left,
                            width: width,
                            border: "solid 1px #CCC"
                        };
                        if (maxWidth) {
                            style.maxWidth = maxWidth;
                            if (parseFloat(maxWidth) < parseFloat(width))
                                style.width = maxWidth;
                        }
                        if (height) {
                            style.height = height;
                        }
                        return style;
                    }
                    v_1.wrapperStyles = wrapperStyles;
                    /**
                     * Calc width.
                     */
                    function calcWidth(columns) {
                        var width = 0;
                        columns.forEach(function (c, i) {
                            if (c.hidden === true)
                                return;
                            if (c.group) {
                                width += calcWidth(c.group);
                                return;
                            }
                            width += parseFloat(c.width);
                        });
                        return width;
                    }
                    v_1.calcWidth = calcWidth;
                    /**
                     * Create wrapper.
                     */
                    function createWrapper(top, left, options, newOpt) {
                        var style, width, maxWidth;
                        if (options.containerClass === FREE) {
                            if (!_maxFreeWidth || newOpt) {
                                _maxFreeWidth = calcWidth(options.columns);
                            }
                            maxWidth = options.isHeader ? _maxFreeWidth : _maxFreeWidth + ti.getScrollWidth();
                            style = wrapperStyles(top, left, options.width, maxWidth + "px", options.height);
                            style["background-color"] = "#F3F3F3";
                            style["padding-right"] = "1px";
                        }
                        else if (options.containerClass === FIXED) {
                            if (!_maxFixedWidth || newOpt) {
                                _maxFixedWidth = calcWidth(options.columns);
                            }
                            style = wrapperStyles(top, left, _maxFixedWidth + "px", undefined, options.height);
                            style["background-color"] = "#F3F3F3";
                            style["padding-right"] = "1px";
                        }
                        else if (options.containerClass === gp.PAGING_CLS || options.containerClass === gp.SHEET_CLS) {
                            style = wrapperStyles(top, left, options.width, undefined, options.height);
                            style["background-color"] = "#E9E9E9";
                            style["border"] = "1px solid #dddddd";
                            style["color"] = "#333333";
                        }
                        else {
                            width = options.containerClass === FIXED + "-summaries" ? _maxFixedWidth + "px" : options.width;
                            maxWidth = options.containerClass !== FIXED + "-summaries" ? _maxFreeWidth + "px" : undefined;
                            style = wrapperStyles(top, left, width, maxWidth, options.height);
                            style["z-index"] = 1;
                            style["background-color"] = "#F6F6F6";
                        }
                        return selector.create("div").data(lo.MPART, options.containerClass)
                            .addClass(options.containerClass)
                            .css(style).getSingle();
                    }
                    v_1.createWrapper = createWrapper;
                    function voilerRow(idx) {
                        if (_.isNil(idx))
                            return;
                        var nama = Math.floor(idx / (aho._bloc * 2 - 1));
                        if (!v_1._voilerRows[nama])
                            v_1._voilerRows[nama] = [];
                        v_1._voilerRows[nama].push(idx);
                        if (idx <= _end && idx >= _start) {
                            idx -= _start;
                            _.forEach(_bodyWrappers, function (b) {
                                var r = b.querySelector("tr:nth-of-type(" + (idx + 2) + ")");
                                if (r)
                                    r.style.display = "none";
                                //                let last = b.querySelector("tr:last-child");
                                //                if (last) last.style.height = parseFloat(last.style.height) - BODY_ROW_HEIGHT + "px";
                            });
                            _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                                var maf = _mafollicle[_currentPage][k];
                                if (k === _currentSheet || !maf || !maf.$bBody)
                                    return;
                                var r = maf.$bBody.querySelector("tr:nth-of-type(" + (idx + 2) + ")");
                                if (r)
                                    r.style.display = "none";
                            });
                        }
                        else {
                            _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                                var maf = _mafollicle[_currentPage][k];
                                if (!maf || !maf.desc)
                                    return;
                                var r = maf.desc.rowElements[idx];
                                if (r)
                                    r.style.display = "none";
                                var fr = maf.desc.fixedRowElements[idx];
                                if (fr)
                                    fr.style.display = "none";
                            });
                        }
                    }
                    v_1.voilerRow = voilerRow;
                    function encarterRow(idx, copy, cssClass, numText) {
                        var newData = {}, data = _dataSource[idx];
                        if (!data)
                            return;
                        _.forEach(_.keys(data), function (k) {
                            if (k === _pk) {
                                newData[k] = _.isFunction(_idIntpl) ? _idIntpl(data[_pk]) : uk.util.randomId();
                                if (copy === COPY.DATA_AND_LOOK && _cellStates) {
                                    var gotStt = _cellStates[data[k]];
                                    if (!gotStt)
                                        return;
                                    _cellStates[newData[k]] = _.cloneDeep(gotStt);
                                }
                            }
                            else if (k === "rowNumber") {
                                newData[k] = data[k] + 1;
                            }
                            else if (copy === COPY.DATA || copy === COPY.DATA_AND_LOOK) {
                                newData[k] = data[k];
                            }
                            else
                                newData[k] = null;
                        });
                        _dataSource.splice(idx + 1, 0, newData);
                        _mafollicle[_currentPage].origDs.splice(idx + 1, 0, _.cloneDeep(newData));
                        var no, noc, config = { css: { height: BODY_ROW_HEIGHT } }, ret = _cloud.painter.row(newData, config, idx + 1, numText);
                        if (!ret || !_mDesc)
                            return;
                        if (_mDesc.fixedRowElements) {
                            _mDesc.fixedRowElements.splice(idx + 1, 0, ret.fixedRow);
                            if (cssClass && ret.fixedRow) {
                                _.forEach(_.split(cssClass, ' '), function (pcls) {
                                    ret.fixedRow.classList.add(pcls);
                                });
                            }
                        }
                        if (_mDesc.fixedRows) {
                            if (_.has(_mDesc.fixedColIdxes, "rowNumber")) {
                                no = _mDesc.fixedColIdxes.rowNumber;
                                var tRow = _mDesc.fixedRows[idx][no];
                                for (var i = /*idx + 2*/ 0; i < _mDesc.fixedRows.length; i++) {
                                    noc = _mDesc.fixedRows[i];
                                    if (noc && (noc = noc[no]) && parseInt(noc.innerHTML) > parseInt(tRow.innerHTML)) {
                                        noc.innerHTML = parseInt(noc.innerHTML) + 1;
                                    }
                                    var pcur = _dataSource[i];
                                    if (i !== idx + 1 && pcur && !_.isNil(pcur.rowNumber) && pcur.rowNumber > data.rowNumber) {
                                        pcur.rowNumber += 1;
                                    }
                                }
                                if (_mDesc.fixedRows.length < _dataSource.length) {
                                    for (var i = _mDesc.fixedRows.length; i < _dataSource.length; i++) {
                                        var pcur = _dataSource[i];
                                        if (i !== idx + 1 && pcur && !_.isNil(pcur.rowNumber) && pcur.rowNumber > data.rowNumber) {
                                            pcur.rowNumber += 1;
                                        }
                                    }
                                }
                            }
                            _mDesc.fixedRows.splice(idx + 1, 0, ret.fixedElements);
                        }
                        if (_mDesc.rowElements) {
                            _mDesc.rowElements.splice(idx + 1, 0, ret.row);
                            if (cssClass && ret.row) {
                                _.forEach(_.split(cssClass, ' '), function (pcls) {
                                    ret.row.classList.add(pcls);
                                });
                            }
                        }
                        if (_mDesc.rows) {
                            if (_.has(_mDesc.colIdxes, "rowNumber")) {
                                no = _mDesc.colIdxes.rowNumber;
                                var tRow = _mDesc.rows[idx][no];
                                for (var i = /*idx + 2*/ 0; i < _mDesc.rows.length; i++) {
                                    noc = _mDesc.rows[i];
                                    if (noc && (noc = noc[no]) && parseInt(noc.innerHTML) > parseInt(tRow.innerHTML)) {
                                        noc.innerHTML = parseInt(noc.innerHTML) + 1;
                                    }
                                    var pcur = _dataSource[i];
                                    if (i !== idx + 1 && pcur && !_.isNil(pcur.rowNumber) && pcur.rowNumber > data.rowNumber) {
                                        pcur.rowNumber += 1;
                                    }
                                }
                                if (_mDesc.rows.length < _dataSource.length) {
                                    for (var i = _mDesc.rows.length; i < _dataSource.length; i++) {
                                        var pcur = _dataSource[i];
                                        if (i !== idx + 1 && pcur && !_.isNil(pcur.rowNumber) && pcur.rowNumber > data.rowNumber) {
                                            pcur.rowNumber += 1;
                                        }
                                    }
                                }
                            }
                            _mDesc.rows.splice(idx + 1, 0, ret.elements);
                        }
                        _.forEach(_bodyWrappers, function (b, y) {
                            if (_bodyWrappers.length > 1) {
                                b.querySelector("tbody").insertBefore(y ? ret.row : ret.fixedRow, y ? _mDesc.rowElements[idx + 2] : _mDesc.fixedRowElements[idx + 2]);
                            }
                            else {
                                b.querySelector("tbody").insertBefore(ret.row, _mDesc.rowElements[idx + 2]);
                            }
                            var rList;
                            if (b.classList.contains(FIXED)) {
                                rList = _mDesc.fixedRowElements;
                            }
                            else {
                                rList = _mDesc.rowElements;
                            }
                            _.forEach(rList, function (r, i) {
                                if (i <= idx + 1 || !r)
                                    return;
                                $.data(r, lo.VIEW, parseInt($.data(r, lo.VIEW)) + 1);
                            });
                        });
                        if (_mafCurrent().rank) {
                            var rank = _mafCurrent().rank[data[_pk]];
                            if (!_.isNil(rank)) {
                                _mafCurrent().rank[newData[_pk]] = rank + 0.0001;
                            }
                        }
                        _.forEach(_errors, function (e) {
                            if (e.index > idx) {
                                e.index += 1;
                            }
                        });
                        _.forEach(_histoire, function (h) {
                            _.forEach(h.o, function (o) {
                                if (o.coord.rowIdx > idx) {
                                    o.coord.rowIdx += 1;
                                }
                            });
                        });
                        var t = {};
                        _.forEach(_.keys(_selected), function (r) {
                            if (parseInt(r) > idx) {
                                t[r] = _selected[r];
                                delete _selected[r];
                            }
                        });
                        _.forEach(_.keys(t), function (k) {
                            _selected[parseInt(k) + 1] = t[k];
                        });
                        _.forEach(_.keys(v._voilerRows), function (pt) {
                            _.forEach(v._voilerRows[pt], function (vr, i) {
                                if (vr > idx) {
                                    v._voilerRows[pt][i]++;
                                }
                            });
                        });
                        for (var ri = 0; ri < v_1._encarRows.length; ri++) {
                            if (v_1._encarRows[ri] > idx)
                                v_1._encarRows[ri] += 1;
                        }
                        v_1._encarRows.push(idx + 1);
                        _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                            var maf = _mafollicle[_currentPage][k];
                            if (k === _currentSheet || !maf || !maf.desc)
                                return;
                            var painter = _mafollicle[SheetDef][k].ltrlPainter;
                            if (!painter) {
                                painter = _.cloneDeep(_cloud.sidePainter);
                                painter.revive(k);
                                _mafollicle[SheetDef][k].ltrlPainter = painter;
                            }
                            var res = painter.row(newData, config, idx + 1);
                            if (!res)
                                return;
                            if (maf.desc.fixedRowElements) {
                                maf.desc.fixedRowElements.splice(idx + 1, 0, ret.fixedRow);
                            }
                            if (maf.desc.fixedRows) {
                                maf.desc.fixedRows.splice(idx + 1, 0, ret.fixedElements);
                            }
                            if (maf.desc.rowElements) {
                                maf.desc.rowElements.splice(idx + 1, 0, res.row);
                            }
                            if (maf.desc.rows) {
                                maf.desc.rows.splice(idx + 1, 0, res.elements);
                            }
                            if (maf.$bBody) {
                                maf.$bBody.insertBefore(res.row, maf.desc.rowElements[idx + 2]);
                                var rList = maf.desc.rowElements;
                                _.forEach(rList, function (r, i) {
                                    if (i <= idx + 1 || !r)
                                        return;
                                    $.data(r, lo.VIEW, parseInt($.data(r, lo.VIEW)) + 1);
                                });
                            }
                            _.forEach(maf.errors, function (e) {
                                if (e.index > idx) {
                                    e.index += 1;
                                }
                            });
                            _.forEach(maf.histoire, function (h) {
                                _.forEach(h.o, function (o) {
                                    if (o.coord.rowIdx > idx) {
                                        o.coord.rowIdx += 1;
                                    }
                                });
                            });
                            t = {};
                            _.forEach(_.keys(maf.selected), function (r) {
                                if (parseInt(r) > idx) {
                                    t[r] = maf.selected[r];
                                    delete maf.selected[r];
                                }
                            });
                            _.forEach(_.keys(t), function (k) {
                                maf.selected[parseInt(k) + 1] = t[k];
                            });
                        });
                    }
                    v_1.encarterRow = encarterRow;
                    function demoRows() {
                        _.forEach(_.keys(_mafollicle), function (g) {
                            var v;
                            if (g === SheetDef || _.isNil(v = _mafollicle[g].voilRows))
                                return;
                            _.forEach(_.keys(v), function (p) {
                                _.forEach(v[p], function (r) {
                                    _.forEach(_.keys(_mafollicle[SheetDef]), function (d) {
                                        var e, maf = _mafollicle[g][d];
                                        if (!maf || !maf.desc)
                                            return;
                                        if (maf.desc.fixedRowElements && (e = maf.desc.fixedRowElements[r])) {
                                            e.style.display = "";
                                        }
                                        if (maf.desc.rowElements && (e = maf.desc.rowElements[r])) {
                                            e.style.display = "";
                                        }
                                    });
                                });
                            });
                            v = {};
                        });
                    }
                    v_1.demoRows = demoRows;
                    function eliminRows(positions) {
                        _.forEach(positions, function (i) {
                            var data = _dataSource.splice(i, 1);
                            _mafollicle[_currentPage].origDs.splice(i, 1);
                            if (!_mDesc || data.length === 0)
                                return;
                            var no, noc, fixedRow, row;
                            if (_mDesc.fixedRowElements) {
                                fixedRow = _mDesc.fixedRowElements.splice(i, 1);
                                _.forEach(_mDesc.fixedRowElements, function (r, y) {
                                    if (y < i || !r)
                                        return;
                                    $.data(r, lo.VIEW, parseInt($.data(r, lo.VIEW)) - 1);
                                });
                            }
                            if (_mDesc.fixedRows) {
                                var tRow = _mDesc.fixedRows.splice(i, 1);
                                if (_.has(_mDesc.fixedColIdxes, "rowNumber")) {
                                    no = _mDesc.fixedColIdxes.rowNumber;
                                    for (var z = 0; z < _mDesc.fixedRows.length; z++) {
                                        noc = _mDesc.fixedRows[z];
                                        if (noc && (noc = noc[no]) && parseInt(noc.innerHTML) > parseInt((tRow && tRow[0])[no].innerHTML)) {
                                            noc.innerHTML = parseInt(noc.innerHTML) - 1;
                                        }
                                        var pcur = _dataSource[z];
                                        if (pcur && !_.isNil(pcur.rowNumber) && pcur.rowNumber > data[0].rowNumber) {
                                            pcur.rowNumber -= 1;
                                        }
                                    }
                                    if (_mDesc.fixedRows.length < _dataSource.length) {
                                        for (var z = _mDesc.fixedRows.length; z < _dataSource.length; z++) {
                                            var pcur = _dataSource[z];
                                            if (pcur && !_.isNil(pcur.rowNumber) && pcur.rowNumber > data[0].rowNumber) {
                                                pcur.rowNumber -= 1;
                                            }
                                        }
                                    }
                                }
                            }
                            if (_mDesc.rowElements) {
                                row = _mDesc.rowElements.splice(i, 1);
                                _.forEach(_mDesc.rowElements, function (r, y) {
                                    if (y < i || !r)
                                        return;
                                    $.data(r, lo.VIEW, parseInt($.data(r, lo.VIEW)) - 1);
                                });
                            }
                            if (_mDesc.rows) {
                                var tRow = _mDesc.rows.splice(i, 1);
                                if (_.has(_mDesc.colIdxes, "rowNumber")) {
                                    no = _mDesc.colIdxes.rowNumber;
                                    for (var z = 0; z < _mDesc.rows.length; z++) {
                                        noc = _mDesc.rows[z];
                                        if (noc && (noc = noc[no]) && parseInt(noc.innerHTML) > parseInt((tRow && tRow[0])[no].innerHTML)) {
                                            noc.innerHTML = parseInt(noc.innerHTML) - 1;
                                        }
                                        var pcur = _dataSource[z];
                                        if (pcur && !_.isNil(pcur.rowNumber) && pcur.rowNumber > data[0].rowNumber) {
                                            pcur.rowNumber -= 1;
                                        }
                                    }
                                    if (_mDesc.rows.length < _dataSource.length) {
                                        for (var z = _mDesc.rows.length; z < _dataSource.length; z++) {
                                            var pcur = _dataSource[z];
                                            if (pcur && !_.isNil(pcur.rowNumber) && pcur.rowNumber > data[0].rowNumber) {
                                                pcur.rowNumber -= 1;
                                            }
                                        }
                                    }
                                }
                            }
                            _.forEach(_bodyWrappers, function (b, y) {
                                if (_bodyWrappers.length > 1) {
                                    ti.remove(y ? row && row[0] : fixedRow && fixedRow[0]);
                                }
                                else {
                                    ti.remove(row && row[0]);
                                }
                            });
                            if (_mafCurrent().rank) {
                                delete _mafCurrent().rank[data[0][_pk]];
                            }
                            var abols = [];
                            _.forEach(_errors, function (e, z) {
                                if (e.index > i) {
                                    e.index -= 1;
                                }
                                else if (e.index === i) {
                                    abols.push(z);
                                }
                            });
                            for (var z = abols.length - 1; z >= 0; z--) {
                                _errors.splice(abols[z], 1);
                            }
                            _.forEach(_histoire, function (h) {
                                abols = [];
                                _.forEach(h.o, function (o, z) {
                                    if (o.coord.rowIdx > i) {
                                        o.coord.rowIdx -= 1;
                                    }
                                    else if (o.coord.rowIdx === i) {
                                        abols.push(z);
                                    }
                                });
                                for (var z = abols.length - 1; z >= 0; z--) {
                                    h.o.splice(abols[z], 1);
                                }
                            });
                            var t = {};
                            _.forEach(_.keys(_selected), function (r) {
                                if (parseInt(r) > i) {
                                    t[r] = _selected[r];
                                    delete _selected[r];
                                }
                                else if (parseInt(r) === i) {
                                    delete _selected[r];
                                }
                            });
                            _.forEach(_.keys(t), function (k) {
                                _selected[parseInt(k) - 1] = t[k];
                            });
                            _.forEach(_.keys(v._voilerRows), function (pt) {
                                abols = [];
                                _.forEach(v._voilerRows[pt], function (vr, z) {
                                    if (vr > i) {
                                        v._voilerRows[pt][z]--;
                                    }
                                    else if (vr === i) {
                                        abols.push(z);
                                    }
                                });
                                for (var z = abols.length - 1; z >= 0; z--) {
                                    v._voilerRows[pt].splice(abols[z], 1);
                                }
                            });
                            var delIn;
                            for (var ri = 0; ri < v_1._encarRows.length; ri++) {
                                if (v_1._encarRows[ri] > i)
                                    v_1._encarRows[ri] -= 1;
                                else if (v_1._encarRows[ri] === i)
                                    delIn = ri;
                            }
                            if (!_.isNil(delIn))
                                v_1._encarRows.splice(delIn, 1);
                            _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                                var maf = _mafollicle[_currentPage][k];
                                if (k === _currentSheet || !maf || !maf.desc)
                                    return;
                                if (maf.desc.fixedRowElements) {
                                    maf.desc.fixedRowElements.splice(i, 1);
                                    _.forEach(maf.desc.fixedRowElements, function (r, y) {
                                        if (y < i || !r)
                                            return;
                                        $.data(r, lo.VIEW, parseInt($.data(r, lo.VIEW)) - 1);
                                    });
                                }
                                if (maf.desc.fixedRows) {
                                    maf.desc.fixedRows.splice(i, 1);
                                }
                                if (maf.desc.rowElements) {
                                    row = maf.desc.rowElements.splice(i, 1);
                                    _.forEach(maf.desc.rowElements, function (r, y) {
                                        if (y < i || !r)
                                            return;
                                        $.data(r, lo.VIEW, parseInt($.data(r, lo.VIEW)) - 1);
                                    });
                                }
                                if (maf.desc.rows) {
                                    maf.desc.rows.splice(i, 1);
                                }
                                if (maf.$bBody) {
                                    ti.remove(row && row[0]);
                                    //                        let rList = maf.$bBody.querySelectorAll("tr");
                                    //                        _.forEach(rList, (r, z) => {
                                    //                            if (z < i + 1) return;
                                    //                            $.data(r, lo.VIEW, parseInt($.data(r, lo.VIEW)) - 1);
                                    //                        });
                                }
                                abols = [];
                                _.forEach(maf.errors, function (e, z) {
                                    if (e.index > i) {
                                        e.index -= 1;
                                    }
                                    else if (e.index === i) {
                                        abols.push(z);
                                    }
                                });
                                for (var z = abols.length - 1; z >= 0; z--) {
                                    maf.errors.splice(abols[z], 1);
                                }
                                _.forEach(maf.histoire, function (h) {
                                    abols = [];
                                    _.forEach(h.o, function (o, z) {
                                        if (o.coord.rowIdx > i) {
                                            o.coord.rowIdx -= 1;
                                        }
                                        else if (o.coord.rowIdx === i) {
                                            abols.push(z);
                                        }
                                    });
                                    for (var z = abols.length - 1; z >= 0; z--) {
                                        h.o.splice(abols[z], 1);
                                    }
                                });
                                t = {};
                                _.forEach(_.keys(maf.selected), function (r) {
                                    if (parseInt(r) > i) {
                                        t[r] = maf.selected[r];
                                        delete maf.selected[r];
                                    }
                                    else if (parseInt(r) === i) {
                                        delete maf.selected[r];
                                    }
                                });
                                _.forEach(_.keys(t), function (k) {
                                    maf.selected[parseInt(k) - 1] = t[k];
                                });
                            });
                        });
                    }
                    v_1.eliminRows = eliminRows;
                    var COPY;
                    (function (COPY) {
                        COPY[COPY["NONE"] = 0] = "NONE";
                        COPY[COPY["DATA"] = 1] = "DATA";
                        COPY[COPY["DATA_AND_LOOK"] = 2] = "DATA_AND_LOOK";
                    })(COPY = v_1.COPY || (v_1.COPY = {}));
                })(v || (v = {}));
                var aho;
                (function (aho) {
                    aho.TOP_SPACE = "top-space";
                    aho.BOTTOM_SPACE = "bottom-space";
                    aho.NULL = null;
                    aho._bloc = 0;
                    var Platrer = /** @class */ (function () {
                        function Platrer(containers, options) {
                            if (containers && containers.length > 1) {
                                this.$fixedContainer = containers[0];
                                this.$container = containers[1];
                            }
                            else
                                this.$container = containers[0];
                            this.options = options;
                            this.primaryKey = options.primaryKey;
                            this.rowsOfBlock = options.noBlocRangee || 30;
                            aho._bloc = this.rowsOfBlock;
                            this.blocksOfCluster = options.noGrappeBloc || 3;
                            this.rowHeight = parseInt(BODY_ROW_HEIGHT);
                            this.blockHeight = this.rowsOfBlock * this.rowHeight;
                            this.clusterHeight = this.blockHeight * this.blocksOfCluster;
                            this.hasSum = options.hasSum;
                            var ui = {
                                primaryKey: this.primaryKey,
                                states: options.states,
                                levelStruct: options.levelStruct
                            };
                            this.painter = new v.ConcurrentPainter(ui);
                            this.sidePainter = new v.SidePainter(ui);
                            this.onScroll();
                        }
                        /**
                         * Get cluster no.
                         */
                        Platrer.prototype.getClusterNo = function (dir) {
                            var self = this;
                            var count = 0, no = self.currentCluster || 0;
                            if (dir > 0)
                                no++;
                            for (var i = 0; i < no; i++) {
                                var part = v._voilerRows[i];
                                if (part)
                                    count += part.length;
                            }
                            return Math.max(Math.floor(this.$container.scrollTop / (this.clusterHeight - this.blockHeight)), Math.floor(Math.floor(this.$container.scrollTop / BODY_ROW_HEIGHT + count) / (aho._bloc * 2)));
                        };
                        /**
                         * Render rows.
                         */
                        Platrer.prototype.renderRows = function (manual) {
                            var self = this;
                            var clusterNo = self.getClusterNo();
                            if (manual)
                                self.currentCluster = clusterNo;
                            if (_dataSource.length < self.rowsOfBlock) {
                                self.topOffset = 0;
                                self.bottomOffset = 0;
                            }
                            var rowsOfCluster = self.blocksOfCluster * self.rowsOfBlock;
                            var startRowIdx = _start = self.startIndex = Math.max((rowsOfCluster - self.rowsOfBlock) * clusterNo, 0);
                            var p, count = 0, endRowIdx = self.endIndex = startRowIdx + rowsOfCluster;
                            _end = endRowIdx - 1;
                            for (var i = 0; i < clusterNo; i++) {
                                p = v._voilerRows[i];
                                if (p)
                                    count += p.length;
                            }
                            self.topOffset = Math.max(startRowIdx * self.rowHeight - count * BODY_ROW_HEIGHT, 0);
                            self.bottomOffset = Math.max((_dataSource.length - endRowIdx) * self.rowHeight, 0);
                            var rowConfig = { css: { height: self.rowHeight } };
                            var containerElm = self.$container, containerTbl = containerElm.querySelector("table");
                            var fixedTbody, tbody = document.createElement("tbody");
                            if (_dataSource.length === 0) {
                                self.topOffset = 1;
                            }
                            var topSpace = v.extra(aho.TOP_SPACE, self.topOffset);
                            if (self.$fixedContainer) {
                                fixedTbody = document.createElement("tbody");
                                fixedTbody.appendChild(topSpace.cloneNode(true));
                            }
                            if (_dataSource.length === 0 && (ti.isIE() || ti.isEdge())) {
                                _.forEach(containerTbl.querySelectorAll("colgroup col"), function (cg) {
                                    if (cg.style.display !== "none") {
                                        topSpace.appendChild(_prtCell.cloneNode(true));
                                    }
                                });
                            }
                            tbody.appendChild(topSpace);
                            var res = {}, fixedRows = [], rows = [], fixedRowElements = [], rowElements = [], min, max;
                            var _loop_5 = function (i) {
                                if (_.isNil(_dataSource[i]))
                                    return "continue";
                                var rElm = void 0, rDup;
                                if (_mDesc && _mDesc.rowElements && (rElm = _mDesc.rowElements[i])) {
                                    tbody.appendChild(rElm);
                                    rowElements.push(rElm);
                                    rows.push(_mDesc.rows[i]);
                                    if (self.$fixedContainer) {
                                        fixedTbody.appendChild(_mDesc.fixedRowElements[i]);
                                        fixedRows.push(_mDesc.fixedRows[i]);
                                        fixedRowElements.push(_mDesc.fixedRowElements[i]);
                                    }
                                    return "continue";
                                }
                                if (_.isNil(min))
                                    min = i;
                                max = Math.max(_.isNil(min) ? startRowIdx : min, i);
                                var rowElms = self.painter.row(_dataSource[i], rowConfig, i);
                                tbody.appendChild(rowElms.row);
                                rowElements.push(rowElms.row);
                                if (self.$fixedContainer) {
                                    if (_mDesc && _mDesc.fixedRowElements && (rElm = _mDesc.fixedRowElements[i])) {
                                        fixedTbody.appendChild(rElm);
                                        fixedRowElements.push(rElm);
                                        fixedRows.push(_mDesc.fixedRows[i]);
                                    }
                                    else {
                                        var pass_1;
                                        _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                                            if (k === _currentSheet)
                                                return;
                                            var ash = _mafCurrent()[k];
                                            if (!_.isNil(ash) && !_.isNil(ash.desc) && ash.desc.hasOwnProperty("fixedRowElements")
                                                && !_.isNil(rDup = ash.desc.fixedRowElements[i])) {
                                                pass_1 = true;
                                                fixedTbody.appendChild(rDup);
                                                fixedRowElements.push(rDup);
                                                fixedRows.push(_.cloneDeep(ash.desc.fixedRows[i]));
                                                return false;
                                            }
                                        });
                                        if (!pass_1) {
                                            fixedTbody.appendChild(rowElms.fixedRow);
                                            fixedRowElements.push(rowElms.fixedRow);
                                            fixedRows.push(rowElms.fixedElements);
                                        }
                                    }
                                }
                                // Assure equilibrium
                                rows.push(rowElms.elements);
                                if (i === 0) {
                                    res.fixedColIdxes = rowElms.fixedColIdxes;
                                    res.colIdxes = rowElms.colIdxes;
                                }
                            };
                            for (var i = startRowIdx; i < endRowIdx; i++) {
                                _loop_5(i);
                            }
                            var bottomSpace = v.extra(aho.BOTTOM_SPACE, self.hasSum ? self.bottomOffset + SUM_HEIGHT + 2 : self.bottomOffset);
                            tbody.appendChild(bottomSpace);
                            containerTbl.replaceChild(tbody, containerElm.getElementsByTagName("tbody")[0]);
                            if (self.$fixedContainer) {
                                fixedTbody.appendChild(bottomSpace.cloneNode(true));
                                self.$fixedContainer.querySelector("table").replaceChild(fixedTbody, self.$fixedContainer.getElementsByTagName("tbody")[0]);
                            }
                            if (rows.length === 0)
                                return;
                            res.fixedRows = fixedRows;
                            res.rows = rows;
                            res.fixedRowElements = fixedRowElements;
                            res.rowElements = rowElements;
                            res.start = _start; //!_.isNil(min) ? min : startRowIdx;
                            res.end = _end; //max;
                            setTimeout(function () {
                                ssk.trigger(self.$container, ssk.RENDERED);
                            }, 0);
                            return res;
                        };
                        /**
                         * OnScroll.
                         */
                        Platrer.prototype.onScroll = function () {
                            var self = this, lastScroll = self.$container.scrollTop;
                            self.$container.removeXEventListener(ssk.SCROLL_EVT + ".detail");
                            self.$container.addXEventListener(ssk.SCROLL_EVT + ".detail", function () {
                                var inClusterNo = self.getClusterNo(self.$container.scrollTop - lastScroll);
                                setTimeout(function () { lastScroll = self.$container.scrollTop; }, 1);
                                if (self.currentCluster !== inClusterNo) {
                                    self.currentCluster = inClusterNo;
                                    var res = self.renderRows();
                                    var hCols = void 0;
                                    if (!_.isNil(_hr) && (hCols = _mDesc.rows[_hr])) {
                                        _.forEach(hCols, function (c) {
                                            if (c.classList.contains(color.HOVER)) {
                                                c.classList.remove(color.HOVER);
                                            }
                                        });
                                    }
                                    if (!_.isNil(_hr) && (hCols = _mDesc.fixedRows[_hr])) {
                                        _.forEach(hCols, function (c) {
                                            if (c.classList.contains(color.HOVER)) {
                                                c.classList.remove(color.HOVER);
                                            }
                                        });
                                    }
                                    if (!res)
                                        return;
                                    var start = res.start, end = res.end, cursor = void 0;
                                    for (var i = start; i <= end; i++) {
                                        cursor = i - start;
                                        if (!_mDesc.fixedRows[i]) {
                                            _mDesc.fixedRows[i] = res.fixedRows[cursor];
                                            _mDesc.fixedRowElements[i] = res.fixedRowElements[cursor];
                                        }
                                        _mDesc.rows[i] = res.rows[cursor];
                                        _mDesc.rowElements[i] = res.rowElements[cursor];
                                    }
                                }
                            });
                        };
                        /**
                         * RenderSideRows.
                         */
                        Platrer.prototype.renderSideRows = function (manual, fails) {
                            var self = this;
                            var clusterNo = self.getClusterNo();
                            if (manual)
                                self.currentCluster = clusterNo;
                            if (_dataSource.length < self.rowsOfBlock) {
                                self.topOffset = 0;
                                self.bottomOffset = 0;
                            }
                            var rowsOfCluster = self.blocksOfCluster * self.rowsOfBlock;
                            var startRowIdx = _start = self.startIndex = Math.max((rowsOfCluster - self.rowsOfBlock) * clusterNo, 0);
                            var endRowIdx = self.endIndex = startRowIdx + rowsOfCluster;
                            _end = endRowIdx - 1;
                            self.topOffset = Math.max(startRowIdx * self.rowHeight, 0);
                            self.bottomOffset = Math.max((_dataSource.length - endRowIdx) * self.rowHeight, 0);
                            var rowConfig = { css: { height: self.rowHeight } };
                            if (fails && fails.length > 0) {
                                self.sidePainter.fails = _.groupBy(fails, "index");
                            }
                            var containerElm = self.$container;
                            var tbody = document.createElement("tbody");
                            var topSpace = v.extra(aho.TOP_SPACE, self.topOffset);
                            tbody.appendChild(topSpace);
                            var res = {}, rows = [], rowElements = [], min, max;
                            for (var i = startRowIdx; i < endRowIdx; i++) {
                                if (_.isNil(_dataSource[i]))
                                    continue;
                                var rElm = void 0;
                                if (_mDesc && _mDesc.rowElements && (rElm = _mDesc.rowElements[i])) {
                                    tbody.appendChild(rElm);
                                    continue;
                                }
                                if (_.isNil(min))
                                    min = i;
                                max = Math.max(_.isNil(min) ? startRowIdx : min, i);
                                var rowElms = self.sidePainter.row(_dataSource[i], rowConfig, i);
                                tbody.appendChild(rowElms.row);
                                rowElements.push(rowElms.row);
                                rows.push(rowElms.elements);
                                if (i === _start) {
                                    res.colIdxes = rowElms.colIdxes;
                                }
                            }
                            var bottomSpace = v.extra(aho.BOTTOM_SPACE, self.hasSum ? self.bottomOffset + SUM_HEIGHT + 2 : self.bottomOffset);
                            tbody.appendChild(bottomSpace);
                            containerElm.querySelector("table").replaceChild(tbody, containerElm.getElementsByTagName("tbody")[0]);
                            if (rows.length === 0)
                                return;
                            res.rows = rows;
                            res.rowElements = rowElements;
                            res.start = !_.isNil(min) ? min : startRowIdx;
                            res.end = max;
                            setTimeout(function () {
                                ssk.trigger(self.$container, ssk.RENDERED);
                            }, 0);
                            return res;
                        };
                        return Platrer;
                    }());
                    aho.Platrer = Platrer;
                })(aho || (aho = {}));
                var tc;
                (function (tc) {
                    tc.SCROLL_SYNCING = "scroll-syncing";
                    tc.VERT_SCROLL_SYNCING = "vert-scroll-syncing";
                    /**
                     * Bind vertWheel.
                     */
                    function bindVertWheel($container, showY, abnorm) {
                        var $_container = $($container);
                        $container.addXEventListener(ssk.MOUSE_WHEEL, function (event) {
                            var delta = event.deltaY;
                            var direction = delta < 0 ? -1 : 1;
                            var value = $_container.scrollTop();
                            //                $container.stop().animate({ scrollTop: value }, 10);
                            var os = ti.isIE() ? 25 : 50;
                            if (!abnorm && ((direction < 0 && value === 0)
                                || (direction > 0 && $container.scrollHeight - value + ti.getScrollWidth() === $_container.height()))) {
                                var $contents = document.getElementById("contents-area");
                                if ($contents) {
                                    $contents.scrollTop += direction * os;
                                }
                            }
                            $_container.scrollTop(value + direction * os);
                            event.preventDefault();
                            event.stopImmediatePropagation();
                            if (!_mEditor)
                                return;
                            if (_mEditor.type === dkn.COMBOBOX) {
                                var cbx = dkn.controlType[_mEditor.columnKey];
                                var $combo = cbx.my.querySelector("." + dkn.CBX_CLS);
                                if (cbx.dropdown && cbx.dropdown.style.top !== "-99999px") {
                                    dkn.closeDD(cbx.dropdown);
                                    $combo.classList.remove(dkn.CBX_ACTIVE_CLS);
                                }
                            }
                            else if (_mEditor.type === dkn.DATE_PICKER) {
                                su.endEdit(_$grid);
                            }
                        });
                        if (!showY && $container.style.overflowY !== "hidden") {
                            $container.style.overflowY = "hidden";
                        }
                    }
                    tc.bindVertWheel = bindVertWheel;
                    /**
                     * Unbind vertWheel.
                     */
                    function unbindVertWheel($container) {
                        $container.removeXEventListener(ssk.MOUSE_WHEEL);
                        $container.style.overflowY = "scroll";
                    }
                    tc.unbindVertWheel = unbindVertWheel;
                    /**
                     * Sync scrolls.
                     */
                    function syncDoubDirHorizontalScrolls(wrappers) {
                        _.forEach(wrappers, function ($main, index) {
                            if (!$main)
                                return;
                            $main.addXEventListener(ssk.SCROLL_EVT, function () {
                                _.forEach(wrappers, function ($depend, i) {
                                    if (i === index || !$depend)
                                        return;
                                    var mainSyncing = $.data($main, tc.SCROLL_SYNCING);
                                    if (!mainSyncing) {
                                        $.data($depend, tc.SCROLL_SYNCING, true);
                                        $depend.scrollLeft = $main.scrollLeft;
                                    }
                                });
                                $.data($main, tc.SCROLL_SYNCING, false);
                            });
                        });
                    }
                    tc.syncDoubDirHorizontalScrolls = syncDoubDirHorizontalScrolls;
                    /**
                     * Sync scrolls.
                     */
                    function syncDoubDirVerticalScrolls(wrappers) {
                        _.forEach(wrappers, function ($main, index) {
                            $main.addXEventListener(ssk.SCROLL_EVT, function (event) {
                                _.forEach(wrappers, function ($depend, i) {
                                    if (i === index)
                                        return;
                                    var mainSyncing = $.data($main, tc.VERT_SCROLL_SYNCING);
                                    if (!mainSyncing) {
                                        $.data($depend, tc.VERT_SCROLL_SYNCING, true);
                                        $depend.scrollTop = $main.scrollTop;
                                    }
                                });
                                $.data($main, tc.VERT_SCROLL_SYNCING, false);
                            });
                        });
                    }
                    tc.syncDoubDirVerticalScrolls = syncDoubDirVerticalScrolls;
                    /**
                     * Sync scroll.
                     */
                    function syncHorizontalScroll($headerWrap, $bodyWrap) {
                        $bodyWrap.addXEventListener(ssk.SCROLL_EVT, function () {
                            $headerWrap.scrollLeft = $bodyWrap.scrollLeft;
                        });
                    }
                    tc.syncHorizontalScroll = syncHorizontalScroll;
                    /**
                     * Sync scroll.
                     */
                    function syncVerticalScroll($pivotBody, bodyWraps) {
                        $pivotBody.addXEventListener(ssk.SCROLL_EVT, function () {
                            _.forEach(bodyWraps, function (body) {
                                body.scrollTop = $pivotBody.scrollTop;
                            });
                        });
                    }
                    tc.syncVerticalScroll = syncVerticalScroll;
                    /**
                     * VisualJumpTo.
                     */
                    function visualJumpTo($grid, index) {
                        if (index >= _cloud.startIndex && index < _cloud.endIndex)
                            return;
                        var tbl = $grid.querySelector("." + FREE + ":not(.mgrid-header)");
                        tbl.scrollTop = index * BODY_ROW_HEIGHT;
                        return true;
                    }
                    tc.visualJumpTo = visualJumpTo;
                })(tc || (tc = {}));
                var kt;
                (function (kt) {
                    kt.AGENCY = "mgrid-agency";
                    kt.FIXED_LINE = "mgrid-fixed-line";
                    kt.LINE = "mgrid-line";
                    kt.RESIZE_COL = "resizeColumn";
                    kt.RESIZE_NO = "resizeNo";
                    kt.AREA_AGENCY = "mgrid-area-agency";
                    kt.RESIZE_AREA = "resize-area";
                    kt.AREA_LINE = "mgrid-area-line";
                    kt.STAY_CLS = "mgrid-stay";
                    kt._fixedGroups = [];
                    kt._widths = {};
                    kt._columnWidths = {};
                    var ColumnAdjuster = /** @class */ (function () {
                        function ColumnAdjuster(widths, height, sizeUi, unshift) {
                            var _this = this;
                            this.headerColGroup = [];
                            this.bodyColGroup = [];
                            this.sumColGroup = [];
                            this.fixedLines = [];
                            this.lines = [];
                            this.headerWrappers = sizeUi.headerWrappers;
                            this.bodyWrappers = sizeUi.bodyWrappers;
                            this.sumWrappers = sizeUi.sumWrappers;
                            this.unshiftRight = unshift;
                            _.forEach(sizeUi.headerColGroup, function (g) {
                                if (g) {
                                    var vCols = g.filter(function (c) { return c.style.display !== "none"; });
                                    _this.headerColGroup.push(vCols);
                                }
                            });
                            _.forEach(sizeUi.bodyColGroup, function (g) {
                                if (g) {
                                    var vCols = g.filter(function (c) { return c.style.display !== "none"; });
                                    _this.bodyColGroup.push(vCols);
                                }
                            });
                            _.forEach(sizeUi.sumColGroup, function (g) {
                                if (g) {
                                    var vCols = g.filter(function (c) { return c.style.display !== "none"; });
                                    _this.sumColGroup.push(vCols);
                                }
                            });
                            this.widths = widths;
                            this.height = height;
                            this.$ownerDoc = this.headerWrappers[0].ownerDocument;
                            if (widths.length > 1) {
                                kt._widths._fixed = parseFloat(widths[0]);
                                kt._widths._unfixed = parseFloat(widths[1]);
                            }
                            else
                                kt._widths._unfixed = parseFloat(widths[0]);
                        }
                        /**
                         * Nostal.
                         */
                        ColumnAdjuster.prototype.nostal = function (headerColGroup, bodyColGroup, sumColGroup, fixed) {
                            var i = _hasFixed && !fixed ? 1 : 0;
                            this.headerColGroup[i] = headerColGroup.filter(function (c) { return c.style.display !== "none"; });
                            this.bodyColGroup[i] = bodyColGroup.filter(function (c) { return c.style.display !== "none"; });
                            if (sumColGroup) {
                                this.sumColGroup[i] = sumColGroup.filter(function (c) { return c.style.display !== "none"; });
                            }
                            this.widths = [kt._widths._fixed, kt._widths._unfixed];
                            var agency;
                            if (_hasFixed) {
                                agency = this.headerWrappers[0].querySelector("." + kt.AGENCY);
                                if (agency)
                                    ti.remove(agency);
                            }
                            agency = this.headerWrappers[1].querySelector("." + kt.AGENCY);
                            if (agency)
                                ti.remove(agency);
                            this.fixedLines = [];
                            this.lines = [];
                        };
                        /**
                         * Handle.
                         */
                        ColumnAdjuster.prototype.handle = function () {
                            var self = this;
                            if (self.headerColGroup.length > 1) {
                                self.$fixedAgency = document.createElement("div");
                                self.$fixedAgency.className = kt.AGENCY;
                                self.$fixedAgency.style.cssText = "; position: relative; width: " + self.widths[0];
                                var $fixedHeaderTable = self.headerWrappers[0].querySelector("table");
                                $fixedHeaderTable.insertAdjacentElement("beforebegin", self.$fixedAgency);
                                var left_1 = 0, hiddenCount_1 = 0;
                                _.forEach(self.headerColGroup[0], function ($targetCol, i) {
                                    if ($targetCol.style.display === "none") {
                                        hiddenCount_1++;
                                        return;
                                    }
                                    var $line = document.createElement("div");
                                    $line.className = kt.FIXED_LINE;
                                    $.data($line, kt.RESIZE_COL, $targetCol);
                                    $.data($line, kt.RESIZE_NO, i - hiddenCount_1);
                                    self.$fixedAgency.appendChild($line);
                                    left_1 += (i === self.headerColGroup[0].length ? DISTANCE : 0) + parseFloat($targetCol.style.width);
                                    $line.style.left = left_1 + "px";
                                    $line.style.height = self.height;
                                    self.fixedLines.push($line);
                                });
                                self.fixedHiddenCount = hiddenCount_1;
                                left_1 = 0;
                                self.$agency = document.createElement("div");
                                self.$agency.className = kt.AGENCY;
                                self.$agency.style.cssText = "; position: relative; width: " + self.widths[1];
                                var $headerTable = self.headerWrappers[1].querySelector("table");
                                $headerTable.insertAdjacentElement("beforebegin", self.$agency);
                                hiddenCount_1 = 0;
                                _.forEach(self.headerColGroup[1], function ($targetCol, i) {
                                    //                        if (i === self.headerColGroup[1].length - 1) return;
                                    if ($targetCol.style.display === "none") {
                                        hiddenCount_1++;
                                        return;
                                    }
                                    var $line = document.createElement("div");
                                    $line.className = kt.LINE;
                                    $.data($line, kt.RESIZE_COL, $targetCol);
                                    $.data($line, kt.RESIZE_NO, i - hiddenCount_1);
                                    self.$agency.appendChild($line);
                                    left_1 += parseFloat($targetCol.style.width);
                                    $line.style.left = left_1 + "px";
                                    $line.style.height = self.height;
                                    self.lines.push($line);
                                });
                                self.hiddenCount = hiddenCount_1;
                                self.$fixedAgency.removeXEventListener(ssk.MOUSE_DOWN);
                                self.$fixedAgency.addXEventListener(ssk.MOUSE_DOWN, self.cursorDown.bind(self));
                                self.$agency.removeXEventListener(ssk.MOUSE_DOWN);
                                self.$agency.addXEventListener(ssk.MOUSE_DOWN, self.cursorDown.bind(self));
                            }
                            else {
                                var left_2 = 0, hiddenCount_2 = 0;
                                self.$agency = document.createElement("div");
                                self.$agency.className = kt.AGENCY;
                                self.$agency.style.cssText = "; position: relative; width: " + self.widths[0];
                                var $headerTable = self.headerWrappers[0].querySelector("table");
                                $headerTable.insertAdjacentElement("beforebegin", self.$agency);
                                _.forEach(self.headerColGroup[0], function ($targetCol, i) {
                                    if (i === self.headerColGroup[0].length - 1)
                                        return;
                                    if ($targetCol.style.display === "none") {
                                        hiddenCount_2++;
                                        return;
                                    }
                                    var $line = document.createElement("div");
                                    $line.className = kt.LINE;
                                    $.data($line, kt.RESIZE_COL, $targetCol);
                                    $.data($line, kt.RESIZE_NO, i - hiddenCount_2);
                                    self.$agency.appendChild($line);
                                    left_2 += parseFloat($targetCol.style.width);
                                    $line.style.left = left_2 + "px";
                                    $line.style.height = self.height;
                                    self.lines.push($line);
                                });
                                self.hiddenCount = hiddenCount_2;
                                self.$agency.removeXEventListener(ssk.MOUSE_DOWN);
                                self.$agency.addXEventListener(ssk.MOUSE_DOWN, self.cursorDown.bind(self));
                            }
                        };
                        /**
                         * Cursor down.
                         */
                        ColumnAdjuster.prototype.cursorDown = function (event, trg) {
                            var self = this;
                            if (self.actionDetails) {
                                self.unshiftRight ? self.cursorUp(event) : self.cursorUpShift(event);
                            }
                            var $targetGrip = event.target;
                            if (!selector.is($targetGrip, "." + kt.LINE)
                                && !selector.is($targetGrip, "." + kt.FIXED_LINE))
                                return;
                            var gripIndex = $.data($targetGrip, kt.RESIZE_NO);
                            var $leftCol = $.data($targetGrip, kt.RESIZE_COL);
                            var headerGroup, isFixed = false;
                            if ($targetGrip.classList.contains(kt.FIXED_LINE)) {
                                headerGroup = self.headerColGroup[0];
                                isFixed = true;
                            }
                            else if (self.headerColGroup.length > 1) {
                                headerGroup = self.headerColGroup[1];
                            }
                            else {
                                headerGroup = self.headerColGroup[0];
                            }
                            var breakArea, wrapperLeft, wrapperRight, maxWrapperRight, leftAlign;
                            if (isFixed && self.headerColGroup.length > 1 && gripIndex === self.headerColGroup[0].length - 1) {
                                breakArea = true;
                            }
                            if (self.headerWrappers.length > 1) {
                                wrapperLeft = self.headerWrappers[0].style.width;
                                wrapperRight = self.headerWrappers[1].style.width;
                                maxWrapperRight = self.headerWrappers[1].style.maxWidth;
                                leftAlign = self.headerWrappers[1].style.left;
                            }
                            var $rightCol = headerGroup[gripIndex + 1];
                            var leftWidth = $leftCol.style.width;
                            var rightWidth;
                            if ($rightCol)
                                rightWidth = $rightCol.style.width;
                            self.actionDetails = {
                                $targetGrip: $targetGrip,
                                gripIndex: gripIndex,
                                $leftCol: $leftCol,
                                $rightCol: $rightCol,
                                xCoord: getCursorX(event),
                                isFixed: isFixed,
                                breakArea: breakArea,
                                leftAlign: parseFloat(leftAlign),
                                widths: {
                                    left: parseFloat(leftWidth),
                                    right: rightWidth ? parseFloat(rightWidth) : undefined,
                                    wrapperLeft: parseFloat(wrapperLeft),
                                    wrapperRight: parseFloat(wrapperRight),
                                    maxWrapperRight: parseFloat(maxWrapperRight)
                                },
                                changedWidths: {
                                    left: parseFloat(leftWidth),
                                    right: rightWidth ? parseFloat(rightWidth) : undefined
                                }
                            };
                            self.$ownerDoc.addXEventListener(ssk.MOUSE_MOVE, self.unshiftRight ? self.cursorMove.bind(self) : self.cursorMoveShift.bind(self));
                            self.$ownerDoc.addXEventListener(ssk.MOUSE_UP, self.unshiftRight ? self.cursorUp.bind(self) : self.cursorUpShift.bind(self));
                            if (!trg) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        };
                        /**
                         * Cursor move shift.
                         */
                        ColumnAdjuster.prototype.cursorMoveShift = function (event) {
                            var self = this;
                            if (!self.actionDetails)
                                return;
                            var evt, distance = getCursorX(event) - self.actionDetails.xCoord;
                            if (distance === 0)
                                return;
                            else if (distance > 0) {
                                if (_.isNil(self.dir)) {
                                    self.dir = 1;
                                }
                                else if (self.dir === -1) {
                                    evt = { target: self.actionDetails.$targetGrip };
                                    self.cursorUpShift(event);
                                    evt.pageX = event.pageX;
                                    self.cursorDown(evt, true);
                                }
                            }
                            else if (_.isNil(self.dir)) {
                                self.dir = -1;
                            }
                            else if (self.dir === 1) {
                                evt = { target: self.actionDetails.$targetGrip };
                                self.cursorUpShift(event);
                                evt.pageX = event.pageX;
                                self.cursorDown(evt, true);
                            }
                            var leftWidth, leftAreaWidth, rightAreaWidth, leftAlign;
                            leftWidth = self.actionDetails.widths.left + distance;
                            if (leftWidth <= 20)
                                return;
                            if (self.actionDetails.breakArea || self.actionDetails.isFixed) {
                                leftAreaWidth = self.actionDetails.widths.wrapperLeft + distance;
                                _maxFixedWidth = leftAreaWidth;
                                rightAreaWidth = self.actionDetails.widths.wrapperRight - distance;
                                leftAlign = self.actionDetails.leftAlign + distance;
                                var $header = _$grid[0].querySelector("." + FREE + "." + HEADER);
                                var sWrap = _$grid[0].querySelector("." + gp.SHEET_CLS);
                                var pWrap = _$grid[0].querySelector("." + gp.PAGING_CLS);
                                var btmw = (Math.min(parseFloat($header.style.width), parseFloat($header.style.maxWidth))
                                    + _maxFixedWidth + ti.getScrollWidth()) + "px";
                                if (sWrap)
                                    sWrap.style.width = btmw;
                                if (pWrap)
                                    pWrap.style.width = btmw;
                            }
                            self.actionDetails.changedWidths.left = leftWidth;
                            var bodyGroup, sumGroup;
                            if (self.actionDetails.isFixed) {
                                bodyGroup = self.bodyColGroup[0];
                                if (self.sumWrappers.length > 0)
                                    sumGroup = self.sumColGroup[0];
                            }
                            else {
                                var i_1 = self.bodyColGroup.length > 1 ? 1 : 0;
                                bodyGroup = self.bodyColGroup[i_1];
                                self.bodyWrappers[i_1].style.maxWidth = (self.actionDetails.widths.maxWrapperRight + distance + ti.getScrollWidth()) + "px";
                                self.headerWrappers[i_1].style.maxWidth = (self.actionDetails.widths.maxWrapperRight + distance) + "px";
                                if (self.sumWrappers.length > 0) {
                                    sumGroup = self.sumColGroup[i_1];
                                    self.sumWrappers[i_1].style.maxWidth = (self.actionDetails.widths.maxWrapperRight + distance) + "px";
                                }
                            }
                            if (self.actionDetails.$leftCol) {
                                self.setWidth(self.actionDetails.$leftCol, leftWidth);
                                var $contentLeftCol = bodyGroup[self.actionDetails.gripIndex];
                                self.setWidth($contentLeftCol, leftWidth);
                                if (self.sumWrappers.length > 0) {
                                    var $sumLeftCol = sumGroup[self.actionDetails.gripIndex];
                                    self.setWidth($sumLeftCol, leftWidth);
                                }
                                if (leftAreaWidth) {
                                    self.setWidth(self.headerWrappers[0], leftAreaWidth);
                                    self.setWidth(self.bodyWrappers[0], leftAreaWidth);
                                    if (self.sumWrappers.length > 0)
                                        self.setWidth(self.sumWrappers[0], leftAreaWidth);
                                    kt._widths._fixed = leftAreaWidth;
                                }
                            }
                            if (rightAreaWidth) {
                                self.setWidth(self.headerWrappers[1], rightAreaWidth);
                                self.setWidth(self.bodyWrappers[1], rightAreaWidth + ti.getScrollWidth());
                                self.headerWrappers[1].style.left = leftAlign + "px";
                                self.bodyWrappers[1].style.left = leftAlign + "px";
                                if (self.sumWrappers.length > 0) {
                                    self.setWidth(self.sumWrappers[1], rightAreaWidth);
                                    self.sumWrappers[1].style.left = leftAlign + "px";
                                }
                                kt._widths._unfixed = rightAreaWidth;
                            }
                            var i = self.bodyWrappers.length > 1 ? 1 : 0;
                            if (!self.actionDetails.isFixed && distance < 0) {
                                var width = parseFloat(self.bodyWrappers[i].style.width), maxWidth = parseFloat(self.bodyWrappers[i].style.maxWidth);
                                if (maxWidth < width) {
                                    var pageDiv = _$grid[0].querySelector("." + gp.PAGING_CLS), sheetDiv = _$grid[0].querySelector("." + gp.SHEET_CLS), btw = _maxFixedWidth + maxWidth;
                                    if (pageDiv) {
                                        self.setWidth(pageDiv, btw);
                                    }
                                    if (sheetDiv) {
                                        self.setWidth(sheetDiv, btw);
                                    }
                                    kt._widths._unfixed = maxWidth - ti.getScrollWidth();
                                }
                            }
                            if (_hasFixed && distance > 0 && !self.actionDetails.isFixed) {
                                var width = parseFloat(self.bodyWrappers[1].style.width), maxWidth = parseFloat(self.bodyWrappers[1].style.maxWidth), pageDiv = _$grid[0].querySelector("." + gp.PAGING_CLS), sheetDiv = _$grid[0].querySelector("." + gp.SHEET_CLS), ws = Math.min(maxWidth, width), btw = _maxFixedWidth + ws;
                                if (pageDiv && parseFloat(pageDiv.style.width) !== btw) {
                                    self.setWidth(pageDiv, btw);
                                }
                                if (sheetDiv && parseFloat(sheetDiv.style.width) !== btw) {
                                    self.setWidth(sheetDiv, btw);
                                }
                                kt._widths._unfixed = ws;
                            }
                        };
                        /**
                         * Cursor up shift.
                         */
                        ColumnAdjuster.prototype.cursorUpShift = function (event) {
                            var self = this;
                            self.$ownerDoc.removeXEventListener(ssk.MOUSE_MOVE);
                            self.$ownerDoc.removeXEventListener(ssk.MOUSE_UP);
                            self.syncLines();
                            var leftCol, tidx = self.actionDetails.gripIndex;
                            if (!_vessel() || !_vessel().desc) {
                                self.actionDetails = null;
                                return;
                            }
                            if (self.actionDetails.isFixed) {
                                _.forEach(_fixedHiddenColumns, function (c) {
                                    var idx = _vessel().desc.fixedColIdxes[c];
                                    if (parseFloat(idx) <= self.actionDetails.gripIndex) {
                                        tidx++;
                                    }
                                });
                                _.forEach(_.keys(_vessel().desc.fixedColIdxes), function (k) {
                                    var i = parseFloat(_vessel().desc.fixedColIdxes[k]);
                                    if (i === tidx) {
                                        if (_.find(_fixedHiddenColumns, function (c) { return c === k; })) {
                                            tidx++;
                                            return;
                                        }
                                        leftCol = k;
                                        if (self.actionDetails.breakArea || leftCol)
                                            return false;
                                        return;
                                    }
                                });
                                replenLargeur(leftCol, self.actionDetails.changedWidths.left, "reparer");
                            }
                            else {
                                _.forEach(_hiddenColumns, function (c) {
                                    var idx = _vessel().desc.colIdxes[c];
                                    if (parseFloat(idx) <= self.actionDetails.gripIndex) {
                                        tidx++;
                                    }
                                });
                                _.forEach(_.keys(_vessel().desc.colIdxes), function (k) {
                                    var i = parseFloat(_vessel().desc.colIdxes[k]);
                                    if (i === tidx) {
                                        if (_.find(_hiddenColumns, function (c) { return c === k; })) {
                                            tidx++;
                                            return;
                                        }
                                        leftCol = k;
                                        return false;
                                    }
                                });
                                replenLargeur(leftCol, self.actionDetails.changedWidths.left);
                            }
                            self.actionDetails = null;
                            self.dir = null;
                        };
                        /**
                         * Cursor move.
                         */
                        ColumnAdjuster.prototype.cursorMove = function (event) {
                            var self = this;
                            if (!self.actionDetails)
                                return;
                            var distance = getCursorX(event) - self.actionDetails.xCoord;
                            if (distance === 0)
                                return;
                            var leftWidth, rightWidth, leftAreaWidth, rightAreaWidth, leftAlign;
                            leftWidth = self.actionDetails.widths.left + distance;
                            rightWidth = self.actionDetails.widths.right - distance;
                            if (leftWidth <= 20 || rightWidth <= 20)
                                return;
                            if (self.actionDetails.breakArea) {
                                leftAreaWidth = self.actionDetails.widths.wrapperLeft + distance;
                                _maxFixedWidth = leftAreaWidth;
                                rightAreaWidth = self.actionDetails.widths.wrapperRight - distance;
                                leftAlign = self.actionDetails.leftAlign + distance;
                                var $header = _$grid[0].querySelector("." + FREE + "." + HEADER);
                                var sWrap = _$grid[0].querySelector("." + gp.SHEET_CLS);
                                var pWrap = _$grid[0].querySelector("." + gp.PAGING_CLS);
                                var btmw = (Math.min(parseFloat($header.style.width), parseFloat($header.style.maxWidth))
                                    + _maxFixedWidth + ti.getScrollWidth()) + "px";
                                if (sWrap)
                                    sWrap.style.width = btmw;
                                if (pWrap)
                                    pWrap.style.width = btmw;
                            }
                            self.actionDetails.changedWidths.left = leftWidth;
                            self.actionDetails.changedWidths.right = rightWidth;
                            var bodyGroup, sumGroup;
                            if (self.actionDetails.isFixed) {
                                bodyGroup = self.bodyColGroup[0];
                                if (self.sumWrappers.length > 0)
                                    sumGroup = self.sumColGroup[0];
                            }
                            else {
                                bodyGroup = self.bodyColGroup[1];
                                if (self.sumWrappers.length > 0)
                                    sumGroup = self.sumColGroup[1];
                            }
                            if (self.actionDetails.$leftCol) {
                                self.setWidth(self.actionDetails.$leftCol, leftWidth);
                                var $contentLeftCol = bodyGroup[self.actionDetails.gripIndex];
                                self.setWidth($contentLeftCol, leftWidth);
                                if (self.sumWrappers.length > 0) {
                                    var $sumLeftCol = sumGroup[self.actionDetails.gripIndex];
                                    self.setWidth($sumLeftCol, leftWidth);
                                }
                                if (leftAreaWidth) {
                                    self.setWidth(self.headerWrappers[0], leftAreaWidth);
                                    self.setWidth(self.bodyWrappers[0], leftAreaWidth);
                                    if (self.sumWrappers.length > 0)
                                        self.setWidth(self.sumWrappers[0], leftAreaWidth);
                                    kt._widths._fixed = leftAreaWidth;
                                }
                            }
                            if (self.actionDetails.$rightCol) {
                                self.setWidth(self.actionDetails.$rightCol, rightWidth);
                                var $contentRightCol = bodyGroup[self.actionDetails.gripIndex + 1];
                                self.setWidth($contentRightCol, rightWidth);
                                if (self.sumWrappers.length > 0) {
                                    var $sumRightCol = sumGroup[self.actionDetails.gripIndex + 1];
                                    self.setWidth($sumRightCol, rightWidth);
                                }
                            }
                            if (rightAreaWidth) {
                                self.setWidth(self.headerWrappers[1], rightAreaWidth);
                                self.setWidth(self.bodyWrappers[1], rightAreaWidth + ti.getScrollWidth());
                                self.headerWrappers[1].style.left = leftAlign + "px";
                                self.bodyWrappers[1].style.left = leftAlign + "px";
                                if (self.sumWrappers.length > 0) {
                                    self.setWidth(self.sumWrappers[1], rightAreaWidth);
                                    self.sumWrappers[1].style.left = leftAlign + "px";
                                }
                                kt._widths._unfixed = rightAreaWidth;
                            }
                        };
                        /**
                         * Cursor up.
                         */
                        ColumnAdjuster.prototype.cursorUp = function (event) {
                            var self = this;
                            self.$ownerDoc.removeXEventListener(ssk.MOUSE_MOVE);
                            self.$ownerDoc.removeXEventListener(ssk.MOUSE_UP);
                            self.syncLines();
                            var leftCol, rightCol, tidx = self.actionDetails.gripIndex;
                            if (!_vessel() || !_vessel().desc) {
                                self.actionDetails = null;
                                return;
                            }
                            if (self.actionDetails.isFixed) {
                                _.forEach(_fixedHiddenColumns, function (c) {
                                    var idx = _vessel().desc.fixedColIdxes[c];
                                    if (parseFloat(idx) <= self.actionDetails.gripIndex) {
                                        tidx++;
                                    }
                                });
                                _.forEach(_.keys(_vessel().desc.fixedColIdxes), function (k) {
                                    var i = parseFloat(_vessel().desc.fixedColIdxes[k]);
                                    if (i === tidx) {
                                        leftCol = k;
                                        if (self.actionDetails.breakArea || (leftCol && rightCol))
                                            return false;
                                        return;
                                    }
                                    if (!self.actionDetails.breakArea && i === tidx + 1) {
                                        rightCol = k;
                                        if (leftCol && rightCol)
                                            return false;
                                    }
                                });
                                replenLargeur(leftCol, self.actionDetails.changedWidths.left, "reparer");
                                if (!self.actionDetails.breakArea) {
                                    replenLargeur(rightCol, self.actionDetails.changedWidths.right, "reparer");
                                }
                            }
                            else {
                                _.forEach(_.keys(_vessel().desc.colIdxes), function (k) {
                                    var i = parseFloat(_vessel().desc.colIdxes[k]);
                                    if (i === self.actionDetails.gripIndex) {
                                        leftCol = k;
                                    }
                                    else if (i === self.actionDetails.gripIndex + 1) {
                                        rightCol = k;
                                    }
                                    if (leftCol && rightCol)
                                        return false;
                                });
                                replenLargeur(leftCol, self.actionDetails.changedWidths.left);
                                if (rightCol) {
                                    replenLargeur(rightCol, self.actionDetails.changedWidths.right);
                                }
                            }
                            self.actionDetails = null;
                        };
                        /**
                         * Set width.
                         */
                        ColumnAdjuster.prototype.setWidth = function ($col, width) {
                            $col.style.width = parseFloat(width) + "px";
                        };
                        /**
                         * Sync lines.
                         */
                        ColumnAdjuster.prototype.syncLines = function () {
                            var i, self = this;
                            if (self.actionDetails.isFixed)
                                i = 0;
                            else if (self.headerWrappers.length > 1)
                                i = 1;
                            else
                                i = 0;
                            self.$agency.style.width = self.headerWrappers[i].style.width;
                            var left = 0, group = self.headerColGroup[i];
                            _.forEach(group, function ($td, index) {
                                if ($td.style.display === "none" /*|| (!self.actionDetails.isFixed && index === group.length - 1)*/)
                                    return;
                                left += parseFloat($td.style.width);
                                if (index < self.actionDetails.gripIndex)
                                    return;
                                if (self.unshiftRight && index > self.actionDetails.gripIndex)
                                    return false;
                                var lineArr = self.actionDetails.isFixed ? self.fixedLines : self.lines;
                                var div = lineArr[index];
                                div.style.left = left + "px";
                            });
                        };
                        return ColumnAdjuster;
                    }());
                    kt.ColumnAdjuster = ColumnAdjuster;
                    /**
                     * Get cursorX.
                     */
                    function getCursorX(event) {
                        return event.pageX;
                    }
                    /**
                     * ReplenLargeur.
                     */
                    function replenLargeur(column, width, sht) {
                        var storeKey = getStoreKey(), wdec = uk.localStorage.getItem(storeKey);
                        if (!wdec.isPresent())
                            return;
                        wdec = JSON.parse(wdec.get());
                        if (!wdec)
                            return;
                        wdec[_.isNil(sht) ? _currentSheet : sht][column] = parseFloat(width);
                        uk.localStorage.setItemAsJson(storeKey, wdec);
                    }
                    kt.replenLargeur = replenLargeur;
                    /**
                     * TurfSurf.
                     */
                    function turfSurf(cols, reparer, saving) {
                        var newly, size, key = reparer ? "reparer" : _currentSheet, storeKey = getStoreKey(), wdef = uk.localStorage.getItem(storeKey), reset = saving ? saving.reset : false;
                        if (!wdef.isPresent()) {
                            wdef = {};
                            wdef[key] = {};
                            _.forEach(cols, function (c) {
                                wdef[key][c.key] = parseFloat(c.width);
                            });
                            uk.localStorage.setItemAsJson(storeKey, wdef);
                            return;
                        }
                        var setLargeur = function (columns, data) {
                            _.forEach(columns, function (c) {
                                if (c.group) {
                                    setLargeur(c.group, data);
                                    return;
                                }
                                var largeur = data[c.key];
                                if (!_.isNil(largeur)) {
                                    if (!reset)
                                        c.width = parseFloat(largeur) + "px";
                                    else {
                                        data[c.key] = parseFloat(c.width);
                                        newly = true;
                                    }
                                }
                                else {
                                    data[c.key] = parseFloat(c.width);
                                    newly = true;
                                }
                            });
                        };
                        var setNewLargeur = function (columns, data) {
                            _.forEach(columns, function (c) {
                                if (c.group) {
                                    setNewLargeur(c.group, data);
                                }
                                else {
                                    data[c.key] = parseFloat(c.width);
                                }
                            });
                        };
                        wdef = JSON.parse(wdef.get());
                        if ((size = wdef[key])) {
                            setLargeur(cols, size);
                            if (newly) {
                                uk.localStorage.setItemAsJson(storeKey, wdef);
                            }
                        }
                        else {
                            wdef[key] = {};
                            setNewLargeur(cols, wdef[key]);
                            uk.localStorage.setItemAsJson(storeKey, wdef);
                        }
                    }
                    kt.turfSurf = turfSurf;
                    /**
                     * ScreenLargeur.
                     */
                    function screenLargeur(noRowsMin, noRowsMax) {
                        if (!_headerWrappers || _headerWrappers.length === 0)
                            return;
                        var width, height = window.innerHeight - _remainHeight - parseFloat(_headerHeight), btmw;
                        var pageDiv = _$grid[0].querySelector("." + gp.PAGING_CLS);
                        var sheetDiv = _$grid[0].querySelector("." + gp.SHEET_CLS);
                        if (_headerWrappers.length > 1) {
                            width = window.innerWidth - _remainWidth - _maxFixedWidth;
                            _flexFitWidth = Math.min(width + ti.getScrollWidth(), parseFloat(_bodyWrappers[1].style.maxWidth));
                            btmw = _maxFixedWidth + _flexFitWidth + 2;
                            _headerWrappers[1].style.width = width + "px";
                            _bodyWrappers[1].style.width = (width + ti.getScrollWidth()) + "px";
                            height -= ((pageDiv ? gp.PAGE_HEIGHT : 0) + (sheetDiv ? gp.SHEET_HEIGHT : 0));
                            if (!_.isNil(noRowsMin) && !_.isNil(noRowsMax)) {
                                noRowsMin = parseFloat(noRowsMin);
                                noRowsMax = parseFloat(noRowsMax);
                                var size = _dataSource.length, no = Math.min(Math.max(size, noRowsMin), noRowsMax);
                                height = no * BODY_ROW_HEIGHT + 19;
                            }
                            var vari_1 = height - parseFloat(_bodyWrappers[0].style.height);
                            if (_sumWrappers && _sumWrappers.length > 1) {
                                _sumWrappers[1].style.width = width + "px";
                                height += SUM_HEIGHT;
                                vari_1 += SUM_HEIGHT;
                                _sumWrappers[0].style.top = (parseFloat(_sumWrappers[0].style.top) + vari_1) + "px";
                                _sumWrappers[1].style.top = (parseFloat(_sumWrappers[1].style.top) + vari_1) + "px";
                            }
                            if (pageDiv) {
                                pageDiv.style.width = btmw + "px";
                                pageDiv.style.top = (parseFloat(pageDiv.style.top) + vari_1) + "px";
                            }
                            if (sheetDiv) {
                                sheetDiv.style.width = btmw + "px";
                                sheetDiv.style.top = (parseFloat(sheetDiv.style.top) + vari_1) + "px";
                                var sheetBtn = sheetDiv.querySelector(".mgrid-sheet-buttonlist");
                                var scrollbar = sheetDiv.querySelector(".mgrid-sheet-scrollbar");
                                if (sheetBtn.offsetHeight <= gp.SHEET_HEIGHT) {
                                    scrollbar.classList.add("ui-state-disabled");
                                }
                                else
                                    scrollbar.classList.remove("ui-state-disabled");
                            }
                            _bodyWrappers[0].style.height = height + "px";
                            _bodyWrappers[1].style.height = height + "px";
                            return;
                        }
                        width = window.innerWidth - _remainWidth;
                        btmw = Math.min(width + ti.getScrollWidth(), parseFloat(_bodyWrappers[0].style.maxWidth));
                        _flexFitWidth = btmw;
                        _headerWrappers[0].style.width = width + "px";
                        _bodyWrappers[0].style.width = (width + ti.getScrollWidth()) + "px";
                        height -= ((pageDiv ? gp.PAGE_HEIGHT : 0) + (sheetDiv ? gp.SHEET_HEIGHT : 0));
                        if (!_.isNil(noRowsMin) && !_.isNil(noRowsMax)) {
                            noRowsMin = parseFloat(noRowsMin);
                            noRowsMax = parseFloat(noRowsMax);
                            var size = _dataSource.length, no = Math.min(Math.max(size, noRowsMin), noRowsMax);
                            height = no * BODY_ROW_HEIGHT + 19;
                        }
                        var vari = height - parseFloat(_bodyWrappers[0].style.height);
                        if (_sumWrappers && _sumWrappers.length > 0) {
                            _sumWrappers[0].style.width = width + "px";
                            height += SUM_HEIGHT;
                            vari += SUM_HEIGHT;
                            _sumWrappers[0].style.top = (parseFloat(_sumWrappers[0].style.top) + vari) + "px";
                        }
                        if (pageDiv) {
                            pageDiv.style.width = btmw + "px";
                            pageDiv.style.top = (parseFloat(pageDiv.style.top) + vari) + "px";
                        }
                        if (sheetDiv) {
                            sheetDiv.style.width = btmw + "px";
                            sheetDiv.style.top = (parseFloat(sheetDiv.style.top) + vari) + "px";
                        }
                        _bodyWrappers[0].style.height = height + "px";
                    }
                    kt.screenLargeur = screenLargeur;
                    /**
                     * Get storeKey.
                     */
                    function getStoreKey() {
                        return uk.request.location.current.rawUrl + "/" + _$grid.attr("id");
                    }
                })(kt || (kt = {}));
                var lo;
                (function (lo) {
                    lo.MPART = "mPart";
                    lo.VIEW = "mView";
                    lo.LAST_SELECT = "mLastSelect";
                    lo.DESC = "mDescription";
                    lo.CBX_SELECTED = "selectedValue";
                    lo.CBX_SELECTED_TD = "code";
                    lo.CBX_ITEM_VALUE = "value";
                    $.widget("md.mGrid", {
                        options: {
                            widthMem: null
                        },
                        _create: function () {
                            this.element[0].addXEventListener("falcon", function (evt) {
                                if (!evt.detail) {
                                    extraireErrors();
                                    return;
                                }
                                trier(evt.detail[0], evt.detail[1], evt.detail[2]);
                            });
                        },
                        directEnter: function (direct) {
                            this.element.data("enterDirect", direct);
                        },
                        dataSource: function (a) {
                            var ds = _.cloneDeep(_dataSource);
                            if (a) {
                                if (!ds)
                                    ds = [];
                                _.forEach(_.keys(_mafollicle), function (k) {
                                    if (k === SheetDef || Number(k) === _currentPage || k === _currentPage)
                                        return;
                                    _.forEach(_mafollicle[k].dataSource, function (s) {
                                        ds.push(_.cloneDeep(s));
                                    });
                                });
                            }
                            return ds;
                        },
                        insertions: function () {
                            return _.cloneDeep(v._encarRows);
                        },
                        errors: function (a) {
                            var res = _.cloneDeep(_errors);
                            if (a) {
                                _.forEach(_.keys(_mafollicle), function (k) {
                                    if (k === SheetDef)
                                        return;
                                    _.forEach(_.keys(_mafollicle[SheetDef]), function (d) {
                                        var f = _mafollicle[k][d];
                                        if (!f || ((Number(k) === _currentPage || k === _currentPage) && d === _currentSheet))
                                            return;
                                        _.forEach(f.errors, function (e) {
                                            res.push(_.cloneDeep(e));
                                        });
                                    });
                                });
                            }
                            return res;
                        },
                        disableNtsControlAt: function (id, key, $cell, hidden) {
                            var dc = [];
                            if (!$cell) {
                                var idx_1 = _.findIndex(_dataSource, function (r) { return r[_pk] === id; });
                                if (_.isNil(idx_1))
                                    return;
                                _.forEach(_.keys(_mafollicle), function (k) {
                                    if (k === SheetDef)
                                        return;
                                    _.forEach(_.keys(_mafollicle[SheetDef]), function (d) {
                                        var f = _mafollicle[k][d], c;
                                        if (f) {
                                            c = lch.cellAt(_$grid[0], idx_1, key, f.desc, hidden);
                                            if (c)
                                                dc.push(c);
                                        }
                                    });
                                    if (dc.length > 0)
                                        return false;
                                });
                            }
                            else
                                dc.push($cell);
                            if (dc.length === 0) {
                                //                    if (_.find(_cstifle(), c => c.key === key)) {
                                color.pushState(id, key, color.Disable);
                                //                    }
                                return;
                            }
                            dc.forEach(function ($cell) {
                                if ($cell.classList.contains(color.Disable))
                                    return;
                                $cell.classList.add(color.Disable);
                                switch (dkn.controlType[key]) {
                                    case dkn.LABEL:
                                        $cell.innerHTML = "";
                                        break;
                                    case dkn.LINK_LABEL:
                                        var link = $cell.querySelector(".mlink-button");
                                        if (link) {
                                            link.removeXEventListener(ssk.CLICK_EVT);
                                            link.style.color = "#333";
                                            link.style.cursor = "default";
                                        }
                                        break;
                                    case dkn.BUTTON:
                                    case dkn.DELETE_BUTTON:
                                    case dkn.REFER_BUTTON:
                                        var btn = $cell.querySelector(".mbutton");
                                        if (btn)
                                            btn.disabled = true;
                                        break;
                                    case dkn.FLEX_IMAGE:
                                    case dkn.IMAGE:
                                        var img = $cell.querySelector("span");
                                        if (img) {
                                            img.removeXEventListener(ssk.CLICK_EVT);
                                            img.style.cursor = "default";
                                        }
                                        break;
                                    case dkn.CHECKBOX:
                                        var check = $cell.querySelector("input");
                                        if (check) {
                                            check.setAttribute("disabled", "disabled");
                                        }
                                        break;
                                }
                            });
                            color.pushState(id, key, color.Disable);
                        },
                        enableNtsControlAt: function (id, key, $cell, hidden) {
                            var dc = [];
                            if (!$cell) {
                                var idx_2 = _.findIndex(_dataSource, function (r) { return r[_pk] === id; });
                                if (_.isNil(idx_2))
                                    return;
                                _.forEach(_.keys(_mafollicle), function (k) {
                                    if (k === SheetDef)
                                        return;
                                    _.forEach(_.keys(_mafollicle[SheetDef]), function (d) {
                                        var f = _mafollicle[k][d], c;
                                        if (f) {
                                            c = lch.cellAt(_$grid[0], idx_2, key, f.desc, hidden);
                                            if (c)
                                                dc.push(c);
                                        }
                                    });
                                    if (dc.length > 0)
                                        return false;
                                });
                            }
                            else
                                dc.push($cell);
                            if (dc.length === 0) {
                                //                    if (_.find(_cstifle(), c => c.key === key)) {
                                color.popState(id, key, color.Disable);
                                //                    }
                                return;
                            }
                            dc.forEach(function ($cell) {
                                if (!$cell.classList.contains(color.Disable))
                                    return;
                                $cell.classList.remove(color.Disable);
                                switch (dkn.controlType[key]) {
                                    case dkn.LABEL:
                                        var label = $.data($cell, v.DATA);
                                        $cell.innerHTML = _.isNil(label) ? "" : label;
                                        break;
                                    case dkn.LINK_LABEL:
                                        var link = $cell.querySelector(".mlink-button");
                                        if (link) {
                                            link.addXEventListener(ssk.CLICK_EVT, $.data(link, ssk.CLICK_EVT));
                                            link.style.color = "#0066CC";
                                            link.style.cursor = "pointer";
                                        }
                                        break;
                                    case dkn.BUTTON:
                                    case dkn.DELETE_BUTTON:
                                    case dkn.REFER_BUTTON:
                                        var btn = $cell.querySelector(".mbutton");
                                        if (btn) {
                                            btn.disabled = false;
                                            var hdl = $.data(btn, ssk.CLICK_EVT);
                                            if (hdl) {
                                                btn.removeXEventListener(ssk.CLICK_EVT);
                                                btn.addXEventListener(ssk.CLICK_EVT, hdl);
                                            }
                                        }
                                        break;
                                    case dkn.FLEX_IMAGE:
                                    case dkn.IMAGE:
                                        var img = $cell.querySelector("span");
                                        if (img) {
                                            img.addXEventListener(ssk.CLICK_EVT, $.data(img, ssk.CLICK_EVT));
                                            img.style.cursor = "pointer";
                                        }
                                        break;
                                    case dkn.CHECKBOX:
                                        var check = $cell.querySelector("input");
                                        if (check) {
                                            check.removeAttribute("disabled");
                                        }
                                        break;
                                }
                            });
                            color.popState(id, key, color.Disable);
                        },
                        setState: function (id, key, states) {
                            var self = this;
                            var idx = _.findIndex(_dataSource, function (r) { return r[_pk] === id; });
                            if (_.isNil(idx))
                                return;
                            var $cell = lch.cellAt(_$grid[0], idx, key);
                            var ftPrint = false, cloneStates = _.cloneDeep(states), setShtCellState = function ($c) {
                                var disabled;
                                if (states && states.length !== cloneStates.length) {
                                    states = _.cloneDeep(cloneStates);
                                }
                                _.forEach(states, function (s) {
                                    if (s === color.Disable) {
                                        self.disableNtsControlAt(id, key, $c);
                                        disabled = true;
                                        return;
                                    }
                                    else if (s === color.ManualEditTarget || s === color.ManualEditOther) {
                                        $.data($c, v.INIT_MAN_EDIT, s);
                                    }
                                    if (!$c.classList.contains(s))
                                        $c.classList.add(s);
                                });
                                if (disabled)
                                    _.remove(states, function (s) { return s === color.Disable; });
                                if (!ftPrint) {
                                    color.pushState(id, key, states);
                                    ftPrint = true;
                                }
                            };
                            if ($cell) {
                                setShtCellState($cell);
                            }
                            _.forEach(_.keys(_mafollicle[SheetDef]), function (s) {
                                if (s === _currentSheet)
                                    return;
                                var tidx, maf = _mafollicle[_currentPage][s];
                                if (maf && maf.desc && maf.desc.fixedColIdxes
                                    && !_.isNil(tidx = maf.desc.fixedColIdxes[key])) {
                                    $cell = maf.desc.fixedRows[idx][tidx];
                                    if ($cell)
                                        setShtCellState($cell);
                                }
                                else if (maf && maf.desc && maf.desc.colIdxes
                                    && !_.isNil(tidx = maf.desc.colIdxes[key])) {
                                    $cell = maf.desc.rows[idx][tidx];
                                    if ($cell)
                                        setShtCellState($cell);
                                }
                            });
                            if (!ftPrint)
                                color.pushState(id, key, states);
                        },
                        clearState: function (idArr) {
                            var self = this;
                            var cleanOthShtCellElm = function (id, c, states) {
                                if (!c)
                                    return;
                                var coord = ti.getCellCoord(c);
                                if (!states)
                                    states = color.ALL;
                                states.forEach(function (s) {
                                    if (c.classList.contains(s)) {
                                        if (s === color.Disable) {
                                            self.enableNtsControlAt(id, coord.columnKey, c);
                                        }
                                        c.classList.remove(s);
                                    }
                                });
                                color.popState(id, coord.columnKey, states);
                            };
                            var clean = function (id, key, states) {
                                var idx = _.findIndex(_dataSource, function (r) { return r[_pk] === id; });
                                if (!_.isNil(key)) {
                                    var c = lch.cellAt(_$grid[0], idx, key);
                                    cleanOthShtCellElm(id, c, states);
                                }
                                else {
                                    var row = lch.rowAt(_$grid[0], idx);
                                    _.forEach(row, function (c) {
                                        cleanOthShtCellElm(id, c);
                                    });
                                }
                                _.forEach(_.keys(_mafollicle[SheetDef]), function (s) {
                                    if (s === _currentSheet)
                                        return;
                                    var maf = _mafollicle[_currentPage][s];
                                    if (maf && maf.desc) {
                                        if (!_.isNil(key)) {
                                            var c = lch.cellAt(_$grid[0], idx, key, maf.desc);
                                            cleanOthShtCellElm(id, c, states);
                                        }
                                        else {
                                            var othShtRow = lch.rowAt(_$grid[0], idx, maf.desc);
                                            _.forEach(othShtRow, function (c) {
                                                cleanOthShtCellElm(id, c);
                                            });
                                        }
                                    }
                                    else
                                        cleanOthSht(id, _mafollicle[SheetDef][s].columns, states);
                                });
                            };
                            var cleanOthSht = function (id, cols, states) {
                                if (!states) {
                                    states = color.ALL;
                                }
                                _.forEach(cols, function (c) {
                                    if (c.group) {
                                        cleanOthSht(id, c.group, states);
                                        return;
                                    }
                                    color.popState(id, c.key, states);
                                });
                            };
                            if (arguments.length > 1) {
                                clean(idArr, arguments[1], arguments[2]);
                            }
                            else {
                                if (idArr && !_.isArray(idArr)) {
                                    clean(idArr);
                                    return;
                                }
                                _.forEach(idArr, function (id) {
                                    clean(id);
                                });
                            }
                        },
                        hideZero: function (val) {
                            if (changeZero(val)) {
                                _zeroHidden = val;
                                if (_vessel())
                                    _vessel().zeroHidden = val;
                            }
                        },
                        updatedCells: function (a) {
                            var arr = [];
                            var toNumber = false, column = _columnsMap[_pk];
                            if ((column && _.toLower(column[0].dataType) === "number")
                                || _.toLower(_pkType) === "number") {
                                toNumber = true;
                            }
                            _.forEach(Object.keys(_dirties), function (r) {
                                _.forEach(Object.keys(_dirties[r]), function (c) {
                                    arr.push({ rowId: (toNumber ? parseFloat(r) : r), columnKey: c, value: _dirties[r][c] });
                                });
                            });
                            if (a) {
                                _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                                    if (k === _currentSheet)
                                        return;
                                    var maf = _mafollicle[_currentPage][k];
                                    if (!maf || !maf.dirties)
                                        return;
                                    _.forEach(_.keys(maf.dirties), function (r) {
                                        _.forEach(_.keys(maf.dirties[r]), function (c) {
                                            arr.push({ rowId: (toNumber ? parseFloat(r) : r), columnKey: c, value: maf.dirties[r][c] });
                                        });
                                    });
                                });
                            }
                            return arr;
                        },
                        showColumn: function (col, ufx) {
                            if (!_vessel() || !_vessel().desc)
                                return;
                            var $col, i = !ufx ? _vessel().desc.fixedColIdxes[col] : _vessel().desc.colIdxes[col];
                            if (_.isNil(i))
                                return;
                            var hCols, bCols, sCols, header = _$grid[0].querySelector("." + (!ufx ? FIXED : FREE) + "." + HEADER);
                            if (header) {
                                hCols = header.querySelectorAll("col");
                                $col = hCols[i];
                                if ($col && $col.style.display === "none") {
                                    $col.style.display = "";
                                }
                                else
                                    return;
                                var headerCols = header.querySelectorAll("td");
                                $col = headerCols[i];
                                if ($col && $col.style.display === "none") {
                                    $col.style.display = "";
                                }
                                _.remove(!ufx ? _fixedHiddenColumns : _hiddenColumns, function (c) { return c === col; });
                            }
                            var body = _$grid[0].querySelector("." + (!ufx ? FIXED : FREE) + ":not(." + HEADER + ")");
                            if (body) {
                                bCols = body.querySelectorAll("col");
                                $col = bCols[i];
                                if ($col && $col.style.display === "none") {
                                    $col.style.display = "";
                                }
                                _.forEach(!ufx ? _vessel().desc.fixedRows : _vessel().desc.rows, function (r) {
                                    if (!r)
                                        return;
                                    var a = r[i];
                                    if (a && a.style.display === "none") {
                                        a.style.display = "";
                                    }
                                });
                                var colWidth_1 = parseFloat($col.style.width);
                                if (!ufx) {
                                    _maxFixedWidth += colWidth_1;
                                    kt._widths._fixed = _maxFixedWidth;
                                    _.forEach(_.slice(_$grid[0].querySelectorAll("." + FREE)), function (t) {
                                        if (!t)
                                            return;
                                        var width = parseFloat(t.style.width), left = parseFloat(t.style.left);
                                        t.style.width = (width - colWidth_1) + "px";
                                        t.style.left = (left + colWidth_1) + "px";
                                    });
                                    var sum = _$grid[0].querySelector("." + FIXED + "-summaries");
                                    if (sum) {
                                        sCols = sum.querySelectorAll("col");
                                        $col = sCols[i];
                                        if ($col && $col.style.display === "none") {
                                            $col.style.display = "";
                                        }
                                        var cols = sum.querySelectorAll("td");
                                        $col = cols[i];
                                        if ($col && $col.style.display === "none") {
                                            $col.style.display = "";
                                        }
                                        var dSum = _$grid[0].querySelector("." + FREE + "-summaries");
                                        if (dSum) {
                                            var width = parseFloat(dSum.style.width), left = parseFloat(dSum.style.left);
                                            dSum.style.width = (width - colWidth_1) + "px";
                                            dSum.style.left = (left + colWidth_1) + "px";
                                        }
                                        sum.style.width = _maxFixedWidth + "px";
                                    }
                                    header.style.width = _maxFixedWidth + "px";
                                    body.style.width = _maxFixedWidth + "px";
                                }
                                else {
                                    _maxFreeWidth += colWidth_1;
                                    kt._widths._unfixed = _maxFreeWidth;
                                    _.forEach(_.slice(_$grid[0].querySelectorAll("." + FREE)), function (t) {
                                        if (!t)
                                            return;
                                        var width = parseFloat(t.style.maxWidth);
                                        t.style.maxWidth = (width + colWidth_1) + "px";
                                    });
                                    var sum = _$grid[0].querySelector("." + FREE + "-summaries");
                                    if (sum) {
                                        sCols = sum.querySelectorAll("col");
                                        $col = sCols[i];
                                        if ($col && $col.style.display === "none") {
                                            $col.style.display = "";
                                        }
                                        var cols = sum.querySelectorAll("td");
                                        $col = cols[i];
                                        if ($col && $col.style.display === "none") {
                                            $col.style.display = "";
                                        }
                                        var width = parseFloat(sum.style.maxWidth);
                                        sum.style.maxWidth = (width + colWidth_1) + "px";
                                    }
                                }
                                if (kt._adjuster) {
                                    kt._adjuster.nostal(_.slice(hCols), _.slice(bCols), _.slice(sCols), !ufx ? true : false);
                                    kt._adjuster.handle();
                                }
                                _cloud.painter.painters[!_hasFixed || !ufx ? 0 : 1].bubColumn(col, i);
                            }
                        },
                        hideColumn: function (col, ufx) {
                            if (!_vessel() || !_vessel().desc)
                                return;
                            var $col, i = !ufx ? _vessel().desc.fixedColIdxes[col] : _vessel().desc.colIdxes[col];
                            if (_.isNil(i))
                                return;
                            var hCols, bCols, sCols, header = _$grid[0].querySelector("." + (!ufx ? FIXED : FREE) + "." + HEADER);
                            if (header) {
                                hCols = header.querySelectorAll("col");
                                $col = hCols[i];
                                if ($col && $col.style.display !== "none") {
                                    $col.style.display = "none";
                                }
                                else
                                    return;
                                var headerCols = header.querySelectorAll("td");
                                $col = headerCols[i];
                                if ($col && $col.style.display !== "none") {
                                    $col.style.display = "none";
                                }
                                !ufx ? _fixedHiddenColumns.add(col) : _hiddenColumns.add(col);
                            }
                            var body = _$grid[0].querySelector("." + (!ufx ? FIXED : FREE) + ":not(." + HEADER + ")");
                            if (body) {
                                bCols = body.querySelectorAll("col");
                                $col = bCols[i];
                                if ($col && $col.style.display !== "none") {
                                    $col.style.display = "none";
                                }
                                _.forEach(!ufx ? _vessel().desc.fixedRows : _vessel().desc.rows, function (r, y) {
                                    if (!r)
                                        return;
                                    var a = r[i];
                                    if (a && a.style.display !== "none") {
                                        a.style.display = "none";
                                        if (a.classList.contains(lch.CELL_SELECTED_CLS)) {
                                            a.classList.remove(lch.CELL_SELECTED_CLS);
                                            _.remove(_selected && _selected[y], function (cc) { return cc === col; });
                                        }
                                    }
                                });
                                var colWidth_2 = parseFloat($col.style.width);
                                if (!ufx) {
                                    _maxFixedWidth -= colWidth_2;
                                    kt._widths._fixed = _maxFixedWidth;
                                    _.forEach(_.slice(_$grid[0].querySelectorAll("." + FREE)), function (t) {
                                        if (!t)
                                            return;
                                        var width = parseFloat(t.style.width), left = parseFloat(t.style.left);
                                        t.style.width = (width + colWidth_2) + "px";
                                        t.style.left = (left - colWidth_2) + "px";
                                    });
                                    var sum = _$grid[0].querySelector("." + FIXED + "-summaries");
                                    if (sum) {
                                        sCols = sum.querySelectorAll("col");
                                        $col = sCols[i];
                                        if ($col && $col.style.display !== "none") {
                                            $col.style.display = "none";
                                        }
                                        var cols = sum.querySelectorAll("td");
                                        $col = cols[i];
                                        if ($col && $col.style.display !== "none") {
                                            $col.style.display = "none";
                                        }
                                        var dSum = _$grid[0].querySelector("." + FREE + "-summaries");
                                        if (dSum) {
                                            var width = parseFloat(dSum.style.width), left = parseFloat(dSum.style.left);
                                            dSum.style.width = (width + colWidth_2) + "px";
                                            dSum.style.left = (left - colWidth_2) + "px";
                                        }
                                        sum.style.width = _maxFixedWidth + "px";
                                    }
                                    header.style.width = _maxFixedWidth + "px";
                                    body.style.width = _maxFixedWidth + "px";
                                }
                                else {
                                    _maxFreeWidth -= colWidth_2;
                                    kt._widths._unfixed = _maxFreeWidth;
                                    _.forEach(_.slice(_$grid[0].querySelectorAll("." + FREE)), function (t) {
                                        if (!t)
                                            return;
                                        var width = parseFloat(t.style.maxWidth);
                                        t.style.maxWidth = (width - colWidth_2) + "px";
                                    });
                                    var sum = _$grid[0].querySelector("." + FREE + "-summaries");
                                    if (sum) {
                                        sCols = sum.querySelectorAll("col");
                                        $col = sCols[i];
                                        if ($col && $col.style.display !== "none") {
                                            $col.style.display = "none";
                                        }
                                        var cols = sum.querySelectorAll("td");
                                        $col = cols[i];
                                        if ($col && $col.style.display !== "none") {
                                            $col.style.display = "none";
                                        }
                                        var width = parseFloat(sum.style.maxWidth);
                                        sum.style.maxWidth = (width - colWidth_2) + "px";
                                    }
                                }
                                if (kt._adjuster) {
                                    kt._adjuster.nostal(_.slice(hCols), _.slice(bCols), _.slice(sCols), !ufx ? true : false);
                                    kt._adjuster.handle();
                                }
                                _cloud.painter.painters[!_hasFixed || !ufx ? 0 : 1].unbubColumn(col, i);
                            }
                        },
                        hideRow: function (idx) {
                            v.voilerRow(idx);
                        },
                        updateCell: function (id, key, val, reset, ackDis, ls) {
                            var idx = _.findIndex(_dataSource, function (r) { return r[_pk] === id; });
                            if (idx === -1 || _.isNil(idx))
                                return;
                            var $cell = lch.cellAt(_$grid[0], idx, key);
                            if (_.isNil($cell)) {
                                if (dkn.controlType[key] === dkn.TEXTBOX) {
                                    var col = _columnsMap[key];
                                    if (!col || col.length === 0)
                                        return;
                                    su.wedgeCell(_$grid[0], { rowIdx: idx, columnKey: key }, su.formatSave(col[0], val), reset);
                                }
                                else
                                    su.wedgeCell(_$grid[0], { rowIdx: idx, columnKey: key }, val, reset);
                                return idx;
                            }
                            if ((!ackDis && $cell.classList.contains(color.Disable)) || $cell.classList.contains(color.Lock))
                                return idx;
                            if (dkn.controlType[key] === dkn.TEXTBOX) {
                                var col = _columnsMap[key];
                                if (!col || col.length === 0)
                                    return;
                                var formatted = su.format(col[0], val);
                                $cell.innerHTML = _.isNil(formatted) ? "" : formatted;
                                var disFormat = su.formatSave(col[0], val);
                                su.wedgeCell(_$grid[0], { rowIdx: idx, columnKey: key }, disFormat, reset);
                                $.data($cell, v.DATA, disFormat);
                                if (_zeroHidden && ti.isZero(disFormat, key)) {
                                    $cell.innerHTML = "";
                                }
                            }
                            else if (dkn.controlType[key] === dkn.CHECKBOX) {
                                var check = $cell.querySelector("input[type='checkbox']");
                                if (!check)
                                    return;
                                if (val) { //&& check.getAttribute("checked") !== "checked") {
                                    check.setAttribute("checked", "checked");
                                    check.checked = true;
                                    var evt = document.createEvent("HTMLEvents");
                                    evt.initEvent("change", false, true);
                                    evt.resetValue = reset;
                                    evt.checked = val;
                                    check.dispatchEvent(evt);
                                }
                                else if (!val) { // && check.getAttribute("checked") === "checked") {
                                    check.removeAttribute("checked");
                                    check.checked = false;
                                    var evt = document.createEvent("HTMLEvents");
                                    evt.initEvent("change", false, true);
                                    evt.resetValue = reset;
                                    evt.checked = val;
                                    check.dispatchEvent(evt);
                                }
                            }
                            else if (dkn.controlType[key] === dkn.LINK_LABEL) {
                                var link = $cell.querySelector("a");
                                link.innerHTML = val;
                                su.wedgeCell(_$grid[0], { rowIdx: idx, columnKey: key }, val, reset);
                            }
                            else if (dkn.controlType[key] === dkn.FLEX_IMAGE) {
                                var $image = void 0;
                                if (!_.isNil(val) && val !== "") {
                                    var controlDef = void 0, controlMap = _mafollicle[SheetDef][_currentSheet].controlMap;
                                    if (!controlMap || !(controlDef = controlMap[key]))
                                        return;
                                    $image = document.createElement("span");
                                    $image.className = controlDef.source;
                                    if (controlDef.click && _.isFunction(controlDef.click)) {
                                        var clickHandle = controlDef.click.bind(null, key, id);
                                        $image.addXEventListener(ssk.CLICK_EVT, clickHandle);
                                        $image.style.cursor = "pointer";
                                        $.data($image, ssk.CLICK_EVT, clickHandle);
                                    }
                                    $cell.innerHTML = "";
                                    $cell.appendChild($image);
                                }
                                else {
                                    $image = $cell.querySelector("span");
                                    if ($image)
                                        ti.remove($image);
                                }
                                su.wedgeCell(_$grid[0], { rowIdx: idx, columnKey: key }, val, reset);
                            }
                            else if (dkn.controlType[key] === dkn.REFER_BUTTON) {
                                var content = val, txt = $cell.querySelector(".mgrid-refer-text");
                                var controlDef_1, controlMap = _mafollicle[SheetDef][_currentSheet].controlMap;
                                if (!controlMap || !(controlDef_1 = controlMap[key]))
                                    return;
                                if (ls) {
                                    (controlDef_1.pattern || {})[(controlDef_1.list || {})[id]] = val;
                                }
                                else if (txt) {
                                    if (controlDef_1.pattern && controlDef_1.list) {
                                        var itemList = controlDef_1.pattern[controlDef_1.list[id]], item = _.find(itemList, function (i) { return i[controlDef_1.optionsValue || "code"] === val; });
                                        if (item)
                                            content = item[controlDef_1.optionsText || "name"];
                                    }
                                    txt.innerHTML = _.isNil(content) ? "" : content;
                                    su.wedgeCell(_$grid[0], { rowIdx: idx, columnKey: key }, val, reset);
                                    $.data($cell, v.DATA, val);
                                }
                            }
                            else if (dkn.controlType[key] === dkn.LABEL) {
                                $cell.innerHTML = val;
                                su.wedgeCell(_$grid[0], { rowIdx: idx, columnKey: key }, val, reset);
                                $.data($cell, v.DATA, val);
                            }
                            else {
                                var cbx_1 = dkn.controlType[key];
                                if (!_.isObject(cbx_1))
                                    return;
                                if (cbx_1.type === dkn.COMBOBOX) {
                                    if (ls) {
                                        var panelz = void 0, listType = void 0, maxHeight_1 = 0, itemList_1 = [], $itemHolder_1 = document.createElement("ul"), controlDef_2, controlMap = _mafollicle[SheetDef][_currentSheet].controlMap;
                                        $itemHolder_1.classList.add("mcombo-listitemholder");
                                        if (!controlMap || !(controlDef_2 = controlMap[key]))
                                            return;
                                        if (cbx_1.optionsMap && !_.isNil(listType = cbx_1.optionsMap[id])) {
                                            panelz = listType + 1;
                                            cbx_1.optionsList[listType] = _.cloneDeep(val);
                                        }
                                        else {
                                            panelz = 0;
                                            cbx_1.options = _.cloneDeep(val);
                                        }
                                        var found_1, currentVal_1 = (_dataSource[idx] || {})[key];
                                        _.forEach(val, function (i) {
                                            var $item = document.createElement("li");
                                            $item.classList.add("mcombo-listitem");
                                            $item.classList.add("ui-state-default");
                                            var vali = i[controlDef_2.optionsValue];
                                            $.data($item, "value", vali);
                                            if (currentVal_1 === vali)
                                                found_1 = i;
                                            var $comboItem = dkn.createItem(vali, i[controlDef_2.optionsText], $item, controlDef_2.displayMode), $comboValue = cbx_1.my.querySelector(".mcombo-value");
                                            $item.addXEventListener(ssk.CLICK_EVT, function (evt) {
                                                var $combo = cbx_1.my.querySelector("." + dkn.CBX_CLS);
                                                $comboValue.innerHTML = "";
                                                $comboValue.appendChild($comboItem.cloneNode(true));
                                                _.forEach(itemList_1, function (i) {
                                                    if (i.classList.contains("selecteditem")) {
                                                        i.classList.remove("selecteditem");
                                                    }
                                                });
                                                var value = $.data($item, lo.CBX_ITEM_VALUE);
                                                $.data(cbx_1.my, lo.CBX_SELECTED, value);
                                                $item.classList.add("selecteditem");
                                                var $cbxCell = ti.closest(cbx_1.my, "." + v.CELL_CLS);
                                                if ($cbxCell) {
                                                    var bVal = $.data($cbxCell, lo.CBX_SELECTED_TD);
                                                    if (bVal !== value && _.isFunction(controlDef_2.inputProcess)) {
                                                        controlDef_2.inputProcess(value, id, _dataSource[idx]);
                                                    }
                                                    $.data($cbxCell, lo.CBX_SELECTED_TD, value);
                                                }
                                                dkn.closeDD(cbx_1.dropdown);
                                                $combo.classList.remove(dkn.CBX_ACTIVE_CLS);
                                                var coord = ti.getCellCoord($cbxCell);
                                                su.wedgeCell(_$grid[0], { rowIdx: coord.rowIdx, columnKey: key }, value);
                                                khl.clear({ id: _dataSource[coord.rowIdx][_pk], columnKey: coord.columnKey, element: $cbxCell });
                                                var sCol = _specialColumn[key];
                                                if (sCol) {
                                                    var $cCell = lch.cellAt(_$grid[0], coord.rowIdx, sCol);
                                                    if ($cCell) {
                                                        var column = _columnsMap[sCol];
                                                        var formatted = su.format(column[0], value);
                                                        $cCell.textContent = formatted;
                                                        su.wedgeCell(_$grid[0], { rowIdx: coord.rowIdx, columnKey: sCol }, value);
                                                        $.data($cCell, v.DATA, value);
                                                        khl.clear({ id: _dataSource[coord.rowIdx][_pk], columnKey: sCol, element: $cCell });
                                                    }
                                                }
                                            });
                                            $itemHolder_1.appendChild($item);
                                            itemList_1.add($item);
                                            maxHeight_1 += 26;
                                        });
                                        if (!val || val.length === 0) {
                                            $itemHolder_1.innerHTML = nts.uk.resource.getMessage("Msg_37");
                                            maxHeight_1 += 26;
                                        }
                                        var panel = cbx_1.panel[panelz];
                                        cbx_1.panel[panelz] = $itemHolder_1;
                                        cbx_1.maxHeight[panelz] = Math.min(104, maxHeight_1);
                                        if (!found_1) {
                                            $cell.textContent = "";
                                        }
                                        else if ($cell.textContent === "") {
                                            $cell.textContent = found_1[controlDef_2.optionsText];
                                        }
                                        // Reload combo list
                                        if (_mEditor && _mEditor.type === dkn.COMBOBOX && _mEditor.columnKey === key && _mEditor.rowIdx === idx) {
                                            var comboList = cbx_1.dropdown.querySelector(".mcombo-list");
                                            comboList.replaceChild($itemHolder_1, panel);
                                            cbx_1.dropdown.style.maxHeight = cbx_1.maxHeight[panelz] + "px";
                                            var items = cbx_1.dropdown.querySelectorAll(".mcombo-listitem");
                                            var $comboValue_1 = cbx_1.my.querySelector(".mcombo-value");
                                            var selected_2, code_1 = $.data($cell, lo.CBX_SELECTED_TD);
                                            _.forEach(items, function (i) {
                                                var value = $.data(i, lo.CBX_ITEM_VALUE);
                                                if (i.classList.contains("selecteditem")) {
                                                    i.classList.remove("selecteditem");
                                                }
                                                if (code_1 === value) {
                                                    var $item = i.querySelector(".mcombo-item");
                                                    if ($item) {
                                                        $comboValue_1.innerHTML = "";
                                                        $comboValue_1.appendChild($item.cloneNode(true));
                                                        i.classList.add("selecteditem");
                                                        selected_2 = true;
                                                    }
                                                }
                                            });
                                            if (!selected_2) {
                                                $comboValue_1.innerHTML = "";
                                                var empty = _prtDiv.cloneNode(true);
                                                empty.style.display = "inline-block";
                                                $comboValue_1.appendChild(empty);
                                            }
                                            dkn.openDD(cbx_1.dropdown, cbx_1.my);
                                        }
                                    }
                                    else {
                                        var y = void 0, options = void 0;
                                        if (cbx_1.optionsMap && !_.isNil(y = cbx_1.optionsMap[id])) {
                                            options = cbx_1.optionsList[y];
                                        }
                                        else
                                            options = cbx_1.options;
                                        var sel = _.find(options, function (o) { return o[cbx_1.optionsValue] === val; });
                                        if (_.isNil(val))
                                            val = null;
                                        su.wedgeCell(_$grid[0], { rowIdx: idx, columnKey: key }, val, reset);
                                        $.data($cell, lo.CBX_SELECTED_TD, val);
                                        $cell.textContent = sel ? sel[cbx_1.optionsText] : "";
                                    }
                                }
                                else if (cbx_1.type === dkn.DATE_PICKER) {
                                    var txt = void 0, mDate = moment.utc(val, cbx_1.format, true);
                                    if (cbx_1.formatType !== "ymd")
                                        txt = mDate.format(cbx_1.format[0]);
                                    var date = _.isNil(txt) ? (mDate.isValid() ? mDate.toDate() : mDate._i) : txt;
                                    if (_.isNil(date))
                                        date = null;
                                    su.wedgeCell(_$grid[0], { rowIdx: idx, columnKey: key }, date, reset);
                                    $.data($cell, v.DATA, date);
                                    $cell.innerHTML = _.isNil(txt) ? (mDate.isValid() ? mDate.format(cbx_1.format[0]) : (_.isNil(mDate._i) ? "" : mDate._i)) : txt;
                                }
                            }
                            return idx;
                        },
                        optionsList: function (id, key) {
                            var control = dkn.controlType[key], controlDef, listType, controlMap = _mafollicle[SheetDef][_currentSheet].controlMap;
                            if (!control || !controlMap || !(controlDef = controlMap[key]))
                                return null;
                            if (control === dkn.REFER_BUTTON) {
                                return (controlDef.pattern || {})[(controlDef.list || {})[id]] || null;
                            }
                            else if (_.isObject(control) && control.type === dkn.COMBOBOX) {
                                if (control.optionsMap && !_.isNil(listType = control.optionsMap[id])) {
                                    return control.optionsList[listType] || null;
                                }
                                else {
                                    return control.options || null;
                                }
                            }
                            return null;
                        },
                        checkAll: function (key, fixed) {
                            var idxes, rows;
                            if (fixed) {
                                idxes = _vessel().desc.fixedColIdxes;
                            }
                            else {
                                idxes = _vessel().desc.colIdxes;
                            }
                            var i = idxes[key];
                            if (_.isNil(i))
                                return;
                            _.forEach(_.keys(_mafollicle), function (k) {
                                if (k === SheetDef)
                                    return;
                                var st = _mafollicle[k][_currentSheet];
                                if (!st)
                                    return;
                                _.forEach(st.desc[fixed ? "fixedRows" : "rows"], function (r) {
                                    if (!r)
                                        return;
                                    var cell = r[i];
                                    if (cell) {
                                        var check = cell.querySelector("input[type='checkbox']");
                                        if (!cell.classList.contains(color.Disable) && !cell.classList.contains(color.Lock)
                                            && check && check.getAttribute("checked") !== "checked") {
                                            check.setAttribute("checked", "checked");
                                            check.checked = true;
                                            var evt = document.createEvent("HTMLEvents");
                                            evt.initEvent("change", false, true);
                                            evt.checked = true;
                                            evt.pg = k;
                                            check.dispatchEvent(evt);
                                        }
                                    }
                                });
                            });
                            if (!dkn.allCheck[key]) {
                                dkn.allCheck[key] = { stt: true };
                            }
                        },
                        uncheckAll: function (key, fixed) {
                            var idxes, rows;
                            if (fixed) {
                                idxes = _vessel().desc.fixedColIdxes;
                            }
                            else {
                                idxes = _vessel().desc.colIdxes;
                            }
                            var i = idxes[key];
                            if (_.isNil(i))
                                return;
                            _.forEach(_.keys(_mafollicle), function (k) {
                                if (k === SheetDef)
                                    return;
                                var st = _mafollicle[k][_currentSheet];
                                if (!st)
                                    return;
                                _.forEach(st.desc[fixed ? "fixedRows" : "rows"], function (r) {
                                    if (!r)
                                        return;
                                    var cell = r[i];
                                    if (cell) {
                                        var check = cell.querySelector("input[type='checkbox']");
                                        if (!cell.classList.contains(color.Disable) && !cell.classList.contains(color.Lock)
                                            && check && check.getAttribute("checked") === "checked") {
                                            check.removeAttribute("checked");
                                            check.checked = false;
                                            var evt = document.createEvent("HTMLEvents");
                                            evt.initEvent("change", false, true);
                                            evt.checked = false;
                                            evt.pg = k;
                                            check.dispatchEvent(evt);
                                        }
                                    }
                                });
                            });
                            if (!dkn.allCheck[key]) {
                                dkn.allCheck[key] = { stt: false };
                            }
                        },
                        headerText: function (key, text, parent) {
                            var rename = function (cols) {
                                var ret;
                                _.forEach(cols, function (c) {
                                    if (parent) {
                                        if (c.group && c.headerText === key) {
                                            c.headerText = text;
                                            ret = c;
                                            return false;
                                        }
                                        return;
                                    }
                                    if (c.group && (ret = rename(c.group, key, text))) {
                                        return false;
                                    }
                                    if (c.key === key) {
                                        c.headerText = text;
                                        ret = c;
                                        return false;
                                    }
                                });
                                return ret;
                            };
                            var found;
                            _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                                var cols = _mafollicle[SheetDef][k].columns;
                                if (cols) {
                                    found = rename(cols);
                                }
                            });
                            var colspan, tdList = _$grid[0].querySelectorAll("." + HEADER + "." + FREE + " td");
                            var replace = function (td) {
                                var done, coord = ti.getCellCoord(td);
                                colspan = td.getAttribute("colspan");
                                if (!parent && coord && coord.columnKey === key) {
                                    td.innerHTML = text;
                                    done = true;
                                }
                                else if (parent && !_.isNil(colspan) && td.textContent === key) {
                                    td.innerHTML = text;
                                    done = true;
                                }
                                return done;
                            };
                            _.forEach(tdList, function (td) {
                                if (replace(td))
                                    return false;
                            });
                            _.forEach(_.keys(_mafollicle), function (k) {
                                if (k === SheetDef)
                                    return;
                                _.forEach(_.keys(_mafollicle[k]), function (s) {
                                    if (s === _currentSheet)
                                        return;
                                    var body;
                                    if ((body = _mafollicle[k][s].$hBody)) {
                                        _.forEach(body.querySelectorAll("td"), function (td) {
                                            if (replace(td))
                                                return false;
                                        });
                                    }
                                });
                            });
                        },
                        replace: function (key, condition, value, dr) {
                            if (_.isNil(key) || !_.isFunction(condition) || !_.isFunction(value))
                                return;
                            _.forEach(_.keys(_mafollicle), function (k) {
                                if (k === SheetDef || (_.isNumber(_currentPage) && Number(k) !== _currentPage))
                                    return;
                                _.forEach(_mafollicle[k].dataSource, function (d, i) {
                                    if (!condition(d[key], d))
                                        return;
                                    var setVal = value(d[key], d);
                                    var maf = _mafollicle[k][_currentSheet], r;
                                    if (maf && maf.desc && (r = maf.desc.rows[i])) {
                                        khl.clear({ id: d[_pk], columnKey: key, element: r[maf.desc.colIdxes[key]] });
                                    }
                                    _$grid.mGrid("updateCell", d[_pk], key, setVal, false, !dr);
                                });
                            });
                        },
                        showHiddenRows: function () {
                            v.demoRows();
                        },
                        setErrors: function (errs, s, lockNotSet) {
                            if (!errs)
                                return;
                            var z = errs.length - 1;
                            s = !_.isNil(s) ? s : _currentSheet;
                            while (z >= 0) {
                                var e = _.cloneDeep(errs[z]), i = void 0, pi = Math.floor(e.index / _pageSize), y = e.index - (_.isString(_currentPage) ? 0 : pi * _pageSize), pmaf = _mafollicle[_.isString(_currentPage) ? _currentPage : pi], maf = pmaf[s], data = (pmaf.dataSource || [])[y];
                                if (data && lockNotSet
                                    && _.find(((_cellStates[data[_pk]] || {})[e.columnKey] || [{ state: [] }])[0].state, function (st) { return st === color.Lock || st === color.Disable; })) {
                                    z--;
                                    continue;
                                }
                                if (maf && maf.desc) {
                                    i = maf.desc.fixedColIdxes[e.columnKey];
                                    if (_.isNil(i)) {
                                        i = maf.desc.colIdxes[e.columnKey];
                                        if (!_.isNil(maf.desc.rows[y])) {
                                            e.element = maf.desc.rows[y][i];
                                        }
                                    }
                                    else {
                                        if (!_.isNil(maf.desc.fixedRows[y])) {
                                            e.element = maf.desc.fixedRows[y][i];
                                        }
                                    }
                                    if (e.element) {
                                        e.index = y;
                                        khl.set(e, e.message);
                                        errs.splice(z, 1);
                                        z--;
                                        continue;
                                    }
                                }
                                var p = _.isString(_currentPage) ? _currentPage : pi;
                                if (!maf) {
                                    _mafollicle[p][s] = {};
                                    maf = _mafollicle[p][s];
                                }
                                if (!maf.checkedErrors) {
                                    _mafollicle[p][s].checkedErrors = [e];
                                }
                                else
                                    _mafollicle[p][s].checkedErrors.push(e);
                                khl.set(e, e.message, 2);
                                z--;
                            }
                        },
                        clearErrors: function (errs, s) {
                            if (!errs)
                                return;
                            s = !_.isNil(s) ? s : _currentSheet;
                            _.forEach(errs, function (e) {
                                _.forEach(_.keys(_mafollicle), function (p) {
                                    if (p === SheetDef)
                                        return;
                                    var maf = _mafollicle[p][s];
                                    if (maf && maf.desc) {
                                        var y = _.findIndex(_mafollicle[p].dataSource, function (d) { return d[_pk] === e.id; }), i = maf.desc.fixedColIdxes[e.columnKey];
                                        if (_.isNil(i)) {
                                            i = maf.desc.colIdxes[e.columnKey];
                                            if (!_.isNil(maf.desc.rows[y])) {
                                                e.element = maf.desc.rows[y][i];
                                            }
                                        }
                                        else if (!_.isNil(maf.desc.fixedRows[y])) {
                                            e.element = maf.desc.fixedRows[y][i];
                                        }
                                        if (e.element) {
                                            khl.clear(e);
                                        }
                                    }
                                    else {
                                        _.remove(maf && maf.checkedErrors, function (ce) { return ce.columnKey === e.columnKey && ce.id === e.id; });
                                    }
                                });
                            });
                        },
                        removeInsertions: function () {
                            v.eliminRows(_.cloneDeep(v._encarRows).sort(function (a, b) { return b - a; }));
                        },
                        validate: function (lock, check) {
                            var errors = [];
                            _.forEach(_.keys(_mafollicle), function (k) {
                                if (k === SheetDef)
                                    return;
                                _.forEach(_mafollicle[k].dataSource, function (data, i) {
                                    _.forEach(_cstifle(), function (c) {
                                        var validator = _validators[c.key];
                                        if (!validator || _.find(_hiddenColumns, function (hidden) { return hidden === c.key; }) || (_.isFunction(check) && !check(data))
                                            || (!lock && _.find(((_cellStates[data[_pk]] || {})[c.key] || [{ state: [] }])[0].state, function (st) { return st === color.Lock || st === color.Disable; })))
                                            return;
                                        var res = validator.probe(data[c.key], data[_pk]);
                                        if (res && !res.isValid) {
                                            var err = { id: data[_pk], index: i, columnKey: c.key, message: res.errorMessage };
                                            errors.push(err);
                                        }
                                    });
                                });
                            });
                            if (errors.length > 0) {
                                this.setErrors(errors);
                            }
                        },
                        columnOrder: function () {
                            var order = [];
                            if (_vessel().desc) {
                                var fixedLength_1 = 0;
                                ["fixedColIdxes", "colIdxes"].forEach(function (col, ord) {
                                    var idx = _vessel().desc[col];
                                    _.forEach(_.keys(idx), function (i) { return order[idx[i] + fixedLength_1] = i; });
                                    if (!ord)
                                        fixedLength_1 = _.keys(idx).length;
                                });
                            }
                            return order;
                        },
                        getCellValue: function (id, key) {
                            var idx = _.findIndex(_dataSource, function (r) { return r[_pk] === id; });
                            if (_.isNil(idx))
                                return;
                            return _dataSource[idx][key];
                        },
                        selectedSheet: function () {
                            return _currentSheet;
                        },
                        selectedPage: function () {
                            return _currentPage;
                        },
                        columnWidth: function (col, stt) {
                            var item = uk.localStorage.getItem(uk.request.location.current.rawUrl + "/" + _$grid.attr("id"));
                            if (item.isPresent() && col) {
                                var obj = JSON.parse(item.get());
                                var w = obj[stt ? "reparer" : _currentSheet][col];
                                return !_.isNil(w) ? w : -1;
                            }
                            return -1;
                        },
                        viewErrors: function () {
                            ssk.trigger(this.element[0], "falcon");
                        },
                        destroy: function () {
                            _maxFixedWidth = 0;
                            _maxFreeWidth = null;
                            _columnsMap = {};
                            _dataSource = null;
                            _secColumn = {};
                            _hasFixed = null;
                            _validators = {};
                            _mDesc = null;
                            _mEditor = null;
                            _cloud = null;
                            _hr = null;
                            _direction = null;
                            _errors = [];
                            _errorColumns = null;
                            _errorsOnPage = null;
                            kt._widths = {};
                            kt._columnWidths = {};
                            _$grid = null;
                            _pk = null;
                            _pkType = null;
                            _summaries = null;
                            _objId = null;
                            _getObjId = null;
                            dkn.allCheck = {};
                            khl._infobulle = null;
                            _hasSum = null;
                            _pageSize = null;
                            _currentPage = null;
                            _currentSheet = null;
                            _start = null;
                            _end = null;
                            v._voilerRows = {};
                            v._encarRows = [];
                            dkn.controlType = {};
                            _headerHeight = null;
                            _zeroHidden = null;
                            _paging = false;
                            _sheeting = false;
                            _copie = false;
                            _mafollicle = {};
                            kt._adjuster = null;
                            kt._fixedGroups = [];
                            _specialColumn = {};
                            _specialLinkColumn = {};
                            _fixedHiddenColumns = [];
                            _hiddenColumns = [];
                            _fixedColumns = null;
                            _selected = {};
                            _dirties = {};
                            _rid = {}, _headerWrappers = null;
                            _bodyWrappers = null;
                            _sumWrappers = null;
                            _fixedControlMap = {};
                            _cellStates = null;
                            _features = null;
                            _leftAlign = null;
                            _header = null;
                            _flexFitWidth = null;
                            this.element.html("");
                            this.element.removeData();
                            _histoire = [];
                            _linkage = [];
                            this.element[0].parentNode.replaceChild(this.element[0].cloneNode(), this.element[0]);
                        }
                    });
                    /**
                     * Change zero.
                     */
                    function changeZero(hide) {
                        var ves, desc, realVal;
                        if (_zeroHidden === hide)
                            return false;
                        if ((ves = _vessel()) && (desc = ves.desc)) {
                            _.forEach(desc.rows, function (r) {
                                _.forEach(r, function (c) {
                                    var key = ti.getCellCoord(c).columnKey;
                                    var control = dkn.controlType[key];
                                    if (control !== dkn.TEXTBOX)
                                        return;
                                    var content = $.data(c, v.DATA);
                                    if (hide && ti.isZero(content, key)) {
                                        c.textContent = "";
                                    }
                                    else if (!hide && c.textContent === "" && content !== "") {
                                        var format_2 = su.format(_columnsMap[key][0], content);
                                        c.textContent = format_2;
                                    }
                                });
                            });
                        }
                        return true;
                    }
                    lo.changeZero = changeZero;
                    /**
                     * Trier.
                     */
                    function trier(name, dType, desc) {
                        var media = [], data = [], i = 0;
                        var _loop_6 = function () {
                            var d = _dataSource.shift();
                            var v_2 = d[name];
                            if (dType === "FullDate" && !_.isNil(v_2)) {
                                v_2 = moment(v_2).format("YYYY/MM/DD");
                            }
                            //                if (name === "rowNumber" && _mafCurrent().rank) {
                            //                    v = _mafCurrent().rank[d[_pk]];
                            //                }
                            var item = { ca: _mDesc.rows.shift(), r: _mDesc.rowElements.shift(), d: d, od: _mafollicle[_currentPage].origDs.shift() };
                            if (!_.isNil(_mDesc.fixedRows)) {
                                item.fca = _mDesc.fixedRows.shift();
                                item.fr = _mDesc.fixedRowElements.shift();
                            }
                            _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                                var maf = _mafollicle[_currentPage][k];
                                if (k === _currentSheet || !maf || !maf.desc)
                                    return;
                                item[k] = { r: maf.desc.rowElements.shift(), ca: maf.desc.rows.shift() };
                                if (!_.isNil(maf.desc.fixedRows)) {
                                    item[k].fca = maf.desc.fixedRows.shift();
                                    item[k].fr = maf.desc.fixedRowElements.shift();
                                }
                            });
                            media[i] = item;
                            data.push({ i: i++, v: v_2 });
                        };
                        while (_dataSource.length > 0) {
                            _loop_6();
                        }
                        if (data.length === 0)
                            return;
                        var tfn, mi, coeff = desc ? -1 : 1, oton = {};
                        switch (dType) {
                            case "FullDate":
                            case "YearMonth":
                            default:
                                tfn = function (a, b) {
                                    if (_.isNil(a.v) && _.isNil(b.v))
                                        return 0;
                                    if (_.isNil(a.v))
                                        return -1 * coeff;
                                    if (_.isNil(b.v))
                                        return 1 * coeff;
                                    return a.v.compareTo(b.v) * coeff;
                                };
                                break;
                            case "Time":
                                tfn = function (a, b) {
                                    if (_.isNil(a.v) && _.isNil(b.v))
                                        return 0;
                                    if (_.isNil(a.v))
                                        return -1 * coeff;
                                    if (_.isNil(b.v))
                                        return 1 * coeff;
                                    return coeff * (ti.timeToMinutes(a.v) - ti.timeToMinutes(b.v));
                                };
                                break;
                            case "Number":
                                tfn = function (a, b) {
                                    if (_.isNil(a.v) && _.isNil(b.v))
                                        return 0;
                                    if (_.isNil(a.v))
                                        return -1 * coeff;
                                    if (_.isNil(b.v))
                                        return 1 * coeff;
                                    return coeff * (a.v - b.v);
                                };
                                break;
                        }
                        data.sort(tfn);
                        _.forEach(data, function (d, i) {
                            mi = media[d.i];
                            _dataSource[i] = mi.d;
                            _mafollicle[_currentPage].origDs[i] = mi.od;
                            if (d.i !== i)
                                oton[d.i] = i;
                            if (_.isNil(mi.r)) {
                                if (i >= _start && i <= _end) {
                                    var res = _cloud.painter.row(mi.d, v.DefaultRowConfig, i);
                                    if (res.fixedRow) {
                                        _mDesc.fixedRowElements[i] = res.fixedRow;
                                        _mDesc.fixedRows[i] = res.fixedElements;
                                    }
                                    _mDesc.rowElements[i] = res.row;
                                    _mDesc.rows[i] = res.elements;
                                }
                            }
                            else {
                                if (mi.fr) {
                                    $.data(mi.fr, lo.VIEW, i);
                                    _mDesc.fixedRowElements[i] = mi.fr;
                                    _mDesc.fixedRows[i] = mi.fca;
                                }
                                $.data(mi.r, lo.VIEW, i);
                                _mDesc.rowElements[i] = mi.r;
                                _mDesc.rows[i] = mi.ca;
                            }
                            _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                                var maf = _mafollicle[_currentPage][k];
                                if (k === _currentSheet || !maf || !maf.desc)
                                    return;
                                if (_.isNil(mi[k].r)) {
                                    if (i >= _start && i <= _end) {
                                        var painter = _mafollicle[SheetDef][k].ltrlPainter;
                                        if (!painter) {
                                            painter = _.cloneDeep(_cloud.sidePainter);
                                            painter.revive(k);
                                            _mafollicle[SheetDef][k].ltrlPainter = painter;
                                        }
                                        var res = painter.row(mi.d, v.DefaultRowConfig, i);
                                        if (_mDesc.fixedRowElements) {
                                            maf.desc.fixedRowElements[i] = _mDesc.fixedRowElements[i];
                                            maf.desc.fixedRows[i] = _mDesc.fixedRows[i];
                                        }
                                        maf.desc.rowElements[i] = res.row;
                                        maf.desc.rows[i] = res.elements;
                                    }
                                }
                                else {
                                    if (mi[k].fr) {
                                        maf.desc.fixedRowElements[i] = mi[k].fr;
                                        maf.desc.fixedRows[i] = mi[k].fca;
                                    }
                                    $.data(mi[k].r, lo.VIEW, i);
                                    maf.desc.rowElements[i] = mi[k].r;
                                    maf.desc.rows[i] = mi[k].ca;
                                }
                            });
                        });
                        _cloud.renderRows(true);
                        _vessel().$bBody = _bodyWrappers[_hasFixed ? 1 : 0].querySelector("tbody");
                        if (_.keys(oton).length > 0) {
                            _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                                var maf = _mafollicle[_currentPage][k];
                                if (!maf || !maf.desc)
                                    return;
                                _.forEach(maf.errors, function (e) {
                                    var z = oton[e.index];
                                    if (!_.isNil(z)) {
                                        e.index = z;
                                    }
                                });
                                _.forEach(maf.histoire, function (h) {
                                    _.forEach(h.o, function (o) {
                                        var z = oton[o.coord.rowIdx];
                                        if (!_.isNil(z)) {
                                            o.coord.rowIdx = z;
                                        }
                                    });
                                });
                                var vars = [], t = _.keys(maf.selected), c = 0;
                                while (t.length > 0) {
                                    var sk = t.shift(), z = oton[sk];
                                    if (!_.isNil(z)) {
                                        maf.selected[z] = maf.selected[sk];
                                        vars.push(z);
                                        if (!_.includes(vars, sk)) {
                                            delete maf.selected[sk];
                                        }
                                    }
                                }
                            });
                            if (v._voilerRows) {
                                var copyVoil_1 = _.cloneDeep(v._voilerRows);
                                _.forEach(_.keys(v._voilerRows), function (p) {
                                    v._voilerRows[p] = [];
                                });
                                _.forEach(_.keys(copyVoil_1), function (p) {
                                    _.forEach(copyVoil_1[p], function (l) {
                                        var z = oton[l];
                                        if (!_.isNil(z)) {
                                            var nama = Math.floor(z / (aho._bloc * 2 - 1));
                                            if (_.isNil(v._voilerRows[nama])) {
                                                v._voilerRows[nama] = [];
                                            }
                                            v._voilerRows[nama].push(z);
                                        }
                                        else
                                            v._voilerRows[p].push(l);
                                    });
                                });
                            }
                            if (v._encarRows && v._encarRows.length > 0) {
                                for (var ri = 0; ri < v._encarRows.length; ri++) {
                                    var z = oton[v._encarRows[ri]];
                                    if (!_.isNil(z)) {
                                        v._encarRows[ri] = z;
                                    }
                                }
                            }
                        }
                    }
                    function extraireErrors() {
                        if (!_errors || _errors.length === 0 || !_dataSource)
                            return;
                        var sorted = _.sortBy(_errors, "index"), rangee, length = sorted.length, y = length - 1, to = sorted.pop(), ordonnerList = {}, view, nv;
                        var _loop_7 = function (i) {
                            var fr, ni = i + length - y - 1, r = _mDesc.rowElements[ni];
                            if (i === to.index) {
                                var data_2 = _dataSource.splice(ni, 1)[0];
                                _dataSource.splice(0, 0, data_2);
                                _mafCurrent().origDs.splice(0, 0, _mafCurrent().origDs.splice(ni, 1)[0]);
                                if (!r) {
                                    var res = _cloud.painter.row(data_2, v.DefaultRowConfig, y);
                                    if (res.fixedRow) {
                                        _mDesc.fixedRowElements.splice(0, 0, res.fixedRow);
                                        _mDesc.fixedRows.splice(0, 0, res.fixedElements);
                                    }
                                    _mDesc.rowElements.splice(0, 0, res.row);
                                    _mDesc.rows.splice(0, 0, res.elements);
                                }
                                else {
                                    if (_mDesc.fixedRows) {
                                        rangee = _mDesc.fixedRowElements.splice(ni, 1)[0];
                                        $.data(rangee, lo.VIEW, y);
                                        _mDesc.fixedRowElements.splice(0, 0, rangee);
                                        _mDesc.fixedRows.splice(0, 0, _mDesc.fixedRows.splice(ni, 1)[0]);
                                    }
                                    rangee = _mDesc.rowElements.splice(ni, 1)[0];
                                    $.data(rangee, lo.VIEW, y);
                                    _mDesc.rowElements.splice(0, 0, rangee);
                                    _mDesc.rows.splice(0, 0, _mDesc.rows.splice(ni, 1)[0]);
                                }
                                ordonnerList[i] = y;
                                _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                                    var maf = _mafCurrent()[k];
                                    if (_currentSheet === k || !maf || !maf.desc)
                                        return;
                                    r = maf.desc.rowElements[ni];
                                    if (!r) {
                                        var painter = _mafollicle[SheetDef][k].ltrlPainter;
                                        if (!painter) {
                                            painter = _.cloneDeep(_cloud.sidePainter);
                                            painter.revive(k);
                                            _mafollicle[SheetDef][k].ltrlPainter = painter;
                                        }
                                        var res = painter.row(data_2, v.DefaultRowConfig, y);
                                        if (res.fixedRow) {
                                            maf.desc.fixedRowElements.splice(0, 0, res.fixedRow);
                                            maf.desc.fixedRows.splice(0, 0, res.fixedElements);
                                        }
                                        maf.desc.rowElements.splice(0, 0, res.row);
                                        maf.desc.rows.splice(0, 0, res.elements);
                                    }
                                    else {
                                        if (maf.desc.fixedRows) {
                                            rangee = maf.desc.fixedRowElements.splice(ni, 1)[0];
                                            $.data(rangee, lo.VIEW, y);
                                            maf.desc.fixedRowElements.splice(0, 0, rangee);
                                            maf.desc.fixedRows.splice(0, 0, maf.desc.fixedRows.splice(ni, 1)[0]);
                                        }
                                        rangee = maf.desc.rowElements.splice(ni, 1)[0];
                                        $.data(rangee, lo.VIEW, y);
                                        maf.desc.rowElements.splice(0, 0, rangee);
                                        maf.desc.rows.splice(0, 0, maf.desc.rows.splice(ni, 1)[0]);
                                    }
                                });
                                y--;
                                if (sorted.length > 0)
                                    to = sorted.pop();
                            }
                            else {
                                if (r) {
                                    if (_mDesc.fixedRowElements) {
                                        fr = _mDesc.fixedRowElements[ni];
                                        $.data(fr, lo.VIEW, $.data(fr, lo.VIEW) + length - y - 1);
                                    }
                                    view = $.data(r, lo.VIEW) + length - y - 1;
                                    $.data(r, lo.VIEW, view);
                                    ordonnerList[i] = view;
                                }
                                _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                                    var maf = _mafCurrent()[k];
                                    if (_currentSheet === k || !maf || !maf.desc)
                                        return;
                                    r = maf.desc.rowElements[ni];
                                    if (!r)
                                        return;
                                    if (maf.desc.fixedRowElements) {
                                        fr = maf.desc.fixedRowElements[ni];
                                        $.data(fr, lo.VIEW, $.data(fr, lo.VIEW) + length - y - 1);
                                    }
                                    view = $.data(r, lo.VIEW) + length - y - 1;
                                    $.data(r, lo.VIEW, view);
                                    if (_.isNil(ordonnerList[i]))
                                        ordonnerList[i] = view;
                                });
                            }
                        };
                        for (var i = to.index; i >= 0; i--) {
                            _loop_7(i);
                        }
                        _bodyWrappers[0].scrollTop = 0;
                        _cloud.renderRows(true);
                        if (!_.keys(ordonnerList).length)
                            return;
                        _.forEach(_.keys(_mafollicle[SheetDef]), function (k) {
                            var maf = _mafCurrent()[k];
                            if (!maf || !maf.desc)
                                return;
                            _.forEach(maf.errors, function (e) {
                                nv = ordonnerList[e.index];
                                if (!_.isNil(nv)) {
                                    e.index = nv;
                                }
                            });
                            _.forEach(maf.histoire, function (h) {
                                _.forEach(h.o, function (o) {
                                    nv = ordonnerList[o.coord.rowIdx];
                                    if (!_.isNil(nv)) {
                                        o.coord.rowIdx = nv;
                                    }
                                });
                            });
                            var vars = [], t = _.keys(maf.selected), c = 0;
                            while (t.length > 0) {
                                var sk = t.shift(), z = ordonnerList[sk];
                                if (!_.isNil(z)) {
                                    maf.selected[z] = maf.selected[sk];
                                    vars.push(z);
                                    if (!_.includes(vars, sk)) {
                                        delete maf.selected[sk];
                                    }
                                }
                            }
                        });
                    }
                })(lo || (lo = {}));
                var su;
                (function (su) {
                    su.EDITOR = "meditor";
                    /**
                     * Binding.
                     */
                    function binding($grid, fitWindow, noRowsMin, noRowsMax) {
                        $grid.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                            var $tCell = evt.target;
                            if (!$tCell || !selector.is($tCell, "." + v.CELL_CLS)
                                || $tCell.classList.contains(color.Disable)
                                || $tCell.classList.contains(color.Lock)
                                || $tCell.classList.contains(dkn.LABEL_CLS))
                                return;
                            if (_.keys(ssk.KeyPressed).length > 0) {
                                evt.preventDefault();
                                return;
                            }
                            var coord = ti.getCellCoord($tCell);
                            var control = dkn.controlType[coord.columnKey];
                            var cEditor = _mEditor;
                            if (!control || ti.isEqual(coord, cEditor, ["rowIdx", "columnKey"])
                                || (control === dkn.TEXTBOX && !$tCell.classList.contains(lch.CELL_SELECTED_CLS)))
                                return;
                            var txtBox = dkn.controlType[dkn.TEXTBOX];
                            if (!txtBox) {
                                dkn.textBox();
                                txtBox = dkn.controlType[dkn.TEXTBOX];
                            }
                            var $editor = txtBox.my;
                            var $input = $editor.querySelector("input.medit");
                            var cType = {};
                            if (control === dkn.TEXTBOX && $tCell.classList.contains(lch.CELL_SELECTED_CLS)) {
                                endEdit($grid);
                                if ($tCell.classList.contains(hpl.CURRENCY_CLS)) {
                                    $tCell.classList.remove(hpl.CURRENCY_CLS);
                                    $editor.classList.add(hpl.CURRENCY_CLS);
                                }
                                $tCell.textContent = "";
                                $tCell.classList.add(dkn.CONTROL_CLS);
                                $tCell.appendChild($editor);
                                var data = $.data($tCell, v.DATA);
                                $input.value = !_.isNil(data) ? data : "";
                                cType.type = dkn.TEXTBOX;
                                setTimeout(function () {
                                    $input.select();
                                }, 0);
                                if ($tCell.classList.contains(v.ALIGN_RIGHT)) {
                                    $input.classList.remove(v.ALIGN_LEFT);
                                }
                                else {
                                    $input.classList.add(v.ALIGN_LEFT);
                                }
                                var coord_3 = ti.getCellCoord($tCell);
                                $input.style.imeMode = "inactive";
                                if (coord_3) {
                                    var column = _columnsMap[coord_3.columnKey];
                                    if (column && column[0].japanese) {
                                        $input.style.imeMode = "active";
                                    }
                                }
                            }
                            else if (control.type === dkn.COMBOBOX && !$tCell.querySelector(".mcombo-wrapper")) {
                                endEdit($grid, true);
                                $tCell.textContent = "";
                                $tCell.classList.add(dkn.CONTROL_CLS);
                                var stt = void 0, panel = void 0, comboList = void 0, itemHolder = void 0, height = void 0;
                                if (control.optionsList) {
                                    if (!_.isNil(stt = control.optionsMap[_dataSource[coord.rowIdx][_pk]])) {
                                        panel = control.panel[stt + 1];
                                        height = control.maxHeight[stt + 1];
                                    }
                                    else {
                                        panel = control.panel[0];
                                        height = control.maxHeight[0];
                                    }
                                    comboList = control.dropdown.querySelector(".mcombo-list");
                                    itemHolder = comboList.querySelector(".mcombo-listitemholder");
                                    if (itemHolder !== panel) {
                                        comboList.replaceChild(panel, itemHolder);
                                        control.dropdown.style.maxHeight = height + "px";
                                    }
                                }
                                var $combo = control.my.querySelector("." + dkn.CBX_CLS);
                                var $comboValue_2 = control.my.querySelector(".mcombo-value");
                                var items = control.dropdown.querySelectorAll(".mcombo-listitem");
                                var selected_3, code_2 = $.data($tCell, lo.CBX_SELECTED_TD);
                                _.forEach(items, function (i) {
                                    var value = $.data(i, lo.CBX_ITEM_VALUE);
                                    if (i.classList.contains("selecteditem")) {
                                        i.classList.remove("selecteditem");
                                    }
                                    if (code_2 === value) {
                                        var $item = i.querySelector(".mcombo-item");
                                        if ($item) {
                                            $comboValue_2.innerHTML = "";
                                            $comboValue_2.appendChild($item.cloneNode(true));
                                            i.classList.add("selecteditem");
                                            selected_3 = true;
                                        }
                                    }
                                });
                                if (!selected_3) {
                                    $comboValue_2.innerHTML = "";
                                    var empty = _prtDiv.cloneNode(true);
                                    empty.style.display = "inline-block";
                                    $comboValue_2.appendChild(empty);
                                }
                                $tCell.appendChild(control.my);
                                $.data(control.my, lo.CBX_SELECTED, code_2);
                                dkn.openDD(control.dropdown, control.my);
                                $combo.classList.add(dkn.CBX_ACTIVE_CLS);
                                cType.type = dkn.COMBOBOX;
                            }
                            else if (control.type === dkn.DATE_PICKER && !$tCell.querySelector("input")) {
                                endEdit($grid, true);
                                $tCell.textContent = "";
                                $tCell.classList.add(dkn.CONTROL_CLS);
                                if ($tCell.classList.contains(v.ALIGN_RIGHT)) {
                                    $input.classList.remove(v.ALIGN_LEFT);
                                }
                                else {
                                    $input.classList.add(v.ALIGN_LEFT);
                                }
                                $tCell.appendChild($editor);
                                var data = $.data($tCell, v.DATA), mDate = moment(data, control.format, true), mDisplayDate = mDate.isValid() ? mDate : moment();
                                $input.value = !_.isNil(data) && data !== "" ? (mDate.isValid() ? mDate.format(control.format[0]) : mDate._i) : "";
                                cType.type = dkn.DATE_PICKER;
                                cType.format = control.format;
                                cType.formatType = control.formatType;
                                var $daysPick = dkn._ramass[control.formatType].querySelector("div[data-view='days picker']"), $monthsPick = dkn._ramass[control.formatType].querySelector("div[data-view='months picker']"), $yearsPick = dkn._ramass[control.formatType].querySelector("div[data-view='years picker']");
                                if ($daysPick) {
                                    $daysPick.classList.remove(dkn.PICKER_HIDE);
                                    $monthsPick.classList.add(dkn.PICKER_HIDE);
                                    $yearsPick.classList.add(dkn.PICKER_HIDE);
                                    ssk.trigger(dkn._ramass[control.formatType], "set", [mDisplayDate]);
                                }
                                else if ($monthsPick) {
                                    $monthsPick.classList.remove(dkn.PICKER_HIDE);
                                    $yearsPick.classList.add(dkn.PICKER_HIDE);
                                    ssk.trigger(dkn._ramass[control.formatType], "set", [mDisplayDate, 0, 1]);
                                }
                                else {
                                    ssk.trigger(dkn._ramass[control.formatType], "set", [mDisplayDate, 0, 2]);
                                }
                                dkn.openDD(dkn._ramass[control.formatType], $tCell, true);
                            }
                            else if (control === dkn.FLEX_IMAGE || control === dkn.CHECKBOX
                                || control === dkn.LINK_LABEL || control === dkn.SWITCH_BUTTONS
                                || control === dkn.REFER_BUTTON || control === dkn.IMAGE) {
                                endEdit($grid);
                            }
                            _mEditor = _.assignIn(coord, cType);
                            evt.stopPropagation();
                        });
                        document.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                            if (!evt.target)
                                return;
                            if (_.keys(ssk.KeyPressed).length > 0) {
                                evt.preventDefault();
                                return;
                            }
                            if (!selector.is(evt.target, "input.medit")
                                && !selector.is(evt.target, "div[class*='mcombo']")) {
                                endEdit($grid, true);
                            }
                        });
                        $grid.addXEventListener(ssk.KEY_DOWN, function (evt) {
                            var $grid = evt.currentTarget, $tCell = evt.target;
                            if (!$grid)
                                return;
                            if (!ti.isEnterKey(evt) && !ti.isTabKey(evt) && !evt.ctrlKey
                                && ((evt.keyCode >= 46 && evt.keyCode <= 111) || (evt.keyCode >= 160 && evt.keyCode <= 223))) {
                                ssk.KeyPressed[evt.keyCode] = true;
                            }
                            if (!_(ssk.KeyPressed).keys().filter(function (k) { return k !== "13" && k !== "9"; }).size()) {
                                if (ti.isEnterKey(evt)) {
                                    var direct = $.data($grid, "enterDirect");
                                    if (evt.shiftKey) {
                                        lch.selectPrev($grid, direct);
                                    }
                                    else {
                                        lch.selectNext($grid, direct);
                                    }
                                }
                                else if (ti.isTabKey(evt)) {
                                    evt.preventDefault();
                                    if (evt.shiftKey) {
                                        lch.selectPrev($grid);
                                    }
                                    else {
                                        lch.selectNext($grid);
                                    }
                                }
                                else if (ti.isArrowLeft(evt)) {
                                    evt.preventDefault();
                                    lch.selectPrev($grid);
                                }
                                else if (ti.isArrowRight(evt)) {
                                    evt.preventDefault();
                                    lch.selectNext($grid);
                                }
                                else if (ti.isArrowUp(evt)) {
                                    evt.preventDefault();
                                    lch.selectPrev($grid, "below");
                                }
                                else if (ti.isArrowDown(evt)) {
                                    evt.preventDefault();
                                    lch.selectNext($grid, "below");
                                }
                            }
                            // Get input
                            if (!evt.ctrlKey && ti.isAlphaNumeric(evt) || ti.isMinusSymbol(evt) || ti.isDeleteKey(evt)
                                || evt.keyCode === 113 || ti.isSpaceKey(evt)) {
                                if (!$tCell || !selector.is($tCell, "." + v.CELL_CLS)
                                    || $tCell.classList.contains(color.Disable)
                                    || $tCell.classList.contains(color.Lock)
                                    || $tCell.classList.contains(dkn.LABEL_CLS))
                                    return;
                                var coord = ti.getCellCoord($tCell);
                                var control = dkn.controlType[coord.columnKey];
                                var cEditor = _mEditor;
                                if (control === dkn.CHECKBOX && ti.isSpaceKey(evt) && !$tCell.classList.contains(color.Hide)) {
                                    var check = $tCell.querySelector("input[type='checkbox']");
                                    if (!check)
                                        return;
                                    var checked = void 0;
                                    if (check.getAttribute("checked") === "checked") {
                                        check.removeAttribute("checked");
                                        check.checked = checked = false;
                                    }
                                    else {
                                        check.setAttribute("checked", "checked");
                                        check.checked = checked = true;
                                    }
                                    var changeEvt = document.createEvent("HTMLEvents");
                                    changeEvt.initEvent("change", false, true);
                                    changeEvt.checked = checked;
                                    check.dispatchEvent(changeEvt);
                                    evt.preventDefault();
                                    return;
                                }
                                if (!control || ti.isEqual(coord, cEditor, ["rowIdx", "columnKey"])
                                    || (control === dkn.TEXTBOX && !$tCell.classList.contains(lch.CELL_SELECTED_CLS)))
                                    return;
                                var $editor = dkn.controlType[dkn.TEXTBOX].my;
                                var $input = $editor.querySelector("input.medit");
                                var cType = {};
                                if (control === dkn.TEXTBOX && $tCell.classList.contains(lch.CELL_SELECTED_CLS)) {
                                    endEdit($grid);
                                    if ($tCell.classList.contains(hpl.CURRENCY_CLS)) {
                                        $tCell.classList.remove(hpl.CURRENCY_CLS);
                                        $editor.classList.add(hpl.CURRENCY_CLS);
                                    }
                                    $tCell.textContent = "";
                                    $tCell.classList.add(dkn.CONTROL_CLS);
                                    $tCell.appendChild($editor);
                                    //                        $input.value = evt.key;
                                    if (ti.isDeleteKey(evt) && cEditor === null) {
                                        $input.value = "";
                                    }
                                    else if (evt.keyCode === 113) {
                                        var data = $.data($tCell, v.DATA);
                                        $input.value = !_.isNil(data) ? data : "";
                                        $input.select();
                                    }
                                    if ($tCell.classList.contains(v.ALIGN_RIGHT)) {
                                        $input.classList.remove(v.ALIGN_LEFT);
                                    }
                                    else {
                                        $input.classList.add(v.ALIGN_LEFT);
                                    }
                                    cType.type = dkn.TEXTBOX;
                                    var coord_4 = ti.getCellCoord($tCell);
                                    $input.style.imeMode = "inactive";
                                    if (coord_4) {
                                        var column = _columnsMap[coord_4.columnKey];
                                        if (column && column[0].japanese) {
                                            $input.style.imeMode = "active";
                                        }
                                    }
                                    $input.focus();
                                }
                                _mEditor = _.assignIn(coord, cType);
                            }
                            if (!_copie)
                                return;
                            if (evt.ctrlKey && evt.keyCode === 86 && _collerer) {
                                su.afterCollertar = document.activeElement;
                                _collerer.focus();
                            }
                            else if (evt.ctrlKey && evt.keyCode === 67) {
                                copieData();
                            }
                            else if (evt.ctrlKey && evt.keyCode === 88) {
                                copieData(true);
                            }
                            else if (evt.ctrlKey && evt.keyCode === 90) {
                                annuler();
                            }
                        });
                        $grid.addXEventListener(ssk.KEY_UP, function (evt) {
                            delete ssk.KeyPressed[evt.keyCode];
                        });
                        document.addXEventListener(ssk.KEY_DOWN, function (evt) {
                            if (!ti.isEnterKey(evt) && !ti.isTabKey(evt) && !evt.ctrlKey
                                && ((evt.keyCode >= 46 && evt.keyCode <= 111) || (evt.keyCode >= 160 && evt.keyCode <= 223))) {
                                ssk.KeyPressed[evt.keyCode] = true;
                            }
                        });
                        document.addXEventListener(ssk.KEY_UP, function (evt) {
                            delete ssk.KeyPressed[evt.keyCode];
                        });
                        if (_copie) {
                            $grid.addXEventListener(ssk.FOCUS_IN, function (evt) {
                                if (_collerer && _copieer)
                                    return;
                                _collerer = document.createElement("textarea");
                                _collerer.setAttribute("id", "mgrid-collerer");
                                _collerer.style.opacity = "0";
                                _collerer.style.overflow = "hidden";
                                _collerer.addXEventListener(ssk.PASTE, collerData.bind(null));
                                _copieer = document.createElement("textarea");
                                _copieer.setAttribute("id", "mgrid-copieer");
                                _copieer.style.opacity = "0";
                                _copieer.style.overflow = "hidden";
                                var $div = document.createElement("div");
                                $div.style.position = "fixed";
                                $div.style.top = "-10000px";
                                $div.style.left = "-10000px";
                                document.body.appendChild($div);
                                $div.appendChild(_collerer);
                                $div.appendChild(_copieer);
                            });
                        }
                        if (fitWindow) {
                            window.addXEventListener(ssk.RESIZE, function (evt) {
                                kt.screenLargeur(noRowsMin, noRowsMax);
                            });
                        }
                    }
                    su.binding = binding;
                    /**
                     * EndEdit.
                     */
                    function endEdit($grid, fromDoc) {
                        var editor = _mEditor;
                        if (!editor)
                            return;
                        var $bCell = lch.cellAt($grid, editor.rowIdx, editor.columnKey);
                        if (editor.type === dkn.TEXTBOX) {
                            var $editor = dkn.controlType[dkn.TEXTBOX].my;
                            var $input = $editor.querySelector("input.medit");
                            var inputVal_1 = $input.value;
                            if ($bCell) {
                                var spl = {}, column_1 = _columnsMap[editor.columnKey];
                                if (!column_1)
                                    return;
                                if (inputVal_1 === "") {
                                    ssk.trigger($input, ssk.MS_BEFORE_COMPL);
                                }
                                var failed = khl.any({ element: $bCell }), formatted = failed ? inputVal_1 : (_zeroHidden && ti.isZero(inputVal_1, editor.columnKey) ? "" : format(column_1[0], inputVal_1, spl));
                                $bCell.textContent = formatted;
                                var disFormat_1 = inputVal_1 === "" || failed ? inputVal_1 : ((spl.padded || spl.toKana) ? formatted : formatSave(column_1[0], inputVal_1));
                                wedgeCell($grid, editor, disFormat_1, null, $bCell.classList.contains(khl.ERROR_CLS));
                                $.data($bCell, v.DATA, disFormat_1);
                                if ($editor.classList.contains(hpl.CURRENCY_CLS)) {
                                    $editor.classList.remove(hpl.CURRENCY_CLS);
                                    $bCell.classList.add(hpl.CURRENCY_CLS);
                                }
                                $input.value = "";
                                var inputRidd_1 = function () {
                                    if ($bCell.classList.contains(khl.ERROR_CLS))
                                        return;
                                    var ridd = column_1[0].inputProcess;
                                    if (ridd) {
                                        var rData = _dataSource[parseFloat(editor.rowIdx)];
                                        var rId = void 0;
                                        if (rData)
                                            rId = rData[_pk];
                                        ridd(rId, editor.columnKey, disFormat_1, rData).done(function (sData) {
                                            _.forEach(sData, function (sd) {
                                                var res = _$grid.mGrid("updateCell", sd.id, sd.item, sd.value);
                                                if (!_.isNil(res) && res >= 0) {
                                                    var sht = _.filter(_.keys(_mafollicle[SheetDef]), function (k) {
                                                        if (k === _currentSheet)
                                                            return;
                                                        var sCols = _mafollicle[SheetDef][k].columns;
                                                        return _.find(sCols, function (c) { return c.key === sd.item; });
                                                    });
                                                    _.forEach(sht, function (s) {
                                                        wedgeShtCell(res, sd.item, sd.value, s);
                                                    });
                                                }
                                            });
                                        });
                                    }
                                };
                                var sCol_1 = _specialColumn[editor.columnKey];
                                if (sCol_1) {
                                    var cbx = dkn.controlType[sCol_1];
                                    if (_.toLower(column_1[0].dataType) === "number") {
                                        inputVal_1 = parseFloat(inputVal_1);
                                    }
                                    wedgeCell($grid, { rowIdx: editor.rowIdx, columnKey: sCol_1 }, inputVal_1);
                                    var selectedOpt = _.find(cbx.options, function (o) { return o.code === inputVal_1; });
                                    if (!_.isNil(selectedOpt)) {
                                        var $cbxCell = lch.cellAt($grid, editor.rowIdx, sCol_1);
                                        $cbxCell.textContent = selectedOpt ? selectedOpt.name : "";
                                        $.data($cbxCell, lo.CBX_SELECTED_TD, inputVal_1);
                                    }
                                }
                                else if ((sCol_1 = _specialLinkColumn[editor.columnKey]) && sCol_1.changed) {
                                    var data = _mafollicle[_currentPage].origDs[editor.rowIdx];
                                    sCol_1.changed(editor.columnKey, data[_pk], formatted, data[editor.columnKey]).done(function (res) {
                                        var $linkCell = lch.cellAt($grid, editor.rowIdx, sCol_1.column);
                                        if ($linkCell) {
                                            $linkCell.querySelector("a").textContent = res;
                                            wedgeCell($grid, { rowIdx: editor.rowIdx, columnKey: sCol_1.column }, res);
                                        }
                                        inputRidd_1();
                                    });
                                }
                                else
                                    inputRidd_1();
                            }
                        }
                        else if (editor.type === dkn.COMBOBOX) {
                            var cbx_2 = dkn.controlType[editor.columnKey];
                            var bSelectedValue_1 = $.data(cbx_2.my, lo.CBX_SELECTED);
                            var $combo = cbx_2.my.querySelector("." + dkn.CBX_CLS), options = void 0;
                            if (cbx_2.optionsMap && !_.isNil(stt = cbx_2.optionsMap[_dataSource[editor.rowIdx][_pk]])) {
                                options = cbx_2.optionsList[stt];
                            }
                            else {
                                options = cbx_2.options;
                            }
                            wedgeCell($grid, editor, bSelectedValue_1);
                            var selectedOpt = _.find(options, function (o) { return o[cbx_2.optionsValue] === bSelectedValue_1; });
                            $bCell.textContent = selectedOpt ? selectedOpt[cbx_2.optionsText] : "";
                            if (cbx_2.dropdown && cbx_2.dropdown.style.top !== "-99999px") {
                                dkn.closeDD(cbx_2.dropdown);
                                $combo.classList.remove(dkn.CBX_ACTIVE_CLS);
                            }
                        }
                        else if (editor.type === dkn.DATE_PICKER) {
                            var date = void 0, picker = dkn.controlType[editor.columnKey], $editor = dkn.controlType[dkn.TEXTBOX].my, $input = $editor.querySelector("input.medit"), mDate = moment.utc($input.value, editor.format, true);
                            if ($input.value === "") {
                                ssk.trigger($input, ssk.MS_BEFORE_COMPL);
                            }
                            if (mDate.isValid()) {
                                date = editor.formatType === "ymd" ? mDate.toDate() : mDate.format(editor.format[0]);
                                wedgeCell($grid, editor, date);
                                $bCell.textContent = mDate.format(editor.format[0]);
                                $.data($bCell, v.DATA, date);
                            }
                            else {
                                date = editor.formatType === "ymd" ? mDate : mDate._i;
                                wedgeCell($grid, editor, date);
                                $bCell.textContent = mDate._i;
                                $.data($bCell, v.DATA, date);
                            }
                            if (fromDoc && picker && _.isFunction(picker.inputProcess)) {
                                picker.inputProcess(mDate, _dataSource[parseFloat(editor.rowIdx)]);
                            }
                            $input.value = "";
                            dkn.closeDD(dkn._ramass[editor.formatType], true);
                        }
                        $bCell.classList.remove(dkn.CONTROL_CLS);
                        _mEditor = null;
                    }
                    su.endEdit = endEdit;
                    /**
                     * WedgeCell.
                     */
                    function wedgeCell($grid, coord, cellValue, reset, ng, pg) {
                        var res, valueType = hpl.getValueType($grid, coord.columnKey);
                        if (!_.isNil(cellValue) && !_.isEmpty(cellValue)) {
                            if (valueType === "TimeWithDay" || valueType === "Clock") {
                                try {
                                    cellValue = uk.time.minutesBased.clock.dayattr.create(uk.time.minutesBased.clock.dayattr.parseString(String(cellValue)).asMinutes).shortText;
                                }
                                catch (e) { }
                            }
                            else if (valueType === "Time") {
                                cellValue = nts.uk.time.minutesBased.duration.parseString(String(cellValue)).format();
                            }
                        }
                        var dataSource = !_.isNil(pg) ? _mafollicle[pg].dataSource : _dataSource, rData = dataSource[coord.rowIdx], currentPage = !_.isNil(pg) ? pg : _currentPage;
                        if (_.isNil(rData))
                            return;
                        var id = rData[_pk];
                        var origDs = _mafollicle[currentPage].origDs;
                        if (!origDs)
                            return;
                        var column = _columnsMap[coord.columnKey];
                        if (column && _.toLower(column[0].dataType) === "number") {
                            cellValue = (_.isNil(cellValue) || cellValue === "") ? null : parseFloat(cellValue);
                        }
                        if (reset) {
                            origDs[coord.rowIdx][coord.columnKey] = cellValue;
                        }
                        var $cell, sumDone, origVal = origDs[coord.rowIdx][coord.columnKey], cmaf = !_.isNil(pg) ? _mafollicle[pg][_currentSheet] : _vessel();
                        var transe = function (sheet, zeroHidden, dirties, desc, main) {
                            var colour, before, after, total, calcCell = lch.cellAt(_$grid[0], coord.rowIdx, coord.columnKey, desc), sum;
                            if (_summaries) {
                                sum = _summaries[coord.columnKey];
                            }
                            if (sum && sum.calculator === "Time" && calcCell) {
                                if (!sumDone) {
                                    after = moment.duration(cellValue);
                                    before = moment.duration($.data(calcCell, v.DATA));
                                    var diff = after.subtract(before);
                                    sum[currentPage].add(diff);
                                    sumDone = true;
                                }
                                sum[sheet].textContent = ti.momentToString(sum[currentPage]);
                            }
                            else if (sum && sum.calculator === "Number" && calcCell) {
                                if (!sumDone) {
                                    after = parseFloat(cellValue);
                                    before = parseFloat($.data(calcCell, v.DATA));
                                    total = sum[currentPage] + ((isNaN(after) ? 0 : after) - (isNaN(before) ? 0 : before));
                                    sum[currentPage] = total;
                                    sumDone = true;
                                }
                                sum[sheet].textContent = sum.formatter === "Currency" ? ti.asCurrency(sum[currentPage]) : sum[currentPage];
                            }
                            if (zeroHidden && ti.isZero(origVal, coord.columnKey)
                                && (cellValue === "" || _.isNil(cellValue) || ti.isZero(cellValue, coord.columnKey))) {
                                $cell = lch.cellAt($grid, coord.rowIdx, coord.columnKey, desc);
                                if (!$cell) {
                                    if (!_.isNil(dirties[id]) && !_.isNil(dirties[id][coord.columnKey])) {
                                        delete dirties[id][coord.columnKey];
                                    }
                                    return { c: calcCell };
                                }
                                $cell.classList.remove(color.ManualEditTarget);
                                $cell.classList.remove(color.ManualEditOther);
                                if (main) {
                                    color.popState(id, coord.columnKey, [color.ManualEditTarget, color.ManualEditOther]);
                                }
                                var initManEdit = $.data($cell, v.INIT_MAN_EDIT);
                                if (initManEdit) {
                                    $cell.classList.add(initManEdit);
                                    if (main)
                                        color.pushState(id, coord.columnKey, [initManEdit]);
                                }
                                if (!_.isNil(dirties[id]) && !_.isNil(dirties[id][coord.columnKey])) {
                                    delete dirties[id][coord.columnKey];
                                }
                                return { c: calcCell };
                            }
                            else {
                                if (cellValue === origVal || ((_.isNil(cellValue) || cellValue === "" || (cellValue instanceof moment && cellValue._i === "")) && ((origVal instanceof moment && origVal._i === "") || _.isNil(origVal) || origVal === ""))
                                    || (cellValue instanceof Date && origVal instanceof Date && !_.isNil(cellValue) && !_.isNil(origVal) && cellValue.getTime() === origVal.getTime())) {
                                    $cell = lch.cellAt($grid, coord.rowIdx, coord.columnKey, desc);
                                    if (!$cell) {
                                        if (!_.isNil(dirties[id]) && !_.isNil(dirties[id][coord.columnKey])) {
                                            delete dirties[id][coord.columnKey];
                                        }
                                        rData[coord.columnKey] = cellValue;
                                        return { c: calcCell };
                                    }
                                    $cell.classList.remove(color.ManualEditTarget);
                                    $cell.classList.remove(color.ManualEditOther);
                                    if (main) {
                                        color.popState(id, coord.columnKey, [color.ManualEditTarget, color.ManualEditOther]);
                                    }
                                    rData[coord.columnKey] = cellValue;
                                    var initManEdit = $.data($cell, v.INIT_MAN_EDIT);
                                    if (initManEdit) {
                                        $cell.classList.add(initManEdit);
                                        if (main) {
                                            color.pushState(id, coord.columnKey, [initManEdit]);
                                        }
                                    }
                                    if (!_.isNil(dirties[id]) && !_.isNil(dirties[id][coord.columnKey])) {
                                        delete dirties[id][coord.columnKey];
                                    }
                                    return { c: calcCell };
                                }
                                if (!dirties[id]) {
                                    dirties[id] = {};
                                    dirties[id][coord.columnKey] = cellValue;
                                }
                                else {
                                    dirties[id][coord.columnKey] = cellValue;
                                }
                                if (!_.find(_linkage, function (lc) { return lc === coord.columnKey; })) {
                                    _.forEach(_linkage, function (lc) {
                                        _$grid.mGrid("updateCell", id, lc, true);
                                    });
                                }
                                rData[coord.columnKey] = cellValue;
                                if (!_.isNil(_objId) && !_.isNil(_getObjId) && _.isFunction(_getObjId)) {
                                    var cId = _getObjId(id);
                                    var $cell_1 = lch.cellAt($grid, coord.rowIdx, coord.columnKey, desc);
                                    if (cId === _objId) {
                                        colour = color.ManualEditTarget;
                                    }
                                    else {
                                        colour = color.ManualEditOther;
                                    }
                                    if (main) {
                                        color.popState(id, coord.columnKey, [color.ManualEditTarget, color.ManualEditOther]);
                                        color.pushState(id, coord.columnKey, [colour], true);
                                    }
                                    if (!$cell_1)
                                        return { colour: colour };
                                    $cell_1.classList.remove(color.ManualEditTarget);
                                    $cell_1.classList.remove(color.ManualEditOther);
                                    $cell_1.classList.add(colour);
                                    return { c: calcCell, colour: colour };
                                }
                            }
                        };
                        var some = function (arr) {
                            var exist = false;
                            _.forEach(arr, function (c) {
                                if (c.group) {
                                    exist = some(c.group);
                                    if (exist)
                                        return false;
                                }
                                if (c.key === coord.columnKey) {
                                    exist = true;
                                    return false;
                                }
                            });
                            return exist;
                        };
                        var osht = function (inoth) {
                            _.forEach(_.keys(_mafollicle[SheetDef]), function (s) {
                                if (s === _currentSheet)
                                    return;
                                var maf = _mafollicle[currentPage][s];
                                //                    if (maf && _.find(_fixedColumns, fc => fc.key === coord.columnKey)) {
                                //                        if (maf.zeroHidden && ti.isZero(origVal, coord.columnKey)
                                //                            && (cellValue === "" || _.isNil(cellValue) || ti.isZero(cellValue, coord.columnKey))
                                //                            && !_.isNil(maf.dirties[id]) && !_.isNil(maf.dirties[id][coord.columnKey])) {
                                //                            delete maf.dirties[id][coord.columnKey];
                                //                        } else if (cellValue === origVal
                                //                            && !_.isNil(maf.dirties[id]) && !_.isNil(maf.dirties[id][coord.columnKey])) {
                                //                            delete maf.dirties[id][coord.columnKey];
                                //                        }
                                //
                                //                        return;
                                //                    }
                                if (!some(_mafollicle[SheetDef][s].columns) && !_.find(_fixedColumns, function (fc) { return fc.key === coord.columnKey; }))
                                    return;
                                var t, formatted, disFormat, errDetail;
                                if (maf && maf.desc) {
                                    t = transe(s, maf.zeroHidden, maf.dirties, maf.desc);
                                    if (!t || !t.c || _.find(_fixedColumns, function (fc) { return fc.key === coord.columnKey; }))
                                        return;
                                    var control = dkn.controlType[coord.columnKey];
                                    if (control === dkn.LINK_LABEL) {
                                        var link = t.c.querySelector("a");
                                        link.innerHTML = cellValue;
                                    }
                                    else if (_.isObject(control) && control.type === dkn.COMBOBOX) {
                                        var sel = _.find(control.options, function (o) { return o.code === cellValue; });
                                        if (sel) {
                                            $.data(t.c, lo.CBX_SELECTED_TD, cellValue);
                                            t.c.textContent = sel.name;
                                        }
                                    }
                                    else {
                                        formatted = !_.isNil(column) ? format(column[0], cellValue) : cellValue;
                                        if (ng) {
                                            t.c.classList.add(khl.ERROR_CLS);
                                            errDetail = _.find(_errors, function (err) { return err.index === coord.rowIdx && err.columnKey === coord.columnKey; });
                                            if (errDetail) {
                                                khl.addCellError(errDetail, maf);
                                                $.data(t.c, "msg", errDetail.message);
                                            }
                                        }
                                        else {
                                            t.c.classList.remove(khl.ERROR_CLS);
                                            errDetail = _.find(maf.errors, function (err) { return err.index === coord.rowIdx && err.columnKey === coord.columnKey; });
                                            if (errDetail)
                                                khl.removeCellError(errDetail.rowId, errDetail.columnKey, maf);
                                        }
                                        disFormat = cellValue === "" || _.isNil(column) ? cellValue : formatSave(column[0], cellValue);
                                        $.data(t.c, v.DATA, disFormat);
                                        if (maf.zeroHidden && ti.isZero(disFormat, coord.columnKey)) {
                                            t.c.textContent = "";
                                        }
                                        else {
                                            t.c.textContent = formatted;
                                        }
                                    }
                                    if (t.colour)
                                        t.c.classList.add(t.colour);
                                }
                                else if (ng) {
                                    errDetail = _.find(_errors, function (err) { return err.index === coord.rowIdx && err.columnKey === coord.columnKey; });
                                    if (errDetail) {
                                        if (!maf) {
                                            _mafollicle[currentPage][s] = { errors: [] };
                                            maf = _mafollicle[currentPage][s];
                                        }
                                        else if (_.isNil(maf.errors)) {
                                            maf.errors = [];
                                        }
                                        khl.addCellError(errDetail, maf);
                                    }
                                }
                                if (maf && maf.zeroHidden && ti.isZero(origVal, coord.columnKey)
                                    && (cellValue === "" || _.isNil(cellValue) || ti.isZero(cellValue, coord.columnKey))
                                    && !_.isNil(maf.dirties[id]) && !_.isNil(maf.dirties[id][coord.columnKey])) {
                                    delete maf.dirties[id][coord.columnKey];
                                }
                                else if (maf && cellValue === origVal
                                    && !_.isNil(maf.dirties[id]) && !_.isNil(maf.dirties[id][coord.columnKey])) {
                                    delete maf.dirties[id][coord.columnKey];
                                }
                                else if (cellValue !== origVal) {
                                    if (!maf) {
                                        _mafollicle[currentPage][s] = { dirties: {} };
                                        maf = _mafollicle[currentPage][s];
                                    }
                                    if (!maf.dirties)
                                        maf.dirties = {};
                                    if (!maf.dirties[id])
                                        maf.dirties[id] = {};
                                    maf.dirties[id][coord.columnKey] = cellValue;
                                }
                                else if (inoth && cellValue === origVal) {
                                    rData[coord.columnKey] = cellValue;
                                }
                            });
                        };
                        if (!column) {
                            osht(true);
                            return;
                        }
                        res = transe(_currentSheet, cmaf.zeroHidden, cmaf.dirties, cmaf.desc, true);
                        osht();
                        return res ? res.colour : null;
                    }
                    su.wedgeCell = wedgeCell;
                    /**
                     * WedgeShtCell.
                     */
                    function wedgeShtCell(rowIdx, key, value, sht) {
                        var rd = _dataSource[rowIdx];
                        if (!rd)
                            return;
                        var stt, id = rd[_pk];
                        if (_cellStates && _cellStates[id] && (stt = _cellStates[id][key]) && (stt = stt[0].state)
                            && _.find(stt, function (s) { return s === color.Disable || s === color.Lock; }))
                            return;
                        var maf = _mafollicle[_currentPage][sht];
                        if (maf && maf.desc) {
                            var i = maf.desc.colIdxes[key];
                            if (_.isNil(i))
                                return;
                            var c = maf.desc.rows[rowIdx][i];
                            if (!c)
                                return;
                            var retCol = _columnsMap[key];
                            if (!retCol)
                                return;
                            var formatted = format(retCol[0], value);
                            c.textContent = formatted;
                            var disFormat = formatSave(retCol[0], value);
                            wedgePrelimShtCell(c, rowIdx, key, value, sht);
                            $.data(c, v.DATA, disFormat);
                        }
                        else {
                            wedgePrelimShtCell(null, rowIdx, key, value, sht);
                        }
                    }
                    su.wedgeShtCell = wedgeShtCell;
                    /**
                     * WedgePrelimShtCell.
                     */
                    function wedgePrelimShtCell($cell, rowIdx, key, value, sht, reset) {
                        var res, valueType = hpl.getValueType(_$grid[0], key);
                        if (!_.isNil(value) && !_.isEmpty(value)) {
                            if (valueType === "TimeWithDay" || valueType === "Clock") {
                                try {
                                    value = uk.time.minutesBased.clock.dayattr.create(uk.time.minutesBased.clock.dayattr.parseString(String(value)).asMinutes).shortText;
                                }
                                catch (e) { }
                            }
                            else if (valueType === "Time") {
                                value = nts.uk.time.minutesBased.duration.parseString(String(value)).format();
                            }
                        }
                        var rData = _dataSource[rowIdx];
                        if (_.isNil(rData))
                            return;
                        var id = rData[_pk];
                        var origDs = _mafollicle[_currentPage].origDs;
                        if (!origDs)
                            return;
                        if (reset) {
                            origDs[rowIdx][key] = value;
                        }
                        var origVal = origDs[rowIdx][key];
                        var column = _columnsMap[key];
                        if (column && _.toLower(column[0].dataType) === "number") {
                            value = parseFloat(value);
                        }
                        var before, after, total, sum, ohsht = _mafollicle[_currentPage][sht];
                        if (_summaries) {
                            sum = _summaries[key];
                        }
                        if (sum && sum.calculator === "Time") {
                            after = moment.duration(value);
                            before = moment.duration(rData[key]);
                            var diff = after.subtract(before);
                            sum[_currentPage].add(diff);
                            if (sum[sht])
                                sum[sht].textContent = ti.momentToString(sum[_currentPage]);
                        }
                        else if (sum && sum.calculator === "Number") {
                            after = parseFloat(value);
                            before = parseFloat(rData[key]);
                            total = sum[_currentPage] + ((isNaN(after) ? 0 : after) - (isNaN(before) ? 0 : before));
                            sum[_currentPage] = total;
                            if (sum[sht]) {
                                sum[sht].textContent = sum.formatter === "Currency" ? ti.asCurrency(sum[_currentPage]) : sum[_currentPage];
                            }
                        }
                        if (_zeroHidden && ti.isZero(origVal, key)
                            && (value === "" || _.isNil(value) || parseFloat(value) === 0)) {
                            if (ohsht && !_.isNil(ohsht.dirties[id]) && !_.isNil(ohsht.dirties[id][key])) {
                                delete dirties[id][coord.columnKey];
                            }
                            color.popState(id, key, [color.ManualEditTarget, color.ManualEditOther]);
                            if (!$cell)
                                return;
                            $cell.classList.remove(color.ManualEditTarget);
                            $cell.classList.remove(color.ManualEditOther);
                        }
                        else {
                            if (value === origVal) {
                                if (ohsht && !_.isNil(ohsht.dirties[id]) && !_.isNil(ohsht.dirties[id][key])) {
                                    delete ohsht.dirties[id][key];
                                }
                                color.popState(id, key, [color.ManualEditTarget, color.ManualEditOther]);
                                if (!$cell)
                                    return;
                                $cell.classList.remove(color.ManualEditTarget);
                                $cell.classList.remove(color.ManualEditOther);
                                return;
                            }
                            var dirties = void 0;
                            if (!ohsht) {
                                _mafollicle[_currentPage][sht] = { dirties: {} };
                                dirties = _mafollicle[_currentPage][sht].dirties;
                                dirties[id] = {};
                            }
                            else if (!ohsht.dirties) {
                                _mafollicle[_currentPage][sht].dirties = {};
                                dirties = _mafollicle[_currentPage][sht].dirties;
                                dirties[id] = {};
                            }
                            else if (!ohsht.dirties[id]) {
                                _mafollicle[_currentPage][sht].dirties[id] = {};
                                dirties = _mafollicle[_currentPage][sht].dirties;
                            }
                            else
                                dirties = _mafollicle[_currentPage][sht].dirties;
                            dirties[id][key] = value;
                            rData[key] = value;
                            if (!_.isNil(_objId) && !_.isNil(_getObjId) && _.isFunction(_getObjId)) {
                                var cId = _getObjId(id);
                                if (cId === _objId) {
                                    res = color.ManualEditTarget;
                                }
                                else {
                                    res = color.ManualEditOther;
                                }
                                color.pushState(id, key, res, true);
                                if (!$cell)
                                    return res;
                                $cell.classList.add(res);
                            }
                        }
                    }
                    su.wedgePrelimShtCell = wedgePrelimShtCell;
                    /**
                     * Format.
                     */
                    function format(column, value, spl) {
                        if (uk.util.isNullOrEmpty(_.trim(value)))
                            return value;
                        if (column.constraint) {
                            var contrainte = void 0, valueType = void 0, constraint = column.constraint;
                            if (constraint.primitiveValue) {
                                contrainte = ui.validation.getConstraint(constraint.primitiveValue);
                                valueType = contrainte && contrainte.valueType;
                            }
                            else
                                valueType = constraint.cDisplayType;
                            if (!_.isNil(value) && value !== "") {
                                if (valueType === "TimeWithDay") {
                                    var minutes = uk.time.minutesBased.clock.dayattr.parseString(String(value)).asMinutes;
                                    var timeOpts = { timeWithDay: true };
                                    var formatter = new uk.text.TimeWithDayFormatter(timeOpts);
                                    if (!uk.util.isNullOrUndefined(minutes)) {
                                        try {
                                            value = formatter.format(minutes);
                                        }
                                        catch (e) { }
                                    }
                                }
                                else if (valueType === "Clock") {
                                    var minutes = uk.time.minutesBased.clock.dayattr.parseString(String(value)).asMinutes;
                                    var timeOpts = { timeWithDay: false };
                                    var formatter = new uk.text.TimeWithDayFormatter(timeOpts);
                                    if (!uk.util.isNullOrUndefined(minutes)) {
                                        try {
                                            value = formatter.format(minutes);
                                        }
                                        catch (e) { }
                                    }
                                }
                                else if (valueType === "Time") {
                                    var parsed = uk.time.minutesBased.duration.parseString(String(value));
                                    if (parsed.success)
                                        value = parsed.format();
                                }
                                else if (valueType === "Currency") {
                                    var currencyOpts = new ui.option.CurrencyEditorOption();
                                    currencyOpts.grouplength = constraint.groupLength | 3;
                                    currencyOpts.decimallength = _.isNil(constraint.decimalLength) ? 0 : constraint.decimalLength;
                                    currencyOpts.currencyformat = constraint.currencyFormat ? constraint.currencyFormat : "JPY";
                                    var groupSeparator = constraint.groupSeparator || ",";
                                    var rawValue = uk.text.replaceAll(String(value), groupSeparator, "");
                                    var formatter = new uk.text.NumberFormatter({ option: currencyOpts });
                                    var numVal = Number(rawValue);
                                    if (!isNaN(numVal))
                                        value = formatter.format(numVal);
                                    else
                                        value = rawValue;
                                }
                                else if (valueType === "HalfInt") {
                                    value = nts.uk.ntsNumber.formatNumber(value, { decimallength: 1 });
                                }
                                else if (valueType === "String" && contrainte && contrainte.maxLength && contrainte.isZeroPadded) {
                                    value = uk.text.padLeft(value, '0', parseInt(contrainte.maxLength));
                                    if (spl)
                                        spl.padded = true;
                                }
                                else if (valueType === "String" && contrainte && contrainte.charType === "Kana") {
                                    value = uk.text.hiraganaToKatakana(uk.text.oneByteKatakanaToTwoByte(value));
                                    if (spl)
                                        spl.toKana = true;
                                }
                                else if (valueType === "String") {
                                    if (constraint.primitiveValue === "StampNumber" && contrainte.formatOption && contrainte.formatOption.autoFill) {
                                        value = _[contrainte.formatOption.fillDirection === "right" ? "padEnd" : "padStart"](value, contrainte.maxLength, contrainte.formatOption.fillCharacter);
                                    }
                                }
                            }
                        }
                        return value;
                    }
                    su.format = format;
                    /**
                     * Format save.
                     */
                    function formatSave(column, value) {
                        if (column.constraint && !uk.util.isNullOrEmpty(value)) {
                            var parsed = void 0, constraint = column.constraint, constr = void 0;
                            var valueType = constraint.primitiveValue ? ((constr = ui.validation.getConstraint(constraint.primitiveValue)) && constr.valueType)
                                : constraint.cDisplayType;
                            if (!_.isNil(value) && value !== "") {
                                if (valueType === "Time") {
                                    parsed = uk.time.minutesBased.duration.parseString(String(value));
                                    if (parsed.success)
                                        value = parsed.format();
                                }
                                else if (valueType === "TimeWithDay" || valueType === "Clock") {
                                    var minutes = uk.time.minutesBased.clock.dayattr.parseString(String(value)).asMinutes;
                                    if (_.isNil(minutes))
                                        return value;
                                    try {
                                        value = uk.time.minutesBased.clock.dayattr.create(minutes).shortText;
                                    }
                                    catch (e) { }
                                }
                                else if (valueType === "String") {
                                    if (constraint.primitiveValue === "StampNumber" && constr.formatOption && constr.formatOption.autoFill) {
                                        value = _[constr.formatOption.fillDirection === "right" ? "padEnd" : "padStart"](value, constr.maxLength, constr.formatOption.fillCharacter);
                                    }
                                }
                            }
                        }
                        return value;
                    }
                    su.formatSave = formatSave;
                    /**
                     * CollerData.
                     */
                    function collerData(evt) {
                        var data;
                        var key, keys = _.keys(_selected);
                        if (keys.length !== 1 || _selected[keys[0]].length !== 1)
                            return;
                        key = _selected[keys[0]][0];
                        var target = lch.cellAt(_$grid[0], keys[0], key);
                        if (!target)
                            return;
                        if (window.clipboardData) {
                            window.event.returnValue = false;
                            data = window.clipboardData.getData("text");
                        }
                        else {
                            data = evt.clipboardData.getData("text/plain");
                        }
                        if (_mEditor && _mEditor.type === dkn.TEXTBOX) {
                            var $editor = dkn.controlType[dkn.TEXTBOX].my;
                            var $input_1 = $editor.querySelector("input.medit");
                            $input_1.value = data;
                            evt.preventDefault();
                            setTimeout(function () { return $input_1.focus(); });
                            return;
                        }
                        if (su.afterCollertar)
                            setTimeout(function () { return su.afterCollertar.focus({ preventScroll: true }); }, 1);
                        var formatted, disFormat, coord = ti.getCellCoord(target), col = _columnsMap[coord.columnKey];
                        var inputRidd = function ($t, rowIdx, columnKey, dFormat) {
                            if ($t.classList.contains(khl.ERROR_CLS))
                                return;
                            var ridd = _columnsMap[columnKey][0].inputProcess;
                            if (ridd) {
                                var rData = _dataSource[rowIdx];
                                var rId = void 0;
                                if (rData)
                                    rId = rData[_pk];
                                ridd(rId, columnKey, dFormat, rData).done(function (sData) {
                                    _.forEach(sData, function (sd) {
                                        var res = _$grid.mGrid("updateCell", sd.id, sd.item, sd.value);
                                        if (!_.isNil(res) && res >= 0) {
                                            var sht = _.filter(_.keys(_mafollicle[SheetDef]), function (k) {
                                                if (k === _currentSheet)
                                                    return;
                                                var sCols = _mafollicle[SheetDef][k].columns;
                                                return _.find(sCols, function (c) { return c.key === sd.item; });
                                            });
                                            _.forEach(sht, function (s) {
                                                wedgeShtCell(res, sd.item, sd.value, s);
                                            });
                                        }
                                    });
                                });
                            }
                        };
                        var collerRidd = function (rowIdx, columnKey, value) {
                            var sCol = _specialColumn[columnKey];
                            if (sCol) {
                                var cbx = dkn.controlType[sCol];
                                wedgeCell(_$grid[0], { rowIdx: rowIdx, columnKey: sCol }, value);
                                var selectedOpt = _.find(cbx.options, function (o) { return o.code === value; });
                                if (!_.isNil(selectedOpt)) {
                                    var $cbxCell = lch.cellAt(_$grid[0], rowIdx, sCol);
                                    $cbxCell.textContent = selectedOpt ? selectedOpt.name : "";
                                    $.data($cbxCell, lo.CBX_SELECTED_TD, value);
                                }
                            }
                            else if ((sCol = _specialLinkColumn[columnKey]) && sCol.changed) {
                                var data_3 = _mafollicle[_currentPage].origDs[rowIdx];
                                sCol.changed(columnKey, data_3[_pk], value, data_3[columnKey]).done(function (res) {
                                    var $linkCell = lch.cellAt(_$grid[0], rowIdx, sCol.column);
                                    if ($linkCell) {
                                        $linkCell.querySelector("a").textContent = res;
                                        wedgeCell(_$grid[0], { rowIdx: rowIdx, columnKey: sCol.column }, res);
                                    }
                                    var $t = lch.cellAt(_$grid[0], rowIdx, columnKey);
                                    inputRidd($t, rowIdx, columnKey, value);
                                });
                            }
                            else {
                                var $t = lch.cellAt(_$grid[0], rowIdx, columnKey);
                                inputRidd($t, rowIdx, columnKey, value);
                            }
                        };
                        if (su._copieMode === 0) {
                            if (dkn.controlType[coord.columnKey] !== dkn.TEXTBOX || target.classList.contains(color.Disable)
                                || target.classList.contains(color.Lock) || !col || col.length === 0 || data === "null")
                                return;
                            var result = void 0, validator = _validators[coord.columnKey];
                            if (validator) {
                                var idt = _dataSource[coord.rowIdx][_pk];
                                result = validator.probe(data, idt);
                                var cell = { id: idt, index: coord.rowIdx, columnKey: coord.columnKey, element: target };
                                khl.clear(cell);
                                if (!result.isValid) {
                                    khl.set(cell, result.errorMessage);
                                }
                                if (khl._infobulle) {
                                    ti.remove(khl._infobulle);
                                    dkn.closeDD(khl._infobulle, true);
                                }
                            }
                            formatted = su.format(col[0], data);
                            target.innerHTML = formatted;
                            disFormat = su.formatSave(col[0], data);
                            _histoire.push({ tx: uk.util.randomId(), o: [{ coord: coord, value: _dataSource[coord.rowIdx][coord.columnKey] }] });
                            su.wedgeCell(_$grid[0], coord, disFormat, null, !result ? false : !result.isValid);
                            $.data(target, v.DATA, disFormat);
                            collerRidd(coord.rowIdx, coord.columnKey, disFormat);
                            return;
                        }
                        var dataRows = _.map(data.split("\n"), function (row) {
                            return row.split("\t");
                        });
                        var rowsCount = dataRows.length;
                        if ((dataRows[rowsCount - 1].length === 1 && dataRows[rowsCount - 1][0] === "")
                            || (dataRows.length === 1 && dataRows[0].length === 1
                                && (dataRows[0][0] === "" || dataRows[0][0] === "\r"))) {
                            dataRows.pop();
                        }
                        var cArr, e, pointCoord, pointCol, cPoint, rPoint = keys[0], fixedCount = _.keys(_mDesc.fixedColIdxes).length, eIdx = _mDesc.fixedColIdxes[key];
                        if (_.isNil(eIdx)) {
                            eIdx = _mDesc.colIdxes[key];
                            if (!_.isNil(eIdx))
                                eIdx += fixedCount;
                        }
                        if (_.isNil(eIdx))
                            return;
                        var sess = { tx: uk.util.randomId(), o: [] };
                        _.forEach(dataRows, function (r) {
                            cArr = lch.rowAt(_$grid[0], rPoint++);
                            cPoint = eIdx;
                            if (!cArr)
                                return;
                            _.forEach(r, function (c, i) {
                                e = cArr[cPoint++];
                                if (e.style.display === "none" && cArr.length > cPoint + 1)
                                    e = cArr[cPoint++];
                                if (!e)
                                    return false;
                                c = _.trim(c);
                                if (c === "null")
                                    return;
                                pointCoord = ti.getCellCoord(e);
                                pointCol = _columnsMap[pointCoord.columnKey];
                                if (dkn.controlType[pointCoord.columnKey] !== dkn.TEXTBOX || e.classList.contains(color.Disable)
                                    || e.classList.contains(color.Lock) || !pointCol || pointCol.length === 0) {
                                    return;
                                }
                                var result, validator = _validators[pointCoord.columnKey];
                                if (validator) {
                                    var idt = _dataSource[pointCoord.rowIdx][_pk];
                                    result = validator.probe(c, idt);
                                    var cell = { id: idt, index: pointCoord.rowIdx, columnKey: pointCoord.columnKey, element: e };
                                    khl.clear(cell);
                                    if (!result.isValid) {
                                        khl.set(cell, result.errorMessage);
                                    }
                                    if (khl._infobulle) {
                                        ti.remove(khl._infobulle);
                                        dkn.closeDD(khl._infobulle, true);
                                    }
                                }
                                formatted = su.format(pointCol[0], c);
                                e.innerHTML = formatted;
                                disFormat = su.formatSave(pointCol[0], c);
                                sess.o.push({ coord: pointCoord, value: _dataSource[pointCoord.rowIdx][pointCoord.columnKey] });
                                su.wedgeCell(_$grid[0], pointCoord, disFormat, null, !result ? false : !result.isValid);
                                $.data(e, v.DATA, disFormat);
                                collerRidd(pointCoord.rowIdx, pointCoord.columnKey, disFormat);
                            });
                        });
                        _histoire.push(sess);
                    }
                    su.collerData = collerData;
                    /**
                     * CopieData.
                     */
                    function copieData(coupe) {
                        var keys = Object.keys(_selected);
                        if (!_selected || keys.length === 0)
                            return;
                        var coord, key, struct = "", ds = _dataSource, sess, onetar;
                        if (coupe) {
                            sess = { tx: uk.util.randomId(), o: [] };
                        }
                        if (keys.length === 1 && _selected[keys[0]].length === 1) {
                            su._copieMode = 0;
                            key = _selected[keys[0]][0];
                            var struct_1, cell = lch.cellAt(_$grid[0], keys[0], key);
                            if (cell.classList.contains(color.Disable) || cell.classList.contains(color.Lock)) {
                                struct_1 = "null";
                            }
                            else {
                                struct_1 = ds[parseFloat(keys[0])][key];
                            }
                            if (coupe) {
                                if (cell && !cell.classList.contains(color.Disable) && !cell.classList.contains(color.Lock)) {
                                    coord = ti.getCellCoord(cell);
                                    cell.innerHTML = "";
                                    sess.o.push({ coord: coord, value: _dataSource[coord.rowIdx][coord.columnKey] });
                                    su.wedgeCell(_$grid[0], coord, "");
                                    $.data(cell, v.DATA, "");
                                    _histoire.push(sess);
                                }
                            }
                            if (_copieer) {
                                onetar = document.activeElement;
                                _copieer.value = struct_1;
                                _copieer.select();
                                document.execCommand("copy");
                                onetar.focus({ preventScroll: true });
                            }
                            return;
                        }
                        var sortedKeys = keys.sort(function (o, t) { return o - t; });
                        var fixedCount = 0, colIdx, elms, e, desc = _mDesc, min, max, value;
                        su._copieMode = 1;
                        if (desc.fixedColIdxes) {
                            fixedCount = Object.keys(desc.fixedColIdxes).length;
                        }
                        _.forEach(_.keys(_selected), function (r) {
                            var idxArr = _.map(_selected[r], function (c) {
                                var idx, isFixed = true;
                                if (desc.fixedColIdxes) {
                                    idx = desc.fixedColIdxes[c];
                                }
                                if (_.isNil(idx)) {
                                    idx = desc.colIdxes[c];
                                    isFixed = false;
                                }
                                if (coupe) {
                                    sess.o.push({ coord: { rowIdx: r, columnKey: c }, value: _dataSource[r][c] });
                                }
                                return isFixed ? idx : idx + fixedCount;
                            });
                            var minVal = _.min(idxArr);
                            var maxVal = _.max(idxArr);
                            if (_.isNil(min) || min > minVal)
                                min = minVal;
                            if (_.isNil(max) || max < maxVal)
                                max = maxVal;
                        });
                        if (coupe && sess.o.length > 0) {
                            _histoire.push(sess);
                        }
                        for (var i = parseFloat(sortedKeys[0]); i <= parseFloat(sortedKeys[sortedKeys.length - 1]); i++) {
                            elms = lch.rowAt(_$grid[0], i);
                            for (var c = min; c <= max; c++) {
                                e = elms[c];
                                if (!e || e.style.display === "none")
                                    return;
                                coord = ti.getCellCoord(e);
                                value = ds[i][coord.columnKey];
                                if (_.isNil(value) || value === "" || !e.classList.contains(lch.CELL_SELECTED_CLS)
                                    || e.classList.contains(color.Disable) || e.classList.contains(color.Lock)) {
                                    struct += "null";
                                }
                                else {
                                    struct += value;
                                    if (coupe) {
                                        e.innerHTML = "";
                                        su.wedgeCell(_$grid[0], coord, "");
                                        $.data(e, v.DATA, "");
                                    }
                                }
                                if (c === max)
                                    struct += "\n";
                                else
                                    struct += "\t";
                            }
                        }
                        if (_copieer) {
                            onetar = document.activeElement;
                            _copieer.value = struct;
                            _copieer.select();
                            document.execCommand("copy");
                            onetar.focus({ preventScroll: true });
                        }
                    }
                    su.copieData = copieData;
                    /**
                     * Annuler.
                     */
                    function annuler() {
                        if (!_histoire || _histoire.length === 0)
                            return;
                        var sess = _histoire.pop();
                        if (sess) {
                            var afterAnnulerRidd_1 = function (el, c, column, disFormat) {
                                if (el.classList.contains(khl.ERROR_CLS))
                                    return;
                                var ridd = column[0].inputProcess;
                                if (ridd) {
                                    var rData = _dataSource[parseFloat(c.rowIdx)];
                                    var rId = void 0;
                                    if (rData)
                                        rId = rData[_pk];
                                    ridd(rId, c.columnKey, disFormat, rData).done(function (sData) {
                                        _.forEach(sData, function (sd) {
                                            var res = _$grid.mGrid("updateCell", sd.id, sd.item, sd.value);
                                            if (!_.isNil(res) && res >= 0) {
                                                var sht = _.filter(_.keys(_mafollicle[SheetDef]), function (k) {
                                                    if (k === _currentSheet)
                                                        return;
                                                    var sCols = _mafollicle[SheetDef][k].columns;
                                                    return _.find(sCols, function (c) { return c.key === sd.item; });
                                                });
                                                _.forEach(sht, function (s) {
                                                    wedgeShtCell(res, sd.item, sd.value, s);
                                                });
                                            }
                                        });
                                    });
                                }
                            };
                            sess.o.forEach(function (c) {
                                var failed, spl = {}, el = lch.cellAt(_$grid[0], c.coord.rowIdx, c.coord.columnKey), column = _columnsMap[c.coord.columnKey], formatted = failed ? c.value : (_zeroHidden && ti.isZero(c.value, c.coord.columnKey) ? "" : format(column[0], c.value, spl));
                                var validator = _validators[c.coord.columnKey];
                                if (validator) {
                                    var idt = _dataSource[c.coord.rowIdx][_pk], result = validator.probe(c.value, idt);
                                    var cell = { id: idt, index: c.coord.rowIdx, columnKey: c.coord.columnKey, element: el };
                                    khl.clear(cell);
                                    if (!result.isValid) {
                                        khl.set(cell, result.errorMessage);
                                        failed = true;
                                    }
                                }
                                el.textContent = formatted;
                                var disFormat = c.value === "" || failed ? c.value : ((spl.padded || spl.toKana) ? formatted : formatSave(column[0], c.value));
                                wedgeCell(_$grid[0], c.coord, disFormat);
                                $.data(el, v.DATA, disFormat);
                                var sCol = _specialColumn[c.coord.columnKey];
                                if (sCol) {
                                    var cbx = dkn.controlType[sCol];
                                    wedgeCell(_$grid[0], { rowIdx: c.coord.rowIdx, columnKey: sCol }, c.value);
                                    var selectedOpt = _.find(cbx.options, function (o) { return o.code === c.value; });
                                    if (!_.isNil(selectedOpt)) {
                                        var $cbxCell = lch.cellAt(_$grid[0], c.coord.rowIdx, sCol);
                                        $cbxCell.textContent = selectedOpt ? selectedOpt.name : "";
                                        $.data($cbxCell, lo.CBX_SELECTED_TD, c.value);
                                    }
                                }
                                else if ((sCol = _specialLinkColumn[c.coord.columnKey]) && sCol.changed) {
                                    var data = _mafollicle[_currentPage].origDs[c.coord.rowIdx];
                                    sCol.changed(c.coord.columnKey, data[_pk], formatted, data[c.coord.columnKey]).done(function (res) {
                                        var $linkCell = lch.cellAt(_$grid[0], c.coord.rowIdx, sCol.column);
                                        if ($linkCell) {
                                            $linkCell.querySelector("a").textContent = res;
                                            wedgeCell(_$grid[0], { rowIdx: c.coord.rowIdx, columnKey: sCol.column }, res);
                                        }
                                        afterAnnulerRidd_1(el, c.coord, column, disFormat);
                                    });
                                }
                                else
                                    afterAnnulerRidd_1(el, c.coord, column, disFormat);
                            });
                        }
                    }
                    su.annuler = annuler;
                })(su || (su = {}));
                var ssk;
                (function (ssk) {
                    ssk.SCROLL_EVT = "scroll";
                    ssk.CLICK_EVT = "click";
                    ssk.MOUSE_DOWN = "mousedown";
                    ssk.MOUSE_MOVE = "mousemove";
                    ssk.MOUSE_UP = "mouseup";
                    ssk.MOUSE_OVER = "mouseover";
                    ssk.MOUSE_ENTER = "mouseenter";
                    ssk.MOUSE_OUT = "mouseout";
                    ssk.MOUSE_LEAVE = "mouseleave";
                    ssk.FOCUS_IN = "focusin";
                    ssk.PASTE = "paste";
                    ssk.MOUSE_WHEEL = "wheel";
                    ssk.RESIZE = "resize";
                    ssk.KEY_DOWN = "keydown";
                    ssk.KEY_UP = "keyup";
                    ssk.RENDERED = "mgridrowsrendered";
                    ssk.MS = "mgridms";
                    ssk.MS_BEFORE_COMPL = "mgridmsbeforecompletion";
                    ssk.KeyPressed = {};
                    window.addXEventListener = document.addXEventListener = Element.prototype.addXEventListener = addEventListener;
                    window.removeXEventListener = document.removeXEventListener = Element.prototype.removeXEventListener = removeEventListener;
                    /**
                     * Trigger.
                     */
                    function trigger($target, eventName, args) {
                        var event;
                        if (window.CustomEvent) {
                            event = new CustomEvent(eventName, { detail: args });
                        }
                        else {
                            event = document.createEvent('CustomEvent');
                            event.initCustomEvent(eventName, true, true, args);
                        }
                        $target.dispatchEvent(event);
                    }
                    ssk.trigger = trigger;
                    /**
                     * Add event listener.
                     */
                    function addEventListener(event, cb, opts) {
                        var self = this;
                        if (!self.ns)
                            self.ns = {};
                        if (!self.ns[event])
                            self.ns[event] = [cb];
                        else
                            self.ns[event].push(cb);
                        self.addEventListener(event.split(".")[0], cb, opts);
                    }
                    ;
                    /**
                     * Remove event listener.
                     */
                    function removeEventListener(event, cb) {
                        var self = this;
                        if (!self.ns)
                            return;
                        if (cb) {
                            var keys = Object.keys(self.ns).filter(function (k) {
                                return (k === event || k === event.split(".")[0])
                                    && self.ns[k].indexOf(cb) > -1;
                            });
                            var key = void 0;
                            if (keys.length > 0) {
                                key = keys[0];
                                self.ns[key].splice(self.ns[key].indexOf(cb), 1);
                                if (self.ns[key].length === 0)
                                    delete self.ns[key];
                            }
                            self.removeEventListener(event.split(".")[0], cb);
                            return;
                        }
                        if (!self.ns[event])
                            return;
                        self.ns[event].forEach(function (e) {
                            self.removeEventListener(event.split(".")[0], e);
                        });
                        delete self.ns[event];
                    }
                })(ssk || (ssk = {}));
                var gp;
                (function (gp) {
                    gp.PAGING_CLS = "mgrid-paging";
                    gp.SHEET_CLS = "mgrid-sheet";
                    gp.PAGE_HEIGHT = 44;
                    gp.SHEET_HEIGHT = 30;
                    /**
                     * ImiPages.
                     */
                    function imiPages($container, top, width, load) {
                        if (!_paging)
                            return;
                        var $pageArea = v.createWrapper(top + ti.getScrollWidth() + SUM_HEIGHT + "px", 0, { width: parseFloat(width) + ti.getScrollWidth() + "px", height: gp.PAGE_HEIGHT + "px", containerClass: gp.PAGING_CLS });
                        $container.appendChild($pageArea);
                        var $recDesc = document.createElement("span");
                        $recDesc.classList.add("mgrid-pagerecordlabel");
                        $recDesc.textContent = _pageSize + " レコード";
                        $pageArea.appendChild($recDesc);
                        var $gridPaging = _prtDiv.cloneNode();
                        $gridPaging.classList.add("mgrid-paging-nav");
                        $pageArea.appendChild($gridPaging);
                        var $firstPage = _prtDiv.cloneNode();
                        $firstPage.classList.add("mgrid-firstpage");
                        $firstPage.classList.add("mgrid-paging-item");
                        $firstPage.classList.add("ui-state-default");
                        $gridPaging.appendChild($firstPage);
                        var $arrowStopImg = document.createElement("span");
                        $arrowStopImg.classList.add("mgrid-pageimg");
                        $arrowStopImg.classList.add("ui-icon");
                        $arrowStopImg.classList.add("ui-icon-arrowstop-1-w");
                        $firstPage.appendChild($arrowStopImg);
                        var $buttons = document.createElement("ul");
                        $buttons.classList.add("mgrid-page-buttonlist");
                        $gridPaging.appendChild($buttons);
                        var pageList = _.filter(Object.keys(_mafollicle), function (p) { return p !== SheetDef; }).sort(function (p1, p2) { return parseFloat(p1) - parseFloat(p2); });
                        $firstPage.addXEventListener(ssk.CLICK_EVT, function (evt) {
                            if (parseInt(pageList[0]) === _currentPage)
                                return;
                            var btns = $buttons.querySelectorAll("li");
                            _.forEach(btns, function (li) {
                                if (li.classList.contains("ui-state-active")) {
                                    li.classList.remove("ui-state-active");
                                }
                            });
                            lungeto(0);
                            btns[0].classList.add("ui-state-active");
                            if (_.isFunction(load))
                                load(1);
                        });
                        _.forEach(pageList, function (p) {
                            if (p !== SheetDef) {
                                var $pageBtn_1 = document.createElement("li");
                                $pageBtn_1.classList.add("mgrid-page-button");
                                $pageBtn_1.classList.add("ui-state-default");
                                $pageBtn_1.textContent = parseInt(p) + 1;
                                if (parseInt(p) === _currentPage)
                                    $pageBtn_1.classList.add("ui-state-active");
                                $pageBtn_1.addXEventListener(ssk.CLICK_EVT, function (evt) {
                                    if ($pageBtn_1.classList.contains("ui-state-active"))
                                        return;
                                    lungeto(parseInt(p));
                                    _.forEach($buttons.querySelectorAll("li"), function (li) {
                                        if (li.classList.contains("ui-state-active")) {
                                            li.classList.remove("ui-state-active");
                                        }
                                    });
                                    $pageBtn_1.classList.add("ui-state-active");
                                    if (_.isFunction(load))
                                        load(parseInt(p) + 1);
                                });
                                $buttons.appendChild($pageBtn_1);
                            }
                        });
                        var $lastPage = _prtDiv.cloneNode();
                        $lastPage.classList.add("mgrid-lastpage");
                        $lastPage.classList.add("mgrid-paging-item");
                        $lastPage.classList.add("ui-state-default");
                        $gridPaging.appendChild($lastPage);
                        $lastPage.addXEventListener(ssk.CLICK_EVT, function (evt) {
                            if (pageList.length - 1 === _currentPage)
                                return;
                            var btns = $buttons.querySelectorAll("li");
                            _.forEach(btns, function (li) {
                                if (li.classList.contains("ui-state-active")) {
                                    li.classList.remove("ui-state-active");
                                }
                            });
                            lungeto(pageList.length - 1);
                            btns[btns.length - 1].classList.add("ui-state-active");
                            if (_.isFunction(load))
                                load(pageList.length);
                        });
                        var $arrowStopEImg = document.createElement("span");
                        $arrowStopEImg.classList.add("mgrid-pageimg");
                        $arrowStopEImg.classList.add("ui-icon");
                        $arrowStopEImg.classList.add("ui-icon-arrowstop-1-e");
                        $lastPage.appendChild($arrowStopEImg);
                    }
                    gp.imiPages = imiPages;
                    /**
                     * ImiSheets.
                     */
                    function imiSheets($container, top, width) {
                        if (!_sheeting)
                            return;
                        gp.$sheetArea = v.createWrapper(top + ti.getScrollWidth() + SUM_HEIGHT + "px", 0, { width: parseFloat(width) + ti.getScrollWidth() + "px", height: gp.SHEET_HEIGHT + "px", containerClass: gp.SHEET_CLS });
                        $container.appendChild(gp.$sheetArea);
                        var $scrollBar = document.createElement("ul");
                        $scrollBar.classList.add("mgrid-sheet-scrollbar");
                        gp.$sheetArea.appendChild($scrollBar);
                        var $up = document.createElement("li");
                        $up.className = "ui-icon-triangle-1-n ui-icon";
                        $scrollBar.appendChild($up);
                        var $down = document.createElement("li");
                        $down.className = "ui-icon-triangle-1-s ui-icon";
                        $scrollBar.appendChild($down);
                        var $gridSheet = _prtDiv.cloneNode();
                        $gridSheet.classList.add("mgrid-sheet-nav");
                        gp.$sheetArea.appendChild($gridSheet);
                        var $buttons = document.createElement("ul");
                        $buttons.classList.add("mgrid-sheet-buttonlist");
                        $gridSheet.appendChild($buttons);
                        _.forEach(Object.keys(_mafollicle[SheetDef]), function (s) {
                            var $btn = document.createElement("li");
                            $btn.classList.add("mgrid-sheet-button");
                            $btn.classList.add("ui-state-default");
                            $btn.textContent = _mafollicle[SheetDef][s].text;
                            if (s === _currentSheet)
                                $btn.classList.add("ui-state-active");
                            $btn.addXEventListener(ssk.CLICK_EVT, function (evt) {
                                if ($btn.classList.contains("ui-state-active")
                                    || !_dataSource || _dataSource.length === 0)
                                    return;
                                hopto(s);
                                _.forEach($buttons.querySelectorAll("li"), function (li) {
                                    if (li.classList.contains("ui-state-active")) {
                                        li.classList.remove("ui-state-active");
                                    }
                                });
                                $btn.classList.add("ui-state-active");
                            });
                            $buttons.appendChild($btn);
                        });
                        var sheetNav = $($gridSheet);
                        $up.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                            sheetNav.scrollTop(sheetNav.scrollTop() - gp.SHEET_HEIGHT);
                        });
                        $down.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                            sheetNav.scrollTop(sheetNav.scrollTop() + gp.SHEET_HEIGHT);
                        });
                    }
                    gp.imiSheets = imiSheets;
                    /**
                     * Lungeto.
                     */
                    function lungeto(index) {
                        var sheetDef = _mafollicle[SheetDef][_currentSheet];
                        //            _mafollicle[_currentPage].dataSource = _.cloneDeep(_dataSource);
                        _currentPage = index;
                        _dataSource = _mafollicle[_currentPage].dataSource;
                        v._voilerRows = _mafollicle[_currentPage].voilRows;
                        _hr = null;
                        lch.clearAll(_$grid[0]);
                        _.filter(_bodyWrappers, function (w) { return w.classList.contains(FREE); })[0].scrollTop = 0;
                        if (!_vessel()) {
                            _mafollicle[_currentPage][_currentSheet] = { errors: [], desc: {}, dirties: {}, zeroHidden: _zeroHidden, selected: {}, histoire: [] };
                        }
                        _mDesc = _vessel().desc;
                        _errors = _vessel().errors;
                        _dirties = _vessel().dirties;
                        _selected = _vessel().selected;
                        _histoire = _vessel().histoire;
                        var sum, res = _cloud.renderRows(true);
                        ti.calcTotal();
                        _.forEach(_.keys(_summaries), function (k) {
                            sum = _summaries[k];
                            if (!sum[_currentSheet])
                                return;
                            if (sum.calculator === "Number") {
                                sum[_currentSheet].textContent = sum.formatter === "Currency" ? ti.asCurrency(sum[_currentPage]) : sum[_currentPage];
                            }
                            else if (sum.calculator === "Time") {
                                sum[_currentSheet].textContent = ti.momentToString(sum[_currentPage]);
                            }
                        });
                        if (!res) {
                            var tmp_1 = _zeroHidden;
                            _zeroHidden = _vessel().zeroHidden;
                            _vessel().zeroHidden = tmp_1;
                            if (lo.changeZero(_vessel().zeroHidden))
                                _zeroHidden = _vessel().zeroHidden;
                            return;
                        }
                        var start = res.start, end = res.end, cursor;
                        if (_.isNil(_mDesc) || Object.keys(_mDesc).length === 0) {
                            $.data(_$grid[0], lo.DESC, _mDesc);
                            if (!_.isNil(res.fixedColIdxes) || !_.isNil(res.colIdxes)) {
                                _mDesc.fixedColIdxes = res.fixedColIdxes;
                                _mDesc.colIdxes = res.colIdxes;
                            }
                            _mDesc.fixedRows = [];
                            _mDesc.rows = [];
                            _mDesc.fixedRowElements = [];
                            _mDesc.rowElements = [];
                        }
                        for (var i = start; i <= end; i++) {
                            cursor = i - start;
                            if (!_mDesc.fixedRows[i]) {
                                _mDesc.fixedRows[i] = res.fixedRows[cursor];
                                _mDesc.fixedRowElements[i] = res.fixedRowElements[cursor];
                            }
                            _mDesc.rows[i] = res.rows[cursor];
                            _mDesc.rowElements[i] = res.rowElements[cursor];
                        }
                        var tmp = _zeroHidden;
                        _zeroHidden = _vessel().zeroHidden;
                        _vessel().zeroHidden = tmp;
                        if (lo.changeZero(_vessel().zeroHidden))
                            _zeroHidden = _vessel().zeroHidden;
                    }
                    gp.lungeto = lungeto;
                    /**
                     * Hopto.
                     */
                    function hopto(place) {
                        var bfPainter;
                        if (_currentSheet === place)
                            return;
                        if (_hasFixed) {
                            bfPainter = _.cloneDeep(_mafollicle[SheetDef][_currentSheet].painters[0]);
                            if (_summaries) {
                                _.forEach(_fixedColumns, function (c) {
                                    var sum = _summaries[c.key];
                                    if (!sum || !sum[_currentSheet])
                                        return;
                                    sum[place] = sum[_currentSheet];
                                });
                            }
                        }
                        _currentSheet = place;
                        if (!_vessel()) {
                            var desc = {
                                fixedColIdxes: _.cloneDeep(_mDesc.fixedColIdxes),
                                fixedRows: _.cloneDeep(_mDesc.fixedRows),
                                fixedRowElements: _.cloneDeep(_mDesc.fixedRowElements),
                                colIdxes: [],
                                rows: [],
                                rowElements: []
                            };
                            var dirties_1 = {}, selected_4 = {};
                            if (_selected) {
                                _.forEach(_.keys(_selected), function (r) {
                                    var selectArr = _.filter(_selected[r], function (c) { return _.some(_fixedColumns, function (fc) { return fc.key === c; }); });
                                    if (selectArr.length > 0) {
                                        selected_4[r] = selectArr;
                                    }
                                });
                            }
                            if (_dirties) {
                                _.forEach(_.keys(_dirties), function (r) {
                                    var cols = {};
                                    _.forEach(_.keys(_dirties[r]), function (c) {
                                        if (_.some(_fixedColumns, function (fc) { return fc.key === c; })) {
                                            cols[c] = _dirties[r][c];
                                        }
                                    });
                                    if (_.keys(cols).length > 0) {
                                        dirties_1[r] = cols;
                                    }
                                });
                            }
                            _mafollicle[_currentPage][_currentSheet] = { desc: desc, errors: [], dirties: dirties_1, zeroHidden: _zeroHidden, selected: selected_4, histoire: [] };
                        }
                        else if (!_vessel().desc) {
                            var desc = {
                                fixedColIdxes: _.cloneDeep(_mDesc.fixedColIdxes),
                                fixedRows: _.cloneDeep(_mDesc.fixedRows),
                                fixedRowElements: _.cloneDeep(_mDesc.fixedRowElements),
                                colIdxes: [],
                                rows: [],
                                rowElements: []
                            };
                            var selected_5 = {};
                            if (_selected) {
                                _.forEach(_.keys(_selected), function (r) {
                                    var selectArr = _.filter(_selected[r], function (c) { return _.some(_fixedColumns, function (fc) { return fc.key === c; }); });
                                    if (selectArr.length > 0) {
                                        selected_5[r] = selectArr;
                                    }
                                });
                            }
                            if (_dirties && _vessel().dirties) {
                                _.forEach(_.keys(_dirties), function (r) {
                                    var cols = {};
                                    _.forEach(_.keys(_dirties[r]), function (c) {
                                        if (_.some(_fixedColumns, function (fc) { return fc.key === c; })) {
                                            cols[c] = _dirties[r][c];
                                        }
                                    });
                                    if (_.keys(cols).length > 0) {
                                        _vessel().dirties[r] = cols;
                                    }
                                });
                            }
                            _vessel().desc = desc;
                            _vessel().selected = selected_5;
                            _vessel().zeroHidden = _zeroHidden;
                            if (!_vessel().errors)
                                _vessel().errors = [];
                            _vessel().histoire = [];
                        }
                        else {
                            _.forEach(_.keys(_selected), function (r) {
                                _.forEach(_selected[r], function (c) {
                                    if (_.some(_fixedColumns, function (fc) { return fc.key === c; })) {
                                        if (!_vessel().selected[r]) {
                                            _vessel().selected[r] = [c];
                                        }
                                        else {
                                            _vessel().selected[r].push(c);
                                        }
                                    }
                                });
                            });
                            _.forEach(_.keys(_dirties), function (r) {
                                _.forEach(_.keys(_dirties[r]), function (c) {
                                    if (_.some(_fixedColumns, function (fc) { return fc.key === c; })) {
                                        if (!_vessel().dirties[r]) {
                                            _vessel().dirties[r] = {};
                                        }
                                        _vessel().dirties[r][c] = _dirties[r][c];
                                    }
                                });
                            });
                        }
                        _mDesc = _vessel().desc;
                        _errors = _vessel().errors;
                        _dirties = _vessel().dirties;
                        _selected = _vessel().selected;
                        _histoire = _vessel().histoire;
                        var $header = _$grid[0].querySelector("." + FREE + "." + HEADER);
                        var $headerTbl = $header.querySelector("table");
                        var bhGroup = $header.querySelector("colgroup");
                        var bhBody = $header.querySelector("tbody");
                        var dTable = _bodyWrappers[1].querySelector("table");
                        var bbGroup = dTable.querySelector("colgroup");
                        var sumGroupArr, sumTbl, bSumGroup, bSumBody, sumWrap = _$grid[0].querySelector("." + FREE + "-summaries");
                        if (sumWrap) {
                            sumTbl = sumWrap.querySelector("table");
                            bSumGroup = sumWrap.querySelector("colgroup");
                            bSumBody = sumWrap.querySelector("tbody");
                        }
                        var sWrap = _$grid[0].querySelector("." + gp.SHEET_CLS);
                        var pWrap = _$grid[0].querySelector("." + gp.PAGING_CLS);
                        if (!_vessel().$hGroup) {
                            kt.turfSurf(_cstifle(), null, _$grid.mGrid("option", "widthMem"));
                            _header.columns = _cstifle();
                            var $wrapper = v.createWrapper("0px", _leftAlign, _header, true);
                            _mafollicle[SheetDef][_currentSheet].maxWidth = _maxFreeWidth;
                            $header.style.maxWidth = _maxFreeWidth + "px";
                            var bw_1 = (_maxFreeWidth + ti.getScrollWidth()) + "px";
                            _bodyWrappers[1].style.maxWidth = bw_1;
                            var btmw_1 = (Math.min(parseFloat($header.style.width), parseFloat($header.style.maxWidth)) + _maxFixedWidth + ti.getScrollWidth() + 2) + "px";
                            if (sumWrap) {
                                sumWrap.style.maxWidth = _maxFreeWidth + "px";
                                sumWrap.style.width = $header.style.width;
                            }
                            if (sWrap) {
                                sWrap.style.width = btmw_1;
                            }
                            if (pWrap) {
                                pWrap.style.width = btmw_1;
                            }
                            $wrapper.classList.add(HEADER);
                            var table = v.process($wrapper, _header);
                            table.$table.style.height = _header.height;
                            var hGroup = $wrapper.querySelector("colgroup");
                            var hBody = $wrapper.querySelector("tbody");
                            $headerTbl.replaceChild(hGroup, bhGroup);
                            $headerTbl.replaceChild(hBody, bhBody);
                            _vessel().$hGroup = hGroup;
                            _vessel().$hBody = hBody;
                            _mafollicle[SheetDef][_currentSheet].hColArr = table.cols;
                            var artifactOptions = { primaryKey: _pk, controlMap: table.controlMap,
                                columns: _header.columns, features: _features, hasSum: _hasSum };
                            _mafollicle[SheetDef][_currentSheet].controlMap = _.assignIn(_fixedControlMap, table.controlMap);
                            var painters = _hasFixed ? [bfPainter, table.painter] : [table.painter];
                            _mafollicle[SheetDef][_currentSheet].painters = painters;
                            var colGroup_1 = document.createElement("colgroup");
                            var bodyGroupArr_1 = [];
                            _.forEach(table.cols, function (c) {
                                var col = c.cloneNode();
                                colGroup_1.appendChild(col);
                                bodyGroupArr_1.push(col);
                            });
                            _vessel().$bGroup = colGroup_1;
                            _mafollicle[SheetDef][_currentSheet].bColArr = bodyGroupArr_1;
                            dTable.replaceChild(colGroup_1, bbGroup);
                            _mafollicle[SheetDef][_currentSheet].levelStruct = _.cloneDeep(_header.levelStruct);
                            _cloud.painter.revive();
                            _cloud.sidePainter.revive();
                            v.construe(_$grid[0], _bodyWrappers, artifactOptions, true, _vessel().errors);
                            _vessel().$bBody = dTable.querySelector("tbody");
                            if (sumWrap) {
                                var $sumBody = document.createElement("tbody");
                                sumGroupArr = [], $sumGroup = document.createElement("colgroup");
                                var $tr_1 = document.createElement("tr");
                                $tr_1.style.height = "27px";
                                $sumBody.appendChild($tr_1);
                                _.forEach(table.cols, function (c) {
                                    var col = c.cloneNode(true);
                                    $sumGroup.appendChild(col);
                                    sumGroupArr.push(col);
                                });
                                _.forEach(table.painter.visibleColumns, function (c) {
                                    if (c.hidden)
                                        return;
                                    var sum = _summaries[c.key];
                                    var $td = _prtCell.cloneNode();
                                    $tr_1.appendChild($td);
                                    if (!sum)
                                        return;
                                    if (sum.calculator === "Time") {
                                        $td.textContent = ti.momentToString(sum[_currentPage]);
                                        sum[_currentSheet] = $td;
                                    }
                                    else if (sum.calculator === "Number") {
                                        $td.textContent = sum.formatter === "Currency" ? ti.asCurrency(sum[_currentPage]) : sum[_currentPage];
                                        sum[_currentSheet] = $td;
                                    }
                                    else {
                                        $td.textContent = sum.calculator;
                                    }
                                });
                                sumTbl.replaceChild($sumGroup, bSumGroup);
                                sumTbl.replaceChild($sumBody, bSumBody);
                                _vessel().$sumGroup = $sumGroup;
                                _vessel().$sumBody = $sumBody;
                                _mafollicle[SheetDef][_currentSheet].sumColArr = sumGroupArr;
                            }
                            if (kt._adjuster) {
                                kt._adjuster.nostal(table.cols, bodyGroupArr_1, sumGroupArr);
                                kt._adjuster.handle();
                            }
                            var tmp_2 = _vessel().zeroHidden;
                            _vessel().zeroHidden = _zeroHidden;
                            _zeroHidden = tmp_2;
                            if (lo.changeZero(_vessel().zeroHidden))
                                _zeroHidden = _vessel().zeroHidden;
                            return;
                        }
                        _maxFreeWidth = _mafollicle[SheetDef][_currentSheet].maxWidth;
                        $header.style.maxWidth = _maxFreeWidth + "px";
                        var bw = (_maxFreeWidth + ti.getScrollWidth()) + "px";
                        _bodyWrappers[1].style.maxWidth = bw;
                        var btmw = (Math.min(parseFloat($header.style.width), parseFloat($header.style.maxWidth)) + _maxFixedWidth + ti.getScrollWidth() + 2) + "px";
                        if (sumWrap) {
                            sumWrap.style.maxWidth = _maxFreeWidth + "px";
                            sumWrap.style.width = $header.style.width;
                        }
                        if (sWrap) {
                            sWrap.style.width = btmw;
                        }
                        if (pWrap) {
                            pWrap.style.width = btmw;
                        }
                        _cloud.painter.revive();
                        _cloud.sidePainter.revive();
                        $headerTbl.replaceChild(_vessel().$hGroup, bhGroup);
                        $headerTbl.replaceChild(_vessel().$hBody, bhBody);
                        dTable.replaceChild(_vessel().$bGroup, bbGroup);
                        //            dTable.replaceChild(_vessel().$bBody, dTable.querySelector("tbody"));
                        _cloud.renderSideRows(true);
                        _vessel().$bBody = dTable.querySelector("tbody");
                        if (sumWrap) {
                            sumTbl.replaceChild(_vessel().$sumGroup, bSumGroup);
                            sumTbl.replaceChild(_vessel().$sumBody, bSumBody);
                        }
                        if (kt._adjuster) {
                            kt._adjuster.nostal(_mafollicle[SheetDef][_currentSheet].hColArr, _mafollicle[SheetDef][_currentSheet].bColArr, _mafollicle[SheetDef][_currentSheet].sumColArr);
                            kt._adjuster.handle();
                        }
                        var tmp = _vessel().zeroHidden;
                        _vessel().zeroHidden = _zeroHidden;
                        _zeroHidden = tmp;
                        if (lo.changeZero(_vessel().zeroHidden))
                            _zeroHidden = _vessel().zeroHidden;
                    }
                    gp.hopto = hopto;
                })(gp = mgrid.gp || (mgrid.gp = {}));
                var dkn;
                (function (dkn) {
                    dkn.LABEL = 'Label';
                    dkn.LINK_LABEL = 'LinkLabel';
                    dkn.CHECKBOX = 'CheckBox';
                    dkn.SWITCH_BUTTONS = 'SwitchButtons';
                    dkn.COMBOBOX = 'ComboBox';
                    dkn.BUTTON = 'Button';
                    dkn.DELETE_BUTTON = 'DeleteButton';
                    dkn.REFER_BUTTON = 'ReferButton';
                    dkn.DATE_PICKER = 'DatePicker';
                    dkn.TEXTBOX = 'TextBox';
                    dkn.TEXT_EDITOR = 'TextEditor';
                    dkn.FLEX_IMAGE = 'FlexImage';
                    dkn.IMAGE = 'Image';
                    dkn.HEIGHT_CONTROL = "27px";
                    dkn.controlType = {};
                    dkn.allCheck = {};
                    dkn._ramass = {};
                    dkn.CONTROL_CLS = "nts-control";
                    dkn.LABEL_CLS = "mlabel";
                    dkn.CBX_CLS = "mcombo";
                    dkn.CBX_ACTIVE_CLS = "mcombo-state-active";
                    dkn.PICKER_HIDE = "datepicker-hide";
                    dkn.PICKER_PANEL = "datepicker-panel";
                    dkn.MUTED = "muted";
                    dkn.PICKED = "picked";
                    dkn.YM = "YYYY年MM月";
                    dkn.Y = "YYYY年";
                    dkn.WEEK_DAYS = ui_18.toBeResource.weekDaysShort;
                    /**
                     * Get control.
                     */
                    function getControl(name) {
                        switch (name) {
                            case dkn.TEXTBOX:
                                return textBox();
                            case dkn.CHECKBOX:
                                return checkBox;
                            //                case SWITCH_BUTTONS:
                            //                    return new SwitchButtons;
                            case dkn.COMBOBOX:
                                return comboBox;
                            case dkn.BUTTON:
                                return button;
                            case dkn.DELETE_BUTTON:
                                return deleteButton;
                            case dkn.REFER_BUTTON:
                                return refButton;
                            case dkn.DATE_PICKER:
                                return ramass;
                            //                case TEXT_EDITOR:
                            //                    return new TextEditor;
                            case dkn.LINK_LABEL:
                                return linkLabel;
                            case dkn.FLEX_IMAGE:
                                return flexImage;
                            case dkn.IMAGE:
                                return image;
                        }
                    }
                    dkn.getControl = getControl;
                    /**
                     * Textbox.
                     */
                    function textBox(key) {
                        var control = dkn.controlType[dkn.TEXTBOX];
                        if (!_.isNil(key))
                            dkn.controlType[key] = dkn.TEXTBOX;
                        if (control) {
                            return;
                        }
                        var $editContainer = document.createElement("div");
                        $editContainer.classList.add("medit-container");
                        $editContainer.style.height = (BODY_ROW_HEIGHT - 3) + "px";
                        var $editor = document.createElement("input");
                        $editor.classList.add("medit");
                        $editContainer.appendChild($editor);
                        dkn.controlType[dkn.TEXTBOX] = { my: $editContainer, type: dkn.TEXTBOX };
                        $editor.addXEventListener(ssk.KEY_DOWN, function (evt) {
                            if (ti.isEnterKey(evt) || ti.isTabKey(evt)) {
                                if (!_(ssk.KeyPressed).keys().filter(function (k) { return k !== "13" && k !== "9"; }).size()) {
                                    var d = ti.closest($editor, "td." + v.CELL_CLS);
                                    var coord = ti.getCellCoord(d), ctrl = dkn.controlType[coord.columnKey];
                                    if (!ctrl || ctrl.type !== dkn.DATE_PICKER) {
                                        su.endEdit(_$grid[0]);
                                        return;
                                    }
                                    var data = $.data(d, v.DATA);
                                    if (data instanceof Date) {
                                        data = data.toLocaleDateString("ja-JP", { year: "numeric", month: "2-digit", day: "2-digit" });
                                    }
                                    var tDate = moment.utc($editor.value, ctrl.format, true);
                                    if ( /*data !== tDate && !d.classList.contains(khl.ERROR_CLS) &&*/_.isFunction(ctrl.inputProcess)) {
                                        ctrl.inputProcess(tDate.isValid() ? tDate.format(ctrl.format[0]) : $editor.value, _dataSource[coord.rowIdx]);
                                    }
                                    su.endEdit(_$grid[0]);
                                }
                            }
                            else if (!evt.ctrlKey && ((evt.keyCode >= 46 && evt.keyCode <= 111) || (evt.keyCode >= 160 && evt.keyCode <= 223))) {
                                ssk.KeyPressed[evt.keyCode] = true;
                            }
                            if (ti.isArrowLeft(evt) || ti.isArrowRight(evt) || ti.isArrowUp(evt) || ti.isArrowDown(evt)) {
                                evt.stopPropagation();
                            }
                        });
                        var ms = function () {
                            var $td = ti.closest($editor, "td." + v.CELL_CLS);
                            if ($td) {
                                var coord = ti.getCellCoord($td);
                                var validator = _validators[coord.columnKey];
                                if (!validator)
                                    return;
                                var idt = _dataSource[coord.rowIdx][_pk], result = validator.probe($editor.value, idt);
                                var cell = { id: idt, index: coord.rowIdx, columnKey: coord.columnKey, element: $td };
                                khl.clear(cell);
                                if (result && !result.isValid) {
                                    khl.set(cell, result.errorMessage);
                                    return;
                                }
                                if (khl._infobulle) {
                                    ti.remove(khl._infobulle);
                                    dkn.closeDD(khl._infobulle, true);
                                }
                                return $td;
                            }
                        };
                        $editor.addXEventListener(ssk.KEY_UP, function (evt) {
                            delete ssk.KeyPressed[evt.keyCode];
                            ms();
                        });
                        $editor.addXEventListener(ssk.MS_BEFORE_COMPL, function () {
                            ms();
                        });
                        $editor.addXEventListener(ssk.MS, function (evt) {
                            var d = ms();
                            if (!d || !evt.detail || !evt.detail[0])
                                return;
                            var data = $.data(d, v.DATA);
                            if (data instanceof Date) {
                                data = data.toLocaleDateString("ja-JP", { year: "numeric", month: "2-digit", day: "2-digit" });
                            }
                            var tDate = moment.utc($editor.value, evt.detail[1]).format(evt.detail[1][0]);
                            if (data !== tDate) {
                                evt.detail[0]();
                            }
                        });
                    }
                    dkn.textBox = textBox;
                    /**
                     * Checkbox.
                     */
                    function checkBox(data) {
                        var checkBoxText;
                        var setChecked = data.update;
                        var initValue = data.initValue;
                        var $wrapper = document.createDocumentFragment();
                        var text = data.controlDef.options[data.controlDef.optionsText];
                        checkBoxText = text;
                        var $checkBoxLabel = document.createElement("label");
                        $checkBoxLabel.classList.add("ntsCheckBox");
                        var $checkBox = document.createElement("input");
                        $checkBox.setAttribute("type", "checkbox");
                        $checkBox.addXEventListener("change", function (evt) {
                            var checked = $checkBox.checked || evt.checked ? true : false;
                            var allCheckKey = dkn.allCheck[data.columnKey];
                            if (checked) {
                                $checkBox.setAttribute("checked", "checked");
                                if (allCheckKey) {
                                    if (!_.isNil(allCheckKey.count))
                                        allCheckKey.count++;
                                    if (allCheckKey.cb && allCheckKey.overall === allCheckKey.count) {
                                        allCheckKey.stt = true;
                                        allCheckKey.cb.checked = true;
                                        allCheckKey.cb.setAttribute("checked", "checked");
                                    }
                                }
                            }
                            else {
                                $checkBox.removeAttribute("checked");
                                if (allCheckKey) {
                                    if (!_.isNil(allCheckKey.count))
                                        allCheckKey.count--;
                                    if (allCheckKey.cb && allCheckKey.cb.checked) {
                                        allCheckKey.stt = false;
                                        allCheckKey.cb.checked = false;
                                        allCheckKey.cb.removeAttribute("checked");
                                    }
                                }
                            }
                            var r = ti.closest($checkBox, "tr");
                            if (r) {
                                setChecked(checked, parseFloat($.data(r, lo.VIEW)), evt.resetValue, evt.pg);
                            }
                        });
                        $checkBoxLabel.appendChild($checkBox);
                        var $box = document.createElement("span");
                        $box.classList.add("box");
                        $checkBoxLabel.appendChild($box);
                        if (checkBoxText && checkBoxText.length > 0) {
                            var span = document.createElement("span");
                            span.classList.add("label");
                            span.innerHTML = checkBoxText;
                            $checkBoxLabel.appendChild(span);
                        }
                        $wrapper.appendChild($checkBoxLabel);
                        var checked = initValue !== undefined ? initValue : true;
                        if (checked === true)
                            $checkBox.setAttribute("checked", "checked");
                        else
                            $checkBox.removeAttribute("checked");
                        if (data.enable === true)
                            $checkBox.removeAttribute("disabled");
                        else
                            $checkBox.setAttribute("disabled", "disabled");
                        if (!dkn.controlType[data.columnKey]) {
                            dkn.controlType[data.columnKey] = dkn.CHECKBOX;
                        }
                        return $wrapper;
                    }
                    /**
                     * Combobox.
                     */
                    function comboBox(data) {
                        var result = {}, control = dkn.controlType[data.columnKey];
                        result[data.controlDef.optionsValue] = null;
                        result[data.controlDef.optionsText] = "";
                        if (control) {
                            var options = void 0, panel = void 0, listType = void 0;
                            if (data.controlDef.list && !_.isNil(listType = data.controlDef.list[data.rowId])) {
                                options = data.controlDef.pattern[listType];
                                panel = control.panel[listType + 1];
                            }
                            else {
                                options = data.controlDef.options;
                                panel = control.panel[0];
                            }
                            if (!panel) {
                                result = stuffList(data, control.my, control.dropdown);
                            }
                            else {
                                _.forEach(options, function (i) {
                                    var val = i[data.controlDef.optionsValue];
                                    if (val === data.initValue) {
                                        result[data.controlDef.optionsValue] = val;
                                        result[data.controlDef.optionsText] = i[data.controlDef.optionsText];
                                        //                        result = createItem(_prtDiv, val, i[data.controlDef.optionsText]);
                                        return false;
                                    }
                                });
                            }
                            return result;
                        }
                        var comboDiv = document.createElement("div");
                        var $comboWrapper = comboDiv.cloneNode();
                        $comboWrapper.classList.add("mcombo-wrapper");
                        if (!data.controlDef.width) {
                            $comboWrapper.style.width = "100%";
                            //                $comboWrapper.style.top = "-1px";
                        }
                        else {
                            $comboWrapper.style.width = data.controlDef.width;
                        }
                        var $combo = comboDiv.cloneNode();
                        $combo.classList.add(dkn.CBX_CLS);
                        $combo.classList.add("ui-state-default");
                        $comboWrapper.appendChild($combo);
                        var $comboBtn = comboDiv.cloneNode();
                        $comboBtn.classList.add("mcombo-button");
                        $comboBtn.classList.add("ui-state-default");
                        var $comboBtnIcon = comboDiv.cloneNode();
                        $comboBtnIcon.classList.add("mcombo-buttonicon");
                        $comboBtnIcon.classList.add("ui-icon-triangle-1-s");
                        $comboBtnIcon.classList.add("ui-icon");
                        $comboBtn.appendChild($comboBtnIcon);
                        var $comboValue = comboDiv.cloneNode();
                        $comboValue.classList.add("mcombo-value");
                        $combo.appendChild($comboBtn);
                        $combo.appendChild($comboValue);
                        var $comboDropdown = comboDiv.cloneNode();
                        $comboDropdown.classList.add("mcombo-dropdown");
                        document.body.appendChild($comboDropdown);
                        $combo.addXEventListener(ssk.CLICK_EVT, function (evt) {
                            if ($comboDropdown.style.height === "" || $comboDropdown.style.height === "0px") {
                                openDD($comboDropdown, $comboWrapper);
                                $combo.classList.add(dkn.CBX_ACTIVE_CLS);
                            }
                            else {
                                closeDD($comboDropdown);
                                $combo.classList.remove(dkn.CBX_ACTIVE_CLS);
                            }
                        });
                        var $comboList = comboDiv.cloneNode();
                        $comboList.classList.add("mcombo-list");
                        $comboDropdown.appendChild($comboList);
                        dkn.controlType[data.columnKey] = { my: $comboWrapper, dropdown: $comboDropdown, options: data.controlDef.options, panel: [],
                            optionsValue: data.controlDef.optionsValue, optionsText: data.controlDef.optionsText, maxHeight: [],
                            optionsList: data.controlDef.pattern, optionsMap: data.controlDef.list, type: dkn.COMBOBOX };
                        result = stuffList(data, $comboWrapper, $comboDropdown);
                        return result;
                    }
                    dkn.comboBox = comboBox;
                    function stuffList(data, $comboWrapper, $comboDropdown) {
                        var $itemHolder = document.createElement("ul");
                        $itemHolder.classList.add("mcombo-listitemholder");
                        var val, textContent, maxHeight = 0, itemList = [], controlDef = data.controlDef, result = {}, listType, options, panelz;
                        result[controlDef.optionsValue] = null;
                        result[controlDef.optionsText] = "";
                        if (data.controlDef.list && !_.isNil(listType = data.controlDef.list[data.rowId])) {
                            options = controlDef.pattern[listType];
                            panelz = listType + 1;
                        }
                        else {
                            options = controlDef.options;
                            panelz = 0;
                        }
                        _.forEach(options, function (i) {
                            var $item = document.createElement("li");
                            $item.classList.add("mcombo-listitem");
                            $item.classList.add("ui-state-default");
                            val = i[controlDef.optionsValue];
                            $.data($item, "value", val);
                            //                textContent = text.padRight(val, ' ', 6) + i[controlDef.optionsText];
                            //                $item.textContent = textContent;
                            // Create columns
                            var $comboItem = createItem(val, i[controlDef.optionsText], $item, controlDef.displayMode), $comboValue = $comboWrapper.querySelector(".mcombo-value");
                            if (data.initValue === val) {
                                var initItem = $comboItem.cloneNode(true);
                                $comboValue.appendChild(initItem);
                                $item.classList.add("selecteditem");
                                result[controlDef.optionsValue] = val;
                                result[controlDef.optionsText] = i[controlDef.optionsText];
                            }
                            $item.addXEventListener(ssk.CLICK_EVT, function (evt) {
                                var $combo = $comboWrapper.querySelector("." + dkn.CBX_CLS);
                                $comboValue.innerHTML = "";
                                $comboValue.appendChild($comboItem.cloneNode(true));
                                _.forEach(itemList, function (i) {
                                    if (i.classList.contains("selecteditem")) {
                                        i.classList.remove("selecteditem");
                                    }
                                });
                                var value = $.data($item, lo.CBX_ITEM_VALUE);
                                $.data($comboWrapper, lo.CBX_SELECTED, value);
                                $item.classList.add("selecteditem");
                                var $cbxCell = ti.closest($comboWrapper, "." + v.CELL_CLS);
                                var coord = ti.getCellCoord($cbxCell);
                                if ($cbxCell) {
                                    var bVal = $.data($cbxCell, lo.CBX_SELECTED_TD);
                                    if (bVal !== value && _.isFunction(controlDef.inputProcess)) {
                                        var rowObj = _dataSource[coord.rowIdx];
                                        controlDef.inputProcess(value, rowObj && rowObj[_pk], rowObj);
                                    }
                                    $.data($cbxCell, lo.CBX_SELECTED_TD, value);
                                }
                                closeDD($comboDropdown);
                                $combo.classList.remove(dkn.CBX_ACTIVE_CLS);
                                data.update(value, coord.rowIdx);
                                khl.clear({ id: _dataSource[coord.rowIdx][_pk], columnKey: coord.columnKey, element: $cbxCell });
                                var sCol = _specialColumn[data.columnKey];
                                if (sCol) {
                                    var $cCell = lch.cellAt(_$grid[0], coord.rowIdx, sCol);
                                    if ($cCell) {
                                        var column = _columnsMap[sCol];
                                        var formatted = su.format(column[0], value);
                                        $cCell.textContent = formatted;
                                        su.wedgeCell(_$grid[0], { rowIdx: coord.rowIdx, columnKey: sCol }, value);
                                        $.data($cCell, v.DATA, value);
                                        khl.clear({ id: _dataSource[coord.rowIdx][_pk], columnKey: sCol, element: $cCell });
                                    }
                                }
                            });
                            $itemHolder.appendChild($item);
                            itemList.add($item);
                            maxHeight += 26;
                        });
                        if (!options || options.length === 0) {
                            $itemHolder.innerHTML = nts.uk.resource.getMessage("Msg_37");
                            $itemHolder.style.background = "#f6f6f6";
                            maxHeight += 26;
                        }
                        var control = dkn.controlType[data.columnKey];
                        control.panel[panelz] = $itemHolder;
                        control.maxHeight[panelz] = Math.min(104, maxHeight);
                        if (!$comboDropdown.querySelector(".mcombo-listitemholder")) {
                            var $comboList = $comboDropdown.querySelector(".mcombo-list");
                            $comboList.appendChild($itemHolder);
                            var max = Math.min(104, maxHeight) + "px";
                            $comboDropdown.style.maxHeight = max; //(maxHeight + 2) + "px";
                            $comboList.style.maxHeight = max;
                        }
                        return result;
                    }
                    dkn.stuffList = stuffList;
                    /**
                     * OpenDD.
                     */
                    function openDD($dd, $w, f) {
                        var offset = selector.offset($w), adj = !f ? 2 : -1;
                        $dd.style.top = (offset.top + BODY_ROW_HEIGHT - adj) + "px";
                        $dd.style.left = offset.left + "px";
                        if (selector.is($dd, ".mcombo-dropdown")) {
                            var list = $dd.querySelector(".mcombo-list");
                            var items = list.querySelectorAll("li");
                            if (items) {
                                var top_1 = 0, selected_6;
                                _.forEach(items, function (li) {
                                    if (li.classList.contains("selecteditem")) {
                                        selected_6 = true;
                                        return false;
                                    }
                                    top_1 += 26;
                                });
                                if (top_1 >= 0 && selected_6)
                                    list.scrollTop = top_1;
                                else
                                    list.scrollTop = 0;
                            }
                        }
                        if (!f) {
                            $dd.style.width = $w.offsetWidth + "px";
                            $dd.style.height = $dd.style.maxHeight;
                        }
                    }
                    dkn.openDD = openDD;
                    ;
                    /**
                     * CloseDD.
                     */
                    function closeDD($dd, f) {
                        if (!f)
                            $dd.style.height = "0px";
                        //            setTimeout(() => {
                        $dd.style.top = "-99999px";
                        $dd.style.left = "-99999px";
                        //            }, 120);
                    }
                    dkn.closeDD = closeDD;
                    /**
                     * Create item.
                     */
                    function createItem(code, name, $item, mode) {
                        var $comboItem = _prtDiv.cloneNode();
                        $comboItem.classList.add("mcombo-item");
                        if ($item)
                            $item.appendChild($comboItem);
                        if (mode === "codeName") {
                            var $itemCode = _prtDiv.cloneNode();
                            $itemCode.classList.add("mcombo-item-column");
                            $itemCode.style.width = "25%";
                            $itemCode.style.float = "left";
                            $itemCode.textContent = code;
                            $comboItem.appendChild($itemCode);
                        }
                        var $itemName = _prtDiv.cloneNode();
                        $itemName.classList.add("mcombo-item-column");
                        $itemName.style.width = mode === "codeName" ? "75%" : "100%";
                        $itemName.textContent = name;
                        $comboItem.appendChild($itemName);
                        return $comboItem;
                    }
                    dkn.createItem = createItem;
                    /**
                     * Ramass
                     */
                    function ramass(data) {
                        var format = _.toLower(data.controlDef.format), formats = ti.dateFormat(format);
                        if (!dkn.controlType[data.columnKey]) {
                            dkn.controlType[data.columnKey] = { type: dkn.DATE_PICKER, format: formats, formatType: format, inputProcess: data.controlDef.inputProcess };
                        }
                        if (dkn._ramass[format]) {
                            if (!data.initValue || data.initValue === "")
                                return "";
                            var momentObj = moment(data.initValue, formats, true);
                            return momentObj.isValid() ? momentObj.format(formats[0]) : data.initValue;
                        }
                        dkn._ramass[format] = _prtDiv.cloneNode();
                        dkn._ramass[format].classList.add("mdatepicker-container");
                        dkn._ramass[format].classList.add("mdatepicker-dropdown");
                        document.body.appendChild(dkn._ramass[format]);
                        var $yearsPick = _prtDiv.cloneNode(), $monthsPick = _prtDiv.cloneNode(), $daysPick = _prtDiv.cloneNode();
                        $yearsPick.classList.add(dkn.PICKER_PANEL);
                        $yearsPick.setAttribute("data-view", "years picker");
                        var ul = document.createElement("ul"), li = document.createElement("li"), $yearsNav = ul.cloneNode(), $years = ul.cloneNode();
                        $yearsPick.appendChild($yearsNav);
                        var $yearsPrev = li.cloneNode(), $yearsCurrent = li.cloneNode(), $yearsNext = li.cloneNode(), $monthsNav, $months, $yearPrev, $yearCurrent, $yearNext;
                        $yearsPrev.setAttribute("data-view", "years prev");
                        $yearsPrev.innerHTML = "‹";
                        $yearsPrev.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                            var mDate = $.data(dkn._ramass[format], "date");
                            mDate.subtract(10, "y");
                            ssk.trigger(dkn._ramass[format], "set", [mDate, 1, 2]);
                            evt.stopPropagation();
                        });
                        $yearsNav.appendChild($yearsPrev);
                        $yearsCurrent.setAttribute("data-view", "years current");
                        $yearsCurrent.classList.add("disabled");
                        $yearsNav.appendChild($yearsCurrent);
                        $yearsNext.setAttribute("data-view", "years next");
                        $yearsNext.innerHTML = "›";
                        $yearsNext.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                            var mDate = $.data(dkn._ramass[format], "date");
                            mDate.add(10, "y");
                            ssk.trigger(dkn._ramass[format], "set", [mDate, 1, 2]);
                            evt.stopPropagation();
                        });
                        $yearsNav.appendChild($yearsNext);
                        $years.setAttribute("data-view", "years");
                        $yearsPick.appendChild($years);
                        var _loop_8 = function (i) {
                            var $year = li.cloneNode();
                            $year.setAttribute("data-view", "year");
                            $year.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                                var value = $.data($year, "value"), $input = dkn.controlType[dkn.TEXTBOX].my.querySelector("input.medit");
                                evt.stopPropagation();
                                if (format === "y") {
                                    $input.value = value;
                                    var pickerType = dkn.controlType[_mEditor.columnKey];
                                    if (!pickerType)
                                        return;
                                    ssk.trigger($input, ssk.MS, [_.isFunction(pickerType.inputProcess) && pickerType.inputProcess.bind(null, value, _dataSource[_mEditor.rowIdx]), pickerType.format]);
                                    su.endEdit(_$grid[0]);
                                    return;
                                }
                                var mDate = $.data(dkn._ramass[format], "date");
                                mDate.year(value);
                                $input.value = mDate.format(formats[0]);
                                ssk.trigger($input, ssk.MS);
                                $yearsPick.classList.add(dkn.PICKER_HIDE);
                                $monthsPick.classList.remove(dkn.PICKER_HIDE);
                                ssk.trigger(dkn._ramass[format], "set", [mDate, 0, 1]);
                            });
                            $years.appendChild($year);
                            if (i == 0 || i == 11) {
                                $year.classList.add("muted");
                            }
                        };
                        for (var i = 0; i < 12; i++) {
                            _loop_8(i);
                        }
                        if (format !== "y") {
                            $yearsPick.classList.add(dkn.PICKER_HIDE);
                        }
                        dkn._ramass[format].appendChild($yearsPick);
                        if (format === "ym" || format === "ymd") {
                            $monthsPick.classList.add(dkn.PICKER_PANEL);
                            $monthsPick.setAttribute("data-view", "months picker");
                            $monthsNav = ul.cloneNode();
                            $months = ul.cloneNode();
                            $monthsPick.appendChild($monthsNav);
                            $monthsPick.appendChild($months);
                            $yearPrev = li.cloneNode();
                            $yearCurrent = li.cloneNode();
                            $yearNext = li.cloneNode();
                            $yearPrev.setAttribute("data-view", "year prev");
                            $yearPrev.innerHTML = "‹";
                            $yearPrev.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                                var mDate = $.data(dkn._ramass[format], "date");
                                mDate.subtract(1, "y");
                                ssk.trigger(dkn._ramass[format], "set", [mDate, 1, 1]);
                                evt.stopPropagation();
                            });
                            $monthsNav.appendChild($yearPrev);
                            $yearCurrent.setAttribute("data-view", "year current");
                            $yearCurrent.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                                $monthsPick.classList.add(dkn.PICKER_HIDE);
                                $yearsPick.classList.remove(dkn.PICKER_HIDE);
                                var mDate = $.data(dkn._ramass[format], "date");
                                ssk.trigger(dkn._ramass[format], "set", [mDate, 1, 2]);
                                evt.stopPropagation();
                            });
                            $monthsNav.appendChild($yearCurrent);
                            $yearNext.setAttribute("data-view", "year next");
                            $yearNext.innerHTML = "›";
                            $yearNext.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                                var mDate = $.data(dkn._ramass[format], "date");
                                mDate.add(1, "y");
                                ssk.trigger(dkn._ramass[format], "set", [mDate, 1, 1]);
                                evt.stopPropagation();
                            });
                            $monthsNav.appendChild($yearNext);
                            $months.setAttribute("data-view", "months");
                            var _loop_9 = function (i) {
                                var $month = li.cloneNode();
                                $month.setAttribute("data-view", "month");
                                $month.innerHTML = i + "月";
                                $month.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                                    var value = $.data($month, "value"), $input = dkn.controlType[dkn.TEXTBOX].my.querySelector("input.medit");
                                    evt.stopPropagation();
                                    var mDate = $.data(dkn._ramass[format], "date");
                                    mDate.month(value - 1);
                                    if (format === "ym") {
                                        $input.value = mDate.format(formats[0]);
                                        var pickerType = dkn.controlType[_mEditor.columnKey];
                                        if (!pickerType)
                                            return;
                                        ssk.trigger($input, ssk.MS, [_.isFunction(pickerType.inputProcess) && pickerType.inputProcess.bind(null, $input.value, _dataSource[_mEditor.rowIdx]), pickerType.format]);
                                        su.endEdit(_$grid[0]);
                                        return;
                                    }
                                    $input.value = mDate.format(formats[0]);
                                    ssk.trigger($input, ssk.MS);
                                    $monthsPick.classList.add(dkn.PICKER_HIDE);
                                    $daysPick.classList.remove(dkn.PICKER_HIDE);
                                    ssk.trigger(dkn._ramass[format], "set", [mDate, 0]);
                                });
                                $.data($month, "value", i);
                                $months.appendChild($month);
                            };
                            for (var i = 1; i < 13; i++) {
                                _loop_9(i);
                            }
                            if (format === "ymd") {
                                $monthsPick.classList.add(dkn.PICKER_HIDE);
                            }
                            dkn._ramass[format].appendChild($monthsPick);
                        }
                        if (format === "ymd") {
                            $daysPick.classList.add(dkn.PICKER_PANEL);
                            $daysPick.setAttribute("data-view", "days picker");
                            dkn._ramass[format].appendChild($daysPick);
                            var $daysNav = ul.cloneNode(), $week_1 = ul.cloneNode(), $days = ul.cloneNode();
                            $week_1.setAttribute("data-view", "week");
                            $days.setAttribute("data-view", "days");
                            $daysPick.appendChild($daysNav);
                            $daysPick.appendChild($week_1);
                            $daysPick.appendChild($days);
                            var $monthPrev = li.cloneNode(), $monthCurrent = li.cloneNode(), $monthNext = li.cloneNode();
                            $monthPrev.setAttribute("data-view", "month prev");
                            $monthPrev.innerHTML = "‹";
                            $monthPrev.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                                var mDate = $.data(dkn._ramass[format], "date");
                                if (mDate) {
                                    ssk.trigger(dkn._ramass[format], "set", [mDate.subtract(1, "M"), 1]);
                                    evt.stopPropagation();
                                }
                            });
                            $monthCurrent.setAttribute("data-view", "month current");
                            $monthCurrent.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                                $daysPick.classList.add(dkn.PICKER_HIDE);
                                $monthsPick.classList.remove(dkn.PICKER_HIDE);
                                var mDate = $.data(dkn._ramass[format], "date");
                                ssk.trigger(dkn._ramass[format], "set", [mDate, 1, 1]);
                                evt.stopPropagation();
                            });
                            $monthNext.setAttribute("data-view", "month next");
                            $monthNext.innerHTML = "›";
                            $monthNext.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                                var mDate = $.data(dkn._ramass[format], "date");
                                if (mDate) {
                                    ssk.trigger(dkn._ramass[format], "set", [mDate.add(1, "M"), 1]);
                                    evt.stopPropagation();
                                }
                            });
                            $daysNav.appendChild($monthPrev);
                            $daysNav.appendChild($monthCurrent);
                            $daysNav.appendChild($monthNext);
                            _.forEach(dkn.WEEK_DAYS, function (d) {
                                var $day = li.cloneNode();
                                $day.innerHTML = d;
                                $week_1.appendChild($day);
                            });
                            var _loop_10 = function (i) {
                                var $day = li.cloneNode();
                                $days.appendChild($day);
                                $day.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                                    var value = $.data($day, "value"), $input = dkn.controlType[dkn.TEXTBOX].my.querySelector("input.medit"), mDate = $.data(dkn._ramass[format], "date"), view = $day.getAttribute("data-view");
                                    evt.stopPropagation();
                                    if (_.includes(view, "prev")) {
                                        mDate.subtract(1, "M");
                                        mDate.date(value);
                                        $input.value = mDate.format(formats[0]);
                                        ssk.trigger($input, ssk.MS);
                                        ssk.trigger(dkn._ramass[format], "set", [mDate]);
                                    }
                                    else if (_.includes(view, "next")) {
                                        mDate.add(1, "M");
                                        mDate.date(value);
                                        $input.value = mDate.format(formats[0]);
                                        ssk.trigger($input, ssk.MS);
                                        ssk.trigger(dkn._ramass[format], "set", [mDate]);
                                    }
                                    else {
                                        mDate.date(value);
                                        $input.value = mDate.format(formats[0]);
                                        var pickerType = dkn.controlType[_mEditor.columnKey];
                                        ssk.trigger($input, ssk.MS, [_.isFunction(pickerType.inputProcess) && pickerType.inputProcess.bind(null, $input.value, _dataSource[_mEditor.rowIdx]), pickerType.format]);
                                        su.endEdit(_$grid[0]);
                                    }
                                });
                            };
                            for (var i = 0; i < 42; i++) {
                                _loop_10(i);
                            }
                        }
                        closeDD(dkn._ramass[format], true);
                        dkn._ramass[format].addXEventListener("set", function (evt) {
                            var mDisplayDate = evt.detail[0], onlyDisplay = evt.detail[1], board = evt.detail[2];
                            if (!onlyDisplay)
                                $.data(dkn._ramass[format], "dateSet", mDisplayDate.clone());
                            if (board > 1) {
                                var mDateSet_1 = $.data(dkn._ramass[format], "dateSet"), begin_1 = mDisplayDate.year() - 5, end_1;
                                _.forEach($years.querySelectorAll("li"), function (li, i) {
                                    end_1 = begin_1 + i;
                                    li.innerHTML = end_1;
                                    $.data(li, "value", end_1);
                                    if (mDateSet_1.year() === end_1) {
                                        li.classList.add(dkn.PICKED);
                                        li.setAttribute("data-view", "year picked");
                                    }
                                    else
                                        li.classList.remove(dkn.PICKED);
                                });
                                $yearsCurrent.innerHTML = begin_1 + "年 - " + end_1 + "年";
                            }
                            else if (board) {
                                var mDateSet = $.data(dkn._ramass[format], "dateSet");
                                $yearCurrent.innerHTML = mDisplayDate.format(dkn.Y);
                                if (!mDateSet)
                                    return;
                                _.forEach($months.querySelectorAll("li"), function (li) {
                                    if (li.classList.contains(dkn.PICKED)) {
                                        li.classList.remove(dkn.PICKED);
                                        li.setAttribute("data-view", "month");
                                    }
                                });
                                if (mDateSet.year() === mDisplayDate.year()) {
                                    var li_1 = $months.querySelector("li:nth-of-type(" + (mDateSet.month() + 1) + ")");
                                    if (li_1) {
                                        li_1.classList.add(dkn.PICKED);
                                        li_1.setAttribute("data-view", "month picked");
                                    }
                                }
                            }
                            else {
                                var days_1 = ti.daysBoard(mDisplayDate);
                                var $dayItems = $days.querySelectorAll("li"), raise_1 = 0;
                                _.forEach($dayItems, function ($d, i) {
                                    if (days_1[i] === 1)
                                        raise_1++;
                                    $d.innerHTML = days_1[i];
                                    $.data($d, "value", days_1[i]);
                                    if (!raise_1) {
                                        $d.classList.remove(dkn.PICKED);
                                        $d.classList.add(dkn.MUTED);
                                        $d.setAttribute("data-view", "day prev");
                                    }
                                    else if (raise_1 > 1) {
                                        $d.classList.remove(dkn.PICKED);
                                        $d.classList.add(dkn.MUTED);
                                        $d.setAttribute("data-view", "day next");
                                    }
                                    else if (days_1[i] === mDisplayDate.date()) {
                                        $d.classList.remove(dkn.MUTED);
                                        if (!onlyDisplay || $.data(dkn._ramass[format], "dateSet").month() === mDisplayDate.month()) {
                                            $d.classList.add(dkn.PICKED);
                                        }
                                        $d.setAttribute("data-view", "day picked");
                                    }
                                    else {
                                        $d.classList.remove(dkn.MUTED);
                                        $d.classList.remove(dkn.PICKED);
                                        $d.setAttribute("data-view", "day");
                                    }
                                });
                                $monthCurrent.innerHTML = mDisplayDate.format(dkn.YM);
                            }
                            $.data(dkn._ramass[format], "date", mDisplayDate);
                        });
                        if (data.initValue && data.initValue !== "") {
                            var momentObj = moment(data.initValue, formats, true);
                            return momentObj.isValid() ? momentObj.format(formats[0]) : data.initValue;
                        }
                        return "";
                    }
                    /**
                     * Button.
                     */
                    function button(data, click) {
                        var $container = document.createDocumentFragment();
                        var $button = document.createElement("button");
                        $button.classList.add("mbutton");
                        $container.appendChild($button);
                        $button.textContent = data.controlDef.text || data.initValue;
                        $button.setAttribute("tabindex", -1);
                        $.data($button, "enable", data.enable);
                        var clickHandle = click ? click.bind(null) : data.controlDef.click.bind(null, data.rowObj, data.rowId, data.columnKey);
                        $.data($button, ssk.CLICK_EVT, clickHandle);
                        if (data.enable)
                            $button.addXEventListener("click", clickHandle);
                        $button.disabled = !data.enable;
                        if (!dkn.controlType[data.columnKey]) {
                            dkn.controlType[data.columnKey] = dkn.BUTTON;
                        }
                        return $container;
                    }
                    /**
                     * Delete button.
                     */
                    function deleteButton(data) {
                        var btnContainer = button(data);
                        var btn = btnContainer.querySelector("button");
                        btn.removeXEventListener("click", data.controlDef.click);
                        btn.addXEventListener("click", data.deleteRow);
                        return btnContainer;
                    }
                    /**
                     * Refer button.
                     */
                    function refButton(data) {
                        var click, text, item;
                        if (data.controlDef.pattern && data.controlDef.list) {
                            var itemList = data.controlDef.pattern[data.controlDef.list[data.rowId]];
                            click = function (arg) {
                                var td = ti.closest(arg.target, "td");
                                if (!td)
                                    return;
                                var txt = td.querySelector(".mgrid-refer-text");
                                if (!txt)
                                    return;
                                var args = { value: $.data(td, v.DATA), rowId: data.rowId, rowValue: data.rowObj, itemList: data.controlDef.pattern[data.controlDef.list[data.rowId]],
                                    relatedItemList: function (nama) {
                                        var ctrl = _mafollicle[SheetDef][_currentSheet].controlMap && _mafollicle[SheetDef][_currentSheet].controlMap[nama];
                                        if (ctrl && ctrl.pattern && ctrl.list) {
                                            return ctrl.pattern[ctrl.list[data.rowId]];
                                        }
                                    }
                                };
                                if (data.controlDef.click) {
                                    data.controlDef.click(args);
                                }
                            };
                            if (itemList && data.controlDef.optionsValue) {
                                item = _.find(itemList, function (i) { return i[data.controlDef.optionsValue] === data.initValue; });
                                if (item) {
                                    text = item[data.controlDef.optionsText];
                                }
                            }
                        }
                        else {
                            click = function (arg) {
                                var td = ti.closest(arg.target, "td");
                                if (!td)
                                    return;
                                var txt = td.querySelector(".mgrid-refer-text");
                                if (!txt)
                                    return;
                                if (data.controlDef.click) {
                                    data.controlDef.click({ value: $.data(td, v.DATA), rowId: data.rowId, rowValue: data.rowObj });
                                }
                            };
                        }
                        var btnContainer = button(data, click);
                        dkn.controlType[data.columnKey] = dkn.REFER_BUTTON;
                        var selected = _prtDiv.cloneNode(true);
                        selected.classList.add("mgrid-refer-text");
                        if (_.isNil(text) && !_.isNil(data.initValue)) {
                            text = _.isNil(data.controlDef.notFound) ? data.initValue : data.controlDef.notFound;
                        }
                        selected.textContent = text || "";
                        if (data.controlDef.labelPosition === "before") {
                            btnContainer.insertBefore(selected, btnContainer.querySelector("button"));
                            selected.classList.add("mg-right-margin");
                        }
                        else {
                            btnContainer.appendChild(selected);
                        }
                        return btnContainer;
                    }
                    /**
                     * LinkLabel.
                     */
                    function linkLabel(data) {
                        var $container = document.createDocumentFragment();
                        var $link = document.createElement("a");
                        $link.classList.add("mlink-button");
                        $link.textContent = data.initValue;
                        var clickHandle = data.controlDef.click.bind(null, data.rowId, data.columnKey);
                        if (data.enable) {
                            $link.addXEventListener("click", clickHandle);
                        }
                        else
                            $link.style.color = "#333";
                        $.data($link, "click", clickHandle);
                        $container.appendChild($link);
                        if (!dkn.controlType[data.columnKey]) {
                            dkn.controlType[data.columnKey] = dkn.LINK_LABEL;
                        }
                        return $container;
                    }
                    /**
                     * FlexImage.
                     */
                    function flexImage(data) {
                        var $container = document.createDocumentFragment();
                        if (_.isNil(data.initValue) || _.isEmpty(data.initValue)) {
                            if (!dkn.controlType[data.columnKey]) {
                                dkn.controlType[data.columnKey] = dkn.FLEX_IMAGE;
                            }
                            return $container;
                        }
                        var $image = document.createElement("span");
                        $image.className = data.controlDef.source;
                        if (data.controlDef.click && _.isFunction(data.controlDef.click)) {
                            var clickHandle = data.controlDef.click.bind(null, data.columnKey, data.rowId);
                            if (data.enable) {
                                $image.addXEventListener(ssk.CLICK_EVT, clickHandle);
                                $image.style.cursor = "pointer";
                            }
                            $.data($image, ssk.CLICK_EVT, clickHandle);
                        }
                        $container.appendChild($image);
                        if (!dkn.controlType[data.columnKey]) {
                            dkn.controlType[data.columnKey] = dkn.FLEX_IMAGE;
                        }
                        return $container;
                    }
                    /**
                     * Image.
                     */
                    function image(data) {
                        var $container = document.createDocumentFragment();
                        var $span = document.createElement("span");
                        $span.className = data.controlDef.source;
                        $container.appendChild($span);
                        var clickHandle;
                        if (data.controlDef.source === "hidden-button") {
                            clickHandle = function (evt) {
                                var r = ti.closest($span, "tr");
                                if (r) {
                                    var view = parseFloat($.data(r, lo.VIEW));
                                    v.voilerRow(view);
                                    if (_.isFunction(data.controlDef.click)) {
                                        data.controlDef.click(view);
                                    }
                                }
                            };
                        }
                        else if (_.includes(data.controlDef.source, "plus-button")) {
                            clickHandle = function (evt) {
                                var r = ti.closest($span, "tr");
                                var noTd = r.querySelector("td." + v.STT_CLS);
                                if (r)
                                    v.encarterRow(parseFloat($.data(r, lo.VIEW)), data.controlDef.copy, data.controlDef.cssClass, noTd && noTd.innerHTML && parseInt(noTd.innerHTML) + 1);
                            };
                        }
                        if (clickHandle) {
                            if (data.enable) {
                                $span.addXEventListener(ssk.CLICK_EVT, clickHandle);
                                $span.style.cursor = "pointer";
                            }
                            $.data($span, ssk.CLICK_EVT, clickHandle);
                        }
                        if (!dkn.controlType[data.columnKey]) {
                            dkn.controlType[data.columnKey] = dkn.IMAGE;
                        }
                        return $container;
                    }
                })(dkn = mgrid.dkn || (mgrid.dkn = {}));
                var lch;
                (function (lch) {
                    lch.CELL_SELECTED_CLS = "cell-selected";
                    var Cell = /** @class */ (function () {
                        function Cell(rowIdx, columnKey, value) {
                            this.rowIndex = rowIdx;
                            this.columnKey = columnKey;
                            this.value = value;
                        }
                        return Cell;
                    }());
                    lch.Cell = Cell;
                    /**
                     * Checkup.
                     */
                    function checkUp($grid) {
                        var isSelecting;
                        $grid.addXEventListener(ssk.MOUSE_DOWN, function (evt) {
                            var $target = evt.target;
                            if (!selector.is($target, ".mcell")
                                || _.chain(ssk.KeyPressed).keys().filter(function (k) { return k !== "16" && k !== "17"; }).value().length > 0)
                                return;
                            isSelecting = true;
                            window.addXEventListener(ssk.MOUSE_UP + ".block", function (evt) {
                                isSelecting = false;
                                $grid.onselectstart = null;
                                window.removeXEventListener(ssk.MOUSE_UP + ".block");
                            });
                            if (evt.shiftKey) {
                                selectRange($grid, $target);
                                $grid.onselectstart = function () {
                                    return false;
                                };
                                return;
                            }
                            if (!evt.ctrlKey) {
                                clearAll($grid);
                            }
                            selectCell($grid, $target);
                        });
                        $grid.addXEventListener(ssk.MOUSE_UP, function (evt) {
                            isSelecting = false;
                            $grid.onselectstart = null;
                        });
                        $grid.addXEventListener(ssk.MOUSE_MOVE, function (evt) {
                            if (isSelecting) {
                                selectRange($grid, evt.target);
                            }
                        });
                    }
                    lch.checkUp = checkUp;
                    /**
                     * Select range.
                     */
                    function selectRange($grid, $cell) {
                        if (_.isNil($cell) || !selector.is($cell, "td.mcell"))
                            return;
                        var lastSelected = $.data($grid, lo.LAST_SELECT);
                        if (!lastSelected) {
                            selectCell($grid, $cell);
                            return;
                        }
                        clearAll($grid);
                        var toCoord = ti.getCellCoord($cell);
                        var minRowIdx = Math.min(lastSelected.rowIdx, toCoord.rowIdx);
                        var maxRowIdx = Math.max(lastSelected.rowIdx, toCoord.rowIdx);
                        for (var i = minRowIdx; i < maxRowIdx + 1; i++) {
                            cellInRange($grid, i, lastSelected.columnKey, toCoord.columnKey);
                        }
                    }
                    /**
                     * Mark cell.
                     */
                    function markCell($cell) {
                        if ($cell && selector.is($cell, "td.mcell")) {
                            $cell.classList.add(lch.CELL_SELECTED_CLS);
                            return true;
                        }
                        return false;
                    }
                    lch.markCell = markCell;
                    /**
                     * Select cell.
                     */
                    function selectCell($grid, $cell, notLast) {
                        if (!markCell($cell))
                            return;
                        var coord = ti.getCellCoord($cell);
                        addSelect($grid, coord.rowIdx, coord.columnKey, notLast);
                        if (ti.isChrome() && (!_fixedColumns || !_.some(_fixedColumns, function (c) { return c.key === coord.columnKey; }))) {
                            if (!_bodyWrappers || _bodyWrappers.length === 0)
                                return;
                            $grid.focus({ preventScroll: true });
                            var wrapper = _bodyWrappers[_bodyWrappers.length > 1 ? 1 : 0];
                            var offsetLeft = $cell.offsetLeft, left = offsetLeft + $cell.offsetWidth, scrollLeft = wrapper.scrollLeft, width = scrollLeft + parseFloat(wrapper.style.width);
                            //                let scroll = function() {
                            //                    wrapper.addXEventListener(ssk.SCROLL_EVT + ".select", e => {
                            //                        setTimeout(() => {
                            //                            $cell.focus();
                            //                        }, 100);
                            //                        wrapper.removeXEventListener(ssk.SCROLL_EVT + ".select");
                            //                    });
                            //                };
                            if (left > width) {
                                //                    scroll();
                                wrapper.scrollLeft += (left - width + 100);
                            }
                            else if (offsetLeft < scrollLeft) {
                                //                    scroll();
                                wrapper.scrollLeft -= (scrollLeft - offsetLeft + 100);
                            }
                            else {
                                $cell.focus({ preventScroll: true });
                            }
                        }
                        else
                            $cell.focus();
                    }
                    lch.selectCell = selectCell;
                    /**
                     * Add select.
                     */
                    function addSelect($grid, rowIdx, columnKey, notLast) {
                        var selectedCells = _selected;
                        if (!notLast)
                            $.data($grid, lo.LAST_SELECT, { rowIdx: rowIdx, columnKey: columnKey });
                        if (!selectedCells) {
                            selectedCells = {};
                            selectedCells[rowIdx] = [columnKey];
                            _selected = selectedCells;
                            return;
                        }
                        if (!selectedCells[rowIdx]) {
                            selectedCells[rowIdx] = [columnKey];
                            return;
                        }
                        if (_.find(selectedCells[rowIdx], function (key) {
                            return key === columnKey;
                        }) === undefined) {
                            selectedCells[rowIdx].push(columnKey);
                        }
                    }
                    lch.addSelect = addSelect;
                    /**
                     * Clear.
                     */
                    function clear($grid, rowIdx, columnKey) {
                        var selectedCells = _selected;
                        if (!selectedCells)
                            return;
                        var row = selectedCells[rowIdx];
                        if (!row || row.length === 0)
                            return;
                        var colIdx;
                        _.forEach(row, function (key, index) {
                            if (key === columnKey) {
                                colIdx = index;
                                return false;
                            }
                        });
                        if (_.isNil(colIdx))
                            return;
                        row.splice(colIdx, 1);
                        var selectedCell = cellAt($grid, rowIdx, columnKey);
                        if (selectedCell === null)
                            return;
                        if (selectedCell) {
                            ti.removeClass(selectedCell, lch.CELL_SELECTED_CLS);
                        }
                    }
                    lch.clear = clear;
                    /**
                     * Clear all.
                     */
                    function clearAll($grid) {
                        var selectedCells = _selected;
                        if (!selectedCells)
                            return;
                        _.forEach(Object.keys(selectedCells), function (rowIdx, index) {
                            _.forEach(selectedCells[rowIdx], function (col, i) {
                                var $cell = cellAt($grid, rowIdx, col);
                                if ($cell) {
                                    ti.removeClass($cell, lch.CELL_SELECTED_CLS);
                                }
                            });
                        });
                        if (!_selected)
                            return;
                        _.forEach(Object.keys(_selected), function (p) {
                            if (_selected.hasOwnProperty(p))
                                delete _selected[p];
                        });
                    }
                    lch.clearAll = clearAll;
                    /**
                     * Cell at.
                     */
                    function cellAt($grid, rowIdx, columnKey, desc, hidden) {
                        var rowArr = rowAt($grid, rowIdx, desc);
                        return getCellInRow(rowArr, columnKey, hidden);
                    }
                    lch.cellAt = cellAt;
                    /**
                     * Row at.
                     */
                    function rowAt($grid, rowIdx, desc) {
                        if (!desc)
                            desc = _mDesc;
                        var fixed, row;
                        if (!desc || !desc.rows || !(row = desc.rows[rowIdx])) {
                            return null;
                        }
                        if (desc.fixedRows && (fixed = desc.fixedRows[rowIdx])) {
                            row = _.concat(fixed, row);
                        }
                        return row;
                    }
                    lch.rowAt = rowAt;
                    /**
                     * Cell in range.
                     */
                    function cellInRange($grid, rowIdx, startKey, endKey) {
                        var range = [];
                        var rowArr = rowAt($grid, rowIdx);
                        var desc = _mDesc;
                        if (_.isNil(rowArr) || _.isNil(desc))
                            return;
                        var start, end, fixedCount = 0;
                        if (desc.fixedColIdxes) {
                            start = desc.fixedColIdxes[startKey];
                            end = desc.fixedColIdxes[endKey];
                            fixedCount = Object.keys(desc.fixedColIdxes).length;
                        }
                        if (_.isNil(start)) {
                            start = desc.colIdxes[startKey] + fixedCount;
                        }
                        if (_.isNil(end)) {
                            end = desc.colIdxes[endKey] + fixedCount;
                        }
                        if (_.isNil(start) || _.isNil(end))
                            return;
                        var min = Math.min(start, end);
                        var max = Math.max(start, end);
                        _.forEach(rowArr, function (c, index) {
                            if (c.style.display !== "none" && index >= min && index <= max) {
                                ti.addClass(c, lch.CELL_SELECTED_CLS);
                                var coord = ti.getCellCoord(c);
                                if (coord) {
                                    addSelect($grid, rowIdx, coord.columnKey, true);
                                    range.push(c);
                                }
                            }
                            else if (index > max)
                                return;
                        });
                        return range;
                    }
                    lch.cellInRange = cellInRange;
                    /**
                     * Get cell in row.
                     */
                    function getCellInRow(rowArr, columnKey, hidden) {
                        if (_.isNil(rowArr))
                            return null;
                        return _.find(rowArr, function (c) {
                            if (!hidden && c.style.display === "none")
                                return false;
                            var coord = ti.getCellCoord(c);
                            if (coord.columnKey === columnKey)
                                return true;
                        });
                    }
                    lch.getCellInRow = getCellInRow;
                    /**
                     * Get selected cells.
                     */
                    function getSelectedCells($grid) {
                        var selectedCells = _selected;
                        var desc = _mDesc;
                        var dataSource = _dataSource;
                        var cells = [];
                        var arr = _.sortBy(_.keys(selectedCells), function (r) { return parseFloat(r); });
                        _.forEach(arr, function (rowIdx) {
                            _.forEach(selectedCells[rowIdx], function (colKey) {
                                cells.push(new Cell(rowIdx, colKey, dataSource[rowIdx][colKey]));
                            });
                        });
                        return cells;
                    }
                    lch.getSelectedCells = getSelectedCells;
                    /**
                     * Select next.
                     */
                    function selectNext($grid, direct) {
                        var selectedCells = _selected;
                        var keys = Object.keys(selectedCells);
                        if (!selectedCells || keys.length === 0)
                            return;
                        var sortedKeys = keys.sort(function (o, t) { return o - t; });
                        var cell, nCell, nRow, colElms, key, fixedCount = 0, dCount = 0, colIdx, desc = _mDesc, ds = _dataSource, tRowIdx = parseFloat(sortedKeys[0]);
                        if (_.isNil(tRowIdx))
                            return;
                        if (desc.fixedColIdxes) {
                            fixedCount = Object.keys(desc.fixedColIdxes).length;
                        }
                        colIdx = _.min(_.map(selectedCells[tRowIdx], function (c) {
                            var idx, isFixed = true;
                            if (desc.fixedColIdxes) {
                                idx = desc.fixedColIdxes[c];
                            }
                            if (_.isNil(idx)) {
                                idx = desc.colIdxes[c];
                                isFixed = false;
                            }
                            return isFixed ? idx : idx + fixedCount;
                        }));
                        dCount = Object.keys(desc.colIdxes).length;
                        if (direct === "below") {
                            if (ds && parseInt(tRowIdx) === ds.length - 1) {
                                tRowIdx = 0;
                                if (fixedCount + dCount === colIdx + 1) {
                                    colIdx = 0;
                                }
                                else
                                    colIdx++;
                            }
                            else {
                                tRowIdx++;
                            }
                        }
                        else if (fixedCount + dCount === colIdx + 1) {
                            colIdx = 0;
                            if (ds && parseInt(tRowIdx) === ds.length - 1) {
                                tRowIdx = 0;
                            }
                            else {
                                tRowIdx++;
                            }
                        }
                        else {
                            colIdx++;
                        }
                        colElms = rowAt($grid, tRowIdx);
                        nCell = colElms[colIdx];
                        clearAll($grid);
                        if (tc.visualJumpTo($grid, tRowIdx)) {
                            setTimeout(function () {
                                selectCell($grid, nCell);
                                if (nCell.style.display === "none") {
                                    selectNext($grid, direct);
                                    nCell.classList.remove(lch.CELL_SELECTED_CLS);
                                }
                            }, 1);
                            return;
                        }
                        selectCell($grid, nCell);
                        nRow = ti.closest(nCell, "tr");
                        if (nCell.style.display === "none" || (nRow && nRow.style.display === "none")) {
                            selectNext($grid, direct);
                            nCell.classList.remove(lch.CELL_SELECTED_CLS);
                        }
                    }
                    lch.selectNext = selectNext;
                    /**
                     * Select prev.
                     */
                    function selectPrev($grid, direct) {
                        var selectedCells = _selected;
                        var keys = Object.keys(selectedCells);
                        if (!selectedCells || keys.length === 0)
                            return;
                        var sortedKeys = keys.sort(function (o, t) { return o - t; });
                        var cell, nCell, nRow, colElms, key, fixedCount = 0, dCount = 0, colIdx, desc = _mDesc, ds = _dataSource, tRowIdx = parseFloat(sortedKeys[0]);
                        if (_.isNil(tRowIdx))
                            return;
                        if (desc.fixedColIdxes) {
                            fixedCount = Object.keys(desc.fixedColIdxes).length;
                        }
                        colIdx = _.min(_.map(selectedCells[tRowIdx], function (c) {
                            var idx, isFixed = true;
                            if (desc.fixedColIdxes) {
                                idx = desc.fixedColIdxes[c];
                            }
                            if (_.isNil(idx)) {
                                idx = desc.colIdxes[c];
                                isFixed = false;
                            }
                            return isFixed ? idx : idx + fixedCount;
                        }));
                        dCount = Object.keys(desc.colIdxes).length;
                        if (direct === "below") {
                            if (tRowIdx === 0) {
                                tRowIdx = ds.length - 1;
                                if (colIdx === 0) {
                                    colIdx = fixedCount + dCount - 1;
                                }
                                else
                                    colIdx--;
                            }
                            else {
                                tRowIdx--;
                            }
                        }
                        else if (colIdx === 0) {
                            colIdx = fixedCount + dCount - 1;
                            if (tRowIdx === 0) {
                                tRowIdx = ds.length - 1;
                            }
                            else {
                                tRowIdx--;
                            }
                        }
                        else {
                            colIdx--;
                        }
                        colElms = rowAt($grid, tRowIdx);
                        nCell = colElms[colIdx];
                        clearAll($grid);
                        if (tc.visualJumpTo($grid, tRowIdx)) {
                            setTimeout(function () {
                                selectCell($grid, nCell);
                                if (nCell.style.display === "none") {
                                    selectPrev($grid, direct);
                                    nCell.classList.remove(lch.CELL_SELECTED_CLS);
                                }
                            }, 1);
                            return;
                        }
                        selectCell($grid, nCell);
                        nRow = ti.closest(nCell, "tr");
                        if (nCell.style.display === "none" || (nRow && nRow.style.display === "none")) {
                            selectPrev($grid, direct);
                            nCell.classList.remove(lch.CELL_SELECTED_CLS);
                        }
                    }
                    lch.selectPrev = selectPrev;
                })(lch || (lch = {}));
                var hpl;
                (function (hpl) {
                    hpl.VALIDATORS = "mValidators";
                    hpl.CURRENCY_CLS = "currency-symbol";
                    var H_M_MAX = 60;
                    var ColumnFieldValidator = /** @class */ (function () {
                        function ColumnFieldValidator(parentName, name, primitiveValue, options, key) {
                            this.key = key;
                            this.parentName = parentName;
                            this.name = name;
                            this.primitiveValue = primitiveValue;
                            this.options = options;
                        }
                        ColumnFieldValidator.prototype.probe = function (value, id) {
                            var constraint, valueType = this.primitiveValue ? ((constraint = ui.validation.getConstraint(this.primitiveValue)) && constraint.valueType)
                                : this.options.cDisplayType;
                            switch (valueType) {
                                case "String":
                                    if (this.primitiveValue === "StampNumber") {
                                        this.options.required = constraint && constraint.required;
                                        return new nts.uk.ui.validation.PunchCardNoValidator(this.name, this.primitiveValue, this.options)
                                            .validate(value, this.options);
                                    }
                                    return new nts.uk.ui.validation.StringValidator(this.name, this.primitiveValue, this.options)
                                        .validate(value, this.options);
                                case "Integer":
                                case "HalfInt":
                                    return new NumberValidator(this.name, valueType, this.primitiveValue, this.options, this.parentName)
                                        .validate(value);
                                case "Decimal":
                                    if (_.isNil(this.options.decimallength) && !_.isNil(constraint.mantissaMaxLength)) {
                                        this.options.decimallength = constraint.mantissaMaxLength;
                                    }
                                    return new NumberValidator(this.name, valueType, this.primitiveValue, this.options, this.parentName)
                                        .validate(value);
                                case "Currency":
                                    var opts = new ui.option.CurrencyEditorOption();
                                    opts.grouplength = this.options.groupLength | 3;
                                    opts.decimallength = _.isNil(this.options.decimalLength) ? 0 : this.options.decimalLength;
                                    opts.currencyformat = this.options.currencyFormat ? this.options.currencyFormat : "JPY";
                                    if (!_.isNil(this.options.min))
                                        opts.min = this.options.min;
                                    if (!_.isNil(this.options.max))
                                        opts.max = this.options.max;
                                    if (!_.isNil(this.options.required))
                                        opts.required = this.options.required;
                                    return new NumberValidator(this.name, valueType, this.primitiveValue, opts)
                                        .validate(value);
                                case "Date":
                                    return new DateValidator(this.name, this.primitiveValue, this.options).validate(value);
                                case "Time":
                                    this.options.mode = "time";
                                    return new nts.uk.ui.validation.TimeValidator(this.name, this.primitiveValue, this.options)
                                        .validate(value);
                                case "Clock":
                                    // Don't merge with time type.
                                    this.options.mode = "time";
                                    return new nts.uk.ui.validation.TimeValidator(this.name, this.primitiveValue, this.options)
                                        .validate(value);
                                case "StandardTimeWithDay":
                                    this.options.timeWithDay = true;
                                    var result = new TimeWithDayValidator(this.name, this.primitiveValue, this.options)
                                        .validate(value);
                                    if (result.isValid) {
                                        var formatter = new uk.text.TimeWithDayFormatter(this.options);
                                        result.parsedValue = formatter.format(result.parsedValue);
                                    }
                                    return result;
                                case "TimeWithDay":
                                    this.options.timeWithDay = true;
                                    if (this.primitiveValue) {
                                        var constraint_1 = nts.uk.ui.validation.getConstraint(this.primitiveValue);
                                        if (constraint_1 && _.isNil(this.options.required)) {
                                            this.options.required = constraint_1.required;
                                        }
                                    }
                                    var result = new nts.uk.ui.validation.TimeWithDayValidator(this.name, this.primitiveValue, this.options)
                                        .validate(value);
                                    if (result.isValid) {
                                        var formatter = new uk.text.TimeWithDayFormatter(this.options);
                                        result.parsedValue = formatter.format(result.parsedValue);
                                    }
                                    return result;
                                case "Selection":
                                case "Radio":
                                    var control_1 = dkn.controlType[this.key], result = new ui.validation.ValidationResult();
                                    if (control_1 && control_1.type === dkn.COMBOBOX) {
                                        var stt = void 0, options = void 0;
                                        if (control_1.optionsMap && !_.isNil(stt = control_1.optionsMap[id])) {
                                            options = control_1.optionsList[stt];
                                        }
                                        else {
                                            options = control_1.options;
                                        }
                                        if (constraint.required && !_.find(options, function (opt) { return opt[control_1.optionsValue] === value; })) {
                                            result.fail(nts.uk.resource.getMessage("FND_E_REQ_SELECT", [this.name]), "FND_E_REQ_SELECT");
                                        }
                                        else
                                            result.success();
                                    }
                                    return result;
                            }
                        };
                        return ColumnFieldValidator;
                    }());
                    hpl.ColumnFieldValidator = ColumnFieldValidator;
                    var NumberValidator = /** @class */ (function () {
                        function NumberValidator(name, displayType, primitiveValue, options, parentName) {
                            this.parentName = parentName;
                            this.name = name;
                            this.displayType = displayType;
                            this.primitiveValue = primitiveValue;
                            this.options = options;
                        }
                        NumberValidator.prototype.validate = function (text) {
                            var self = this;
                            if (typeof text !== "string" && !_.isNil(text))
                                text = String(text);
                            if (self.primitiveValue) {
                                return new nts.uk.ui.validation.NumberValidator(self.name, self.primitiveValue, self.options).validate(text);
                            }
                            if (self.displayType === "Currency") {
                                text = uk.text.replaceAll(text, self.options.groupseperator, "");
                            }
                            var result = new ui.validation.ValidationResult();
                            if ((uk.util.isNullOrUndefined(text) || text.length === 0)) {
                                if (self.options && self.options.required) {
                                    result.fail(nts.uk.resource.getMessage('MsgB_1', [self.name]), 'MsgB_1');
                                    return result;
                                }
                                if (!self.options || (self.options && !self.options.required)) {
                                    result.success(text);
                                    return result;
                                }
                            }
                            var message = {};
                            var isValid;
                            if (self.displayType === "HalfInt") {
                                isValid = uk.ntsNumber.isHalfInt(text, message);
                            }
                            else if (self.displayType === "Integer") {
                                isValid = uk.ntsNumber.isNumber(text, false, self.options, message);
                            }
                            else if (self.displayType === "Decimal") {
                                isValid = uk.ntsNumber.isNumber(text, true, self.options, message);
                            }
                            else if (self.displayType === "Currency") {
                                isValid = uk.ntsNumber.isNumber(text, false, self.options, message);
                                if (_.indexOf(text, ".") > -1)
                                    isValid = false;
                            }
                            var min = 0, max = 999999999;
                            var value = parseFloat(text);
                            if (self.options.values && !_.some(self.options.values, function (v) { return v === value; })) {
                                result.fail(uk.resource.getMessage("Msg_1443", [self.parentName]), "Msg_1443");
                                return result;
                            }
                            if (!uk.util.isNullOrUndefined(self.options.min)) {
                                min = self.options.min;
                                if (value < min)
                                    isValid = false;
                            }
                            if (!uk.util.isNullOrUndefined(self.options.max)) {
                                max = self.options.max;
                                if (value > max)
                                    isValid = false;
                            }
                            if (!isValid) {
                                result.fail(uk.resource.getMessage(message.id, [self.name, min, max]), message.id);
                                return result;
                            }
                            var formatter = new uk.text.NumberFormatter({ option: self.options });
                            var formatted = formatter.format(text);
                            result.success(self.displayType === "Currency" ? formatted : value + "");
                            return result;
                        };
                        return NumberValidator;
                    }());
                    hpl.MIN_DATE = moment.utc("1900/01/01", "YYYY/MM/DD", true);
                    hpl.MAX_DATE = moment.utc("9999/12/31", "YYYY/MM/DD", true);
                    var DateValidator = /** @class */ (function () {
                        function DateValidator(name, primitiveValueName, option) {
                            this.name = name;
                            this.constraint = ui.validation.getConstraint(primitiveValueName);
                            if (_.isNil(this.constraint)) {
                                this.constraint = {};
                                this.constraint.min = option && !_.isNil(option.min) ? option.min : hpl.MIN_DATE;
                                this.constraint.max = option && !_.isNil(option.max) ? option.max : hpl.MAX_DATE;
                            }
                            else {
                                if (this.constraint.min === "" || _.isNil(this.constraint.min)) {
                                    this.constraint.min = hpl.MIN_DATE;
                                }
                                if (this.constraint.max === "" || _.isNil(this.constraint.max)) {
                                    this.constraint.max = hpl.MAX_DATE;
                                }
                            }
                            this.msgId = "FND_E_DATE_" + _.toUpper(option.type);
                            this.formats = ti.dateFormat(_.toLower(option.type));
                            this.required = (option && option.required) || this.constraint.required;
                        }
                        DateValidator.prototype.validate = function (date) {
                            var self = this, result = new ui.validation.ValidationResult();
                            if (_.isNil(date) || date === "" || (date instanceof moment && date._i === "")) {
                                if (this.required) {
                                    result.fail(nts.uk.resource.getMessage('FND_E_REQ_INPUT', [self.name]), 'FND_E_REQ_INPUT');
                                }
                                else
                                    result.success("");
                                return result;
                            }
                            var mDate = moment.utc(date, self.formats, true);
                            if (!mDate.isValid() || mDate.isBefore(self.constraint.min) || mDate.isAfter(self.constraint.max)) {
                                var min = self.constraint.min, max = self.constraint.max;
                                if (!(self.constraint.min instanceof moment))
                                    min = moment(min, self.formats, true);
                                if (!(self.constraint.max instanceof moment))
                                    max = moment(max, self.formats, true);
                                result.fail(nts.uk.resource.getMessage(self.msgId, [self.name, min.format(self.formats[0]), max.format(self.formats[0])]), self.msgId);
                            }
                            else {
                                result.success(mDate.format(self.formats[0]));
                            }
                            return result;
                        };
                        return DateValidator;
                    }());
                    var MAX_VALUE = uk.time.minutesBased.duration.parseString("71:59"), MIN_VALUE = uk.time.minutesBased.duration.parseString("-12:00");
                    var TimeWithDayValidator = /** @class */ (function () {
                        function TimeWithDayValidator(name, primitiveValueName, option) {
                            this.name = name;
                            this.constraint = ui.validation.getConstraint(primitiveValueName);
                            if (_.isNil(this.constraint)) {
                                this.constraint = {};
                                if (option && !_.isNil(option.min)) {
                                    this.constraint.min = option.min;
                                }
                                if (option && !_.isNil(option.max)) {
                                    this.constraint.max = option.max;
                                }
                            }
                            this.required = (option && option.required) ? option.required : false;
                        }
                        TimeWithDayValidator.prototype.validate = function (inputText) {
                            var self = this;
                            var result = new ui.validation.ValidationResult();
                            if (uk.util.isNullOrEmpty(inputText)) {
                                if (this.required) {
                                    result.fail(nts.uk.resource.getMessage('MsgB_1', [this.name]), 'MsgB_1');
                                }
                                else
                                    result.success("");
                                return result;
                            }
                            var minValue, maxValue, minParsed, maxParsed, parsedValue;
                            if (!_.isNil(self.constraint.min)) {
                                minParsed = uk.time.minutesBased.duration.parseString(self.constraint.min);
                                if (minParsed.success) {
                                    minValue = minParsed.toValue();
                                }
                            }
                            else
                                minValue = MIN_VALUE.toValue();
                            if (!_.isNil(self.constraint.max)) {
                                maxParsed = uk.time.minutesBased.duration.parseString(self.constraint.max);
                                if (maxParsed.success) {
                                    maxValue = maxParsed.toValue();
                                }
                            }
                            else
                                maxValue = MAX_VALUE.toValue();
                            var parsed = uk.time.minutesBased.duration.parseString(inputText);
                            if (!parsed.success || (parsedValue = parsed.toValue()) !== Math.round(parsedValue)
                                || parsedValue < minValue || parsedValue > maxValue) {
                                result.fail(nts.uk.resource.getMessage("MsgB_16", [self.name, minParsed.format(), maxParsed.format()]), "MsgB_16");
                            }
                            else {
                                result.success(parsedValue);
                            }
                            return result;
                        };
                        return TimeWithDayValidator;
                    }());
                    var Result = /** @class */ (function () {
                        function Result(isValid, formatted, messageId) {
                            this.onSuccess = $.noop;
                            this.onFail = $.noop;
                            this.isValid = isValid;
                            this.formatted = formatted;
                            this.errorMessageId = messageId;
                        }
                        Result.OK = function (formatted) {
                            return new Result(true, formatted);
                        };
                        Result.invalid = function (msgId) {
                            return new Result(false, null, msgId);
                        };
                        Result.prototype.success = function (cnt) {
                            this.onSuccess = cnt;
                            return this;
                        };
                        Result.prototype.fail = function (cnt) {
                            this.onFail = cnt;
                            return this;
                        };
                        Result.prototype.terminate = function () {
                            var self = this;
                            if (self.isValid && self.onSuccess && _.isFunction(self.onSuccess)) {
                                self.onSuccess(self.formatted);
                            }
                            else if (!self.isValid && self.onFail && _.isFunction(self.onFail)) {
                                self.onFail(self.errorMessageId);
                            }
                        };
                        return Result;
                    }());
                    hpl.Result = Result;
                    /**
                     * Parse time.
                     */
                    function parseTime(value, format) {
                        if (uk.ntsNumber.isNumber(value, false)) {
                            if (value <= H_M_MAX)
                                return Result.OK(value);
                            var hh = Math.floor(value / 100);
                            var mm = value % 100;
                            if (mm >= H_M_MAX)
                                return Result.invalid("NEED_MSG_INVALID_TIME_FORMAT");
                            return Result.OK(hh + ":" + mm.toLocaleString("en-US", { minimumIntegerDigits: 2, useGrouping: false }));
                        }
                        var formatRes = uk.time.applyFormat(format, value, undefined);
                        if (!formatRes)
                            return Result.invalid("NEED_MSG_INVALID_TIME_FORMAT");
                        return Result.OK(formatRes);
                    }
                    hpl.parseTime = parseTime;
                    /**
                     * Get value type.
                     */
                    function getValueType(columnKey) {
                        if (!_validators || !_validators[columnKey])
                            return;
                        var column = _validators[columnKey];
                        return column.primitiveValue ? ui.validation.getConstraint(column.primitiveValue).valueType
                            : column.options.cDisplayType;
                    }
                    hpl.getValueType = getValueType;
                    /**
                     * Get group separator.
                     */
                    function getGroupSeparator(columnKey) {
                        if (!_validators || !_validators[columnKey])
                            return;
                        return _validators[columnKey].options.groupseperator;
                    }
                    hpl.getGroupSeparator = getGroupSeparator;
                })(hpl || (hpl = {}));
                var khl;
                (function (khl) {
                    khl.ERROR_CLS = "merror";
                    khl.ERR_MSG_CLS = "mgrid-error-message";
                    var GridCellError = /** @class */ (function () {
                        function GridCellError(index, rowId, columnKey, message) {
                            this.grid = _$grid;
                            this.index = index;
                            this.rowId = rowId;
                            this.columnKey = columnKey;
                            this.message = message;
                            var col = _columnsMap[this.columnKey];
                            if (col)
                                this.columnName = col[0].headerText;
                        }
                        GridCellError.prototype.equals = function (err) {
                            if (this.index !== err.index)
                                return false;
                            if (this.rowId !== err.rowId)
                                return false;
                            if (this.columnKey !== err.columnKey)
                                return false;
                            return true;
                        };
                        return GridCellError;
                    }());
                    khl.GridCellError = GridCellError;
                    /**
                     * Add error.
                     */
                    function addCellError(error, genre) {
                        var errors = genre ? genre.errors : _errors;
                        if (errors.some(function (e) {
                            return e.equals(error);
                        }))
                            return;
                        errors.push(error);
                        var occurred = _$grid.mGrid("option", "errOccurred");
                        if (_.isFunction(occurred)) {
                            occurred();
                        }
                    }
                    khl.addCellError = addCellError;
                    /**
                     * Remove error.
                     */
                    function removeCellError(rowId, key, genre) {
                        var errors = genre ? genre.errors : _errors;
                        var removed = _.remove(errors, function (e) {
                            return rowId === e.rowId && key === e.columnKey;
                        });
                        if (removed.length > 0) {
                            if (errors.length === 0) {
                                var resolved = _$grid.mGrid("option", "errResolved");
                                if (_.isFunction(resolved)) {
                                    resolved();
                                }
                            }
                            else {
                                var dismiss = _$grid.mGrid("option", "errDismissed");
                                if (_.isFunction(dismiss)) {
                                    dismiss();
                                }
                            }
                        }
                    }
                    khl.removeCellError = removeCellError;
                    /**
                     * Set.
                     */
                    function set(cell, message, setType, rendered) {
                        if (!cell || ((!setType || setType === 1) && (!cell.element || any(cell))))
                            return;
                        if (!setType || setType === 1) {
                            var $cell = cell.element;
                            $cell.classList.add(khl.ERROR_CLS);
                            if (khl._infobulle) {
                                $.data($cell, "msg", message);
                            }
                        }
                        if (!setType || setType === 2) {
                            var errorDetails = createErrorInfos(cell, message);
                            if (_errorsOnPage) {
                                ui.errors.addCell(errorDetails);
                            }
                            addCellError(errorDetails);
                        }
                        var notice = _$grid.mGrid("option", "notice");
                        if (_.isFunction(notice)) {
                            if (_.isNil(cell.index)) {
                                var index = _.findIndex(_dataSource, function (d) { return d[_pk] === cell.id; });
                                if (index !== -1)
                                    notice(cell.id, cell.columnKey, _dataSource[index], rendered);
                            }
                            else {
                                notice(cell.id, cell.columnKey, _dataSource[cell.index], rendered);
                            }
                        }
                    }
                    khl.set = set;
                    /**
                     * Create error infos.
                     */
                    function createErrorInfos(cell, message) {
                        var record = _dataSource[cell.index];
                        var error = new GridCellError(cell.index, cell.id, cell.columnKey, message);
                        // Error column headers
                        var headers;
                        if (_errorsOnPage) {
                            var columns = ko.toJS(ui.errors.errorsViewModel().option().headers());
                            if (columns) {
                                headers = columns.filter(function (c) { return c.visible; }).map(function (c) { return c.name; });
                            }
                        }
                        else {
                            headers = _errorColumns;
                        }
                        _.forEach(headers, function (header) {
                            if (_.isNil(record[header])
                                || !_.isNil(error[header]))
                                return;
                            error[header] = record[header];
                        });
                        return error;
                    }
                    /**
                     * Clear.
                     */
                    function clear(cell) {
                        if (!cell || !cell.element || !any(cell))
                            return;
                        var $cell = cell.element;
                        $cell.classList.remove(khl.ERROR_CLS);
                        if (khl._infobulle) {
                            $.data($cell, "msg", null);
                        }
                        if (_errorsOnPage) {
                            ui.errors.removeCell(_$grid, cell.id, cell.columnKey);
                        }
                        removeCellError(cell.id, cell.columnKey);
                        var notice = _$grid.mGrid("option", "notice");
                        if (_.isFunction(notice)) {
                            if (_.isNil(cell.index)) {
                                var index = _.findIndex(_dataSource, function (d) { return d[_pk] === cell.id; });
                                if (index !== -1)
                                    notice(true, cell.id, cell.columnKey, _dataSource[index]);
                            }
                            else {
                                notice(true, cell.id, cell.columnKey, _dataSource[cell.index]);
                            }
                        }
                    }
                    khl.clear = clear;
                    /**
                     * Any.
                     */
                    function any(cell) {
                        return cell.element && cell.element.classList.contains(khl.ERROR_CLS);
                    }
                    khl.any = any;
                    /**
                     * Cell equals.
                     */
                    function cellEquals(one, other) {
                        if (one.columnKey !== other.columnKey)
                            return false;
                        if (one.id !== other.id)
                            return false;
                        return true;
                    }
                })(khl || (khl = {}));
                var selector;
                (function (selector) {
                    /**
                     * Find.
                     */
                    function find(p, sel) {
                        return new Manipulator().addNodes(p.querySelectorAll(sel));
                    }
                    selector.find = find;
                    /**
                     * Create.
                     */
                    function create(str) {
                        return new Manipulator().addElement(document.createElement(str));
                    }
                    selector.create = create;
                    /**
                     * Is.
                     */
                    function is(el, sel) {
                        var matches = el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector;
                        if (matches)
                            return matches.call(el, sel);
                        return $(el).is(sel);
                    }
                    selector.is = is;
                    /**
                     * Index.
                     */
                    function index(el) {
                        return Array.prototype.slice.call(el.parentNode.children).indexOf(el);
                    }
                    selector.index = index;
                    /**
                     * Query all.
                     */
                    function queryAll(el, sel) {
                        return Array.prototype.slice.call(el.querySelectorAll(sel));
                    }
                    selector.queryAll = queryAll;
                    /**
                     * Find at.
                     */
                    function findAt(el, sel, i) {
                        if (!el || !sel || _.isNil(i))
                            return;
                        return el.querySelector(sel + ":nth-of-type(" + i + ")");
                    }
                    selector.findAt = findAt;
                    /**
                     * Insert after.
                     */
                    function insertAfter(parent, el, tar) {
                        if (!parent || !el || !tar)
                            return;
                        parent.insertBefore(el, tar.nextSibling);
                    }
                    selector.insertAfter = insertAfter;
                    /**
                     * Offset.
                     */
                    function offset(el) {
                        var rect = el.getBoundingClientRect();
                        return {
                            top: rect.top + document.body.scrollTop,
                            left: rect.left + document.body.scrollLeft
                        };
                    }
                    selector.offset = offset;
                    /**
                     * Class siblings.
                     */
                    function classSiblings(node, clazz) {
                        var parent = node.parentElement;
                        if (!parent)
                            return;
                        var children = parent.children;
                        var results = [];
                        for (var i = 0; i < children.length; i++) {
                            if (children[i] === node)
                                continue;
                            var classList = children[i].classList;
                            for (var j = 0; j < classList.length; j++) {
                                if (classList.item(j) === clazz) {
                                    results.push(children[i]);
                                    break;
                                }
                            }
                        }
                        return results;
                    }
                    selector.classSiblings = classSiblings;
                    /**
                     * Sibling lt.
                     */
                    function siblingsLt(el, index) {
                        var parent = el.parentNode;
                        if (!parent)
                            return;
                        var children = parent.children;
                        var results = [];
                        for (var i = 0; i < children.length; i++) {
                            if (i < index) {
                                if (children[i] !== el)
                                    results.push(children[i]);
                            }
                            else
                                return results;
                        }
                    }
                    selector.siblingsLt = siblingsLt;
                    var Manipulator = /** @class */ (function () {
                        function Manipulator() {
                        }
                        Manipulator.prototype.addNodes = function (nodes) {
                            if (!nodes || nodes.length === 0)
                                return;
                            this.elements = Array.prototype.slice.call(self.elements);
                            return this;
                        };
                        Manipulator.prototype.addElements = function (elements) {
                            this.elements = elements;
                            return this;
                        };
                        Manipulator.prototype.addElement = function (element) {
                            if (!this.elements)
                                this.elements = [];
                            this.elements.push(element);
                            return this;
                        };
                        Manipulator.prototype.html = function (str) {
                            this.elements.forEach(function (e) {
                                e.innerHTML = str;
                            });
                            return this;
                        };
                        Manipulator.prototype.width = function (w) {
                            var self = this;
                            this.elements.forEach(function (e) {
                                e.style.width = parseInt(w) + "px";
                            });
                            return this;
                        };
                        Manipulator.prototype.height = function (h) {
                            var self = this;
                            this.elements.forEach(function (e) {
                                e.style.height = parseInt(h) + "px";
                            });
                            return this;
                        };
                        Manipulator.prototype.data = function (name, value) {
                            this.elements.forEach(function (e) {
                                $.data(e, name, value);
                            });
                            return this;
                        };
                        Manipulator.prototype.addClass = function (clazz) {
                            this.elements.forEach(function (e) {
                                e.classList.add(clazz);
                            });
                            return this;
                        };
                        Manipulator.prototype.css = function (style) {
                            var text = "; ";
                            Object.keys(style).forEach(function (k) {
                                if (k === "maxWidth") {
                                    text += ("max-width: " + style[k] + "; ");
                                    return;
                                }
                                text += k + ": " + style[k] + "; ";
                            });
                            this.elements.forEach(function (e) {
                                e.style.cssText = text;
                            });
                            return this;
                        };
                        Manipulator.prototype.getSingle = function () {
                            return this.elements[0];
                        };
                        Manipulator.prototype.get = function () {
                            return this.elements;
                        };
                        return Manipulator;
                    }());
                    selector.Manipulator = Manipulator;
                })(selector || (selector = {}));
                var color;
                (function (color) {
                    color.Error = "mgrid-error";
                    color.Alarm = "mgrid-alarm";
                    color.ManualEditTarget = "mgrid-manual-edit-target";
                    color.ManualEditOther = "mgrid-manual-edit-other";
                    color.Reflect = "mgrid-reflect";
                    color.Calculation = "mgrid-calc";
                    color.Disable = "mgrid-disable";
                    color.Lock = "mgrid-lock";
                    color.Hide = "mgrid-hide";
                    color.HOVER = "ui-state-hover";
                    color.ALL = [color.Error, color.Alarm, color.ManualEditTarget, color.ManualEditOther, color.Reflect, color.Calculation, color.Disable];
                    /**
                     * Push state.
                     */
                    function pushState(id, key, state, suivant) {
                        if (!_cellStates) {
                            _cellStates = {};
                        }
                        if (!_cellStates[id]) {
                            _cellStates[id] = {};
                            _cellStates[id][key] = [{ rowId: id, columnKey: key, state: _.concat([], state), suivant: suivant }];
                            return;
                        }
                        if (!_cellStates[id][key]) {
                            _cellStates[id][key] = [{ rowId: id, columnKey: key, state: _.concat([], state), suivant: suivant }];
                            return;
                        }
                        if (_.isArray(state)) {
                            _.forEach(state, function (s) {
                                _cellStates[id][key][0].state.push(s);
                            });
                        }
                        else
                            _cellStates[id][key][0].state.push(state);
                        if (suivant) {
                            _cellStates[id][key][0].suivant = suivant;
                        }
                    }
                    color.pushState = pushState;
                    /**
                     * Pop state.
                     */
                    function popState(id, key, states) {
                        if (!states)
                            return;
                        if (!_cellStates || !_cellStates[id] || !_cellStates[id][key])
                            return;
                        _.remove(_cellStates[id][key][0].state, function (s) {
                            if (_.isArray(states)) {
                                return _.some(states, function (state) { return state === s; });
                            }
                            else
                                return s === states;
                        });
                    }
                    color.popState = popState;
                })(color = mgrid.color || (mgrid.color = {}));
                var ti;
                (function (ti) {
                    /**
                     * Is IE.
                     */
                    function isIE() {
                        return window.navigator.userAgent.indexOf("MSIE") > -1 || window.navigator.userAgent.match(/trident/i);
                    }
                    ti.isIE = isIE;
                    /**
                     * Is Chrome.
                     */
                    function isChrome() {
                        return window.chrome;
                    }
                    ti.isChrome = isChrome;
                    /**
                     * Is Edge.
                     */
                    function isEdge() {
                        return window.navigator.userAgent.indexOf("Edge") > -1;
                    }
                    ti.isEdge = isEdge;
                    function isArrowKey(evt) {
                        return evt.keyCode >= 37 && evt.keyCode <= 40;
                    }
                    ti.isArrowKey = isArrowKey;
                    function isArrowLeft(evt) {
                        return evt.keyCode === 37;
                    }
                    ti.isArrowLeft = isArrowLeft;
                    function isArrowRight(evt) {
                        return evt.keyCode === 39;
                    }
                    ti.isArrowRight = isArrowRight;
                    function isArrowUp(evt) {
                        return evt.keyCode === 38;
                    }
                    ti.isArrowUp = isArrowUp;
                    function isArrowDown(evt) {
                        return evt.keyCode === 40;
                    }
                    ti.isArrowDown = isArrowDown;
                    function isAlphaNumeric(evt) {
                        return (evt.keyCode >= 48 && evt.keyCode <= 90)
                            || (evt.keyCode >= 96 && evt.keyCode <= 105);
                    }
                    ti.isAlphaNumeric = isAlphaNumeric;
                    function isMinusSymbol(evt) {
                        return evt.keyCode === 189 || evt.keyCode === 109;
                    }
                    ti.isMinusSymbol = isMinusSymbol;
                    function isTabKey(evt) {
                        return evt.keyCode === 9;
                    }
                    ti.isTabKey = isTabKey;
                    function isEnterKey(evt) {
                        return evt.keyCode === 13;
                    }
                    ti.isEnterKey = isEnterKey;
                    function isSpaceKey(evt) {
                        return evt.keyCode === 32;
                    }
                    ti.isSpaceKey = isSpaceKey;
                    function isDeleteKey(evt) {
                        return evt.keyCode === 46;
                    }
                    ti.isDeleteKey = isDeleteKey;
                    function isPasteKey(evt) {
                        return evt.keyCode === 86;
                    }
                    ti.isPasteKey = isPasteKey;
                    function isCopyKey(evt) {
                        return evt.keyCode === 67;
                    }
                    ti.isCopyKey = isCopyKey;
                    function isCutKey(evt) {
                        return evt.keyCode === 88;
                    }
                    ti.isCutKey = isCutKey;
                    function cloneDeep(obj, cloneObject) {
                        if (Array.isArray(obj))
                            return cloneArray(obj);
                        if (typeof obj !== "object" || _.isNil(obj))
                            return obj;
                        cloneObject = cloneObject || Object.create(Object.getPrototypeOf(obj));
                        function clone(cloneObj, obj) {
                            for (var i in obj) {
                                if (_.isNil(obj[i]) || obj[i] instanceof Date || obj[i] instanceof moment) {
                                    cloneObj[i] = obj[i];
                                    continue;
                                }
                                if (Array.isArray(obj[i])) {
                                    cloneObj[i] = cloneArray(obj[i]);
                                }
                                else if (typeof obj[i] === "object") {
                                    cloneObj[i] = clone(Object.create(Object.getPrototypeOf(obj[i])), obj[i]);
                                }
                                else {
                                    cloneObj[i] = obj[i];
                                }
                            }
                            return cloneObj;
                        }
                        clone(cloneObject, obj);
                        return cloneObject;
                    }
                    ti.cloneDeep = cloneDeep;
                    function cloneArray(arr) {
                        if (_.isNil(arr))
                            return arr;
                        var cloneArr = [];
                        for (var i = 0; i < arr.length; i++) {
                            cloneArr.push(cloneDeep(arr[i]));
                        }
                        return cloneArr;
                    }
                    ti.cloneArray = cloneArray;
                    function forEach(arr, loop) {
                        if (_.isNil(arr))
                            return;
                        if (_.isObject(arr) && !_.isArray(arr)) {
                            var keys = _.keys(arr);
                            for (var i = 0; i < keys.length; i++) {
                                if (loop(arr[keys[i]], keys[i]) === false)
                                    break;
                            }
                            return;
                        }
                        for (var i = 0; i < arr.length; i++) {
                            if (loop(arr[i], i) === false)
                                break;
                        }
                    }
                    ti.forEach = forEach;
                    function isZero(value, name) {
                        var col = _secColumn[name];
                        if (col && ((col.constraint && col.constraint.cDisplayType === "TimeWithDay")
                            || !col.grant))
                            return false;
                        return Number(value) === 0 || value === "0:00" || value === "00:00";
                    }
                    ti.isZero = isZero;
                    function isTableCell(obj) {
                        return obj.constructor === HTMLTableCellElement
                            || obj.constructor === HTMLTableDataCellElement;
                    }
                    ti.isTableCell = isTableCell;
                    /**
                     * Equal.
                     */
                    function isEqual(one, two, fields) {
                        if (_.isObject(one) && _.isObject(two)) {
                            return (fields && fields.length > 0)
                                ? _.isEqual(_.omitBy(one, function (d, p) { return fields.every(function (f) { return f !== p; }); }), _.omitBy(two, function (d, p) { return fields.every(function (f) { return f !== p; }); }))
                                : _.isEqual(_.omit(one, _.isFunction), _.omit(two, _.isFunction));
                        }
                        return _.isEqual(one, two);
                    }
                    ti.isEqual = isEqual;
                    /**
                     * Get scroll width.
                     */
                    function getScrollWidth() {
                        if (_scrollWidth)
                            return _scrollWidth;
                        var $outer = document.body.appendChild(selector.create("div").css({ visibility: 'hidden', width: "100px", overflow: 'scroll' }).getSingle());
                        var $inner = selector.create("div").css({ width: '100%' }).getSingle();
                        $outer.appendChild($inner);
                        var widthWithScroll = $inner.offsetWidth;
                        $outer.parentNode.removeChild($outer);
                        _scrollWidth = 100 - widthWithScroll;
                        return _scrollWidth;
                    }
                    ti.getScrollWidth = getScrollWidth;
                    /**
                     * First sibling.
                     */
                    function firstSibling(node, clazz) {
                        var parent = node.parentElement;
                        if (!parent)
                            return;
                        var children = parent.children;
                        for (var i = 0; i < children.length; i++) {
                            if (node !== children[i] && children[i].classList.contains(clazz)) {
                                return children[i];
                            }
                        }
                    }
                    ti.firstSibling = firstSibling;
                    /**
                     * Class siblings.
                     */
                    function classSiblings(node, partialClass) {
                        var parent = node.parentElement;
                        if (!parent)
                            return;
                        var children = parent.children;
                        var results = [];
                        for (var i = 0; i < children.length; i++) {
                            if (children[i] === node)
                                continue;
                            var classList = children[i].classList;
                            for (var j = 0; j < classList.length; j++) {
                                if (classList.item(j).indexOf(partialClass) >= 0) {
                                    results.push(children[i]);
                                }
                            }
                        }
                        return results;
                    }
                    ti.classSiblings = classSiblings;
                    /**
                     * Consume siblings.
                     */
                    function consumeSiblings(node, op) {
                        var parent = node.parentElement;
                        if (!parent)
                            return;
                        var children = parent.children;
                        for (var i = 0; i < children.length; i++) {
                            if (node !== children[i]) {
                                op(children[i]);
                            }
                        }
                    }
                    ti.consumeSiblings = consumeSiblings;
                    /**
                     * Closest.
                     */
                    function closest(el, selector) {
                        var matches;
                        ['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'].some(function (fn) {
                            if (typeof document.body[fn] === 'function') {
                                matches = fn;
                                return true;
                            }
                            return false;
                        });
                        var parent;
                        while (el) {
                            parent = el.parentElement;
                            if (parent && parent[matches](selector)) {
                                return parent;
                            }
                            el = parent;
                        }
                    }
                    ti.closest = closest;
                    /**
                     * Add class.
                     */
                    function addClass1n(node, clazz) {
                        if (node && node.constructor !== HTMLCollection) {
                            var children = node.querySelectorAll("." + v.CHILD_CELL_CLS);
                            if (children.length > 0)
                                addClass(children, clazz);
                            else
                                addClass(node, clazz);
                            return;
                        }
                        for (var i = 0; i < node.length; i++) {
                            var children = node[i].querySelectorAll("." + v.CHILD_CELL_CLS);
                            if (children.length > 0)
                                addClass(children, clazz);
                            else
                                addClass(node[i], clazz);
                        }
                    }
                    ti.addClass1n = addClass1n;
                    /**
                     * Remove class.
                     */
                    function removeClass1n(node, clazz) {
                        if (node && node.constructor !== HTMLCollection) {
                            var children = node.querySelectorAll("." + v.CHILD_CELL_CLS);
                            if (children.length > 0)
                                removeClass(children, clazz);
                            else
                                removeClass(node, clazz);
                            return;
                        }
                        for (var i = 0; i < node.length; i++) {
                            var children = node[i].querySelectorAll("." + v.CHILD_CELL_CLS);
                            if (children.length > 0)
                                removeClass(children, clazz);
                            else
                                removeClass(node[i], clazz);
                        }
                    }
                    ti.removeClass1n = removeClass1n;
                    /**
                     * Add class.
                     */
                    function addClass(node, clazz) {
                        if (node && node.constructor !== HTMLCollection && node.constructor !== NodeList) {
                            node.classList.add(clazz);
                            return;
                        }
                        for (var i = 0; i < node.length; i++) {
                            if (!node[i].classList.contains(clazz)) {
                                node[i].classList.add(clazz);
                            }
                        }
                    }
                    ti.addClass = addClass;
                    /**
                     * Remove class.
                     */
                    function removeClass(node, clazz) {
                        if (node && node.constructor !== HTMLCollection && node.constructor !== NodeList) {
                            node.classList.remove(clazz);
                            return;
                        }
                        for (var i = 0; i < node.length; i++) {
                            if (node[i].classList.contains(clazz)) {
                                node[i].classList.remove(clazz);
                            }
                        }
                    }
                    ti.removeClass = removeClass;
                    /**
                     * Remove.
                     */
                    function remove(node) {
                        if (isIE()) {
                            if (node && node.parentNode)
                                node.parentNode.removeChild(node);
                            return;
                        }
                        node.remove();
                    }
                    ti.remove = remove;
                    /**
                     * Classify columns.
                     */
                    function classifyColumns(options, link) {
                        var visibleColumns = [];
                        var hiddenColumns = [];
                        var columns = filterColumns(options.columns, visibleColumns, hiddenColumns, link);
                        return {
                            visibleColumns: visibleColumns,
                            hiddenColumns: hiddenColumns,
                            columns: columns
                        };
                    }
                    ti.classifyColumns = classifyColumns;
                    /**
                     * Get columns map.
                     */
                    function getColumnsMap(columns) {
                        return _.groupBy(columns, "key");
                    }
                    ti.getColumnsMap = getColumnsMap;
                    /**
                     * Filter columns.
                     */
                    function filterColumns(columns, visibleColumns, hiddenColumns, link) {
                        var cols = [];
                        _.forEach(columns, function (col) {
                            if (link && col.bound)
                                _linkage.push(col.key);
                            if (!_.isNil(col.hidden) && col.hidden === true) {
                                hiddenColumns.push(col);
                                cols.push(col);
                                return;
                            }
                            if (!uk.util.isNullOrUndefined(col.group) && col.group.length > 0) {
                                cols = _.concat(cols, filterColumns(col.group, visibleColumns, hiddenColumns, link));
                            }
                            else {
                                visibleColumns.push(col);
                                cols.push(col);
                            }
                        });
                        return cols;
                    }
                    /**
                     * Columns map.
                     */
                    function columnsMapFromStruct(levelStruct) {
                        var map = {};
                        _.forEach(Object.keys(levelStruct), function (nth) {
                            _.forEach(levelStruct[nth], function (col) {
                                if (!uk.util.isNullOrUndefined(col.key)) {
                                    map[col.key] = col;
                                }
                            });
                        });
                        return map;
                    }
                    ti.columnsMapFromStruct = columnsMapFromStruct;
                    /**
                     * Calc total.
                     */
                    function calcTotal() {
                        _.forEach(_.keys(_summaries), function (k) {
                            var sum = _summaries[k];
                            if ((sum.calculator === "Time" && sum[_currentPage] && sum[_currentPage].asHours() > 0)
                                || (sum.calculator === "Number" && sum[_currentPage] > 0))
                                return;
                            _.forEach(_dataSource, function (d) {
                                switch (sum.calculator) {
                                    case "Time":
                                        if (_.isNil(sum[_currentPage])) {
                                            sum[_currentPage] = moment.duration("0:00");
                                        }
                                        sum[_currentPage].add(moment.duration(d[k]));
                                        break;
                                    case "Number":
                                        if (_.isNil(sum[_currentPage])) {
                                            sum[_currentPage] = 0;
                                        }
                                        sum[_currentPage] += (!_.isNil(d[k]) && d[k] !== "" ? parseFloat(d[k]) : 0);
                                        break;
                                }
                            });
                        });
                    }
                    ti.calcTotal = calcTotal;
                    /**
                     * Time to minutes.
                     */
                    function timeToMinutes(time) {
                        if (_.isNil(time) || time.constructor !== String)
                            return;
                        var parts = time.split(":");
                        var hour = Math.abs(Number(parts[0])), minute = Number(parts[1]);
                        return (_.indexOf(parts[0], "-") === 0 ? -1 : 1) * ((isNaN(hour) ? 0 : hour) * 60 + (isNaN(minute) ? 0 : minute));
                    }
                    ti.timeToMinutes = timeToMinutes;
                    /**
                     * Moment to string.
                     */
                    function momentToString(total) {
                        var minus = "", time = total.asHours();
                        if (time < 0) {
                            time = Math.abs(time);
                            minus = "-";
                        }
                        var hour = Math.floor(time), minute = (time - hour) * 60, roundMin = Math.round(minute), minuteStr = roundMin < 10 ? ("0" + roundMin) : String(roundMin);
                        return minus + hour + ":" + minuteStr;
                    }
                    ti.momentToString = momentToString;
                    /**
                     * As currency.
                     */
                    function asCurrency(value) {
                        var currencyOpts = new ui.option.CurrencyEditorOption();
                        currencyOpts.grouplength = 3;
                        currencyOpts.decimallength = 0;
                        currencyOpts.currencyformat = "JPY";
                        var formatter = new uk.text.NumberFormatter({ option: currencyOpts });
                        if (!isNaN(value))
                            return formatter.format(value);
                        return value;
                    }
                    ti.asCurrency = asCurrency;
                    /**
                     * Date format.
                     */
                    function dateFormat(format) {
                        var formats;
                        if (format === "y") {
                            formats = ["YYYY"];
                        }
                        else if (format === "ym") {
                            formats = ["YYYY/MM", "YYYYMM"];
                        }
                        else {
                            formats = ["YYYY/MM/DD", "YYYY/M/D", "YYYYMMDD"];
                        }
                        return formats;
                    }
                    ti.dateFormat = dateFormat;
                    /**
                     * Days board.
                     */
                    function daysBoard(date) {
                        var days = [];
                        if (date.date() > 1) {
                            date = moment({ y: date.year(), M: date.month(), d: 1 });
                        }
                        var weekday = date.isoWeekday(), monthdays = date.daysInMonth(), prevDays, last = monthdays + weekday;
                        if (date.month() === 0) {
                            prevDays = moment({ y: date.year() - 1, M: 11, d: 1 }).daysInMonth();
                        }
                        else
                            prevDays = moment({ y: date.year(), M: date.month() - 1, d: 1 }).daysInMonth();
                        for (var i = weekday - 1; i >= 0; i--) {
                            days[i] = prevDays - weekday + 1 + i;
                        }
                        for (var i = weekday; i < last; i++) {
                            days[i] = i - weekday + 1;
                        }
                        for (var i = last; i < 42; i++) {
                            days[i] = i - last + 1;
                        }
                        return days;
                    }
                    ti.daysBoard = daysBoard;
                    /**
                     * Get cell coord.
                     */
                    function getCellCoord($cell) {
                        if (!$cell)
                            return;
                        var $td = $cell;
                        if (selector.is($cell, "div")) {
                            $td = closest($cell, "td");
                        }
                        var view = $.data($td, lo.VIEW), $tr = closest($td, "tr");
                        if (!view || !$tr)
                            return;
                        var coord = view.split("-");
                        if (uk.util.isNullOrUndefined(coord[0]) || uk.util.isNullOrUndefined(coord[1]))
                            return;
                        return {
                            rowIdx: parseFloat($.data($tr, lo.VIEW)),
                            columnKey: coord[1]
                        };
                    }
                    ti.getCellCoord = getCellCoord;
                })(ti || (ti = {}));
            })(mgrid = ui_18.mgrid || (ui_18.mgrid = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="generic.d.ts/jquery.d.ts"/>
/// <reference path="generic.d.ts/jquery.steps.d.ts"/>
/// <reference path="generic.d.ts/igniteui.d.ts"/>
/// <reference path="generic.d.ts/jqueryui.d.ts"/>
/// <reference path="generic.d.ts/knockout.d.ts"/>
/// <reference path="generic.d.ts/knockout.mapping.d.ts"/>
/// <reference path="generic.d.ts/lodash.d.ts"/>
/// <reference path="generic.d.ts/moment.d.ts"/>
/// <reference path="generic.d.ts/require.d.ts"/>
/// <reference path="ui/viewcontext.d.ts"/>
/// <reference path="util.ts"/>
/// <reference path="text.ts"/>
/// <reference path="number.ts"/>
/// <reference path="time.ts"/>
/// <reference path="time/timeformat.ts"/>
/// <reference path="time/minutesbased/minutesbased.ts"/>
/// <reference path="time/minutesbased/minutesbased_duration.ts"/>
/// <reference path="time/minutesbased/minutesbased_clock.ts"/>
/// <reference path="time/minutesbased/minutesbased_withdayattr.ts"/>
/// <reference path="time/secondsbased/secondsbased.ts"/>
/// <reference path="time/secondsbased/secondsbased_duration.ts"/>
/// <reference path="time/secondsbased/secondsbased_clock.ts"/>
/// <reference path="request.ts"/>
/// <reference path="ui/init.ts"/>
/// <reference path="ui/menu.ts"/>
/// <reference path="ui/notify.ts"/>
/// <reference path="ui/validation.ts"/>
/// <reference path="ui/errors.ts"/>
/// <reference path="ui/ui.ts"/>
/// <reference path="ui/ui_sub/windows.ts"/>
/// <reference path="ui/ui_sub/dialog.ts"/>
/// <reference path="ui/ui_sub/ig.ts"/>
/// <reference path="ui/dialog-options.ts"/>
/// <reference path="ui/textbox-options.ts"/>
/// <reference path="ui/extable.ts"/>
/// <reference path="ui/jquery-ext.ts"/>
/// <reference path="ui/ko-ext.ts"/>
/// <reference path="ui/ko-ext/checkbox-ko-ext.ts"/>
/// <reference path="ui/ko-ext/combobox-ko-ext.ts"/>
/// <reference path="ui/ko-ext/datepicker-ko-ext.ts"/>
/// <reference path="ui/ko-ext/dialog-ko-ext.ts"/>
/// <reference path="ui/ko-ext/editor-ko-ext.ts"/>
/// <reference path="ui/ko-ext/formlabel-ko-ext.ts"/>
/// <reference path="ui/ko-ext/gridlist-ko-ext.ts"/>
/// <reference path="ui/ko-ext/listbox-ko-ext.ts"/>
/// <reference path="ui/ko-ext/radiobox-ko-ext.ts"/>
/// <reference path="ui/ko-ext/searchbox-ko-ext.ts"/>
/// <reference path="ui/ko-ext/swaplist-ko-ext.ts"/>
/// <reference path="ui/ko-ext/switch-button-ko-ext.ts"/>
/// <reference path="ui/ko-ext/tabpanel-ko-ext.ts"/>
/// <reference path="ui/ko-ext/panel-ko-ext.ts"/>
/// <reference path="ui/ko-ext/treegrid-ko-ext.ts"/>
/// <reference path="ui/ko-ext/updown-button-ko-ext.ts"/>
/// <reference path="ui/ko-ext/wizard-ko-ext.ts"/>
/// <reference path="ui/ko-ext/legendbutton-ko-ext.ts"/>
/// <reference path="ui/ko-ext/charset-setting-ko-ext.ts"/>
/// <reference path="ui/function-wrap/contextmenu.ts"/>
/// <reference path="ui/mgrid.ts"/>
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var action;
            (function (action) {
                var content;
                (function (content) {
                    ui.documentReady.add(function () {
                        $('#functions-area').addClass("disappear");
                        $('#functions-area-bottom').addClass("disappear");
                        $('#contents-area').addClass("disappear");
                        $('#master-content').addClass("disappear");
                    });
                    ui.viewModelApplied.add(function () {
                        $('#functions-area').removeClass("disappear");
                        $('#functions-area-bottom').removeClass("disappear");
                        $('#contents-area').removeClass("disappear");
                        $('#master-content').removeClass("disappear");
                        if ($('#sidebar').length > 0) {
                            $('#sidebar').ntsSideBar("reactive");
                        }
                    });
                    ui.viewModelApplied.add(function () {
                        if (!nts.uk.util.isNullOrUndefined(__viewContext.program.operationSetting)
                            && (__viewContext.program.operationSetting.state == 1 || __viewContext.program.operationSetting.state == 2)) {
                            var operationInfo = $("<div>", { 'class': 'operation-info-container marquee', 'id': 'operation-info' }), moving_1 = $("<div>"), text_4 = $("<label>"), text2 = $("<label>");
                            moving_1.append(text_4).append(text2);
                            operationInfo.append(moving_1).css({ right: ($("#manual").outerWidth() + 5) + "px" });
                            text_4.text(__viewContext.program.operationSetting.message);
                            text2.text(__viewContext.program.operationSetting.message);
                            $("#pg-area").append(operationInfo);
                            operationInfo.hover(function () {
                                moving_1.addClass("animate-stopping");
                            }, function () {
                                moving_1.removeClass("animate-stopping");
                            });
                            var limit_1 = Math.floor(0 - moving_1.width()), current_1 = limit_1, id = setInterval(running, 50);
                            moving_1.css({ "right": current_1 + "px" });
                            operationInfo.data("animate-id", id);
                            function running() {
                                if (moving_1.hasClass("animate-stopping")) {
                                    return;
                                }
                                if (current_1 >= 200) {
                                    current_1 = limit_1;
                                }
                                else {
                                    current_1++;
                                }
                                moving_1.css({ "right": current_1 + "px" });
                            }
                        }
                    });
                })(content || (content = {}));
            })(action = ui.action || (ui.action = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                var ajax = nts.uk.request.ajax;
                var setShared = nts.uk.ui.windows.setShared;
                var getShared = nts.uk.ui.windows.getShared;
                var openModal = nts.uk.ui.windows.sub.modal;
                ko.components.register("assy-com", {
                    viewModel: function (params) {
                        var self = this;
                        self.height = observableOrDefault(params.height, "120px");
                        self.width = observableOrDefault(params.width, "640px");
                        self.labelDistance = observableOrDefault(params.labelDistance, "60px");
                        self.screenMode = params.screenMode;
                        self.webAppId = params.webAppId || nts.uk.request.location.currentAppId;
                        self.histIdName = params.histIdName || "histId";
                        self.isLatestHistSelected = ko.observable(false);
                        self.masterId = params.masterId;
                        self.histList = params.histList;
                        self.selectedHistId = params.selectedHistId;
                        self.selectedHistId.subscribe(function (id) {
                            if (!_.findIndex(self.histList(), function (h) { return h.histId === id; })) {
                                self.isLatestHistSelected(true);
                            }
                            else {
                                self.isLatestHistSelected(false);
                            }
                        });
                        self.pathGet = params.servicePath.get;
                        self.pathAdd = params.servicePath.add;
                        self.pathUpdate = params.servicePath.update;
                        self.pathDelete = params.servicePath.delete;
                        self.getQueryResult = params.getQueryResult;
                        self.getSelectedStartDate = params.getSelectedStartDate;
                        self.loadHist = function (rendered) {
                            if (!_.isNil(self.masterId) && self.masterId !== "") {
                                ajax(self.webAppId, self.pathGet()).done(function (res) {
                                    var queryResult = self.getQueryResult(res);
                                    self.histList(queryResult);
                                    if (!rendered && self.histList().length > 0) {
                                        self.selectedHistId(self.histList()[0][self.histIdName]);
                                    }
                                    if (rendered && _.isFunction(params.afterRender)) {
                                        _.defer(function () {
                                            params.afterRender();
                                        });
                                    }
                                });
                            }
                            else {
                                if (rendered && _.isFunction(params.afterRender)) {
                                    params.afterRender();
                                }
                            }
                        };
                        self.afterRender = self.loadHist.bind(self, true);
                        self.delVisible = params.delVisible;
                        self.delChecked = params.delChecked;
                        self.delEnable = ko.computed(function () {
                            return self.histList().length > 0 && self.screenMode() === SCREEN_MODE.UPD && self.isLatestHistSelected();
                        });
                        self.openAddHistDialog = function () {
                            setShared("ASSY_COM_PARAM", new AssyShared(self.masterId(), self.selectedHistId()));
                            setShared("ASSY_COM_PARAM_CMD", params.commandAdd);
                            setShared("ASSY_COM_PARAM_AJAX", function (data) { return ajax(self.webAppId, self.pathAdd(), data); });
                            openModal("com", "/view/assy/addhist/index.xhtml").onClosed(function () {
                                var done = getShared("HIST_ADD");
                                if (done) {
                                    self.loadHist();
                                    if (_.isFunction(params.afterAdd)) {
                                        params.afterAdd();
                                    }
                                }
                            });
                        }.bind(self);
                        self.openUpdHistDialog = function () {
                            setShared("ASSY_COM_PARAM", new AssyShared(self.masterId(), self.selectedHistId(), self.getSelectedStartDate()));
                            setShared("ASSY_COM_PARAM_CMD", params.commandUpdate);
                            setShared("ASSY_COM_PARAM_AJAX", function (data) { return ajax(self.webAppId, self.pathUpdate(), data); });
                            openModal("com", "/view/assy/updhist/index.xhtml").onClosed(function () {
                                var done = getShared("HIST_UPD");
                                if (done) {
                                    self.loadHist();
                                    if (_.isFunction(params.afterUpdate)) {
                                        params.afterUpdate();
                                    }
                                }
                            });
                        }.bind(self);
                        self.deleteHist = function () {
                            nts.uk.ui.dialog.confirm({ messageId: 'Msg_18' }).ifYes(function () {
                                ajax(self.webAppId, self.pathDelete(), params.commandDelete(self.masterId(), self.selectedHistId())).done(function () {
                                    self.loadHist();
                                    if (_.isFunction(params.afterDelete)) {
                                        params.afterDelete();
                                    }
                                }).fail(function (res) {
                                    nts.uk.ui.dialog.bundledErrors(res);
                                });
                            });
                        }.bind(self);
                    },
                    template: "<div class=\"assy-hist\" data-bind=\"let: { text: nts.uk.resource.getText }, style: { height: height(), width: width() }\">\n            <div class=\"as-area hist-label\" data-bind=\"ntsFormLabel: {}, text: text('JAP0020_A1_1'), style: { paddingRight: labelDistance() }\"></div>\n            <div class=\"as-area hist-list\" id=\"" + nts.uk.util.randomId() + "\" tabindex=\"3\" \n                data-bind=\"ntsListBox: {\n                options: histList,\n                optionsValue: 'histId',\n                optionsText: 'displayText',\n                multiple: false,\n                value: selectedHistId,\n                enable: true,\n                rows: 5,\n                columns: [\n                    { key: 'displayText', length: 15 }\n                ]}\">\n            </div>\n            <div class=\"as-area\">\n                <div class=\"del-chk\" tabindex=\"6\" data-bind=\"ntsCheckBox: { checked: delChecked, enable: delEnable() },\n                    style: { visibility: delVisible() ? 'visible' : 'hidden' }\">\n                </div>\n            </div>\n            <div class=\"as-area hist-btn\" data-bind=\"template: { afterRender: afterRender }\">\n                <button class=\"add\" tabindex=\"4\"\n                    data-bind=\"click: openAddHistDialog,\n                    enable: histList().length == 0 || (screenMode() == 1 &amp;&amp; isLatestHistSelected), text: text('JAP0020_A1_3')\"></button>\n                <br/>\n                <button class=\"update\" tabindex=\"5\"\n                    data-bind=\"click: openUpdHistDialog,\n                    enable: histList().length > 0 &amp;&amp; screenMode() == 1 &amp;&amp; isLatestHistSelected, text: text('JAP0020_A1_4')\"></button>\n                <br/>\n                <button tabindex=\"7\" class=\"danger delete\"\n                    data-bind=\"click: deleteHist,\n                    enable: !delVisible() || (histList().length > 0 &amp;&amp; delEnable() &amp;&amp; delChecked()), text: text('JAP0020_A1_6')\"></button>\n            </div>\n        </div>"
                });
                function observableOrDefault(val, def) {
                    return ko.isObservable(val) ? val : ko.observable(_.isNil(val) ? def : val);
                }
                var AssyShared = /** @class */ (function () {
                    function AssyShared(masterId, histId, startDate) {
                        this.masterId = masterId;
                        this.histId = histId;
                        this.startDate = startDate;
                    }
                    return AssyShared;
                }());
                var SCREEN_MODE;
                (function (SCREEN_MODE) {
                    SCREEN_MODE[SCREEN_MODE["NEW"] = 0] = "NEW";
                    SCREEN_MODE[SCREEN_MODE["UPD"] = 1] = "UPD";
                })(SCREEN_MODE || (SCREEN_MODE = {}));
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var file;
            (function (file_1) {
                var FileDownload = /** @class */ (function () {
                    function FileDownload(servicePath, data) {
                        var self = this;
                        self.servicePath = servicePath;
                        self.data = data;
                        self.isFinishTask = ko.observable(false);
                        self.isFinishTask.subscribe(function (value) {
                            if (value) {
                                clearInterval(self.interval);
                                self.isFinishTask(false);
                                self.download();
                            }
                        });
                    }
                    FileDownload.prototype.isTaskFinished = function (file) {
                        var options = {
                            dataType: 'text',
                            contentType: 'text/plain'
                        };
                        uk.request.ajax("file/file/isfinished", file.taskId).done(function (res) {
                            file.isFinishTask(res);
                        }).fail(function (error) {
                            file.reject(error);
                        });
                    };
                    FileDownload.prototype.print = function () {
                        var self = this;
                        self.deferred = $.Deferred();
                        var options = {
                            dataType: 'text',
                            contentType: 'application/json'
                        };
                        uk.request.ajax(self.servicePath, self.data, options).done(function (res) {
                            self.taskId = res;
                            self.interval = setInterval(self.isTaskFinished, 1000, self);
                        }).fail(function (error) {
                            self.deferred.reject(error);
                        });
                        return self.deferred.promise();
                    };
                    FileDownload.prototype.download = function () {
                        var self = this;
                        window.location.href = ("http://localhost:8080/nts.uk.pr.web/webapi/file/file/dl/" + self.taskId);
                        if (self.deferred) {
                            self.deferred.resolve();
                        }
                    };
                    return FileDownload;
                }());
                file_1.FileDownload = FileDownload;
            })(file = ui.file || (ui.file = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var chart;
            (function (chart_1) {
                chart_1.warning = [];
                var Ruler = /** @class */ (function () {
                    function Ruler(chartArea) {
                        this.definedType = {};
                        this.gcChart = {};
                        this.lineLock = {};
                        if (_.isNil(chartArea)) {
                            chart_1.warning.push(new Error("chartArea is undefined."));
                        }
                        this.chartArea = chartArea;
                    }
                    Ruler.prototype.addType = function (options) {
                        var self = this;
                        if (_.isNil(options.name)) {
                            chart_1.warning.push(new Warn("Set type name"));
                            return;
                        }
                        self.definedType[options.name] = new DefinedType(options);
                        if (options.locked) {
                            self.lineLock[options.lineNo] = true;
                        }
                    };
                    Ruler.prototype.addChart = function (options) {
                        var self = this, chart = new GanttChart(options);
                        if (chart.locked) {
                            self.lineLock[chart.lineNo] = true;
                        }
                        if ((self.gcChart[options.lineNo] || {})[options.id]) {
                            chart_1.warning.push(new Warn("Chart id existed"));
                            return;
                        }
                        if (chart.newChart())
                            return;
                        if (_.isNil(self.gcChart[options.lineNo])) {
                            self.gcChart[options.lineNo] = {};
                        }
                        self.gcChart[options.lineNo][options.id] = chart;
                        if (!_.isNil(options.parent)) {
                            var parent = self.gcChart[options.lineNo][options.parent];
                            if (parent) {
                                parent.children.push(chart);
                            }
                        }
                        self.chartArea.appendChild(chart.html);
                        var docMove = function () {
                            if (_.keys(self.slideTrigger).length === 0)
                                return;
                            var diff = event.pageX - self.slideTrigger.pageX, nearestLine, parentChart;
                            if (!_.isNil(chart.parent)) {
                                parentChart = self.gcChart[chart.lineNo][chart.parent];
                            }
                            if (self.slideTrigger.holdPos === HOLD_POS.BODY) {
                                if (!chart.canSlide)
                                    return;
                                nearestLine = Math.round((self.slideTrigger.start + diff / chart.unitToPx) / chart.snatchInterval);
                                var step_1 = nearestLine - self.slideTrigger.start, pDec_1 = { left: nearestLine * chart.unitToPx, start: nearestLine, end: self.slideTrigger.end + step_1 };
                                if (chart.limitStart > pDec_1.start || chart.limitEnd < pDec_1.end)
                                    return;
                                if (parentChart && ((diff > 0 && pDec_1.end > parentChart.end) || (diff < 0 && pDec_1.start < parentChart.start)))
                                    return;
                                _.forEach(chart.children, function (child) {
                                    var childSlide;
                                    if (child.followParent) {
                                        childSlide = _.find(self.slideTrigger.children, function (c) { return c.id === child.id; });
                                        if (!childSlide)
                                            return;
                                        child.reposition({ start: childSlide.start + step_1, end: childSlide.end + step_1, left: (childSlide.start + step_1) * child.unitToPx });
                                    }
                                    if (diff > 0 && child.start < pDec_1.start) {
                                        childSlide = _.find(self.slideTrigger.children, function (c) { return c.id === child.id; });
                                        if (!childSlide)
                                            return;
                                        child.reposition({ width: childSlide.length + (childSlide.start - pDec_1.start) * child.unitToPx, left: pDec_1.start * child.unitToPx, start: pDec_1.start });
                                    }
                                    else if (diff < 0 && child.end > pDec_1.end) {
                                        childSlide = _.find(self.slideTrigger.children, function (c) { return c.id === child.id; });
                                        if (!childSlide)
                                            return;
                                        child.reposition({ width: childSlide.length + (pDec_1.end - childSlide.end) * child.unitToPx, end: pDec_1.end });
                                    }
                                });
                                chart.reposition(pDec_1);
                            }
                            else if (self.slideTrigger.holdPos === HOLD_POS.START) {
                                if (chart.fixed === CHART_FIXED.START || chart.fixed === CHART_FIXED.BOTH)
                                    return;
                                nearestLine = Math.round((self.slideTrigger.start + diff / chart.unitToPx) / chart.snatchInterval);
                                var pDec_2 = { width: self.slideTrigger.length + (self.slideTrigger.start - nearestLine) * chart.unitToPx, left: nearestLine * chart.unitToPx, start: nearestLine };
                                if (chart.limitStart > pDec_2.start)
                                    return;
                                if (pDec_2.start + chart.snatchInterval > chart.end
                                    || (parentChart && !self.slideTrigger.overlap && pDec_2.start < parentChart.start))
                                    return;
                                _.forEach(chart.children, function (child) {
                                    if (child.start < pDec_2.start) {
                                        var childSlide = _.find(self.slideTrigger.children, function (c) { return c.id === child.id; });
                                        if (!childSlide)
                                            return;
                                        child.reposition({ width: childSlide.length + (childSlide.start - pDec_2.start) * child.unitToPx, left: pDec_2.start * child.unitToPx, start: pDec_2.start });
                                    }
                                });
                                if (self.slideTrigger.overlap) {
                                    parentChart.reposition({ width: self.slideTrigger.overlap.parentLength + (self.slideTrigger.start - nearestLine) * parentChart.unitToPx, left: pDec_2.left, start: pDec_2.start });
                                }
                                chart.reposition(pDec_2);
                            }
                            else {
                                if (chart.fixed === CHART_FIXED.END || chart.fixed === CHART_FIXED.BOTH)
                                    return;
                                nearestLine = Math.round((self.slideTrigger.end + diff / chart.unitToPx) / chart.snatchInterval);
                                var pDec_3 = { width: self.slideTrigger.length + (nearestLine - self.slideTrigger.end) * chart.unitToPx, end: nearestLine };
                                if (chart.limitEnd < pDec_3.end)
                                    return;
                                if (chart.start + chart.snatchInterval > pDec_3.end
                                    || (parentChart && !self.slideTrigger.overlap && pDec_3.end > parentChart.end))
                                    return;
                                _.forEach(chart.children, function (child) {
                                    if (child.end > pDec_3.end) {
                                        var childSlide = _.find(self.slideTrigger.children, function (c) { return c.id === child.id; });
                                        if (!childSlide)
                                            return;
                                        child.reposition({ width: childSlide.length + (pDec_3.end - childSlide.end) * child.unitToPx, end: pDec_3.end });
                                    }
                                });
                                if (self.slideTrigger.overlap) {
                                    parentChart.reposition({ width: self.slideTrigger.overlap.parentLength + (nearestLine - self.slideTrigger.end) * parentChart.unitToPx, end: pDec_3.end });
                                }
                                chart.reposition(pDec_3);
                            }
                        };
                        var docUp = function () {
                            document.removeEventListener("mousemove", docMove);
                            document.removeEventListener("mouseup", docUp);
                            var e = document.createEvent('CustomEvent');
                            if (self.slideTrigger.holdPos === HOLD_POS.BODY) {
                                e.initCustomEvent("gcDrag", true, true, [chart.start, chart.end]);
                            }
                            else {
                                e.initCustomEvent("gcResize", true, true, [chart.start, chart.end, self.slideTrigger.holdPos === HOLD_POS.START]);
                            }
                            self.slideTrigger = {};
                            chart.html.dispatchEvent(e);
                        };
                        chart.html.addEventListener("mousedown", function () {
                            var holdPos = self.getHoldPos(chart);
                            if (holdPos === HOLD_POS.OUT)
                                return;
                            self.slideTrigger = {
                                pageX: event.pageX,
                                holdPos: holdPos,
                                length: parseFloat(chart.html.style.width),
                                start: chart.start,
                                end: chart.end,
                                children: _.map(chart.children, function (c) { return { id: c.id, start: c.start, end: c.end, length: parseFloat(c.html.style.width) }; })
                            };
                            if (!_.isNil(chart.parent)) {
                                var parentChart = self.gcChart[chart.lineNo][chart.parent];
                                if ((holdPos === HOLD_POS.START && parentChart.start === chart.start)
                                    || (holdPos === HOLD_POS.END && parentChart.end === chart.end)) {
                                    self.slideTrigger.overlap = { parentLength: parseFloat(parentChart.html.style.width) };
                                }
                            }
                            document.addEventListener("mousemove", docMove);
                            document.addEventListener("mouseup", docUp);
                        });
                        chart.html.addEventListener("mousemove", function () {
                            var holdPos = self.getHoldPos(chart);
                            if (holdPos === HOLD_POS.START || holdPos === HOLD_POS.END) {
                                chart.cursor = "col-resize";
                            }
                            else if (holdPos === HOLD_POS.BODY) {
                                chart.cursor = "e-resize";
                            }
                            chart.html.style.cursor = chart.cursor;
                        });
                        return chart.html;
                    };
                    Ruler.prototype.getHoldPos = function (chart) {
                        var self = this;
                        if (self.lineLock[chart.lineNo] || chart.fixed === CHART_FIXED.BOTH)
                            return HOLD_POS.OUT;
                        if (chart.fixed !== CHART_FIXED.START && event.offsetX < chart.drawerSize) {
                            return HOLD_POS.START;
                        }
                        else if (chart.fixed !== CHART_FIXED.END
                            && (chart.end - chart.start) * chart.unitToPx - chart.drawerSize < event.offsetX) {
                            return HOLD_POS.END;
                        }
                        else {
                            return HOLD_POS.BODY;
                        }
                    };
                    Ruler.prototype.addChartWithType = function (typeName, options) {
                        var self = this, chartType = self.definedType[typeName];
                        if (_.isNil(options)) {
                            options = {};
                        }
                        if (chartType) {
                            _.forEach(_.keys(chartType), function (key) {
                                if (chartType[key] !== undefined) {
                                    options[key === "name" ? "definedType" : key] = chartType[key];
                                }
                            });
                        }
                        return self.addChart(options);
                    };
                    Ruler.prototype.setLock = function (lines, lock) {
                        var self = this;
                        _.forEach(lines, function (line) { return self.lineLock[line] = lock; });
                    };
                    return Ruler;
                }());
                chart_1.Ruler = Ruler;
                var DefinedType = /** @class */ (function () {
                    function DefinedType(options) {
                        this.name = options.name;
                        this.parent = options.parent;
                        this.lineNo = options.lineNo;
                        this.color = options.color;
                        this.followParent = options.followParent;
                        this.canSlide = options.canSlide;
                        this.cursor = options.cursor;
                        this.limitStart = options.limitStart;
                        this.limitEnd = options.limitEnd;
                        this.unitToPx = options.unitToPx;
                        this.fixed = options.fixed;
                        this.locked = options.locked;
                        this.chartWidth = options.chartWidth;
                        this.lineWidth = options.lineWidth;
                        this.snatchInterval = options.snatchInterval;
                        this.drawerSize = options.drawerSize;
                    }
                    return DefinedType;
                }());
                var GanttChart = /** @class */ (function () {
                    function GanttChart(options) {
                        this.children = [];
                        this.maxArea = 50;
                        this.zIndex = 1000;
                        this.color = "#b8f441";
                        this.origin = [0, 0];
                        this.chartWidth = 15;
                        this.lineWidth = 20;
                        this.unitToPx = 10;
                        this.snatchInterval = 1;
                        this.canSlide = false;
                        this.limitStart = 0;
                        this.followParent = false;
                        this.fixed = CHART_FIXED.NONE;
                        this.drawerSize = 3;
                        this.locked = false;
                        var self = this;
                        if (!_.keys(options).length)
                            return;
                        self.limitEnd = options.limitEnd || options.maxArea || self.maxArea;
                        $.extend(self, options);
                    }
                    GanttChart.prototype.newChart = function () {
                        if (_.isNil(this.id)) {
                            chart_1.warning.push(new Warn("Not set id"));
                            return 1;
                        }
                        if (_.isNil(this.lineNo)) {
                            chart_1.warning.push(new Warn("Not set lineNo"));
                            return 1;
                        }
                        if (this.limitStart > this.start || this.limitEnd < this.end) {
                            chart_1.warning.push(new Warn("Start/end is not valid"));
                            return 1;
                        }
                        var self = this, posTop = self.origin[1] + self.lineNo * self.lineWidth + Math.floor((self.lineWidth - self.chartWidth) / 2), posLeft = self.origin[0] + self.start * self.unitToPx, chart = document.createElement("div");
                        chart.setAttribute("id", self.lineNo + "-" + self.id);
                        chart.className = "nts-ganttchart";
                        chart.style.cssText = "; position: absolute; top: " + posTop + "px; left: " + posLeft + "px; z-index: " + self.zIndex + "; \n                overflow: hidden; white-space: nowrap; width: " + (self.end - self.start) * self.unitToPx + "px; height: " + self.chartWidth + "px;\n                background-color: " + self.color + "; cursor: " + self.cursor + "; border: 1px solid #AAB7B8; ";
                        self.html = chart;
                        self.html.addEventListener("selectstart", function () { return false; });
                    };
                    GanttChart.prototype.reposition = function (style) {
                        var self = this;
                        //            if ((_.has(style, "start") && style.start < self.limitStart)
                        //                || (_.has(style, "end") && style.end > self.limitEnd)) return;
                        if (_.has(style, "start")) {
                            self.start = style.start;
                        }
                        if (_.has(style, "end")) {
                            self.end = style.end;
                        }
                        if (_.has(style, "top")) {
                            self.html.style.top = style.top + "px";
                        }
                        if (_.has(style, "left")) {
                            self.html.style.left = style.left + "px";
                        }
                        if (_.has(style, "width")) {
                            if (style.width <= 0) {
                                self.html.parentNode.removeChild(self.html);
                            }
                            else {
                                self.html.style.width = style.width + "px";
                            }
                        }
                    };
                    return GanttChart;
                }());
                var Warn = /** @class */ (function () {
                    function Warn(msg) {
                        this.message = msg;
                    }
                    return Warn;
                }());
                var CHART_FIXED;
                (function (CHART_FIXED) {
                    CHART_FIXED["NONE"] = "None";
                    CHART_FIXED["START"] = "Start";
                    CHART_FIXED["END"] = "End";
                    CHART_FIXED["BOTH"] = "Both";
                })(CHART_FIXED || (CHART_FIXED = {}));
                var HOLD_POS;
                (function (HOLD_POS) {
                    HOLD_POS["START"] = "Start";
                    HOLD_POS["END"] = "End";
                    HOLD_POS["BODY"] = "Body";
                    HOLD_POS["OUT"] = "Out";
                })(HOLD_POS || (HOLD_POS = {}));
            })(chart = ui.chart || (ui.chart = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var accordion;
                (function (accordion) {
                    $.widget("ui.accordion", $.ui.accordion, {
                        _create: function () {
                            this["tabindex"] = parseInt(this.element.attr("tabindex"), 10);
                            this["useTabindex"] = this["tabindex"] >= 0;
                            this.element.removeAttr("tabindex");
                            return this._super();
                        },
                        _refresh: function () {
                            this._super();
                            if (this.useTabindex) {
                                if (!this.active.length) {
                                    this.headers.eq(0).attr("tabindex", this.tabindex);
                                }
                                else {
                                    this.active.attr({
                                        tabIndex: this.tabindex
                                    });
                                }
                            }
                            else {
                                this.headers.eq(0).removeAttr("tabindex");
                            }
                        },
                        _toggle: function (data) {
                            this._super(data);
                            var toShow = data.newPanel;
                            if (this.useTabindex) {
                                toShow.prev().attr({ tabIndex: this.tabindex });
                            }
                            else {
                                toShow.prev().removeAttr("tabindex");
                            }
                        },
                        _keydown: function (event) {
                            if (event.altKey || event.ctrlKey || !this.useTabindex) {
                                return;
                            }
                            var keyCode = $.ui.keyCode, length = this.headers.length, currentIndex = this.headers.index(event.target), toFocus = false;
                            switch (event.keyCode) {
                                case keyCode.RIGHT:
                                case keyCode.DOWN:
                                    toFocus = this.headers[(currentIndex + 1) % length];
                                    break;
                                case keyCode.LEFT:
                                case keyCode.UP:
                                    toFocus = this.headers[(currentIndex - 1 + length) % length];
                                    break;
                                case keyCode.SPACE:
                                case keyCode.ENTER:
                                    this._eventHandler(event);
                                    break;
                                case keyCode.HOME:
                                    toFocus = this.headers[0];
                                    break;
                                case keyCode.END:
                                    toFocus = this.headers[length - 1];
                                    break;
                            }
                            if (toFocus) {
                                $(event.target).removeAttr("tabindex");
                                $(toFocus).attr("tabindex", this.tabindex);
                                $(toFocus).trigger("focus");
                                event.preventDefault();
                            }
                        }
                    });
                })(accordion || (accordion = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_21) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var isNull = nts.uk.util.isNullOrUndefined;
                var isEmpty = nts.uk.util.isNullOrEmpty;
                var ntsButtonTable;
                (function (ntsButtonTable) {
                    $.fn.ntsButtonTable = function (method, option, option2, option3) {
                        var $element = $(this);
                        var builder;
                        switch (method) {
                            case "init": {
                                builder = new TableBuildingConstructor($element, option);
                                builder.startBuildTable();
                                break;
                            }
                            case "dataSource": {
                                builder = $element.data("builder");
                                if (isNull(option) || !$.isArray(option)) {
                                    return builder.getDataSource();
                                }
                                builder.setDataSource(option);
                                builder.drawTable();
                                break;
                            }
                            case "column": {
                                builder = $element.data("builder");
                                if (isNull(option)) {
                                    return builder.column;
                                }
                                if (option !== builder.column) {
                                    builder.setColumn(option);
                                    builder.startBuildTable();
                                }
                                break;
                            }
                            case "row": {
                                builder = $element.data("builder");
                                if (isNull(option)) {
                                    return builder.row;
                                }
                                if (option !== builder.row) {
                                    builder.setRow(option);
                                    builder.drawTable();
                                }
                                break;
                            }
                            case "cellAt": {
                                builder = $element.data("builder");
                                var tbody = builder.container.find("tbody");
                                var rowAt = tbody.find("tr:nth-child(" + (option + 1) + ")");
                                var cellAt = rowAt.find("td:nth-child(" + (option2 + 1) + ")");
                                return {
                                    element: cellAt,
                                    data: cellAt.data("cell-data"),
                                    rowIdx: option,
                                    columnIdx: option2,
                                };
                            }
                            case "setCellValue": {
                                builder = $element.data("builder");
                                var tbody = builder.container.find("tbody");
                                var rowAt = tbody.find("tr:nth-child(" + (option + 1) + ")");
                                var cellAt = rowAt.find("td:nth-child(" + (option2 + 1) + ")");
                                builder.setCellValue(cellAt.find("button"), option3);
                                break;
                            }
                            case "getSelectedCells": {
                                builder = $element.data("builder");
                                var selectedButton = builder.container.find(".ntsButtonCellSelected");
                                return _.map(selectedButton, function (c) {
                                    var button = $(c);
                                    var cell = button.parent();
                                    var rowIdx = parseInt(cell.attr("row-idx"));
                                    var columnIdx = parseInt(cell.attr("column-idx"));
                                    return {
                                        element: cell,
                                        data: cell.data("cell-data"),
                                        rowIdx: rowIdx,
                                        columnIdx: columnIdx,
                                    };
                                });
                            }
                            case "setSelectedCell": {
                                builder = $element.data("builder");
                                var tbody = builder.container.find("tbody");
                                var rowAt = tbody.find("tr:nth-child(" + (option + 1) + ")");
                                var cellAt = rowAt.find("td:nth-child(" + (option2 + 1) + ")");
                                cellAt.find("button").trigger("cellselecting");
                                break;
                            }
                            case "clearSelectedCellAt": {
                                builder = $element.data("builder");
                                var tbody = builder.container.find("tbody");
                                var rowAt = tbody.find("tr:nth-child(" + (option + 1) + ")");
                                var cellAt = rowAt.find("td:nth-child(" + (option2 + 1) + ")");
                                cellAt.find("button").trigger("cellselecting");
                                break;
                            }
                            case "clearAllSelectedCells": {
                                builder = $element.data("builder");
                                this.container.find(".ntsButtonCellSelected").trigger("cellselecting");
                                ;
                                break;
                            }
                            case "getDataCells": {
                                builder = $element.data("builder");
                                var dataButton = builder.container.find(".ntsButtonCellData");
                                return _.map(dataButton, function (c) {
                                    var button = $(c);
                                    var cell = button.parent();
                                    var rowIdx = parseInt(cell.attr("row-idx"));
                                    var columnIdx = parseInt(cell.attr("column-idx"));
                                    return {
                                        element: cell,
                                        data: cell.data("cell-data"),
                                        rowIdx: rowIdx,
                                        columnIdx: columnIdx,
                                    };
                                });
                            }
                            default:
                                break;
                        }
                        $element.data("builder", builder);
                        return;
                    };
                    var TableBuildingConstructor = /** @class */ (function () {
                        function TableBuildingConstructor(container, option) {
                            this.container = container;
                            this.mode = option.mode;
                            this.clickOnAction = option.click;
                            this.row = option.row;
                            this.column = option.column;
                            this.originalSource = _.cloneDeep(option.source);
                            this.source = this.changeSource(option.source);
                            this.id = nts.uk.util.randomId();
                            this.width = option.width;
                            this.disableMenuOnDataNotSet = option.disableMenuOnDataNotSet;
                            this.cloneContextMenu(option.contextMenu);
                        }
                        TableBuildingConstructor.prototype.changeSource = function (origin) {
                            var result = [];
                            for (var rI = 0; rI < this.row; rI++) {
                                result[rI] = [];
                                for (var cI = 0; cI < this.column; cI++) {
                                    var cell = origin[(rI * this.column) + cI];
                                    result[rI][cI] = !isNull(cell) ? _.cloneDeep(cell) : undefined;
                                }
                            }
                            return result;
                        };
                        TableBuildingConstructor.prototype.setDataSource = function (source) {
                            this.originalSource = _.cloneDeep(source);
                            this.source = this.changeSource(source);
                        };
                        TableBuildingConstructor.prototype.getDataSource = function () {
                            return _.cloneDeep(this.originalSource);
                        };
                        TableBuildingConstructor.prototype.setColumn = function (columnSize) {
                            this.column = columnSize;
                        };
                        TableBuildingConstructor.prototype.setRow = function (rowSize) {
                            this.row = rowSize;
                        };
                        TableBuildingConstructor.prototype.cloneContextMenu = function (contextMenu) {
                            var self = this;
                            var menu = _.map(contextMenu, function (m) {
                                var action = function () {
                                    var element = self.container.data("context-opening");
                                    //                        m.action(element).done(function(result){
                                    m.action(element, element.parent().data("cell-data")).done(function (result) {
                                        element.trigger("contextmenufinished", result);
                                    });
                                };
                                return new nts.uk.ui.contextmenu.ContextMenuItem(m.id, m.text, action, m.style);
                            });
                            this.contextMenu = new nts.uk.ui.contextmenu.ContextMenu(".menu" + this.id, menu);
                        };
                        TableBuildingConstructor.prototype.startBuildTable = function () {
                            var self = this;
                            self.container.empty();
                            var table = $("<table>", { "class": "ntsButtonTable ntsTable", id: this.id });
                            var tbody = $("<tbody>", { "class": "data-area" });
                            var colgroup = $("<colgroup>", { "class": "col-definition" });
                            for (var i = 0; i < this.column; i++) {
                                var col = $("<col>", { width: isNull(self.width) ? 100 : (self.width / self.column) });
                                col.appendTo(colgroup);
                            }
                            colgroup.appendTo(table);
                            tbody.appendTo(table);
                            table.appendTo(this.container);
                            this.drawTable();
                        };
                        TableBuildingConstructor.prototype.drawTable = function () {
                            var tbody = this.container.find("tbody");
                            tbody.empty();
                            for (var i = 0; i < this.row; i++) {
                                this.buildRow(tbody, i, this.id + "-row-" + i, this.source[i]);
                            }
                        };
                        TableBuildingConstructor.prototype.buildRow = function (container, dataIdx, id, rowData) {
                            var row = $("<tr>", { "class": "ntsRow ntsButtonTableRow", id: id, attr: { "data-idx": dataIdx, "data-id": id } });
                            for (var i = 0; i < this.column; i++) {
                                var idx = dataIdx * this.column + i;
                                this.buildCell(row, dataIdx, idx, id + "-cell-" + idx, isNull(rowData) || isNull(rowData[i]) ? {} : rowData[i], i);
                            }
                            row.appendTo(container);
                        };
                        TableBuildingConstructor.prototype.buildCell = function (container, rowIdx, dataIdx, id, data, columnIdx) {
                            var self = this;
                            var cell = $("<td>", { "class": "ntsCell ntsButtonTableCell", id: id, attr: { "row-idx": rowIdx, "data-idx": dataIdx, "data-id": id, "column-idx": columnIdx } });
                            var contextClass = "menu" + this.id;
                            var button = $("<button>", { "class": "ntsButtonCell ntsButtonTableButton " + contextClass, attr: { "data-idx": dataIdx, "data-id": id } });
                            button.text(isEmpty(data.text) ? "+" : data.text);
                            button.width(isNull(self.width) ? 90 : (self.width / self.column - 10));
                            if (!isEmpty(data.text)) {
                                button.addClass("ntsButtonCellData");
                                button.attr("title", data.tooltip);
                                button.data("empty-cell", false);
                                cell.data("cell-data", _.cloneDeep(data));
                            }
                            else {
                                button.data("empty-cell", true);
                            }
                            button.click(function (evt, ui) {
                                var c = $(this);
                                if (self.mode === "master") {
                                    if (_.isFunction(self.clickOnAction)) {
                                        self.clickOnAction(evt, c.parent().data("cell-data")).done(function (result) {
                                            self.setCellValue(c, result);
                                        });
                                    }
                                }
                                else {
                                    c.trigger("cellselecting");
                                }
                            });
                            button.bind("cellselecting", function (evt, data) {
                                var c = $(this);
                                if (!c.data("empty-cell")) {
                                    if (c.hasClass("ntsButtonCellSelected")) {
                                        c.removeClass("ntsButtonCellSelected");
                                        self.container.trigger("cellselectedchanging", { column: -1, row: -1, data: c.parent().data("cell-data") });
                                    }
                                    else {
                                        self.container.find(".ntsButtonCellSelected").removeClass("ntsButtonCellSelected");
                                        c.addClass("ntsButtonCellSelected");
                                        var oCell = c.parent();
                                        //                            self.container.trigger("cellselectedchanging", { column: parseInt(oCell.attr("column-idx")), row: parseInt(oCell.attr("row-idx")) });
                                        self.container.trigger("cellselectedchanging", { column: parseInt(oCell.attr("column-idx")), row: parseInt(oCell.attr("row-idx")), data: oCell.data("cell-data") });
                                    }
                                }
                                else {
                                    var oldSelected = self.container.find(".ntsButtonCellSelected");
                                    if (!nts.uk.util.isNullOrEmpty(oldSelected)) {
                                        var oCell = oldSelected.parent();
                                        self.container.trigger("cellselectedchanging", { column: parseInt(oCell.attr("column-idx")), row: parseInt(oCell.attr("row-idx")), data: oCell.data("cell-data") });
                                    }
                                    else {
                                        self.container.trigger("cellselectedchanging", { column: -1, row: -1, data: null });
                                    }
                                }
                            });
                            button.contextmenu(function () {
                                var c = $(this);
                                var enable = c.data("empty-cell");
                                if (self.mode === "master") {
                                    self.contextMenu.setEnable(!enable);
                                    if (enable) {
                                        return false;
                                    }
                                }
                                else {
                                    if (!isEmpty(self.disableMenuOnDataNotSet)) {
                                        _.forEach(self.disableMenuOnDataNotSet, function (target) {
                                            self.contextMenu.setEnableItem(!enable, target);
                                        });
                                    }
                                }
                                self.container.data("context-opening", button);
                            });
                            button.bind("contextmenufinished", function (evt, result) {
                                var c = $(this);
                                self.setCellValue(c, result);
                            });
                            button.appendTo(cell);
                            cell.appendTo(container);
                        };
                        TableBuildingConstructor.prototype.setCellValue = function (button, data) {
                            var cell = button.parent();
                            if (!isNull(data) && !isEmpty(data.text)) {
                                cell.data("cell-data", _.cloneDeep(data));
                                button.text(data.text);
                                button.attr("title", data.tooltip);
                                button.addClass("ntsButtonCellData");
                                button.data("empty-cell", false);
                            }
                            else {
                                cell.data("cell-data", null);
                                button.text("+");
                                button.removeAttr("title");
                                button.removeClass("ntsButtonCellData");
                                button.data("empty-cell", true);
                                data = {};
                            }
                            var rowIdx = parseInt(cell.attr("row-idx"));
                            var columnIdx = parseInt(cell.attr("column-idx"));
                            if (nts.uk.util.isNullOrUndefined(this.source[rowIdx])) {
                                this.source[rowIdx] = [];
                            }
                            this.source[rowIdx][columnIdx] = data;
                            this.updateOriginalSource();
                        };
                        TableBuildingConstructor.prototype.updateOriginalSource = function () {
                            this.originalSource = this.toFlatSource();
                            this.container.trigger("sourcechanging", { source: this.cloneSource() });
                        };
                        TableBuildingConstructor.prototype.toFlatSource = function () {
                            var result = [];
                            _.forEach(this.source, function (row) {
                                _.forEach(row, function (cell) {
                                    result.push(_.cloneDeep(cell));
                                });
                            });
                            return result;
                        };
                        TableBuildingConstructor.prototype.cloneSource = function () {
                            return this.getDataSource();
                        };
                        return TableBuildingConstructor;
                    }());
                    var TableButtonEntity = /** @class */ (function () {
                        function TableButtonEntity(rowId, columnId, viewText, tooltipText) {
                            this.rowId = rowId;
                            this.columnId = columnId;
                            this.viewText = viewText;
                            this.tooltipText = tooltipText;
                        }
                        TableButtonEntity.prototype.setRowId = function (rowId) {
                            this.rowId = rowId;
                        };
                        TableButtonEntity.prototype.setColumnId = function (columnId) {
                            this.columnId = columnId;
                        };
                        TableButtonEntity.prototype.setViewText = function (viewText) {
                            this.viewText = viewText;
                        };
                        TableButtonEntity.prototype.setTooltipText = function (tooltipText) {
                            this.tooltipText = tooltipText;
                        };
                        TableButtonEntity.prototype.getRowId = function () {
                            return this.rowId;
                        };
                        TableButtonEntity.prototype.getColumnId = function () {
                            return this.columnId;
                        };
                        TableButtonEntity.prototype.getViewText = function (rowId) {
                            return this.viewText;
                        };
                        TableButtonEntity.prototype.getTooltipText = function () {
                            return this.tooltipText;
                        };
                        return TableButtonEntity;
                    }());
                    ntsButtonTable.TableButtonEntity = TableButtonEntity;
                })(ntsButtonTable || (ntsButtonTable = {}));
            })(jqueryExtentions = ui_21.jqueryExtentions || (ui_21.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsDatepicker;
                (function (ntsDatepicker) {
                    var CONTAINER_CLASSES = ["arrow-bottom", "arrow-top", "arrow-right", "arrow-left"];
                    var PICKER_CLASSES = ["datepicker-top-left", "datepicker-top-right", "datepicker-bottom-left", "datepicker-bottom-right"];
                    $.fn.ntsDatepicker = function (action, index) {
                        var $container = $(this);
                        if (action === "bindFlip") {
                            return bindFlip($container);
                        }
                        return $container;
                    };
                    function bindFlip($input) {
                        //            let container = $input.parent();
                        $input.on('show.datepicker', function (evt) {
                            var picker = $(this);
                            picker.data("showed", true);
                            setTimeout(function () {
                                picker.trigger("flippickercontainer");
                            }, 10);
                        });
                        $input.on('hide.datepicker', function (evt) {
                            var picker = $(this);
                            picker.data("showed", false);
                            CONTAINER_CLASSES.forEach(function (cls) { return picker.parent().removeClass(cls); });
                            //                let currentShowContainer = $(".datepicker-container:not(.datepicker-hide)");
                            //                $("body").append(currentShowContainer);
                        });
                        $(window).resize(function () {
                            var picker = $(this);
                            if (picker.data("showed")) {
                                picker.datepicker('hide');
                                setTimeout(function () {
                                    picker.datepicker('show');
                                }, 10);
                            }
                        });
                        $input.bind("flippickercontainer", function (evt, data) {
                            var picker = $(this);
                            var container = picker.parent();
                            var currentShowContainer = $(".datepicker-container:not(.datepicker-hide)");
                            var datepickerID = picker.attr("id");
                            //                let container = $input.parent();
                            //                container.append(currentShowContainer);
                            var ePos = container.offset();
                            if (ePos.top < 0 && ePos.left < 0) {
                                return;
                            }
                            CONTAINER_CLASSES.forEach(function (cls) { return container.removeClass(cls); });
                            PICKER_CLASSES.forEach(function (cls) { return currentShowContainer.removeClass(cls); });
                            var containerHeight = container.outerHeight(true);
                            var containerWidth = container.outerWidth(true);
                            var showContainerHeight = currentShowContainer.outerHeight(true);
                            var showContainerWidth = currentShowContainer.outerWidth(true);
                            var documentHeight = document.body.clientHeight;
                            var documentWidth = document.body.clientWidth;
                            var headerHeight = $("#functions-area").outerHeight(true) + $("#header").outerHeight(true);
                            var bottomHeight = $("#functions-area-bottom").outerHeight(true);
                            var spaceBottom = documentHeight - ePos.top - containerHeight;
                            var spaceTop = ePos.top; // - headerHeight;
                            var spaceRight = documentWidth - ePos.left - containerWidth;
                            var spaceLeft = ePos.left;
                            // case 1: show below
                            if (showContainerHeight + 10 <= spaceBottom) {
                                //currentShowContainer.css({top: containerHeight + 5, left: 0});
                                container.addClass("arrow-bottom");
                                //container.addClass("caret-bottom");
                                currentShowContainer.position({
                                    my: "left bottom+" + (showContainerHeight + 10),
                                    at: "left bottom",
                                    'of': "#" + datepickerID
                                });
                                return;
                            }
                            //case 2: show above
                            if (showContainerHeight + 10 <= spaceTop) {
                                //currentShowContainer.css({top: 0 - showContainerHeight - 5, left: 0});
                                container.addClass("arrow-top");
                                currentShowContainer.position({
                                    my: "left top-" + (showContainerHeight + 10),
                                    at: "left top",
                                    'of': "#" + datepickerID
                                });
                                return;
                            }
                            // case 3: show right
                            var diaTop = ePos.top <= 0 ? 0 : ePos.top - showContainerHeight + containerHeight + headerHeight;
                            if (ePos.top <= diaTop) {
                                diaTop = ePos.top;
                            }
                            if (showContainerWidth + 10 <= spaceRight) {
                                //                    currentShowContainer.css({top: 0, left: containerWidth + 5 + 2});
                                var diaRight = ePos.left + containerWidth + 10;
                                container.addClass("arrow-right");
                                currentShowContainer.css({ top: diaTop, left: diaRight });
                                return;
                            }
                            //case 4: show left
                            if (showContainerWidth + 10 <= spaceLeft) {
                                var diaLeft = ePos.left - 10 - showContainerWidth;
                                //                    currentShowContainer.css({top: 0, left: 0 - showContainerWidth - 5 - 2 });
                                container.addClass("arrow-left");
                                currentShowContainer.css({ top: diaTop, left: diaLeft });
                                return;
                            }
                            container.addClass("arrow-bottom");
                            currentShowContainer.position({
                                my: "left bottom+" + (showContainerHeight + 10),
                                at: "left bottom",
                                'of': "#" + datepickerID
                            });
                        });
                        return $input;
                    }
                })(ntsDatepicker || (ntsDatepicker = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsDialogEx;
                (function (ntsDialogEx) {
                    $.fn.ntsDialogEx = function (action, winContainer) {
                        var $dialog = $(this);
                        switch (action) {
                            case 'centerUp':
                                centerUp($dialog, winContainer);
                            default:
                                break;
                        }
                    };
                    function centerUp($dialog, winContainer) {
                        //            let currentInfo = winContainer;
                        var top = 0, left = 0;
                        var dialog = $dialog.closest("div[role='dialog']");
                        dialog.addClass("disappear");
                        if (!winContainer.isRoot) {
                            var offset = winContainer.$dialog.closest("div[role='dialog']").offset();
                            console.log(dialog.offset());
                            top += offset.top;
                            left += offset.left;
                        }
                        setTimeout(function () {
                            var isFrame = nts.uk.util.isInFrame();
                            var dialogM = winContainer.isRoot ? isFrame ? window.parent.window.parent.$("body") : $("body")
                                : winContainer.$dialog.closest("div[role='dialog']");
                            var topDiff = (dialogM.innerHeight() - dialog.innerHeight()) / 2;
                            var leftDiff = (dialogM.innerWidth() - dialog.innerWidth()) / 2;
                            if (topDiff > 0) {
                                top += topDiff;
                            }
                            if (leftDiff > 0) {
                                left += leftDiff;
                            }
                            dialog.css({ top: top, left: left });
                            dialog.removeClass("disappear");
                        }, 33);
                    }
                })(ntsDialogEx || (ntsDialogEx = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsEditor;
                (function (ntsEditor) {
                    $.fn.ntsEditor = function (action) {
                        var $editor = $(this);
                        switch (action) {
                            case 'validate':
                                validate($editor);
                            default:
                                break;
                        }
                    };
                    function validate($editor) {
                        var validateEvent = new CustomEvent("validate", {});
                        $editor.each(function (index) {
                            var $input = $(this);
                            document.getElementById($input.attr('id')).dispatchEvent(validateEvent);
                        });
                        //            document.getElementById($editor.attr('id')).dispatchEvent(validateEvent);
                        //            $editor.trigger("validate");
                    }
                })(ntsEditor || (ntsEditor = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            ui.DATA_SET_ERROR_STYLE = "set-error-style";
            ui.DATA_CLEAR_ERROR_STYLE = "clear-error-style";
            ui.DATA_HAS_ERROR = 'hasError';
            ui.DATA_GET_ERROR = 'getError';
            var bindErrorStyle;
            (function (bindErrorStyle) {
                function setError($element, callback) {
                    $element.data(ui.DATA_SET_ERROR_STYLE, callback);
                }
                bindErrorStyle.setError = setError;
                function clearError($element, callback) {
                    $element.data(ui.DATA_CLEAR_ERROR_STYLE, callback);
                }
                bindErrorStyle.clearError = clearError;
                function useDefaultErrorClass($element) {
                    setError($element, function () { $element.addClass("error"); });
                    clearError($element, function () { $element.removeClass("error"); });
                }
                bindErrorStyle.useDefaultErrorClass = useDefaultErrorClass;
            })(bindErrorStyle = ui.bindErrorStyle || (ui.bindErrorStyle = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsError;
                (function (ntsError) {
                    $.fn.ntsError = function (action, message, errorCode, businessError) {
                        var $control = $(this);
                        if (action === ui.DATA_HAS_ERROR) {
                            return _.some($control, function (c) { return hasError($(c)); }) || _.some($control.find("*"), function (c) { return hasError($(c)); });
                        }
                        else if (action === ui.DATA_GET_ERROR) {
                            return getErrorByElement($control.first());
                        }
                        else {
                            $control.each(function (index) {
                                var $item = $(this);
                                $item = processErrorOnItem($item, message, action, errorCode, businessError);
                            });
                            return $control;
                        }
                    };
                    function processErrorOnItem($control, message, action, errorCode, businessError) {
                        switch (action) {
                            case 'check':
                                return $control.trigger("validate");
                            case 'set':
                                return setError($control, message, errorCode, businessError);
                            case 'clear':
                                return clearErrors($control);
                            case 'clearByCode':
                                return clearErrorByCode($control, message);
                            case 'clearKibanError':
                                return clearKibanError($control);
                        }
                    }
                    function getErrorByElement($control) {
                        return ui.errors.getErrorByElement($control);
                    }
                    function setError($control, message, errorCode, businessError) {
                        ui.errors.add({
                            location: $control.data('name') || "",
                            message: message,
                            errorCode: errorCode,
                            $control: $control,
                            businessError: businessError
                        });
                        return $control;
                    }
                    function clearErrors($control) {
                        ui.errors.removeByElement($control);
                        return $control;
                    }
                    function clearErrorByCode($control, errorCode) {
                        ui.errors.removeByCode($control, errorCode);
                        return $control;
                    }
                    function clearKibanError($control) {
                        ui.errors.removeCommonError($control);
                        return $control;
                    }
                    function hasError($control) {
                        return $control.data(ui.DATA_HAS_ERROR) === true;
                    }
                })(ntsError || (ntsError = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsFileUpload;
                (function (ntsFileUpload) {
                    $.fn.ntsFileUpload = function (option) {
                        var $container = $(this);
                        if (typeof option === 'string' && option === 'clear') {
                            resetFileUpload($container);
                        }
                        else {
                            return uploadFile($container, option);
                        }
                    };
                    function uploadFile($container, option) {
                        var dfd = $.Deferred();
                        var fileInput;
                        if ($container.find("input[type='file']").length == 0) {
                            fileInput = $container.get(0);
                        }
                        else {
                            fileInput = $container.find("input[type='file']").get(0);
                        }
                        if (fileInput !== undefined) {
                            var files = fileInput.files;
                            if (files.length > 0) {
                                // Check file is deleted on Chrome
                                if (files[0].size == 0) {
                                    dfd.reject({ message: nts.uk.resource.getMessage("Msg_158"), messageId: "Msg_158" });
                                    return dfd.promise();
                                }
                                var formData = new FormData();
                                formData.append("stereotype", option.stereoType);
                                formData.append("userfile", files[0]);
                                formData.append("filename", files[0].name);
                                nts.uk.request.uploadFile(formData, option).done(function (data, textStatus, jqXHR) {
                                    // Business Exception
                                    if (nts.uk.util.exception.isBusinessError(data)) {
                                        if (option.onFail)
                                            option.onFail();
                                        dfd.reject(data);
                                    }
                                    else {
                                        if (option.onSuccess)
                                            option.onSuccess();
                                        dfd.resolve(data);
                                    }
                                }).fail(function (jqXHR, textStatus, errorThrown) {
                                    // 413はnginxが返す
                                    // ただ、Wildflyにも最大値が設定されているので注意（こちらはオーバーすると500が返る）
                                    if (jqXHR.status === 413) {
                                        dfd.reject(uk.resource.getMessageObj("Msg_1494"));
                                    }
                                    else {
                                        // Client Exception
                                        dfd.reject(uk.resource.getMessageObj("Msg_1495"));
                                    }
                                });
                            }
                            else {
                                dfd.reject(uk.resource.getMessageObj("Msg_1496"));
                            }
                        }
                        else {
                            dfd.reject(uk.resource.getMessageObj("Msg_1497"));
                        }
                        return dfd.promise();
                    }
                    function resetFileUpload($container) {
                        $container.find("input[type='file']").val(null);
                        $container.data("restored-by-cancel", false);
                        $container.data("files-cache-for-cancel", null);
                        $container.data("selected-file-name", '');
                    }
                })(ntsFileUpload = jqueryExtentions.ntsFileUpload || (jqueryExtentions.ntsFileUpload = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_22) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsFixedTable;
                (function (ntsFixedTable_1) {
                    $.fn.ntsFixedTable = ntsFixedTable;
                    function ntsFixedTable(action, options) {
                        var $controls = $(this);
                        if (typeof arguments[0] !== 'string') {
                            return ntsFixedTable.apply($controls, _.concat("init", action));
                        }
                        if (action === "init") {
                            return init($controls, options);
                        }
                        else {
                            return $controls;
                        }
                        ;
                    }
                    function init(controls, options) {
                        controls.each(function () {
                            var $originTable = $(this);
                            $originTable.addClass("fixed-table");
                            var $colgroup = $originTable.find("colgroup");
                            var $thead = $originTable.find("thead");
                            var setting = $.extend({ height: "auto" }, options);
                            var viewWidth = setting.width;
                            var width = 0;
                            $colgroup.find("col").each(function () {
                                width += Number($(this).attr("width").replace(/px/gi, ''));
                            });
                            width++;
                            if (options.autoResize) {
                                viewWidth = Math.min(window.innerWidth - 60, width);
                            }
                            else if (nts.uk.util.isNullOrUndefined(viewWidth)) {
                                viewWidth = width;
                            }
                            var $container = $("<div class='nts-fixed-table cf'/>");
                            $originTable.after($container);
                            var $headerContainer = $("<div class='nts-fixed-header-container ui-iggrid nts-fixed-header'/>").css({ "max-width": viewWidth });
                            var $headerWrapper = $("<div class='nts-fixed-header-wrapper'/>").width(width);
                            var $headerTable = $("<table class='fixed-table'></table>");
                            $headerTable.append($colgroup.clone()).append($thead);
                            $headerTable.appendTo($headerWrapper);
                            $headerContainer.append($headerWrapper);
                            var $header = $("<div>");
                            $headerContainer.appendTo($header);
                            $header.appendTo($container);
                            $header.height($headerContainer.height());
                            var $headerScroll = $("<div>", { "class": "scroll-header nts-fixed-header", width: 16, height: $headerWrapper.outerHeight() });
                            $headerScroll.appendTo($header);
                            $originTable.addClass("nts-fixed-body-table");
                            var $bodyContainer = $("<div class='nts-fixed-body-container ui-iggrid'/>");
                            var $bodyWrapper = $("<div class='nts-fixed-body-wrapper'/>");
                            var bodyHeight = "auto";
                            if (options.autoResize) {
                                $bodyContainer.css("max-width", viewWidth);
                                bodyHeight = window.innerHeight - $headerTable.find("thead").outerHeight() - 240;
                                $(window).on("resize", function (evt) {
                                    var tableWidth = Math.max(0, Math.min(width, window.innerWidth - 60));
                                    $headerContainer.css("max-width", tableWidth);
                                    $bodyContainer.css("max-width", tableWidth);
                                    bodyHeight = window.innerHeight - $headerTable.find("thead").outerHeight() - 240;
                                    $bodyWrapper.height(Math.max(0, bodyHeight));
                                });
                            }
                            else if (setting.height !== "auto") {
                                $bodyContainer.css("max-width", viewWidth);
                                bodyHeight = Number(setting.height.toString().replace(/px/mi)) - $headerTable.find("thead").outerHeight();
                            }
                            var resizeEvent = function () {
                                $header.height($headerContainer.height());
                                if (bodyHeight < $originTable.height()) {
                                    //                        if(/Edge/.test(navigator.userAgent)){
                                    //                            $headerScroll.width(11);
                                    //                            $bodyContainer.css("padding-right", "12px");
                                    //                        }else {
                                    $headerScroll.width(16);
                                    $bodyContainer.css("padding-right", "17px");
                                    //                        }
                                    $headerScroll.css({ "border-right": "1px #CCC solid", "border-top": "1px #CCC solid", "border-bottom": "1px #CCC solid" });
                                }
                                else {
                                    $headerScroll.width(0);
                                    $headerScroll.css({ "border-right": "0px", "border-top": "0px", "border-bottom": "0px" });
                                    $bodyContainer.css("padding-right", "0px");
                                }
                                setTimeout(resizeEvent, 20);
                            };
                            $bodyContainer.scroll(function (evt, ui) {
                                $headerContainer.scrollLeft($bodyContainer.scrollLeft());
                            });
                            $bodyWrapper.width(width).height(bodyHeight);
                            $bodyWrapper.append($originTable);
                            $bodyContainer.append($bodyWrapper);
                            $container.append($bodyContainer);
                            if (setting.height !== "auto" && bodyHeight < $originTable.height()) {
                                if (/Edge/.test(navigator.userAgent)) {
                                    $bodyContainer.css("padding-right", "12px");
                                }
                                else {
                                    $bodyContainer.css("padding-right", "17px");
                                }
                            }
                            resizeEvent();
                        });
                        return controls;
                    }
                })(ntsFixedTable || (ntsFixedTable = {}));
            })(jqueryExtentions = ui_22.jqueryExtentions || (ui_22.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_23) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsGridList;
                (function (ntsGridList) {
                    var OUTSIDE_AUTO_SCROLL_SPEED = {
                        RATIO: 0.2,
                        MAX: 30
                    };
                    $.fn.ntsGridListFeature = function (feature, action) {
                        var params = [];
                        for (var _i = 2; _i < arguments.length; _i++) {
                            params[_i - 2] = arguments[_i];
                        }
                        var $grid = $(this);
                        switch (feature) {
                            case 'switch':
                                switch (action) {
                                    case 'setValue':
                                        return setSwitchValue($grid, params);
                                }
                        }
                    };
                    function setSwitchValue($grid) {
                        var params = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            params[_i - 1] = arguments[_i];
                        }
                        var rowId = params[0][0];
                        var columnKey = params[0][1];
                        var selectedValue = params[0][2];
                        var $row = $($grid.igGrid("rowById", rowId));
                        var $parent = $row.find(".ntsControl");
                        var currentSelect = $parent.attr('data-value');
                        if (selectedValue !== currentSelect) {
                            var rowKey = $row.attr("data-id");
                            $parent.find(".nts-switch-button").removeClass("selected");
                            var element = _.find($parent.find(".nts-switch-button"), function (e) {
                                return selectedValue.toString() === $(e).attr('data-value').toString();
                            });
                            if (element !== undefined) {
                                var scrollTop_1 = $("#" + $grid.attr("id") + "_scrollContainer").scrollTop();
                                $(element).addClass('selected');
                                $parent.attr('data-value', selectedValue);
                                $grid.igGridUpdating("setCellValue", rowKey, columnKey, selectedValue);
                                $grid.igGrid("commit");
                                $grid.trigger("switchvaluechanged", { columnKey: columnKey, rowKey: rowKey, value: parseInt(selectedValue) });
                                if ($grid.igGrid("hasVerticalScrollbar")) {
                                    //                        let current = $grid.ntsGridList("getSelected");
                                    //                        if(current !== undefined){
                                    //                            $grid.igGrid("virtualScrollTo", (typeof current === 'object' ? current.index : current[0].index) + 1);
                                    //                        }
                                    if (!nts.uk.util.isNullOrUndefined(scrollTop_1) && scrollTop_1 !== 0) {
                                        setTimeout(function () {
                                            $("#" + $grid.attr("id") + "_scrollContainer").scrollTop(scrollTop_1);
                                        }, 10);
                                    }
                                }
                            }
                        }
                    }
                    function delegateMethod($grid, action, param) {
                        switch (action) {
                            case 'setupSelecting':
                                return setupSelecting($grid);
                            case 'unsetupSelecting':
                                return unsetupSelecting($grid);
                            case 'getSelected':
                            case 'getSelectedValue':
                                return getSelected($grid);
                            case 'setSelected':
                                return setSelected($grid, param);
                            case 'setSelectedValue':
                                return setSelectedValue($grid, param);
                            case 'setDataSource':
                                $grid.data("initValue", null);
                                $grid.data("selectionDisables", null);
                                return setDataSource($grid, param);
                            case 'getDataSource':
                                return getDataSource($grid);
                            case 'deselectAll':
                                return deselectAll($grid);
                            case 'setupDeleteButton':
                                return setupDeleteButton($grid, param);
                            case 'setupScrollWhenBinding':
                                return setupScrollWhenBinding($grid);
                            case 'scrollToSelected':
                                return scrollToSelect($grid);
                        }
                    }
                    function scrollToSelect($grid) {
                        var row = null;
                        if ($grid.data('igGrid') === undefined) {
                            return;
                        }
                        var selectedRows = $grid.igGrid("selectedRows");
                        if (selectedRows) {
                            row = selectedRows[0];
                        }
                        else {
                            row = $grid.igGrid("selectedRow");
                        }
                        if (row) {
                            if ($grid.igGrid("option", "virtualization") === true) {
                                ui.ig.grid.virtual.expose(row, $grid);
                            }
                            else {
                                ui.ig.grid.expose(row, $grid);
                            }
                        }
                    }
                    function setupScrollWhenBinding($grid) {
                        var gridId = "#" + $grid.attr("id");
                        $(document).delegate(gridId, "iggriddatarendered", function (evt, ui) {
                            if (isCheckedAll($grid)) {
                                return;
                            }
                            var oldSelected = getSelectRow($grid);
                            if (!nts.uk.util.isNullOrEmpty(oldSelected)) {
                                _.defer(function () {
                                    if (isCheckedAll($grid)) {
                                        return;
                                    }
                                    var selected = getSelectRow($grid);
                                    if (!nts.uk.util.isNullOrEmpty(selected)) {
                                        selected = oldSelected;
                                    }
                                    if ($grid.data('igGrid')) {
                                        var $scrollContainer = $grid.igGrid("scrollContainer");
                                        //                            _.defer(() => {
                                        if ($scrollContainer.length > 0) {
                                            var firstRowOffset = $($("#single-list").igGrid("rowAt", 0)).offset().top;
                                            var selectRowOffset = $($("#single-list").igGrid("rowAt", index)).offset().top;
                                            $scrollContainer.scrollTop(selectRowOffset - firstRowOffset);
                                        }
                                        else if (selected && oldSelected) {
                                            var index = $(selected["element"]).attr("data-row-idx");
                                            $grid.igGrid("virtualScrollTo", nts.uk.util.isNullOrEmpty(index) ? oldSelected.index : parseInt(index)); //.scrollTop(scrollTop);
                                        }
                                        //                            });
                                    }
                                });
                            }
                        });
                    }
                    function isCheckedAll($grid) {
                        if ($grid.data("igGrid") && $grid.igGridSelection('option', 'multipleSelection')) {
                            var chk = $grid.closest('.ui-iggrid').find(".ui-iggrid-rowselector-header").find("span[data-role='checkbox']");
                            if (chk.attr("data-chk") === "on") {
                                return true;
                            }
                        }
                        return false;
                    }
                    function getSelectRow($grid) {
                        var row = null;
                        if ($grid.data("igGrid")) {
                            var selectedRows = $grid.igGrid("selectedRows");
                            if (selectedRows) {
                                row = selectedRows[0];
                            }
                            else {
                                row = $grid.igGrid("selectedRow");
                            }
                        }
                        return row;
                    }
                    function getSelected($grid) {
                        if ($grid.igGridSelection('option', 'multipleSelection')) {
                            var selectedRows = $grid.igGridSelection('selectedRows');
                            if (selectedRows)
                                return _.map(selectedRows, convertSelected);
                            return [];
                        }
                        else {
                            var selectedRow = $grid.igGridSelection('selectedRow');
                            if (selectedRow)
                                return convertSelected(selectedRow);
                            return undefined;
                        }
                    }
                    function convertSelected(igGridSelectedRow) {
                        return {
                            id: igGridSelectedRow.id,
                            index: igGridSelectedRow.index
                        };
                    }
                    function setSelected($grid, selectedId) {
                        var baseID = _.map($grid.igGrid("option").dataSource, $grid.igGrid("option", "primaryKey"));
                        if (_.isEmpty(baseID)) {
                            return;
                        }
                        if (baseID.length >= 500) {
                            var oldSelectedID = _.map(getSelected($grid), "id"), shouldRemove = _.difference(oldSelectedID, selectedId), shouldSelect = _.difference(selectedId, oldSelectedID);
                            /** When data source large (data source > 500 (?)):
                                    if new value for select = half of data source
                                        or removed selected value = 1/3 of data source,
                                        should deselect all and loop for select,
                                    else if deselect old values that not selected and select new selected only*/
                            if (shouldSelect.length < baseID.length / 2 || shouldRemove.length < baseID.length / 3) {
                                shouldRemove.forEach(function (id) { return $grid.igGridSelection("deselectRowById", id); });
                                shouldSelect.forEach(function (id) { return $grid.igGridSelection('selectRowById', id); });
                                return;
                            }
                        }
                        if ($grid.igGridSelection('option', 'multipleSelection')) {
                            // for performance when select all
                            //let baseID = _.map($grid.igGrid("option").dataSource, $grid.igGrid("option", "primaryKey"));
                            if (_.isEqual(selectedId, baseID)) {
                                var chk = $grid.closest('.ui-iggrid').find(".ui-iggrid-rowselector-header").find("span[data-role='checkbox']");
                                if (chk.attr("data-chk") === "off") {
                                    chk.click();
                                }
                            }
                            else {
                                deselectAll($grid);
                                selectedId.forEach(function (id) {
                                    if (_.includes(baseID, id)) {
                                        $grid.igGridSelection('selectRowById', id);
                                    }
                                });
                            }
                        }
                        else {
                            deselectAll($grid);
                            $grid.igGridSelection('selectRowById', selectedId);
                        }
                    }
                    function deselectAll($grid) {
                        $grid.igGridSelection('clearSelection');
                    }
                    function setupDeleteButton($grid, param) {
                        var itemDeletedEvent = new CustomEvent("itemDeleted", {
                            detail: {},
                        });
                        var currentColumns = $grid.igGrid("option", "columns");
                        currentColumns.push({
                            dataType: "bool", columnCssClass: "delete-column", headerText: "test", key: param.deleteField,
                            width: 60, formatter: function createButton(deleteField, row) {
                                var primaryKey = $grid.igGrid("option", "primaryKey");
                                var result = $('<button tabindex="-1" class="small delete-button">Delete</button>');
                                result.attr("data-value", row[primaryKey]);
                                if (deleteField === true && primaryKey !== null && !uk.util.isNullOrUndefined(row[primaryKey]) && $grid.data("enable") !== false) {
                                    return result[0].outerHTML;
                                }
                                else {
                                    return result.attr("disabled", "disabled")[0].outerHTML;
                                }
                            }
                        });
                        $grid.igGrid("option", "columns", currentColumns);
                        $grid.on("click", ".delete-button", function () {
                            var key = $(this).attr("data-value");
                            var primaryKey = $grid.igGrid("option", "primaryKey");
                            var source = _.cloneDeep($grid.igGrid("option", "dataSource"));
                            _.remove(source, function (current) {
                                return _.isEqual(current[primaryKey].toString(), key.toString());
                            });
                            if (!uk.util.isNullOrUndefined(param.sourceTarget) && typeof param.sourceTarget === "function") {
                                param.sourceTarget(source);
                            }
                            else {
                                $grid.igGrid("option", "dataSource", source);
                                $grid.igGrid("dataBind");
                            }
                            itemDeletedEvent.detail["target"] = key;
                            document.getElementById($grid.attr('id')).dispatchEvent(itemDeletedEvent);
                        });
                    }
                    function setupSelecting($grid) {
                        setupDragging($grid);
                        setupSelectingEvents($grid);
                        return $grid;
                    }
                    function unsetupSelecting($grid) {
                        unsetupDragging($grid);
                        unsetupSelectingEvents($grid);
                        return $grid;
                    }
                    function setupDragging($grid) {
                        var dragSelectRange = [];
                        // used to auto scrolling when dragged above/below grid)
                        var mousePos = null;
                        $grid.bind('pointerdown', function (e) {
                            // グリッド内がマウスダウンされていない場合は処理なしで終了
                            var $container = $grid.closest('.ui-iggrid-scrolldiv');
                            if ($(e.target).closest('.ui-iggrid-table').length === 0) {
                                return;
                            }
                            // current grid size
                            var gridVerticalRange = new uk.util.Range($container.offset().top, $container.offset().top + $container.height());
                            mousePos = {
                                x: e.pageX,
                                y: e.pageY,
                                rowIndex: ui_23.ig.grid.getRowIndexFrom($(e.target))
                            };
                            // set position to start dragging
                            dragSelectRange.push(mousePos.rowIndex);
                            var $scroller = $('#' + $grid.attr('id') + '_scrollContainer');
                            // auto scroll while mouse is outside grid
                            var timerAutoScroll = setInterval(function () {
                                var distance = gridVerticalRange.distanceFrom(mousePos.y);
                                if (distance === 0) {
                                    return;
                                }
                                var delta = Math.min(distance * OUTSIDE_AUTO_SCROLL_SPEED.RATIO, OUTSIDE_AUTO_SCROLL_SPEED.MAX);
                                var currentScrolls = $scroller.scrollTop();
                                $grid.igGrid('virtualScrollTo', (currentScrolls + delta) + 'px');
                            }, 20);
                            // handle mousemove on window while dragging (unhandle when mouseup)
                            $(window).bind('pointermove.NtsGridListDragging', function (e) {
                                var newPointedRowIndex = ui_23.ig.grid.getRowIndexFrom($(e.target));
                                // selected range is not changed
                                if (mousePos.rowIndex === newPointedRowIndex) {
                                    return;
                                }
                                mousePos = {
                                    x: e.pageX,
                                    y: e.pageY,
                                    rowIndex: newPointedRowIndex
                                };
                                if (dragSelectRange.length === 1 && !e.ctrlKey) {
                                    $grid.igGridSelection('clearSelection');
                                }
                                updateSelections();
                            });
                            // stop dragging
                            $(window).one('pointerup', function (e) {
                                mousePos = null;
                                dragSelectRange = [];
                                $(window).unbind('pointermove.NtsGridListDragging');
                                if ($grid.data("selectUpdated") === true) {
                                    $grid.triggerHandler('selectionchanged', [true]);
                                }
                                //$grid.triggerHandler('selectionchanged');
                                clearInterval(timerAutoScroll);
                                $grid.data("selectUpdated", false);
                            });
                        });
                        function updateSelections() {
                            // rowIndex is NaN when mouse is outside grid
                            if (isNaN(mousePos.rowIndex)) {
                                return;
                            }
                            // 以前のドラッグ範囲の選択を一旦解除する
                            // TODO: probably this code has problem of perfomance when select many rows
                            // should process only "differences" instead of "all"
                            for (var i = 0, i_len = dragSelectRange.length; i < i_len; i++) {
                                // http://jp.igniteui.com/help/api/2016.2/ui.iggridselection#methods:deselectRow
                                $grid.igGridSelection('deselectRow', dragSelectRange[i]);
                            }
                            var newDragSelectRange = [];
                            if (dragSelectRange[0] <= mousePos.rowIndex) {
                                for (var j = dragSelectRange[0]; j <= mousePos.rowIndex; j++) {
                                    // http://jp.igniteui.com/help/api/2016.2/ui.iggridselection#methods:selectRow
                                    $grid.igGridSelection('selectRow', j);
                                    newDragSelectRange.push(j);
                                }
                            }
                            else if (dragSelectRange[0] > mousePos.rowIndex) {
                                for (var j = dragSelectRange[0]; j >= mousePos.rowIndex; j--) {
                                    $grid.igGridSelection('selectRow', j);
                                    newDragSelectRange.push(j);
                                }
                            }
                            dragSelectRange = newDragSelectRange;
                            $grid.data("selectUpdated", true);
                        }
                    }
                    function setupSelectingEvents($grid) {
                        $grid.bind('iggridselectioncellselectionchanging', function () {
                        });
                        $grid.bind('iggridselectionrowselectionchanged', function () {
                            $grid.triggerHandler('selectionchanged', [true]);
                        });
                        //            $grid.on('mouseup', () => {
                        //                $grid.triggerHandler('selectionchanged');
                        //            });
                    }
                    function unsetupDragging($grid) {
                        $grid.unbind('pointerdown');
                    }
                    function unsetupSelectingEvents($grid) {
                        $grid.unbind('iggridselectionrowselectionchanged');
                        //            $grid.off('mouseup');
                    }
                    $.fn.ntsGridList = function (options) {
                        var self = this;
                        var $grid = $(self);
                        if (typeof options === "string") {
                            return delegateMethod($grid, options, arguments[1]);
                        }
                        var HEADER_HEIGHT = 27;
                        var ROW_HEIGHT = 23;
                        var DIFF_NUMBER = 2;
                        $grid.addClass("nts-gridlist");
                        var gridId = $grid.attr('id');
                        if (nts.uk.util.isNullOrUndefined(gridId)) {
                            throw new Error('the element NtsGridList must have id attribute.');
                        }
                        var optionsValue = options.primaryKey !== undefined ? options.primaryKey : options.optionsValue;
                        var dataSource = options.dataSource;
                        var deleteOptions = options.deleteOptions;
                        var observableColumns = _.cloneDeep(options.columns);
                        var selectionDisables = options.selectionDisables;
                        var showNumbering = options.showNumbering === true ? true : false;
                        var columnResize = options.columnResize;
                        var enable = options.enable;
                        var value = options.value;
                        var rows = options.rows;
                        $grid.data("init", true);
                        $grid.data("selectionDisables", selectionDisables);
                        $grid.data("initValue", value);
                        if (options.multiple) {
                            ROW_HEIGHT = 24;
                            // Internet Explorer 6-11
                            var _document = document;
                            var isIE = /*@cc_on!@*/ false || !!_document.documentMode;
                            // Edge 20+
                            var _window = window;
                            var isEdge = !isIE && !!_window.StyleMedia;
                            if (isIE || isEdge) {
                                DIFF_NUMBER = -2;
                            }
                        }
                        var features = [];
                        features.push({ name: 'Selection', multipleSelection: options.multiple });
                        if (options.multiple || showNumbering) {
                            features.push({
                                name: 'RowSelectors',
                                enableCheckBoxes: options.multiple,
                                enableRowNumbering: false,
                                rowSelectorColumnWidth: 25
                            });
                        }
                        if (columnResize) {
                            features.push({
                                name: "Resizing"
                            });
                        }
                        var tabIndex = $grid.attr("tabindex");
                        $grid.data("tabindex", nts.uk.util.isNullOrEmpty(tabIndex) ? "0" : tabIndex);
                        $grid.attr("tabindex", "-1");
                        var gridFeatures = options.features;
                        var iggridColumns = _.map(observableColumns, function (c) {
                            c["key"] = c["key"] === undefined ? c["prop"] : c["key"];
                            c["dataType"] = 'string';
                            var formatter = c["formatter"];
                            if (c["controlType"] === "switch") {
                                var switchF = _.find(gridFeatures, function (s) {
                                    return s["name"] === "Switch";
                                });
                                if (!uk.util.isNullOrUndefined(switchF)) {
                                    features.push({ name: 'Updating', enableAddRow: false, enableDeleteRow: false, editMode: 'none' });
                                    var switchOptions_2 = switchF['options'];
                                    var switchValue_2 = switchF['optionsValue'];
                                    var switchText_2 = switchF['optionsText'];
                                    c["formatter"] = function createButton(val, row) {
                                        var result = $('<div class="ntsControl"/>');
                                        var rVal = nts.uk.util.isNullOrUndefined(formatter) ? val : formatter(val, row);
                                        result.attr("data-value", rVal);
                                        _.forEach(switchOptions_2, function (opt) {
                                            var value = opt[switchValue_2];
                                            var text = opt[switchText_2];
                                            var btn = $('<button class="nts-switch-button" tabindex="-1"/>').text(text);
                                            if ($grid.data("enable") === false) {
                                                btn.attr("disabled", "disabled");
                                            }
                                            btn.attr('data-value', value);
                                            if (rVal == value) {
                                                btn.addClass('selected');
                                            }
                                            btn.appendTo(result);
                                        });
                                        return result[0].outerHTML;
                                    };
                                    $grid.on("click", ".nts-switch-button", function (evt, ui) {
                                        var $element = $(this);
                                        var selectedValue = $element.attr('data-value');
                                        var $tr = $element.closest("tr");
                                        $grid.ntsGridListFeature('switch', 'setValue', $tr.attr("data-id"), c["key"], selectedValue);
                                    });
                                    ROW_HEIGHT = 30;
                                }
                            }
                            else {
                                var formatter_2 = c.formatter;
                                c.formatter = function (val, row) {
                                    if (row) {
                                        setTimeout(function () {
                                            var id = row[optionsValue];
                                            var disables = $grid.data("selectionDisables");
                                            if (!disables)
                                                return;
                                            _.forEach(disables, function (d) {
                                                if (id === d) {
                                                    var $row = $grid.igGrid("rowById", id, false);
                                                    if (!$row.hasClass("row-disable"))
                                                        $row.addClass("row-disable");
                                                    return false;
                                                }
                                            });
                                        }, 0);
                                    }
                                    return nts.uk.util.isNullOrUndefined(formatter_2) ? val : formatter_2(val, row);
                                };
                            }
                            return c;
                        });
                        var isDeleteButton = !uk.util.isNullOrUndefined(deleteOptions) && !uk.util.isNullOrUndefined(deleteOptions.deleteField)
                            && deleteOptions.visible === true;
                        var height = options.height;
                        if (!nts.uk.util.isNullOrEmpty(rows)) {
                            if (isDeleteButton) {
                                ROW_HEIGHT = 30;
                            }
                            height = rows * ROW_HEIGHT + HEADER_HEIGHT - DIFF_NUMBER;
                            var colSettings_3 = [];
                            _.forEach(iggridColumns, function (c) {
                                if (c["hidden"] === undefined || c["hidden"] === false) {
                                    colSettings_3.push({ columnKey: c["key"], allowTooltips: true });
                                    if (nts.uk.util.isNullOrEmpty(c["columnCssClass"])) {
                                        c["columnCssClass"] = "text-limited";
                                    }
                                    else {
                                        c["columnCssClass"] += " text-limited";
                                    }
                                }
                            });
                            features.push({
                                name: "Tooltips",
                                columnSettings: colSettings_3,
                                visibility: "overflow",
                                showDelay: 200,
                                hideDelay: 200
                            });
                            $grid.addClass("row-limited");
                        }
                        $grid.igGrid({
                            width: options.width,
                            height: height,
                            primaryKey: optionsValue,
                            columns: iggridColumns,
                            virtualization: true,
                            virtualizationMode: 'continuous',
                            features: features,
                            tabIndex: -1
                        });
                        $grid.closest('.ui-iggrid').addClass('nts-gridlist').height(height).attr("tabindex", $grid.data("tabindex"));
                        //            if (options.itemDraggable) {
                        //                new swap.SwapHandler().setModel(new swap.GridSwapList($grid, optionsValue)).enableDragDrop(options.dataSource);
                        //            }
                        if (isDeleteButton) {
                            $grid.ntsGridList("setupDeleteButton", {
                                deleteField: deleteOptions.deleteField,
                                sourceTarget: options.dataSource
                            });
                        }
                        $grid.ntsGridList('setupSelecting');
                        if (options.multiple) {
                            $grid.bind('iggridrowselectorscheckboxstatechanging', function (eventObject, data) {
                                if (String($grid.data("enable")) === "false")
                                    return false;
                                var disables = $grid.data("selectionDisables");
                                if (disables && !uk.util.isNullOrUndefined(_.find(disables, function (d) { return data.rowKey === d; }))) {
                                    return false;
                                }
                                return true;
                            });
                        }
                        $grid.bind('iggridselectionrowselectionchanging', function (eventObject, ui) {
                            if (String($grid.data("enable")) === "false")
                                return false;
                            var disables = $grid.data("selectionDisables");
                            if (disables && uk.util.isNullOrUndefined(ui.startIndex)
                                && !uk.util.isNullOrUndefined(_.find(disables, function (d) { return ui.row.id === d; }))) {
                                return false;
                            }
                            if (disables && uk.util.isNullOrUndefined(ui.startIndex)
                                && uk.util.isNullOrUndefined(ui.row.id)) {
                                setTimeout(function () {
                                    _.forEach(_.intersection(disables, value), function (iv) {
                                        $grid.igGridSelection("selectRowById", iv);
                                    });
                                    $grid.trigger("selectionchanged", [true]);
                                }, 0);
                            }
                            return true;
                        });
                        var $oselect, $iselect;
                        var checkAll = function () {
                            if ($oselect && $iselect && $oselect.attr("data-chk") === "off") {
                                $oselect.attr("data-chk", "on");
                                $iselect.removeClass("ui-igcheckbox-normal-off");
                                $iselect.addClass("ui-igcheckbox-normal-on");
                            }
                        };
                        $grid.bind('selectionchanged', function () {
                            if (options.multiple) {
                                var selected_7 = $grid.ntsGridList('getSelected');
                                var disables_2 = $grid.data("selectionDisables");
                                var disableIds_2 = [];
                                if (disables_2) {
                                    _.forEach(selected_7, function (s, i) {
                                        _.forEach(disables_2, function (d) {
                                            if (d === s.id && uk.util.isNullOrUndefined(_.find(value, function (iv) { return iv === d; }))) {
                                                $grid.igGridSelection("deselectRowById", d);
                                                disableIds_2.push(i);
                                                return false;
                                            }
                                        });
                                    });
                                    disableIds_2.sort(function (i1, i2) { return i2 - i1; }).forEach(function (d) {
                                        selected_7.splice(d, 1);
                                    });
                                    var valueCount = _.intersection(disables_2, value).length;
                                    var ds = $grid.igGrid("option", "dataSource");
                                    if (selected_7.length === ds.length - disables_2.length + valueCount) {
                                        checkAll();
                                    }
                                }
                                if (!nts.uk.util.isNullOrEmpty(selected_7)) {
                                    var newValue = _.map(selected_7, function (s) { return s.id; });
                                    newValue = _.union(_.intersection(disables_2, value), newValue);
                                    setValue($grid, newValue);
                                }
                                else {
                                    setValue($grid, []);
                                }
                            }
                            else {
                                var selected = $grid.ntsGridList('getSelected');
                                if (!nts.uk.util.isNullOrEmpty(selected)) {
                                    setValue($grid, [selected.id]);
                                }
                                else {
                                    setValue($grid, []);
                                }
                            }
                        });
                        $grid.on("iggridvirtualrecordsrender", function (evt, ui) {
                            var disables = $grid.data("selectionDisables");
                            var $header = ui.owner._headerParent;
                            if (!disables || disables.length === 0 || !$header)
                                return;
                            var data = ui.owner.dataSource._data;
                            var selected = $grid.ntsGridList('getSelected');
                            var valueCount = _.intersection(disables, value).length;
                            var selector = $header.find(".ui-iggrid-rowselector-header span");
                            if (selector.length > 1) {
                                $oselect = $(selector[0]);
                                $iselect = $(selector[1]);
                            }
                            if (selected && (data.length - disables.length + valueCount) === selected.length) {
                                checkAll();
                            }
                        });
                        $grid.setupSearchScroll("igGrid", true);
                        $grid.ntsGridList("setupScrollWhenBinding");
                        $grid.on("switchvaluechanged", function (evt, dataX) {
                            setTimeout(function () {
                                var source = _.cloneDeep(options.dataSource);
                                _.forEach(source, function (o) {
                                    if (o[optionsValue] === dataX.rowKey) {
                                        o[dataX.columnKey] = dataX.value;
                                        return true;
                                    }
                                });
                                setDataSource($grid, source, options);
                            }, 100);
                        });
                        $grid.on("checknewitem", function (evt) {
                            return false;
                        });
                        setDataSource($grid, options.dataSource, options);
                        if (!_.isNil(options.value) && !_.isEmpty(options.value)) {
                            setValue($grid, options.value.constructor === Array ? options.value : [options.value]);
                        }
                    };
                    function setDataSource($grid, sources, options) {
                        if (!sources)
                            return;
                        if (!options) {
                            options = $grid.igGrid("option");
                        }
                        var optionsValue = options.primaryKey !== undefined ? options.primaryKey : options.optionsValue;
                        var gridSource = $grid.igGrid('option', 'dataSource');
                        if (String($grid.attr("filtered")) === "true") {
                            var filteredSource_3 = [];
                            _.forEach(gridSource, function (item) {
                                var itemX = _.find(sources, function (s) {
                                    return s[optionsValue] === item[optionsValue];
                                });
                                if (!nts.uk.util.isNullOrUndefined(itemX)) {
                                    filteredSource_3.push(itemX);
                                }
                            });
                            if (!_.isEqual(filteredSource_3, gridSource)) {
                                $grid.igGrid('option', 'dataSource', _.cloneDeep(filteredSource_3));
                                $grid.igGrid("dataBind");
                            }
                        }
                        else {
                            var currentSources = sources.slice();
                            var observableColumns_1 = _.filter(options.columns, function (c) {
                                c["key"] = c["key"] === undefined ? c["prop"] : c["key"];
                                return !_.isNil(c["isDateColumn"]) && c["isDateColumn"] === true;
                            });
                            if (!nts.uk.util.isNullOrEmpty(observableColumns_1)) {
                                _.forEach(currentSources, function (s) {
                                    _.forEach(observableColumns_1, function (c) {
                                        var key = c["key"] === undefined ? c["prop"] : c["key"];
                                        s[key] = moment(s[key]).format(c["format"]);
                                    });
                                });
                            }
                            if (!_.isEqual(currentSources, gridSource)) {
                                $grid.igGrid('option', 'dataSource', _.cloneDeep(currentSources));
                                $grid.igGrid("dataBind");
                            }
                        }
                    }
                    function getDataSource($grid) {
                        return $grid.igGrid("option", "dataSource");
                    }
                    function setValue($grid, value) {
                        if (!value)
                            return;
                        var sources = $grid.igGrid("option", "dataSource");
                        var optionsValue = $grid.igGrid("option", "primaryKey");
                        var multiple = $grid.igGridSelection('option', 'multipleSelection');
                        var currentSelectedItems = $grid.ntsGridList('getSelected');
                        var isEqual = _.isEqualWith(currentSelectedItems, value, function (current, newVal) {
                            if ((current === undefined && newVal === undefined) || (current !== undefined && current.id === newVal)) {
                                return true;
                            }
                        });
                        if (!isEqual) {
                            var clickCheckBox = false, isSameSource_2 = true, sortedValue = _.sortBy(value), sortedSource_2 = _.sortBy(sources, [optionsValue]);
                            if (sortedValue.length === sortedSource_2.length) {
                                _.forEach(sortedValue, function (v, i) {
                                    if (v !== sortedSource_2[i][optionsValue]) {
                                        isSameSource_2 = false;
                                        return false;
                                    }
                                });
                            }
                            else {
                                isSameSource_2 = false;
                            }
                            if (isSameSource_2 && value.length == sources.length) {
                                if (multiple) {
                                    var features = _.find($grid.igGrid("option", "features"), function (f) {
                                        return f.name === "RowSelectors";
                                    });
                                    clickCheckBox = !nts.uk.util.isNullOrUndefined(features.enableCheckBoxes) && features.enableCheckBoxes;
                                }
                            }
                            if (clickCheckBox) {
                                var chk = $grid.closest('.ui-iggrid').find(".ui-iggrid-rowselector-header").find("span[data-role='checkbox']");
                                if (chk.attr("data-chk") === "off") {
                                    chk.click();
                                }
                            }
                            else {
                                $grid.ntsGridList('setSelected', value.length === 0 ? (!multiple ? undefined : value) : value);
                            }
                            var initVal = $grid.data("initValue");
                            var disables = $grid.data("selectionDisables");
                            if (!disables || !initVal || _.intersection(disables, initVal).length === 0) {
                                _.defer(function () { $grid.trigger("selectChange"); });
                            }
                        }
                    }
                    function setSelectedValue($grid, value) {
                        var multiple = $grid.igGridSelection('option', 'multipleSelection');
                        if (multiple) {
                            var initVal = $grid.data("initValue");
                            var disables = $grid.data("selectionDisables");
                            setValue($grid, _.union(_.intersection(disables, initVal), value));
                        }
                        else {
                            setValue($grid, value);
                        }
                    }
                })(ntsGridList || (ntsGridList = {}));
            })(jqueryExtentions = ui_23.jqueryExtentions || (ui_23.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var isNotNull = nts.uk.util.isNullOrUndefined;
                var ntsImageEditor;
                (function (ntsImageEditor) {
                    $.fn.ntsImageEditor = function (method, option) {
                        var $element = $(this);
                        switch (method) {
                            case "upload": {
                                return uploadImage($element, option);
                            }
                            case "uploadOriginal": {
                                return uploadImageOriginal($element, option);
                            }
                            case "selectByFileId": {
                                return downloadImage($element, option);
                            }
                            case "showByUrl": {
                                return viewByUrl($element, option);
                            }
                            case "clear": {
                                return clear($element);
                            }
                            case "getImgStatus": {
                                return getImgStatus($element);
                            }
                            default:
                                return;
                        }
                    };
                    function getImgStatus($element) {
                        return $element.data("img-status");
                    }
                    function uploadImage($element, option) {
                        var dataFile = $element.find(".image-preview").attr("src");
                        return upload($element, option, dataFile, isNotNull($element.data('checkbox')) ? false : $element.data('checkbox').checked());
                    }
                    function uploadImageOriginal($element, option) {
                        return upload($element, option, $element.data("original-img"), false);
                    }
                    function upload($element, option, fileData, isCrop) {
                        var dfd = $.Deferred();
                        if (!isNotNull(fileData)) {
                            var cropper = $element.data("cropper");
                            var cropperData = cropper.getData(true);
                            var formData = {
                                "fileName": $element.data("file-name"),
                                "stereoType": isNotNull(option) ? "image" : option.stereoType,
                                "file": fileData,
                                "format": $element.data("file-type"),
                                "x": cropperData.x,
                                "y": cropperData.y,
                                "width": cropperData.width,
                                "height": cropperData.height,
                                "crop": isCrop
                            };
                            nts.uk.request.ajax("com", "image/editor/cropimage", formData).done(function (data) {
                                if (nts.uk.util.exception.isBusinessError(data)) {
                                    dfd.reject(data);
                                }
                                else {
                                    dfd.resolve(data);
                                }
                            }).fail(function () {
                                dfd.reject({ message: "Please check your network", messageId: "1" });
                            });
                        }
                        else {
                            dfd.reject({ message: "Please select file", messageId: "0" });
                        }
                        return dfd.promise();
                    }
                    function downloadImage($element, option) {
                        var fileId = option;
                        var actionOnClose = $.noop;
                        if (typeof option === 'object') {
                            fileId = option.fileId;
                            if (!nts.uk.util.isNullOrUndefined(option.actionOnClose)) {
                                actionOnClose = option.actionOnClose;
                            }
                        }
                        $element.trigger("srcchanging", { url: nts.uk.request.liveView(fileId), isOutSiteUrl: false, actionOnClose: actionOnClose });
                    }
                    function viewByUrl($element, option) {
                        var fileId = option;
                        var actionOnClose = $.noop;
                        if (typeof option === 'object') {
                            fileId = nts.uk.util.isNullOrEmpty(option.url) ? option.fileId : option.url;
                            if (!nts.uk.util.isNullOrUndefined(option.actionOnClose)) {
                                actionOnClose = option.actionOnClose;
                            }
                        }
                        $element.trigger("srcchanging", { url: fileId, isOutSiteUrl: true, actionOnClose: actionOnClose });
                    }
                    function clear($element) {
                        var cropper = $element.data("cropper");
                        if (!isNotNull(cropper)) {
                            cropper.clear();
                        }
                    }
                })(ntsImageEditor || (ntsImageEditor = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsListBox;
                (function (ntsListBox) {
                    $.fn.ntsListBox = function (action) {
                        var $grid = $(this);
                        switch (action) {
                            case 'deselectAll':
                                deselectAll($grid);
                                break;
                            case 'selectAll':
                                selectAll($grid);
                            default:
                                break;
                        }
                    };
                    function selectAll($list) {
                        var $grid = $list.find(".ntsListBox");
                        var options = $grid.igGrid("option", "dataSource");
                        var primaryKey = $grid.igGrid("option", "primaryKey");
                        _.forEach(options, function (option, idx) {
                            $grid.igGridSelection("selectRowById", option[primaryKey]);
                        });
                        $grid.triggerHandler('selectionchanged');
                    }
                    function deselectAll($list) {
                        var $grid = $list.find(".ntsListBox");
                        $grid.igGridSelection('clearSelection');
                        $grid.triggerHandler('selectionchanged');
                    }
                })(ntsListBox || (ntsListBox = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_24) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsGrid;
                (function (ntsGrid) {
                    var storage;
                    var dist;
                    (function (dist) {
                        dist.REMOTE = "Remote";
                        /**
                         * Query.
                         */
                        function query(features) {
                            storage = new Local();
                            var store = feature.find(features, feature.STORAGE);
                            if (!store)
                                return;
                            if (store.type === dist.REMOTE) {
                                storage = new Remote(store.loadPath, store.savePath);
                            }
                        }
                        dist.query = query;
                        var Local = /** @class */ (function () {
                            function Local() {
                            }
                            /**
                             * Get item.
                             */
                            Local.prototype.getItem = function (key) {
                                var dfd = $.Deferred();
                                dfd.resolve(uk.localStorage.getItem(key));
                                return dfd.promise();
                            };
                            /**
                             * Set item.
                             */
                            Local.prototype.setItemAsJson = function (key, value) {
                                var dfd = $.Deferred();
                                uk.localStorage.setItemAsJson(key, value);
                                dfd.resolve(true);
                                return dfd.promise();
                            };
                            return Local;
                        }());
                        dist.Local = Local;
                        var Remote = /** @class */ (function () {
                            function Remote(loadPath, savePath) {
                                this.loadPath = loadPath;
                                this.savePath = savePath;
                            }
                            /**
                             * Get item.
                             */
                            Remote.prototype.getItem = function (key) {
                                var dfd = $.Deferred();
                                uk.request.ajax(this.loadPath, { value: key }).done(function (widths) {
                                    dfd.resolve(uk.util.optional.of(widths));
                                });
                                return dfd.promise();
                            };
                            /**
                             * Set item.
                             */
                            Remote.prototype.setItemAsJson = function (key, value) {
                                var dfd = $.Deferred();
                                uk.request.ajax(this.savePath, { key: key, columns: value }).done(function (res) {
                                    dfd.resolve(res);
                                });
                                return dfd.promise();
                            };
                            return Remote;
                        }());
                        dist.Remote = Remote;
                    })(dist || (dist = {}));
                    $.fn.ntsGrid = function (options) {
                        var self = this;
                        var $self = $(self);
                        if (typeof options === "string") {
                            return functions.ntsAction($self, options, [].slice.call(arguments).slice(1));
                        }
                        if (options.ntsControls === undefined) {
                            $self.igGrid(options);
                            return;
                        }
                        dist.query(options.ntsFeatures);
                        if (options.hidePrimaryKey) {
                            _.forEach(options.columns, function (c) {
                                if (c.key === options.primaryKey) {
                                    c.width = "1px";
                                    if (columnSize.exists($self)) {
                                        columnSize.save($self, c.key, 1);
                                    }
                                    feature.merge(options, feature.RESIZING, columnSize.createResizeOptions(c.key));
                                    return false;
                                }
                            });
                        }
                        var flatCols = validation.scanValidators($self, options.columns);
                        // Cell color
                        var cellFormatter = $self.data(internal.CELL_FORMATTER);
                        if (!cellFormatter) {
                            cellFormatter = new color.CellFormatter($self, options.features, options.ntsFeatures, flatCols);
                            $self.data(internal.CELL_FORMATTER, cellFormatter);
                        }
                        $self.addClass('compact-grid nts-grid');
                        if ($self.closest(".nts-grid-wrapper").length === 0) {
                            $self.wrap($("<div class='nts-grid-wrapper'/>"));
                        }
                        var columnControlTypes = {};
                        var columnSpecialTypes = {};
                        var bounceCombos = {};
                        var cbHeaderColumns = [];
                        var cbSelectionColumns = {};
                        var formatColumn = function (column) {
                            if (column.hidden)
                                return column;
                            if (column.showHeaderCheckbox) {
                                column.headerText = ntsControls.createHeaderCheckbox({
                                    controlDef: {
                                        options: { value: 1, text: column.headerText },
                                        optionsValue: 'value',
                                        optionsText: 'text'
                                    }
                                }, column.key);
                                cbHeaderColumns.push(column.key);
                                cbSelectionColumns[column.key] = {
                                    selectAll: false, quantity: 0,
                                    onSelect: function (value) {
                                        var fs = this;
                                        var hiddenCount = fs.hiddenRows ? fs.hiddenRows.length : 0;
                                        var disableCount = fs.disableRows ? fs.disableRows.size : 0;
                                        if (value && ++fs.quantity === (options.dataSource.length - hiddenCount - disableCount)) {
                                            fs.th.find(".nts-grid-header-control-" + column.key).find("input[type='checkbox']").prop("checked", true);
                                            fs.selectAll = true;
                                        }
                                        else if (!value && fs.quantity > 0) {
                                            fs.quantity--;
                                            if (fs.selectAll) {
                                                fs.th.find(".nts-grid-header-control-" + column.key).find("input[type='checkbox']").prop("checked", false);
                                                fs.selectAll = false;
                                            }
                                        }
                                    }
                                };
                                if (column.hiddenRows) {
                                    cbSelectionColumns[column.key].hiddenRows = column.hiddenRows;
                                }
                            }
                            // Have column group
                            if (!uk.util.isNullOrUndefined(column.group)) {
                                var cols = _.map(column.group, formatColumn);
                                column.group = cols;
                                return column;
                            }
                            // Special column types
                            specialColumn.ifTrue(columnSpecialTypes, column, bounceCombos, flatCols);
                            // Control types
                            if (column.ntsControl === undefined) {
                                columnControlTypes[column.key] = ntsControls.TEXTBOX;
                                return cellFormatter.format(column);
                            }
                            if (column.ntsControl === ntsControls.LABEL) {
                                ntsControls.drawLabel($self, column, cellFormatter);
                                columnControlTypes[column.key] = ntsControls.LABEL;
                                return cellFormatter.format(column, true);
                            }
                            var controlDef = _.find(options.ntsControls, function (ctl) {
                                return ctl.name === column.ntsControl;
                            });
                            if (!uk.util.isNullOrUndefined(controlDef)) {
                                columnControlTypes[column.key] = controlDef.controlType;
                                if (controlDef.controlType === ntsControls.DATE_PICKER) {
                                    if (_.isNil(column.constraint)) {
                                        column.constraint = { pickerType: controlDef.format };
                                    }
                                    else {
                                        column.constraint.pickerType = controlDef.format;
                                    }
                                }
                            }
                            else {
                                columnControlTypes[column.key] = ntsControls.TEXTBOX;
                                return cellFormatter.format(column);
                            }
                            // Format column
                            column.formatter = function (value, rowObj) {
                                if (uk.util.isNullOrUndefined(rowObj))
                                    return value;
                                var rowId = rowObj[$self.igGrid("option", "primaryKey")];
                                // Update
                                var update = function (val) {
                                    if (!uk.util.isNullOrUndefined($self.data("igGrid"))) {
                                        updating.updateCell($self, rowId, column.key, column.dataType !== 'string' ? val : val.toString());
                                        if (options.autoCommit === undefined || options.autoCommit === false) {
                                            var updatedRow = $self.igGrid("rowById", rowId, false);
                                            $self.igGrid("commit");
                                            if (updatedRow !== undefined)
                                                $self.igGrid("virtualScrollTo", $(updatedRow).data("row-idx"));
                                        }
                                    }
                                };
                                // Delete row
                                var deleteRow = function () {
                                    if ($self.data("igGrid") !== null) {
                                        $self.data("ntsRowDeleting", true);
                                        $self.data("igGridUpdating").deleteRow(rowId);
                                    }
                                };
                                // Get control
                                var ntsControl = ntsControls.getControl(controlDef.controlType);
                                var $cell = internal.getCellById($self, rowId, column.key);
                                var isEnable;
                                if ($cell) {
                                    isEnable = $cell.find("." + ntsControl.containerClass()).data("enable");
                                }
                                isEnable = isEnable !== undefined ? isEnable : controlDef.enable === undefined ? true : controlDef.enable;
                                var data = {
                                    rowId: rowId,
                                    columnKey: column.key,
                                    controlDef: controlDef,
                                    update: update,
                                    deleteRow: deleteRow,
                                    initValue: value,
                                    rowObj: rowObj,
                                    showHeaderCheckbox: column.showHeaderCheckbox,
                                    enable: isEnable
                                };
                                if (!uk.util.isNullOrUndefined(column.tabIndex)) {
                                    data.tabIndex = column.tabIndex;
                                }
                                var back;
                                if (back = bounceCombos[column.key]) {
                                    data.bounce = back;
                                }
                                var controlCls = "nts-grid-control-" + column.key + "-" + rowId;
                                var $container = $("<div/>").append($("<div/>").addClass(controlCls).css("height", ntsControls.HEIGHT_CONTROL));
                                var $_self = $self;
                                setTimeout(function () {
                                    var $self = $_self;
                                    var rowId = rowObj[$self.igGrid("option", "primaryKey")];
                                    var $gridCell = internal.getCellById($self, rowId, column.key);
                                    var gridCellChild;
                                    if (!$gridCell || (gridCellChild = $gridCell.children()).length === 0)
                                        return;
                                    if (gridCellChild[0].children.length === 0) {
                                        if (controlDef.controlType !== ntsControls.CHECKBOX
                                            || !column.hiddenRows || !column.hiddenRows.some(function (v) { return v === rowId; })) {
                                            var $control = ntsControl.draw(data);
                                            var gridControl = $gridCell[0].querySelector("." + controlCls);
                                            if (!gridControl)
                                                return;
                                            gridControl.appendChild($control[0]);
                                            if (controlDef.controlType === ntsControls.CHECKBOX && column.showHeaderCheckbox) {
                                                var cbSelectCols = $self.data(internal.CB_SELECTED) || {};
                                                var cbColConf_1 = cbSelectCols[column.key];
                                                if (cbColConf_1) {
                                                    $control.on("change", function () {
                                                        cbColConf_1.onSelect($(this).find("input[type='checkbox']").is(":checked"));
                                                    });
                                                }
                                            }
                                        }
                                        ntsControl.$containedGrid = $self;
                                        // Cell state color
                                        var c = {
                                            id: rowId,
                                            columnKey: column.key,
                                            $element: $gridCell,
                                            element: $gridCell[0]
                                        };
                                        // Format cell
                                        cellFormatter.style($self, c);
                                        color.rememberDisabled($self, c);
                                        color.markIfEdit($self, c);
                                    }
                                }, 0);
                                return $container.html();
                            };
                            return column;
                        };
                        var columns = _.map(options.columns, formatColumn);
                        options.columns = columns;
                        updating.addFeature(options);
                        options.autoCommit = true;
                        options.tabIndex = -1;
                        // Decorate editor border
                        events.onCellClick($self);
                        // Common settings
                        settings.build($self, options);
                        // Copy&Paste
                        copyPaste.ifOn($self, options);
                        events.afterRendered(options, cbSelectionColumns);
                        columnSize.init($self, options.columns);
                        ntsControls.bindCbHeaderColumns(options, cbHeaderColumns, cbSelectionColumns);
                        // Group column key and its control type
                        $self.data(internal.CONTROL_TYPES, columnControlTypes);
                        // Group column key and its special type
                        $self.data(internal.SPECIAL_COL_TYPES, columnSpecialTypes);
                        // Sheet
                        sheet.load.setup($self, options);
                        if (!onDemand.initial($self, options)) {
                            if (!$self.data(internal.ORIG_DS)) {
                                $self.data(internal.ORIG_DS, _.cloneDeep(options.dataSource));
                            }
                            $self.igGrid(options);
                        }
                        // Window resize
                        $(window).resize(function () {
                            if (options.autoFitWindow) {
                                settings.setGridSize($self);
                            }
                            columnSize.load($self);
                        });
                        // Document click
                        $(document).on(events.Handler.CLICK, function (evt) {
                            var $target = $(evt.target);
                            if ((!$target.is("input") || $target.closest(".nts-datepicker-container").length == 0)
                                && (!$target.is(".mdatepicker-dropdown") && $target.closest(".mdatepicker-dropdown").length == 0)) {
                                _.forEach(_.keys(internal._datePickerBoard), function (k) {
                                    utils.closeDD(internal._datePickerBoard[k]);
                                });
                            }
                            if (!utils.isIgGrid($self) || !utils.isEditMode($self))
                                return;
                            var $fixedBodyContainer = $self.igGrid("fixedBodyContainer");
                            if (($fixedBodyContainer.length > 0 && utils.outsideGrid($fixedBodyContainer, evt.target)
                                && utils.outsideGrid($self, evt.target))
                                || ($fixedBodyContainer.length === 0 && utils.outsideGrid($self, evt.target))) {
                                updating.endEdit($self);
                            }
                        });
                    };
                    var feature;
                    (function (feature_2) {
                        feature_2.UPDATING = "Updating";
                        feature_2.SELECTION = "Selection";
                        feature_2.RESIZING = "Resizing";
                        feature_2.COLUMN_FIX = "ColumnFixing";
                        feature_2.PAGING = "Paging";
                        feature_2.COPY_PASTE = "CopyPaste";
                        feature_2.CELL_EDIT = "CellEdit";
                        feature_2.CELL_COLOR = "CellColor";
                        feature_2.CELL_STATE = "CellState";
                        feature_2.ROW_STATE = "RowState";
                        feature_2.TEXT_COLOR = "TextColor";
                        feature_2.TEXT_STYLE = "TextStyle";
                        feature_2.HEADER_STYLES = "HeaderStyles";
                        feature_2.HIDING = "Hiding";
                        feature_2.SHEET = "Sheet";
                        feature_2.DEMAND_LOAD = "LoadOnDemand";
                        feature_2.STORAGE = "Storage";
                        /**
                         * Replace feature
                         */
                        function replaceBy(options, featureName, newFeature) {
                            var replaceId;
                            _.forEach(options.features, function (feature, id) {
                                if (feature.name === featureName) {
                                    replaceId = id;
                                    return false;
                                }
                            });
                            options.features.splice(replaceId, 1, newFeature);
                        }
                        feature_2.replaceBy = replaceBy;
                        /**
                         * Merge feature.
                         */
                        function merge(options, featureName, feature) {
                            var findId = -1;
                            var obj;
                            _.forEach(options.features, function (f, id) {
                                if (f.name === featureName) {
                                    obj = f;
                                    findId = id;
                                    return false;
                                }
                            });
                            if (findId > -1) {
                                _.merge(obj, feature);
                                options.features.splice(findId, 1, obj);
                            }
                            else {
                                options.features.push(feature);
                            }
                        }
                        feature_2.merge = merge;
                        /**
                         * Check enable
                         */
                        function isEnable(features, name) {
                            return _.find(features, function (feature) {
                                return feature.name === name;
                            }) !== undefined;
                        }
                        feature_2.isEnable = isEnable;
                        /**
                         * Find feature
                         */
                        function find(features, name) {
                            return _.find(features, function (feature) {
                                return feature.name === name;
                            });
                        }
                        feature_2.find = find;
                    })(feature || (feature = {}));
                    var updating;
                    (function (updating) {
                        updating.INPUT_CURR_SYM = "input-currency-symbol";
                        updating.CURR_SYM = "currency-symbol";
                        /**
                         * Add feature
                         */
                        function addFeature(options) {
                            var updateFeature = createUpdateOptions(options);
                            if (!feature.isEnable(options.features, feature.UPDATING)) {
                                options.features.push(updateFeature);
                            }
                            else {
                                feature.replaceBy(options, feature.UPDATING, createUpdateOptions(options));
                            }
                        }
                        updating.addFeature = addFeature;
                        /**
                         * Create update options
                         */
                        function createUpdateOptions(options) {
                            var updateFeature = { name: feature.UPDATING, enableAddRow: false, enableDeleteRow: false, editMode: 'none' };
                            if (feature.isEnable(options.ntsFeatures, feature.CELL_EDIT)) {
                                updateFeature.editMode = "cell";
                                updateFeature.editCellStarting = startEditCell;
                                updateFeature.editCellStarted = editStarted;
                                updateFeature.editCellEnding = beforeFinishEditCell;
                            }
                            return updateFeature;
                        }
                        /**
                         * Check control
                         */
                        function containsNtsControl($target) {
                            var td = $target;
                            if (!$target.prev().is("td"))
                                td = $target.closest("td");
                            return td.find("div[class*='nts-grid-control']").length > 0;
                        }
                        updating.containsNtsControl = containsNtsControl;
                        /**
                         * Edit cell
                         */
                        function startEditCell(evt, ui) {
                            var selectedCell = selection.getSelectedCell($(evt.target));
                            if (containsNtsControl($(evt.currentTarget)) || utils.isEnterKey(evt) || utils.isTabKey(evt)) {
                                if ($(evt.currentTarget).find("div[class*='nts-editor-container']").length > 0)
                                    return false;
                                if (uk.util.isNullOrUndefined(selectedCell) || !utils.selectable($(evt.target)))
                                    return;
                                if (!evt.currentTarget.classList.contains("ui-iggrid-selectedcell")) {
                                    $(evt.target).igGridSelection("selectCell", selectedCell.rowIndex, selectedCell.index, utils.isFixedColumnCell(selectedCell, utils.getVisibleColumnsMap($(evt.target))));
                                }
                                return false;
                            }
                            else if (utils.disabled($(evt.currentTarget)))
                                return false;
                            if (uk.util.isNullOrUndefined(selectedCell) || !utils.selectable($(evt.target)))
                                return;
                            var $cell = $(selectedCell.element);
                            if ($cell.hasClass(updating.CURR_SYM))
                                $cell.removeClass(updating.CURR_SYM);
                            return true;
                        }
                        /**
                         * Edit started.
                         */
                        function editStarted(evt, ui) {
                            var $grid = $(ui.owner.element);
                            var valueType = validation.getValueType($grid, ui.columnKey);
                            if (!evt.currentTarget) {
                                if (valueType === "TimeWithDay" || valueType === "Clock") {
                                    var $editor = $(ui.editor.find("input")[0]);
                                    $editor.css("text-align", "right");
                                }
                                else if (valueType === "Currency") {
                                    ui.editor.addClass(updating.INPUT_CURR_SYM);
                                    var $editor = $(ui.editor.find("input")[0]);
                                    $editor.css("text-align", "right");
                                }
                                return;
                            }
                            if (!uk.util.isNullOrUndefined(ui.value) && !_.isEmpty(ui.value)) {
                                if (valueType === "TimeWithDay" || valueType === "Clock") {
                                    var formatted_1;
                                    try {
                                        formatted_1 = uk.time.minutesBased.clock.dayattr.create(uk.time.minutesBased.clock.dayattr.parseString(ui.value).asMinutes).shortText;
                                    }
                                    catch (e) {
                                        return;
                                    }
                                    setTimeout(function () {
                                        var $editor = $(ui.editor.find("input")[0]);
                                        $editor.css("text-align", "right");
                                        $editor.val(formatted_1).select();
                                    }, 140);
                                }
                                else if (valueType === "Currency") {
                                    var groupSeparator = validation.getGroupSeparator($grid, ui.columnKey) || ",";
                                    var value_1 = uk.text.replaceAll(ui.value, groupSeparator, "");
                                    setTimeout(function () {
                                        ui.editor.addClass(updating.INPUT_CURR_SYM);
                                        var $editor = $(ui.editor.find("input")[0]);
                                        var numb = Number(value_1);
                                        $editor.val(isNaN(numb) ? value_1 : numb).css("text-align", "right").select();
                                    }, 140);
                                }
                            }
                            else if (valueType === "Currency") {
                                ui.editor.addClass(updating.INPUT_CURR_SYM);
                                var $editor = $(ui.editor.find("input")[0]);
                                $editor.css("text-align", "right");
                            }
                        }
                        /**
                         * Validate
                         */
                        function onEditCell(evt, cell) {
                            var $grid = fixedColumns.realGridOf($(evt.currentTarget));
                            if (!utils.isEditMode($grid))
                                return;
                            var validators = $grid.data(validation.VALIDATORS);
                            var fieldValidator = validators[cell.columnKey];
                            if (uk.util.isNullOrUndefined(fieldValidator))
                                return;
                            var cellValue = $(cell.element).find("input:first").val();
                            var result = fieldValidator.probe(cellValue);
                            var $cellContainer = $(cell.element);
                            errors.clear($grid, cell);
                            if (!result.isValid) {
                                errors.set($grid, cell, result.errorMessage);
                            }
                        }
                        updating.onEditCell = onEditCell;
                        /**
                         * Trigger update
                         */
                        function triggerCellUpdate(evt, cell) {
                            var grid = evt.currentTarget;
                            var $targetGrid = fixedColumns.realGridOf($(grid));
                            if (utils.isEditMode($targetGrid) || utils.disabled($(cell.element)))
                                return;
                            if (utils.isAlphaNumeric(evt) || utils.isMinusSymbol(evt)
                                || utils.isDeleteKey(evt)) {
                                startEdit(evt, cell);
                            }
                        }
                        updating.triggerCellUpdate = triggerCellUpdate;
                        /**
                         * Start edit
                         */
                        function startEdit(evt, cell) {
                            var $targetGrid = fixedColumns.realGridOf($(evt.currentTarget));
                            if (!utils.updatable($targetGrid))
                                return;
                            var $cell = $(cell.element);
                            if ($cell.hasClass(updating.CURR_SYM))
                                $cell.removeClass(updating.CURR_SYM);
                            utils.startEdit($targetGrid, cell);
                            // Keep text contents if any, otherwise set input value
                            //                if ($(cell.element).text().trim() !== "") evt.preventDefault();
                            if (!utils.isDeleteKey(evt)) {
                                setTimeout(function () {
                                    var cellValue;
                                    var char = evt.key === "Subtract" ? "-" : evt.key;
                                    var $editor = $targetGrid.igGridUpdating("editorForCell", $(cell.element));
                                    if (!uk.util.isNullOrUndefined($editor.data("igTextEditor"))) {
                                        $editor.igTextEditor("value", char);
                                        var input_1 = $editor.find("input")[0];
                                        var len_1 = input_1.value.length;
                                        if ($.ig.util.isChrome || $.ig.util.isSafari) {
                                            setTimeout(function () {
                                                input_1.setSelectionRange(len_1, len_1);
                                            }, 110);
                                        }
                                        else {
                                            input_1.setSelectionRange(len_1, len_1);
                                        }
                                        cellValue = char;
                                    }
                                    else if (!uk.util.isNullOrUndefined($editor.data("igNumericEditor"))) {
                                        cellValue = char;
                                        if (!utils.isMinusSymbol(evt)) {
                                            $editor.igNumericEditor("value", parseInt(cellValue));
                                        }
                                        else {
                                            cellValue = "-";
                                            $editor.igNumericEditor("value", cellValue);
                                        }
                                        if ($.ig.util.isChrome || $.ig.util.isSafari) {
                                            setTimeout(function () {
                                                var length = String($editor.igNumericEditor("value")).length;
                                                $editor.igNumericEditor("select", length, length);
                                            }, 110);
                                        }
                                        else {
                                            var length = String($editor.igNumericEditor("value")).length;
                                            $editor.igNumericEditor("select", length, length);
                                        }
                                    }
                                    // Validate
                                    var validators = $targetGrid.data(validation.VALIDATORS);
                                    var fieldValidator = validators[cell.columnKey];
                                    if (uk.util.isNullOrUndefined(fieldValidator))
                                        return;
                                    var result = fieldValidator.probe(cellValue);
                                    var $cellContainer = $(cell.element);
                                    errors.clear($targetGrid, cell);
                                    if (!result.isValid) {
                                        errors.set($targetGrid, cell, result.errorMessage);
                                    }
                                }, 1);
                            }
                            else {
                                setTimeout(function () {
                                    var $editor = $targetGrid.igGridUpdating("editorForCell", $(cell.element));
                                    $editor.find("input").val("");
                                }, 1);
                            }
                            evt.preventDefault();
                            evt.stopImmediatePropagation();
                        }
                        /**
                         * Interrupt manipulations (e.g. cell navigation) on grid if errors occurred (setting needed).
                         */
                        function beforeFinishEditCell(evt, ui) {
                            var $grid = $(evt.target);
                            var selectedCell = selection.getSelectedCell($grid);
                            var settings = $grid.data(internal.SETTINGS);
                            if (settings.preventEditInError
                                && utils.isEditMode($grid) && errors.any(selectedCell)) {
                                return false;
                            }
                            if (utils.isEditMode($grid) && (utils.isTabKey(evt) || utils.isEnterKey(evt) || evt.keyCode === undefined)) {
                                var gridUpdate_1 = $grid.data("igGridUpdating");
                                var origValues = gridUpdate_1._originalValues;
                                if (!uk.util.isNullOrUndefined(origValues)) {
                                    _.forEach(Object.keys(origValues), function (colKey, idx) {
                                        if (idx === 0) {
                                            // Skip default update
                                            gridUpdate_1._originalValues[colKey] = ui.value;
                                            return false;
                                        }
                                    });
                                    _.defer(function () {
                                        updating.updateCell($grid, selectedCell.id, selectedCell.columnKey, ui.value);
                                    });
                                }
                            }
                            // Remove border color of editor
                            var $editorContainer = $(selectedCell.element).find(errors.EDITOR_SELECTOR);
                            if ($editorContainer.length > 0)
                                $editorContainer.css(errors.NO_ERROR_STL);
                            specialColumn.tryDo($grid, selectedCell, ui.value);
                            if (ui.editor.hasClass(updating.INPUT_CURR_SYM)) {
                                $(selectedCell.element).addClass(updating.CURR_SYM);
                            }
                            return true;
                        }
                        /**
                         * Update row and re-render all controls.
                         * @Obsolete
                         */
                        function _updateRow($grid, rowId, visibleColumnsMap, updatedRowData) {
                            if (uk.util.isNullOrUndefined(updatedRowData) || Object.keys(updatedRowData).length === 0)
                                return;
                            $grid.igGridUpdating("updateRow", utils.parseIntIfNumber(rowId, $grid, visibleColumnsMap), updatedRowData);
                        }
                        updating._updateRow = _updateRow;
                        /**
                         * Update cell.
                         */
                        function updateCell($grid, rowId, columnKey, cellValue, allColumnsMap, forceRender) {
                            var grid = $grid.data("igGrid");
                            if (!utils.updatable($grid))
                                return;
                            var gridUpdate = $grid.data("igGridUpdating");
                            var origDs = $grid.data(internal.ORIG_DS);
                            var autoCommit = grid.options.autoCommit;
                            var columnsMap = allColumnsMap || utils.getColumnsMap($grid);
                            var rId = utils.parseIntIfNumber(rowId, $grid, columnsMap);
                            var valueType = validation.getValueType($grid, columnKey);
                            if (!uk.util.isNullOrUndefined(cellValue) && !_.isEmpty(cellValue)
                                && (valueType === "TimeWithDay" || valueType === "Clock")) {
                                try {
                                    cellValue = uk.time.minutesBased.clock.dayattr.create(uk.time.minutesBased.clock.dayattr.parseString(String(cellValue)).asMinutes).shortText;
                                }
                                catch (e) { }
                            }
                            var setting = $grid.data(internal.SETTINGS);
                            var idx = setting.descriptor.keyIdxes[rId];
                            if (uk.util.isNullOrUndefined(idx))
                                return;
                            var origData = origDs[idx]; //gridUpdate._getLatestValues(rId);
                            grid.dataSource.setCellValue(rId, columnKey, cellValue, autoCommit);
                            var isControl = utils.isNtsControl($grid, columnKey);
                            if (!isControl || forceRender)
                                renderCell($grid, rId, columnKey);
                            if (isControl) {
                                $grid.trigger(events.Handler.CONTROL_CHANGE, [{ columnKey: columnKey, value: cellValue }]);
                            }
                            gridUpdate._notifyCellUpdated(rId);
                            notifyUpdate($grid, rId, columnKey, cellValue, origData);
                        }
                        updating.updateCell = updateCell;
                        /**
                         * Update row.
                         */
                        function updateRow($grid, rowId, updatedRowData, allColumnsMap, forceRender) {
                            var grid = $grid.data("igGrid");
                            if (!utils.updatable($grid))
                                return;
                            var gridUpdate = $grid.data("igGridUpdating");
                            var autoCommit = grid.options.autoCommit;
                            var columnsMap = allColumnsMap || utils.getColumnsMap($grid);
                            var rId = utils.parseIntIfNumber(rowId, $grid, columnsMap);
                            var origDs = $grid.data(internal.ORIG_DS);
                            var setting = $grid.data(internal.SETTINGS);
                            var idx = setting.descriptor.keyIdxes[rId];
                            if (uk.util.isNullOrUndefined(idx))
                                return;
                            var origData = origDs[idx]; //gridUpdate._getLatestValues(rId);
                            grid.dataSource.updateRow(rId, $.extend({}, gridUpdate._getLatestValues(rId), updatedRowData), autoCommit);
                            _.forEach(Object.keys(updatedRowData), function (key) {
                                notifyUpdate($grid, rId, key, updatedRowData[key], origData);
                                var isControl = utils.isNtsControl($grid, key);
                                if (isControl) {
                                    $grid.trigger(events.Handler.CONTROL_CHANGE, [{ columnKey: key, value: updatedRowData[key] }]);
                                }
                                if (isControl && !forceRender)
                                    return;
                                var $vCell = renderCell($grid, rId, key, origData);
                                // Validate
                                var validators = $grid.data(validation.VALIDATORS);
                                var fieldValidator = validators[key];
                                if (uk.util.isNullOrUndefined(fieldValidator))
                                    return;
                                var cellValue = updatedRowData[key];
                                var result = fieldValidator.probe(String(cellValue));
                                var cell = {
                                    id: rowId,
                                    columnKey: key,
                                    element: $vCell
                                };
                                errors.clear($grid, cell);
                                if (!result.isValid) {
                                    errors.set($grid, cell, result.errorMessage);
                                }
                            });
                            gridUpdate._notifyRowUpdated(rId, null);
                        }
                        updating.updateRow = updateRow;
                        /**
                         * Notify update.
                         */
                        function notifyUpdate($grid, rowId, columnKey, value, origData) {
                            if (origData && (origData[columnKey] === value
                                || (uk.util.isNullOrUndefined(origData[columnKey]) && _.isEmpty(value)))) {
                                var updatedCells_1 = $grid.data(internal.UPDATED_CELLS);
                                if (updatedCells_1) {
                                    _.remove(updatedCells_1, function (c, i) {
                                        return c.rowId === rowId && c.columnKey === columnKey;
                                    });
                                }
                                var options_1 = $grid.data(internal.GRID_OPTIONS);
                                if (!options_1 || !options_1.getUserId || !options_1.userId)
                                    return;
                                var id_2;
                                if (uk.util.isNullOrUndefined(id_2 = origData[options_1.primaryKey])) {
                                    var record = $grid.igGrid("findRecordByKey", rowId);
                                    if (!record)
                                        return;
                                    id_2 = record[options_1.primaryKey];
                                }
                                var userId_1 = options_1.getUserId(id_2);
                                var $cell_2 = internal.getCellById($grid, rowId, columnKey);
                                var cols = void 0;
                                if (userId_1 === options_1.userId) {
                                    $cell_2.removeClass(color.ManualEditTarget);
                                    var targetEdits = $grid.data(internal.TARGET_EDITS);
                                    if (targetEdits && (cols = targetEdits[rowId])) {
                                        _.remove(cols, function (c) { return c === columnKey; });
                                        if (cols.length === 0)
                                            delete targetEdits[rowId];
                                    }
                                }
                                else {
                                    $cell_2.removeClass(color.ManualEditOther);
                                    var otherEdits = $grid.data(internal.OTHER_EDITS);
                                    if (otherEdits && (cols = otherEdits[rowId])) {
                                        _.remove(cols, function (c) { return c === columnKey; });
                                        if (cols.length === 0)
                                            delete otherEdits[rowId];
                                    }
                                }
                                return;
                            }
                            var updatedCells = $grid.data(internal.UPDATED_CELLS);
                            if (!updatedCells) {
                                $grid.data(internal.UPDATED_CELLS, []);
                                updatedCells = $grid.data(internal.UPDATED_CELLS);
                            }
                            var index = -1;
                            var tCell = _.find(updatedCells, function (c, i) {
                                if (c.rowId === rowId && c.columnKey === columnKey) {
                                    index = i;
                                    return true;
                                }
                            });
                            if (tCell)
                                updatedCells[index].value = value;
                            else
                                updatedCells.push({ rowId: rowId, columnKey: columnKey, value: value });
                            var options = $grid.data(internal.GRID_OPTIONS);
                            if (!options || !options.getUserId || !options.userId)
                                return;
                            var id;
                            if (!origData || uk.util.isNullOrUndefined(id = origData[options.primaryKey])) {
                                var record = $grid.igGrid("findRecordByKey", rowId);
                                if (!record)
                                    return;
                                id = record[options.primaryKey];
                            }
                            var userId = options.getUserId(id);
                            var $cell = internal.getCellById($grid, rowId, columnKey);
                            if (userId === options.userId) {
                                $cell.addClass(color.ManualEditTarget);
                                var targetEdits = $grid.data(internal.TARGET_EDITS);
                                if (!targetEdits) {
                                    targetEdits = {};
                                    targetEdits[rowId] = [columnKey];
                                    $grid.data(internal.TARGET_EDITS, targetEdits);
                                    return;
                                }
                                if (!targetEdits[rowId]) {
                                    targetEdits[rowId] = [columnKey];
                                    return;
                                }
                                targetEdits[rowId].push(columnKey);
                            }
                            else {
                                $cell.addClass(color.ManualEditOther);
                                var otherEdits = $grid.data(internal.OTHER_EDITS);
                                if (!otherEdits) {
                                    otherEdits = {};
                                    otherEdits[rowId] = [columnKey];
                                    $grid.data(internal.OTHER_EDITS, otherEdits);
                                    return;
                                }
                                if (!otherEdits[rowId]) {
                                    otherEdits[rowId] = [columnKey];
                                    return;
                                }
                                otherEdits[rowId].push(columnKey);
                            }
                        }
                        /**
                         * Render cell
                         */
                        function renderCell($grid, rowId, columnKey, latestValues, clearStates) {
                            var grid = $grid.data("igGrid");
                            if (!utils.updatable($grid))
                                return;
                            var gridUpdate = $grid.data("igGridUpdating");
                            var rowData = gridUpdate._getLatestValues(rowId);
                            var column = _.find(utils.getVisibleColumns($grid), function (col) {
                                return col.key === columnKey;
                            });
                            var $cell = $grid.igGrid("cellById", rowId, columnKey);
                            if (clearStates) {
                                [color.Error, color.Alarm, color.ManualEditTarget, color.ManualEditOther,
                                    color.Reflect, color.Calculation, color.Disable].forEach(function (s) {
                                    if ($cell.hasClass(s))
                                        $cell.removeClass(s);
                                });
                            }
                            $cell.html(String(grid._renderCell(rowData[columnKey], column, rowData)));
                            return $cell;
                        }
                        updating.renderCell = renderCell;
                        /**
                         * End edit.
                         */
                        function endEdit($grid) {
                            var selectedCell = selection.getSelectedCell($grid);
                            var $selectedCell = $(selectedCell.element);
                            var $editorContainer = $selectedCell.find(errors.EDITOR_SELECTOR);
                            var value = $editorContainer.find("input")[0].value;
                            var settings = $grid.data(internal.SETTINGS);
                            if (settings.preventEditInError
                                && utils.isEditMode($grid) && errors.any(selectedCell)) {
                                return;
                            }
                            if (utils.isEditMode($grid)) {
                                var gridUpdate_2 = $grid.data("igGridUpdating");
                                var origValues = gridUpdate_2._originalValues;
                                if (!uk.util.isNullOrUndefined(origValues)) {
                                    _.forEach(Object.keys(origValues), function (colKey, idx) {
                                        if (idx === 0) {
                                            // Skip default update
                                            gridUpdate_2._originalValues[colKey] = value;
                                            return false;
                                        }
                                    });
                                    _.defer(function () {
                                        updating.updateCell($grid, selectedCell.id, selectedCell.columnKey, value);
                                    });
                                }
                            }
                            // Remove border color of editor
                            if ($editorContainer.length > 0)
                                $editorContainer.css(errors.NO_ERROR_STL);
                            specialColumn.tryDo($grid, selectedCell, value);
                            if ($editorContainer.find("span").hasClass(updating.INPUT_CURR_SYM)) {
                                $selectedCell.addClass(updating.CURR_SYM);
                            }
                            $grid.igGridUpdating("endEdit");
                        }
                        updating.endEdit = endEdit;
                    })(updating || (updating = {}));
                    var selection;
                    (function (selection_1) {
                        /**
                         * Add feature
                         */
                        function addFeature(options) {
                            var selection = { name: feature.SELECTION, mode: "cell", multipleSelection: true, wrapAround: false, cellSelectionChanged: selectCellChange };
                            if (!feature.isEnable(options.features, feature.SELECTION)) {
                                options.features.push(selection);
                            }
                            else {
                                feature.replaceBy(options, feature.SELECTION, selection);
                            }
                        }
                        selection_1.addFeature = addFeature;
                        /**
                         * Select before
                         */
                        function selectBefore($grid, enterDirection) {
                            var enter = enterDirection || "right";
                            if (enter === "right")
                                selectPrev($grid);
                            else
                                selectAbove($grid);
                        }
                        selection_1.selectBefore = selectBefore;
                        /**
                         * Select previous
                         */
                        function selectPrev($grid) {
                            var selectedCell = getSelectedCell($grid);
                            if (uk.util.isNullOrUndefined(selectedCell))
                                return;
                            clearSelection($grid);
                            var visibleColumnsMap = utils.getVisibleColumnsMap($grid);
                            var isFixed = utils.isFixedColumnCell(selectedCell, visibleColumnsMap);
                            if (selectedCell.index > 0) {
                                selectCell($grid, selectedCell.rowIndex, selectedCell.index - 1, isFixed);
                                var afterSelect = getSelectedCell($grid);
                                if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                    selectPrev($grid);
                                }
                            }
                            else if (selectedCell.index === 0) {
                                var columnsGroup = utils.columnsGroupOfCell(selectedCell, visibleColumnsMap);
                                if (uk.util.isNullOrUndefined(columnsGroup) || columnsGroup.length === 0)
                                    return;
                                var fixedColumns_2 = utils.getFixedColumns(visibleColumnsMap);
                                var unfixedColumns_1 = utils.getUnfixedColumns(visibleColumnsMap);
                                if (isFixed || !utils.fixable($grid)) {
                                    if (selectedCell.rowIndex > 0) {
                                        selectCell($grid, selectedCell.rowIndex - 1, unfixedColumns_1.length - 1);
                                    }
                                    else {
                                        var dataSource = $grid.igGrid("option", "dataSource");
                                        var sourceSize_1 = dataSource.length;
                                        $grid.igGrid("virtualScrollTo", sourceSize_1);
                                        setTimeout(function () {
                                            if (utils.pageable($grid)) {
                                                var pageSize = $grid.igGridPaging("pageSize");
                                                var pageIndex = $grid.igGridPaging("pageIndex");
                                                if (pageSize * (pageIndex + 1) > sourceSize_1) {
                                                    selectCell($grid, sourceSize_1 - pageSize * pageIndex - 1, unfixedColumns_1.length - 1);
                                                }
                                                else {
                                                    selectCell($grid, pageSize - 1, unfixedColumns_1.length - 1);
                                                }
                                                return;
                                            }
                                            selectCell($grid, sourceSize_1 - 1, unfixedColumns_1.length - 1);
                                        }, 1);
                                    }
                                }
                                else if (utils.fixable($grid) && !isFixed) {
                                    selectCell($grid, selectedCell.rowIndex, fixedColumns_2.length - 1, true);
                                }
                            }
                        }
                        selection_1.selectPrev = selectPrev;
                        /**
                         * Select above
                         */
                        function selectAbove($grid) {
                            var selectedCell = getSelectedCell($grid);
                            if (uk.util.isNullOrUndefined(selectedCell))
                                return;
                            clearSelection($grid);
                            var isFixed = utils.isFixedColumnCell(selectedCell, utils.getVisibleColumnsMap($grid));
                            var dataSource = $grid.igGrid("option", "dataSource");
                            var sourceSize = dataSource.length;
                            if (selectedCell.rowIndex > 0) {
                                selectCell($grid, selectedCell.rowIndex - 1, selectedCell.index, isFixed);
                            }
                            else if (selectedCell.rowIndex === 0) {
                                var visibleColumnsMap_1 = utils.getVisibleColumnsMap($grid);
                                var columnsGroup_1 = utils.columnsGroupOfCell(selectedCell, visibleColumnsMap_1);
                                if (uk.util.isNullOrUndefined(columnsGroup_1) || columnsGroup_1.length === 0)
                                    return;
                                $grid.igGrid("virtualScrollTo", sourceSize);
                                if (utils.pageable($grid)) {
                                    var pageSize = $grid.igGridPaging("pageSize");
                                    var pageIndex = $grid.igGridPaging("pageIndex");
                                    var lastIndex_1 = pageSize - 1;
                                    if (pageSize * (pageIndex + 1) > sourceSize) {
                                        lastIndex_1 = sourceSize - pageSize * pageIndex - 1;
                                    }
                                    setTimeout(function () {
                                        if (selectedCell.index > 0) {
                                            selectCell($grid, lastIndex_1, selectedCell.index - 1, columnsGroup_1[0].fixed);
                                        }
                                        else if (selectedCell.index === 0) {
                                            if (columnsGroup_1[0].fixed) {
                                                selectCell($grid, lastIndex_1, visibleColumnsMap_1["undefined"].length - 1);
                                                return;
                                            }
                                            var noOfColTypes = Object.keys(visibleColumnsMap_1).length;
                                            if (noOfColTypes === 2) {
                                                selectCell($grid, lastIndex_1, visibleColumnsMap_1["true"].length - 1, true);
                                            }
                                            else {
                                                selectCell($grid, lastIndex_1, visibleColumnsMap_1["undefined"].length - 1);
                                            }
                                        }
                                        var afterSelect = getSelectedCell($grid);
                                        if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                            selectPrev($grid);
                                            selectBelow($grid);
                                        }
                                    }, 1);
                                    return;
                                }
                                setTimeout(function () {
                                    if (selectedCell.index > 0) {
                                        selectCell($grid, sourceSize - 1, selectedCell.index - 1, columnsGroup_1[0].fixed);
                                    }
                                    else if (selectedCell.index === 0) {
                                        if (columnsGroup_1[0].fixed) {
                                            selectCell($grid, sourceSize - 1, visibleColumnsMap_1["undefined"].length - 1);
                                            return;
                                        }
                                        var noOfColTypes = Object.keys(visibleColumnsMap_1).length;
                                        if (noOfColTypes === 2) {
                                            selectCell($grid, sourceSize - 1, visibleColumnsMap_1["true"].length - 1, true);
                                        }
                                        else {
                                            selectCell($grid, sourceSize - 1, visibleColumnsMap_1["undefined"].length - 1);
                                        }
                                    }
                                    var afterSelect = getSelectedCell($grid);
                                    if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                        selectPrev($grid);
                                        selectBelow($grid);
                                    }
                                }, 1);
                            }
                        }
                        selection_1.selectAbove = selectAbove;
                        /**
                         * Select follow
                         */
                        function selectFollow($grid, enterDirection) {
                            var enter = enterDirection || "right";
                            if (enter === "right")
                                selectNext($grid);
                            else
                                selectBelow($grid);
                        }
                        selection_1.selectFollow = selectFollow;
                        /**
                         * Select next
                         */
                        function selectNext($grid) {
                            var selectedCell = getSelectedCell($grid);
                            if (uk.util.isNullOrUndefined(selectedCell))
                                return;
                            clearSelection($grid);
                            var visibleColumnsMap = utils.getVisibleColumnsMap($grid);
                            var dataSource = $grid.igGrid("option", "dataSource");
                            var columnsGroup = utils.columnsGroupOfCell(selectedCell, visibleColumnsMap);
                            if (uk.util.isNullOrUndefined(columnsGroup) || columnsGroup.length === 0)
                                return;
                            if (selectedCell.index < columnsGroup.length - 1) {
                                selectCell($grid, selectedCell.rowIndex, selectedCell.index + 1, columnsGroup[0].fixed);
                            }
                            else if (selectedCell.index === columnsGroup.length - 1) {
                                if (columnsGroup[0].fixed) {
                                    selectCell($grid, selectedCell.rowIndex, 0);
                                }
                                else if (utils.pageable($grid)) {
                                    var pageSize = $grid.igGridPaging("pageSize");
                                    var pageIndex = $grid.igGridPaging("pageIndex");
                                    if ((dataSource.length < pageSize * (pageIndex + 1)
                                        && selectedCell.rowIndex < (dataSource.length - pageSize * pageIndex - 1))
                                        || selectedCell.rowIndex < (pageSize - 1)) {
                                        selectCell($grid, selectedCell.rowIndex + 1, 0, true);
                                        var afterSelect = getSelectedCell($grid);
                                        if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                            selectNext($grid);
                                        }
                                    }
                                    else {
                                        $grid.igGrid("virtualScrollTo", "0px");
                                        setTimeout(function () {
                                            selectCell($grid, 0, 0, utils.fixable($grid) ? true : false);
                                            var afterSelect = getSelectedCell($grid);
                                            if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                                selectNext($grid);
                                            }
                                        }, 1);
                                    }
                                }
                                else if (selectedCell.rowIndex < dataSource.length - 1) {
                                    selectCell($grid, selectedCell.rowIndex + 1, 0, true);
                                    var afterSelect = getSelectedCell($grid);
                                    if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                        selectNext($grid);
                                    }
                                }
                                else {
                                    $grid.igGrid("virtualScrollTo", "0px");
                                    setTimeout(function () {
                                        selectCell($grid, 0, 0, utils.fixable($grid) ? true : false);
                                        var afterSelect = getSelectedCell($grid);
                                        if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                            selectNext($grid);
                                        }
                                    }, 1);
                                }
                            }
                        }
                        /**
                         * Select below
                         */
                        function selectBelow($grid) {
                            var selectedCell = getSelectedCell($grid);
                            if (uk.util.isNullOrUndefined(selectedCell))
                                return;
                            clearSelection($grid);
                            var isFixed = utils.isFixedColumnCell(selectedCell, utils.getVisibleColumnsMap($grid));
                            var dataSource = $grid.igGrid("option", "dataSource");
                            var sourceSize = dataSource.length;
                            if (utils.pageable($grid)) {
                                var pageSize = $grid.igGridPaging("pageSize");
                                var pageIndex = $grid.igGridPaging("pageIndex");
                                if ((pageSize * (pageIndex + 1) > sourceSize
                                    && selectedCell.rowIndex < (sourceSize - pageSize * pageIndex - 1))
                                    || selectedCell.rowIndex < (pageSize - 1)) {
                                    selectCell($grid, selectedCell.rowIndex + 1, selectedCell.index, isFixed);
                                }
                                else {
                                    var visibleColumnsMap_2 = utils.getVisibleColumnsMap($grid);
                                    var columnsGroup_2 = utils.columnsGroupOfCell(selectedCell, visibleColumnsMap_2);
                                    if (uk.util.isNullOrUndefined(columnsGroup_2) || columnsGroup_2.length === 0)
                                        return;
                                    $grid.igGrid("virtualScrollTo", "0px");
                                    setTimeout(function () {
                                        if (selectedCell.index < columnsGroup_2.length - 1) {
                                            selectCell($grid, 0, selectedCell.index + 1, columnsGroup_2[0].fixed);
                                        }
                                        else if (selectedCell.index === columnsGroup_2.length - 1) {
                                            if (columnsGroup_2[0].fixed) {
                                                selectCell($grid, 0, 0);
                                            }
                                            else {
                                                selectCell($grid, 0, 0, Object.keys(visibleColumnsMap_2).length === 2 ? true : undefined);
                                            }
                                        }
                                        var afterSelect = getSelectedCell($grid);
                                        if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                            selectNext($grid);
                                        }
                                    }, 1);
                                }
                                return;
                            }
                            if (selectedCell.rowIndex < sourceSize - 1) {
                                selectCell($grid, selectedCell.rowIndex + 1, selectedCell.index, isFixed);
                            }
                            else if (selectedCell.rowIndex === sourceSize - 1) {
                                var visibleColumnsMap_3 = utils.getVisibleColumnsMap($grid);
                                var columnsGroup_3 = utils.columnsGroupOfCell(selectedCell, visibleColumnsMap_3);
                                if (uk.util.isNullOrUndefined(columnsGroup_3) || columnsGroup_3.length === 0)
                                    return;
                                $grid.igGrid("virtualScrollTo", "0px");
                                setTimeout(function () {
                                    if (selectedCell.index < columnsGroup_3.length - 1) {
                                        selectCell($grid, 0, selectedCell.index + 1, columnsGroup_3[0].fixed);
                                    }
                                    else if (selectedCell.index === columnsGroup_3.length - 1) {
                                        if (columnsGroup_3[0].fixed) {
                                            selectCell($grid, 0, 0);
                                        }
                                        else {
                                            selectCell($grid, 0, 0, Object.keys(visibleColumnsMap_3).length === 2 ? true : undefined);
                                        }
                                    }
                                    var afterSelect = getSelectedCell($grid);
                                    if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                        selectNext($grid);
                                    }
                                }, 1);
                            }
                        }
                        /**
                         * Get selected cell
                         */
                        function getSelectedCell($grid) {
                            if (!utils.selectable($grid)) {
                                var $targetGrid = fixedColumns.realGridOf($grid);
                                if (!uk.util.isNullOrUndefined($targetGrid)) {
                                    return $targetGrid.igGridSelection("selectedCells")[0] || $targetGrid.data(internal.SELECTED_CELL);
                                }
                            }
                            return $grid.igGridSelection("selectedCells")[0] || $grid.data(internal.SELECTED_CELL);
                        }
                        selection_1.getSelectedCell = getSelectedCell;
                        /**
                         * Get selected cells
                         */
                        function getSelectedCells($grid) {
                            return utils.selectable($grid) ? $grid.igGridSelection("selectedCells") : undefined;
                        }
                        selection_1.getSelectedCells = getSelectedCells;
                        /**
                         * Select cell
                         */
                        function selectCell($grid, rowIndex, columnIndex, isFixed) {
                            if (!utils.selectable($grid))
                                return;
                            $grid.igGridSelection("selectCell", rowIndex, columnIndex, utils.fixable($grid) ? isFixed : undefined);
                            // Fire cell selection change
                            var ui = { owner: $grid.data("igGridSelection"),
                                selectedCells: $grid.igGridSelection("selectedCells") };
                            var selectedCells = $grid.igGridSelection("selectedCells");
                            if (selectedCells.length > 0)
                                ui.cell = selectedCells[0];
                            selectCellChange({ target: $grid[0] }, ui);
                            var selectedCell = getSelectedCell($grid);
                            var $element = $(selectedCell.element);
                            var ntsCombo = $element.find(".nts-combo-container");
                            if (ntsCombo.length > 0) {
                                ntsCombo.find("input").select();
                            }
                            var ntsSwitchs = $element.find(".nts-switch-container");
                            if (ntsSwitchs.length > 0) {
                                ntsSwitchs.find("button").filter(function (i, b) { return $(b).hasClass("selected"); }).focus();
                            }
                            var ntsDatepicker = $element.find(".nts-datepicker-container");
                            if (ntsDatepicker.length > 0) {
                                ntsDatepicker.find("input").select();
                            }
                            var ntsInput = $element.find(".nts-editor-container");
                            if (ntsInput.length > 0) {
                                ntsInput.find("input").select();
                            }
                        }
                        selection_1.selectCell = selectCell;
                        function selectCellById($grid, rowId, columnKey) {
                            return;
                        }
                        selection_1.selectCellById = selectCellById;
                        function selectCellChange(evt, ui) {
                            if (uk.util.isNullOrUndefined(ui.cell))
                                return;
                            $(evt.target).data(internal.SELECTED_CELL, ui.cell);
                        }
                        function onCellNavigate(evt, enterDirection) {
                            var grid = evt.currentTarget;
                            var $targetGrid = fixedColumns.realGridOf($(grid));
                            if (utils.isTabKey(evt)) {
                                if (utils.isEditMode($targetGrid))
                                    $targetGrid.igGridUpdating("endEdit");
                                if (evt.shiftKey) {
                                    selection.selectPrev($targetGrid);
                                }
                                else {
                                    selection.selectFollow($targetGrid);
                                }
                                evt.preventDefault();
                                return;
                            }
                            if (utils.isEnterKey(evt)) {
                                if (evt.shiftKey) {
                                    selection.selectBefore($targetGrid, enterDirection);
                                }
                                else {
                                    selection.selectFollow($targetGrid, enterDirection);
                                }
                                evt.stopImmediatePropagation();
                                return;
                            }
                        }
                        selection_1.onCellNavigate = onCellNavigate;
                        /**
                         * Clear selection
                         */
                        function clearSelection($grid) {
                            if (utils.selectable($grid)) {
                                $grid.igGridSelection("clearSelection");
                                return;
                            }
                            var $targetGrid = fixedColumns.realGridOf($grid);
                            if (!uk.util.isNullOrUndefined($targetGrid) && utils.selectable($targetGrid))
                                $targetGrid.igGridSelection("clearSelection");
                        }
                        var Direction = /** @class */ (function () {
                            function Direction() {
                            }
                            Direction.prototype.bind = function (evt) {
                                onCellNavigate(evt, this.to);
                            };
                            return Direction;
                        }());
                        selection_1.Direction = Direction;
                    })(selection || (selection = {}));
                    var columnSize;
                    (function (columnSize) {
                        /**
                         * Initialize
                         */
                        function init($grid, columns) {
                            initValueExists($grid).done(function (res) {
                                if (res)
                                    return;
                                var columnWidths = {};
                                _.forEach(columns, function (col, index) {
                                    flat(col, columnWidths);
                                });
                                saveAll($grid, columnWidths);
                            });
                        }
                        columnSize.init = init;
                        /**
                         * Flat.
                         */
                        function flat(col, columnWidths) {
                            if (col.group) {
                                _.forEach(col.group, function (sCol) {
                                    flat(sCol, columnWidths);
                                });
                                return;
                            }
                            columnWidths[col.key] = parseInt(col.width);
                        }
                        /**
                         * Exists.
                         */
                        function exists($grid) {
                            return uk.localStorage.getItem(getStorageKey($grid)).isPresent();
                        }
                        columnSize.exists = exists;
                        /**
                         * Create resize options.
                         */
                        function createResizeOptions(key) {
                            var resizing = { name: feature.RESIZING };
                            resizing.columnSettings = [{ columnKey: key, allowResizing: false, minimumWidth: 0 }];
                            return resizing;
                        }
                        columnSize.createResizeOptions = createResizeOptions;
                        /**
                         * Load data
                         */
                        function load($grid) {
                            var storeKey = getStorageKey($grid);
                            storage.getItem(storeKey).done(function (widths) {
                                widths.ifPresent(function (columns) {
                                    var widthColumns;
                                    try {
                                        widthColumns = JSON.parse(columns);
                                    }
                                    catch (e) {
                                        widthColumns = columns;
                                    }
                                    setWidths($grid, widthColumns);
                                    $grid.closest(".nts-grid-container").css("visibility", "visible");
                                    return null;
                                });
                            });
                        }
                        columnSize.load = load;
                        /**
                         * Save data
                         */
                        function save($grid, columnKey, columnWidth) {
                            var storeKey = getStorageKey($grid);
                            if (storage instanceof dist.Local) {
                                var columnsWidth = uk.localStorage.getItem(storeKey);
                                var widths = {};
                                if (columnsWidth.isPresent()) {
                                    widths = JSON.parse(columnsWidth.get());
                                    widths[columnKey] = columnWidth;
                                }
                                else {
                                    widths[columnKey] = columnWidth;
                                }
                                uk.localStorage.setItemAsJson(storeKey, widths);
                            }
                            else if (storage instanceof dist.Remote) {
                                var width = {};
                                width[columnKey] = columnWidth;
                                storage.setItemAsJson(storeKey, width);
                            }
                        }
                        columnSize.save = save;
                        /**
                         * Save all data
                         */
                        function saveAll($grid, widths) {
                            var storeKey = getStorageKey($grid);
                            storage.getItem(storeKey).done(function (columnWidths) {
                                if (!columnWidths.isPresent()) {
                                    storage.setItemAsJson(storeKey, widths);
                                }
                            });
                        }
                        function initValueExists($grid) {
                            var dfd = $.Deferred();
                            var storeKey = getStorageKey($grid);
                            storage.getItem(storeKey).done(function (columnWidths) {
                                dfd.resolve(columnWidths.isPresent());
                            });
                            return dfd.promise();
                        }
                        function getStorageKey($grid) {
                            return uk.request.location.current.rawUrl + "/" + $grid.attr("id");
                        }
                        /**
                         * Load column
                         */
                        function loadOne($grid, columnKey) {
                            var storeKey = getStorageKey($grid);
                            storage.getItem(storeKey).done(function (widths) {
                                widths.ifPresent(function (columns) {
                                    var widthColumns = JSON.parse(columns);
                                    setWidth($grid, columnKey, widthColumns[columnKey]);
                                    return null;
                                });
                            });
                        }
                        columnSize.loadOne = loadOne;
                        /**
                         * Load fixed columns
                         */
                        function loadFixedColumns($grid) {
                            var storeKey = getStorageKey($grid);
                            uk.localStorage.getItem(storeKey).ifPresent(function (columns) {
                                var fixedColumns = utils.getVisibleFixedColumns($grid);
                                if (uk.util.isNullOrUndefined(fixedColumns) || fixedColumns.length === 0)
                                    return;
                                var widthColumns = JSON.parse(columns);
                                _.forEach(fixedColumns, function (fixedCol) {
                                    setWidth($grid, fixedCol.key, widthColumns[fixedCol.key]);
                                });
                                return null;
                            });
                        }
                        columnSize.loadFixedColumns = loadFixedColumns;
                        /**
                         * Set width
                         */
                        function setWidth($grid, columnKey, width, noCheck) {
                            if (noCheck !== true && uk.util.isNullOrUndefined($grid.data("igGridResizing")))
                                return;
                            try {
                                $grid.igGridResizing("resize", columnKey, width);
                            }
                            catch (e) { }
                        }
                        /**
                         * Set widths
                         */
                        function setWidths($grid, columns) {
                            if (uk.util.isNullOrUndefined($grid.data("igGridResizing"))
                                || uk.util.isNullOrUndefined(columns))
                                return;
                            var columnKeys = Object.keys(columns);
                            _.forEach(columnKeys, function (key, index) {
                                setWidth($grid, key, columns[key], true);
                            });
                        }
                    })(columnSize || (columnSize = {}));
                    var functions;
                    (function (functions) {
                        functions.ERRORS = "errors";
                        functions.UPDATE_ROW = "updateRow";
                        functions.SET_STATE = "setState";
                        functions.UPDATED_CELLS = "updatedCells";
                        functions.ENABLE_CONTROL = "enableNtsControlAt";
                        functions.ENABLE_ALL_CONTROLS = "enableNtsControls";
                        functions.DISABLE_CONTROL = "disableNtsControlAt";
                        functions.DISABLE_ALL_CONTROLS = "disableNtsControls";
                        functions.DIRECT_ENTER = "directEnter";
                        functions.CHECK_ALL = "checkAll";
                        functions.UNCHECK_ALL = "uncheckAll";
                        functions.HEADER_TEXT = "headerText";
                        functions.SELECTED_SHEET = "selectedSheet";
                        functions.CLEAR_ROW_STATES = "clearRowStates";
                        functions.RESET_ORIG_DS = "resetOrigDataSource";
                        functions.DESTROY = "destroy";
                        /**
                         * Actions
                         */
                        function ntsAction($grid, method, params) {
                            switch (method) {
                                case functions.UPDATE_ROW:
                                    var autoCommit = $grid.data("igGrid") !== null && $grid.igGrid("option", "autoCommit") ? true : false;
                                    updateRow($grid, params[0], params[1], autoCommit);
                                    break;
                                case functions.SET_STATE:
                                    setState($grid, params[0], params[1], params[2]);
                                    break;
                                case functions.ENABLE_CONTROL:
                                    enableNtsControlAt($grid, params[0], params[1], params[2]);
                                    break;
                                case functions.ENABLE_ALL_CONTROLS:
                                    enableNtsControls($grid, params[0], params[1], params[2]);
                                    break;
                                case functions.DISABLE_CONTROL:
                                    disableNtsControlAt($grid, params[0], params[1], params[2]);
                                    break;
                                case functions.DISABLE_ALL_CONTROLS:
                                    disableNtsControls($grid, params[0], params[1], params[2]);
                                    break;
                                case functions.DIRECT_ENTER:
                                    var direction = $grid.data(internal.ENTER_DIRECT);
                                    direction.to = params[0];
                                    if (utils.fixable($grid)) {
                                        var fixedTable = fixedColumns.getFixedTable($grid);
                                        if (!uk.util.isNullOrUndefined(fixedTable)) {
                                            fixedTable.data(internal.ENTER_DIRECT).to = params[0];
                                        }
                                    }
                                    break;
                                case functions.CHECK_ALL:
                                    checkAll($grid, params[0]);
                                    break;
                                case functions.UNCHECK_ALL:
                                    uncheckAll($grid, params[0]);
                                    break;
                                case functions.HEADER_TEXT:
                                    setHeaderText($grid, params[0], params[1], params[2]);
                                    break;
                                case functions.CLEAR_ROW_STATES:
                                    clearStates($grid, params[0]);
                                    break;
                                case functions.RESET_ORIG_DS:
                                    resetOrigDs($grid, params[0]);
                                    break;
                                case functions.DESTROY:
                                    destroy($grid);
                                    break;
                                case functions.SELECTED_SHEET:
                                    return getSelectedSheet($grid);
                                case functions.UPDATED_CELLS:
                                    return $grid.data(internal.UPDATED_CELLS);
                                case functions.ERRORS:
                                    return getErrors($grid);
                            }
                        }
                        functions.ntsAction = ntsAction;
                        /**
                         * Get errors.
                         */
                        function getErrors($grid) {
                            if (!$grid)
                                return [];
                            return $grid.data(internal.ERRORS);
                        }
                        /**
                         * Update row
                         */
                        function updateRow($grid, rowId, object, autoCommit) {
                            var selectedSheet = getSelectedSheet($grid);
                            if (selectedSheet) {
                                var grid_1 = $grid.data("igGrid");
                                var options_2 = grid_1.options;
                                Object.keys(object).forEach(function (k) {
                                    if (!_.includes(selectedSheet.columns, k)) {
                                        grid_1.dataSource.setCellValue(rowId, k, object[k], grid_1.options.autoCommit);
                                        delete object[k];
                                        if (!uk.util.isNullOrUndefined(options_2.userId) && _.isFunction(options_2.getUserId)) {
                                            var uId = options_2.getUserId(rowId);
                                            if (uId === options_2.userId) {
                                                var targetEdits = $grid.data(internal.TARGET_EDITS);
                                                if (!targetEdits) {
                                                    targetEdits = {};
                                                    targetEdits[rowId] = [k];
                                                    $grid.data(internal.TARGET_EDITS, targetEdits);
                                                    return;
                                                }
                                                if (!targetEdits[rowId]) {
                                                    targetEdits[rowId] = [k];
                                                    return;
                                                }
                                                targetEdits[rowId].push(k);
                                            }
                                            else {
                                                var otherEdits = $grid.data(internal.OTHER_EDITS);
                                                if (!otherEdits) {
                                                    otherEdits = {};
                                                    otherEdits[rowId] = [k];
                                                    $grid.data(internal.OTHER_EDITS, otherEdits);
                                                    return;
                                                }
                                                if (!otherEdits[rowId]) {
                                                    otherEdits[rowId] = [k];
                                                    return;
                                                }
                                                otherEdits[rowId].push(k);
                                            }
                                        }
                                    }
                                });
                            }
                            updating.updateRow($grid, rowId, object, undefined, true);
                            if (!autoCommit) {
                                var updatedRow = $grid.igGrid("rowById", rowId, false);
                                $grid.igGrid("commit");
                                if (updatedRow !== undefined)
                                    $grid.igGrid("virtualScrollTo", $(updatedRow).data("row-idx"));
                            }
                        }
                        /**
                         * Set state.
                         */
                        function setState($grid, rowId, key, states) {
                            var cellFormatter = $grid.data(internal.CELL_FORMATTER);
                            var cellStateFeatureDef = cellFormatter.cellStateFeatureDef;
                            if (cellFormatter.rowStates) {
                                var row = cellFormatter.rowStates[rowId];
                                if (row) {
                                    var sts = row[key];
                                    if (sts) {
                                        if (sts[0][cellStateFeatureDef.state]) {
                                            sts[0][cellStateFeatureDef.state] = states;
                                        }
                                    }
                                    else {
                                        var cellState = {};
                                        cellState[cellStateFeatureDef.rowId] = rowId;
                                        cellState[cellStateFeatureDef.columnKey] = key;
                                        cellState[cellStateFeatureDef.state] = states;
                                        row[key] = [cellState];
                                    }
                                }
                                else {
                                    cellFormatter.rowStates[rowId] = {};
                                    var cellState = {};
                                    cellState[cellStateFeatureDef.rowId] = rowId;
                                    cellState[cellStateFeatureDef.columnKey] = key;
                                    cellState[cellStateFeatureDef.state] = states;
                                    cellFormatter.rowStates[rowId][key] = [cellState];
                                }
                            }
                            else {
                                cellFormatter.rowStates = {};
                                var cellState = {};
                                cellState[cellStateFeatureDef.rowId] = rowId;
                                cellState[cellStateFeatureDef.columnKey] = key;
                                cellState[cellStateFeatureDef.state] = states;
                                var colState = {};
                                colState[key] = [cellState];
                                cellFormatter.rowStates[rowId] = colState;
                            }
                            var selectedSheet = getSelectedSheet($grid);
                            var features = $grid.igGrid("option", "features");
                            var columns;
                            if (selectedSheet) {
                                columns = selectedSheet.columns;
                            }
                            if (features) {
                                var colFixFt = feature.find(features, feature.COLUMN_FIX);
                                if (colFixFt) {
                                    var fixedCols = _.filter(colFixFt.columnSettings, function (c) { return c.isFixed; }).map(function (c) { return c.columnKey; });
                                    if (selectedSheet) {
                                        columns = _.concat(selectedSheet.columns, fixedCols);
                                    }
                                }
                            }
                            if (selectedSheet && !_.includes(columns, key)) {
                                var options = $grid.data(internal.GRID_OPTIONS);
                                var stateFt = feature.find(options.ntsFeatures, feature.CELL_STATE);
                                if (stateFt) {
                                    var newState = {};
                                    newState[stateFt.rowId] = rowId;
                                    newState[stateFt.columnKey] = key;
                                    newState[stateFt.state] = states;
                                    stateFt.states.push(newState);
                                }
                                return;
                            }
                            updating.renderCell($grid, rowId, key, undefined, true);
                        }
                        /**
                         * Disable controls
                         */
                        function disableNtsControls($grid, columnKey, controlType, header) {
                            var ds = $grid.igGrid("option", "dataSource");
                            var primaryKey = $grid.igGrid("option", "primaryKey");
                            if (header && controlType === ntsControls.CHECKBOX) {
                                var setting = $grid.data(internal.SETTINGS);
                                if (setting && setting.descriptor && setting.descriptor.colIdxes) {
                                    var key = setting.descriptor.colIdxes[columnKey];
                                    var cellElm = void 0;
                                    var headerCells = setting.descriptor.headerCells;
                                    if (!headerCells) {
                                        cellElm = setting.descriptor.headerParent.find("th").filter(function () {
                                            var c = $(this);
                                            var id = c.attr("id");
                                            if (!id)
                                                return false;
                                            var parts = id.split("_");
                                            id = parts[parts.length - 1];
                                            return c.css("display") !== "none" && id === columnKey;
                                        });
                                    }
                                    else {
                                        var cells = headerCells.filter(function (c) {
                                            return c.css("display") !== "none";
                                        });
                                        cellElm = cells[key];
                                    }
                                    if (cellElm) {
                                        var control = ntsControls.getControl(controlType);
                                        if (control) {
                                            control.disable(cellElm);
                                        }
                                    }
                                }
                            }
                            for (var i = 0; i < ds.length; i++) {
                                var id = ds[i][primaryKey];
                                disableNtsControlAt($grid, id, columnKey, controlType);
                                color.pushDisable($grid, { id: id, columnKey: columnKey });
                            }
                        }
                        /**
                         * Enable controls
                         */
                        function enableNtsControls($grid, columnKey, controlType) {
                            var ds = $grid.igGrid("option", "dataSource");
                            var primaryKey = $grid.igGrid("option", "primaryKey");
                            if (header && controlType === ntsControls.CHECKBOX) {
                                var setting = $grid.data(internal.SETTINGS);
                                if (setting && setting.descriptor && setting.descriptor.colIdxes) {
                                    var key = setting.descriptor.colIdxes[columnKey];
                                    var cellElm = void 0;
                                    var headerCells = setting.descriptor.headerCells;
                                    if (!headerCells) {
                                        cellElm = setting.descriptor.headerParent.find("th").filter(function () {
                                            var c = $(this);
                                            var id = c.attr("id");
                                            if (!id)
                                                return false;
                                            var parts = id.split("_");
                                            id = parts[parts.length - 1];
                                            return c.css("display") !== "none" && id === columnKey;
                                        });
                                    }
                                    else {
                                        var cells = headerCells.filter(function (c) {
                                            return c.css("display") !== "none";
                                        });
                                        cellElm = cells[key];
                                    }
                                    if (cellElm) {
                                        var control = ntsControls.getControl(controlType);
                                        if (control) {
                                            control.enable(cellElm);
                                        }
                                    }
                                }
                            }
                            for (var i = 0; i < ds.length; i++) {
                                var id = ds[i][primaryKey];
                                enableNtsControlAt($grid, id, columnKey, controlType);
                                color.popDisable($grid, { id: id, columnKey: columnKey });
                            }
                        }
                        /**
                         * Disable control
                         */
                        function disableNtsControlAt($grid, rowId, columnKey, controlType) {
                            var cellContainer = $grid.igGrid("cellById", rowId, columnKey);
                            var control = ntsControls.getControl(controlType);
                            if (uk.util.isNullOrUndefined(control))
                                return;
                            var $cellContainer = $(cellContainer);
                            control.disable($cellContainer);
                            if (!$cellContainer.hasClass(color.Disable))
                                $cellContainer.addClass(color.Disable);
                            color.pushDisable($grid, { id: rowId, columnKey: columnKey });
                        }
                        /**
                         * Enable control
                         */
                        function enableNtsControlAt($grid, rowId, columnKey, controlType) {
                            var cellContainer = $grid.igGrid("cellById", rowId, columnKey);
                            var control = ntsControls.getControl(controlType);
                            if (uk.util.isNullOrUndefined(control))
                                return;
                            var $cellContainer = $(cellContainer);
                            control.enable($cellContainer);
                            $cellContainer.removeClass(color.Disable);
                            color.popDisable($grid, { id: rowId, columnKey: columnKey });
                        }
                        /**
                         * Check all
                         */
                        function checkAll($grid, key) {
                            var ds = $grid.igGrid("option", "dataSource");
                            var primaryKey = $grid.igGrid("option", "primaryKey");
                            if (utils.getControlType($grid, key) !== ntsControls.CHECKBOX)
                                return;
                            var cbSelect = $grid.data(internal.CB_SELECTED);
                            var colCb = cbSelect[key];
                            for (var i = 0; i < ds.length; i++) {
                                var id = ds[i][primaryKey];
                                if (colCb && colCb.disableRows
                                    && colCb.disableRows.has(id))
                                    continue;
                                updating.updateCell($grid, id, key, true, undefined, true);
                            }
                        }
                        /**
                         * Uncheck all
                         */
                        function uncheckAll($grid, key) {
                            var ds = $grid.igGrid("option", "dataSource");
                            var primaryKey = $grid.igGrid("option", "primaryKey");
                            if (utils.getControlType($grid, key) !== ntsControls.CHECKBOX)
                                return;
                            var cbSelect = $grid.data(internal.CB_SELECTED);
                            var colCb = cbSelect[key];
                            for (var i = 0; i < ds.length; i++) {
                                var id = ds[i][primaryKey];
                                if (colCb && colCb.disableRows && colCb.disableRows.has(id))
                                    continue;
                                updating.updateCell($grid, id, key, false, undefined, true);
                            }
                        }
                        /**
                         * Set header text.
                         */
                        function setHeaderText($grid, key, text, group) {
                            if (!group) {
                                var setting = $grid.data(internal.SETTINGS);
                                if (!setting || !setting.descriptor || !setting.descriptor.colIdxes
                                    || !setting.descriptor.headerCells)
                                    return;
                                var colIdx = setting.descriptor.colIdxes[key];
                                var fixedColsLen = setting.descriptor.headerCells.length - Object.keys(setting.descriptor.colIdxes).length;
                                var headerCell = setting.descriptor.headerCells[colIdx + fixedColsLen];
                                if (headerCell) {
                                    $(headerCell.find("span")[1]).html(text);
                                }
                                var options_3 = $grid.data(internal.GRID_OPTIONS);
                                updateHeaderColumn(options_3.columns, key, text, group);
                                var sheetMng_1 = $grid.data(internal.SHEETS);
                                if (sheetMng_1) {
                                    Object.keys(sheetMng_1.sheetColumns).forEach(function (k) {
                                        updateHeaderColumn(sheetMng_1.sheetColumns[k], key, text, group);
                                    });
                                }
                                return;
                            }
                            var headersTable = $grid.igGrid("headersTable");
                            headersTable.find("th").each(function () {
                                var $self = $(this);
                                var colspan = $self.attr("colspan");
                                if (uk.util.isNullOrUndefined(colspan))
                                    return;
                                var label = $self.attr("aria-label");
                                if (key === label.trim()) {
                                    $self.attr("aria-label", text);
                                    $self.children("span.ui-iggrid-headertext").text(text);
                                    return false;
                                }
                            });
                            var options = $grid.data(internal.GRID_OPTIONS);
                            updateHeaderColumn(options.columns, key, text, group);
                            var sheetMng = $grid.data(internal.SHEETS);
                            if (sheetMng) {
                                Object.keys(sheetMng.sheetColumns).forEach(function (k) {
                                    updateHeaderColumn(sheetMng.sheetColumns[k], key, text, group);
                                });
                            }
                        }
                        /**
                         * Update header column.
                         */
                        function updateHeaderColumn(columns, key, text, group) {
                            var updated = false;
                            _.forEach(columns, function (c, i) {
                                if (group && c.group && c.headerText === key) {
                                    updated = true;
                                    c.headerText = text;
                                    return false;
                                }
                                if (!group && c.group) {
                                    updated = updateHeaderColumn(c.group, key, text, group);
                                    if (updated)
                                        return false;
                                }
                                if (!group && !c.group && c.key === key) {
                                    updated = true;
                                    c.headerText = text;
                                    return false;
                                }
                            });
                            return updated;
                        }
                        /**
                         * Clear states.
                         */
                        function clearStates($grid, arr) {
                            if (arr && arr.constructor !== Array) {
                                return clearStates.apply(null, [$grid, [arr]]);
                            }
                            var cellFormatter = $grid.data(internal.CELL_FORMATTER);
                            if (!cellFormatter)
                                return;
                            arr.forEach(function (id) {
                                var disableRow;
                                if (cellFormatter.disableRows && (disableRow = cellFormatter.disableRows[id])
                                    && disableRow[0].disable) {
                                    delete cellFormatter.disableRows[id];
                                }
                                else if (cellFormatter.rowStates && cellFormatter.rowStates[id]) {
                                    delete cellFormatter.rowStates[id];
                                }
                                clearRowStates($grid, id);
                            });
                        }
                        /**
                         * Clear row states.
                         */
                        function clearRowStates($grid, id) {
                            var $row = $grid.igGrid("rowById", id, false);
                            removeClass($grid, $row, id);
                            $row = $grid.igGrid("rowById", id, true);
                            if ($row.length > 0) {
                                removeClass($grid, $row, id);
                            }
                        }
                        /**
                         * Remove class.
                         */
                        function removeClass($grid, $row, id) {
                            var $cells = $row.find("td");
                            [color.Error, color.Alarm, color.ManualEditTarget, color.ManualEditOther,
                                color.Reflect, color.Calculation, color.Disable].forEach(function (s) {
                                $cells.each(function (i, td) {
                                    var $cell = $(td);
                                    if ($cell.hasClass(s)) {
                                        $cell.removeClass(s);
                                        if (s === color.Disable) {
                                            var described = $cell.attr("aria-describedby");
                                            if (!described)
                                                return;
                                            var key = described.split("_")[1];
                                            var controlType = utils.getControlType($grid, key);
                                            if (controlType && controlType !== ntsControls.TEXTBOX) {
                                                var control = ntsControls.getControl(controlType);
                                                if (uk.util.isNullOrUndefined(control))
                                                    return;
                                                control.enable($cell);
                                                color.popDisable($grid, { id: id, columnKey: key });
                                            }
                                        }
                                    }
                                });
                            });
                        }
                        /**
                         * Reset orig ds.
                         */
                        function resetOrigDs($grid, ds) {
                            $grid.data(internal.ORIG_DS, ds);
                            $grid.data(internal.UPDATED_CELLS, null);
                        }
                        /**
                         * Get selected sheet.
                         */
                        function getSelectedSheet($grid) {
                            var sheet = $grid.data(internal.SHEETS);
                            if (!sheet || !sheet.currentSheet)
                                return;
                            return _.find(sheet.sheets, function (s) {
                                return s.name === sheet.currentSheet;
                            });
                        }
                        /**
                         * Destroy
                         */
                        function destroy($grid) {
                            var $container = $grid.closest(".nts-grid-container");
                            if ($container.length === 0) {
                                $grid.igGrid("destroy");
                                $grid.off();
                                $grid.removeData();
                                return;
                            }
                            $container.find(".nts-grid-sheet-buttons").remove();
                            $($grid.igGrid("container")).unwrap().unwrap();
                            $grid.igGrid("destroy");
                            $grid.off();
                            $grid.removeData();
                        }
                    })(functions || (functions = {}));
                    var ntsControls;
                    (function (ntsControls) {
                        ntsControls.LABEL = 'Label';
                        ntsControls.LINK_LABEL = 'LinkLabel';
                        ntsControls.CHECKBOX = 'CheckBox';
                        ntsControls.SWITCH_BUTTONS = 'SwitchButtons';
                        ntsControls.COMBOBOX = 'ComboBox';
                        ntsControls.BUTTON = 'Button';
                        ntsControls.DELETE_BUTTON = 'DeleteButton';
                        ntsControls.TEXTBOX = 'TextBox';
                        ntsControls.TEXT_EDITOR = 'TextEditor';
                        ntsControls.FLEX_IMAGE = 'FlexImage';
                        ntsControls.IMAGE = 'Image';
                        ntsControls.DATE_PICKER = 'DatePicker';
                        ntsControls.HEIGHT_CONTROL = "27px";
                        ntsControls.COMBO_CLASS = "nts-combo-container";
                        ntsControls.PICKER_HIDE_CLASS = "datepicker-hide";
                        ntsControls.PICKER_PANEL_CLASS = "datepicker-panel";
                        ntsControls.MUTED_CLASS = "muted";
                        ntsControls.PICKED_CLASS = "picked";
                        ntsControls.YM = "YYYY年MM月";
                        ntsControls.Y = "YYYY年";
                        ntsControls.WEEK_DAYS = ui_24.toBeResource.weekDaysShort;
                        /**
                         * Get control
                         */
                        function getControl(name) {
                            switch (name) {
                                case ntsControls.CHECKBOX:
                                    return new CheckBox();
                                case ntsControls.SWITCH_BUTTONS:
                                    return new SwitchButtons();
                                case ntsControls.COMBOBOX:
                                    return new ComboBox();
                                case ntsControls.BUTTON:
                                    return new Button();
                                case ntsControls.DELETE_BUTTON:
                                    return new DeleteButton();
                                case ntsControls.TEXT_EDITOR:
                                    return new TextEditor();
                                case ntsControls.LINK_LABEL:
                                    return new LinkLabel();
                                case ntsControls.FLEX_IMAGE:
                                    return new FlexImage();
                                case ntsControls.IMAGE:
                                    return new Image();
                                case ntsControls.DATE_PICKER:
                                    return new DatePicker();
                            }
                        }
                        ntsControls.getControl = getControl;
                        /**
                         * Draw label
                         */
                        function drawLabel($grid, column, cellFormatter) {
                            column.formatter = function (value, rowObj) {
                                if (uk.util.isNullOrUndefined(rowObj))
                                    return value;
                                var $self = this;
                                var rowId = rowObj[$grid.igGrid("option", "primaryKey")];
                                var controlCls = "nts-grid-control-" + column.key + "-" + rowId;
                                var $container = $("<div/>").append($("<div/>").addClass(controlCls).css("height", ntsControls.HEIGHT_CONTROL));
                                setTimeout(function () {
                                    var rId = rowObj[$grid.igGrid("option", "primaryKey")];
                                    var $gridCell = internal.getCellById($grid, rId, column.key);
                                    if ($gridCell && $($gridCell.children()[0]).children().length === 0) {
                                        var action_1;
                                        if (column.click && _.isFunction(column.click)) {
                                            action_1 = function () { return column.click(rowId, column.key); };
                                        }
                                        $("." + controlCls).append(new Label(action_1).draw({ text: value }));
                                        var cellElement = {
                                            id: rId,
                                            columnKey: column.key,
                                            $element: $gridCell
                                        };
                                        cellFormatter.style($grid, cellElement);
                                        cellFormatter.setTextColor($grid, cellElement);
                                        cellFormatter.setTextStyle($grid, cellElement);
                                    }
                                }, 0);
                                return $container.html();
                            };
                        }
                        ntsControls.drawLabel = drawLabel;
                        /**
                         * Create header checkbox.
                         */
                        function createHeaderCheckbox(data, key) {
                            var defaultOptions = {
                                update: $.noop,
                                initValue: false,
                                enable: true
                            };
                            var options = $.extend({}, defaultOptions, data);
                            return new CheckBox().draw(options).addClass("nts-grid-header-control-" + key).prop("outerHTML");
                        }
                        ntsControls.createHeaderCheckbox = createHeaderCheckbox;
                        /**
                         * Bind cb header columns.
                         */
                        function bindCbHeaderColumns(options, columns, selectionColumns) {
                            options.headerCellRendered = function (evt, ui) {
                                var $grid = $(ui.owner.element);
                                var column = _.remove(columns, function (c) { return c === ui.columnKey; });
                                if (!column || column.length === 0)
                                    return;
                                var columnConf = selectionColumns[column[0]];
                                if (columnConf) {
                                    selectionColumns[column[0]].th = ui.th;
                                }
                                $(ui.th).find(".nts-grid-header-control-" + column[0]).find("input[type='checkbox']")
                                    .on("change", function () {
                                    var $cb = $(this);
                                    var selected = $cb.is(":checked");
                                    var cbSelectCols = $grid.data(internal.CB_SELECTED);
                                    var cbSelectConf = cbSelectCols[column[0]];
                                    if (!cbSelectConf)
                                        return;
                                    _.forEach(options.dataSource, function (r) {
                                        if (!r)
                                            return;
                                        var id = r[options.primaryKey];
                                        if (cbSelectConf && (cbSelectConf.hiddenRows
                                            && cbSelectConf.hiddenRows.some(function (v) { return v === id; }))
                                            || (cbSelectConf.disableRows
                                                && cbSelectConf.disableRows.has(id)))
                                            return;
                                        updating.updateCell($grid, id, ui.columnKey, selected, undefined, true);
                                    });
                                    cbSelectConf.selectAll = selected;
                                    if (selected) {
                                        var hiddenCount = cbSelectConf.hiddenRows ? cbSelectConf.hiddenRows.length : 0;
                                        var disableCount = cbSelectConf.disableRows ? cbSelectConf.disableRows.size : 0;
                                        cbSelectConf.quantity = options.dataSource.length - hiddenCount - disableCount;
                                        return;
                                    }
                                    cbSelectConf.quantity = 0;
                                });
                            };
                        }
                        ntsControls.bindCbHeaderColumns = bindCbHeaderColumns;
                        var NtsControlBase = /** @class */ (function () {
                            function NtsControlBase() {
                                this.readOnly = false;
                            }
                            NtsControlBase.prototype.cellBelongTo = function ($input) {
                                var self = this;
                                var cell = {};
                                cell.element = $input.closest("td")[0];
                                var $gridControl = $input.closest("div[class*='nts-grid-control']");
                                if ($gridControl.length === 0)
                                    return;
                                var clazz = $gridControl.attr("class").split(" ")[0];
                                var pos = clazz.split("-");
                                cell.id = utils.parseIntIfNumber(pos.pop(), self.$containedGrid, utils.getColumnsMap(self.$containedGrid));
                                cell.columnKey = pos.pop();
                                return cell;
                            };
                            return NtsControlBase;
                        }());
                        var CheckBox = /** @class */ (function (_super) {
                            __extends(CheckBox, _super);
                            function CheckBox() {
                                return _super !== null && _super.apply(this, arguments) || this;
                            }
                            CheckBox.prototype.containerClass = function () {
                                return "nts-checkbox-container";
                            };
                            CheckBox.prototype.draw = function (data) {
                                var checkBoxText;
                                var setChecked = data.update;
                                var initValue = data.initValue;
                                var $wrapper = $("<div/>").addClass(this.containerClass()).data("enable", data.enable);
                                $wrapper.addClass("ntsControl").on("click", function (e) {
                                    if ($wrapper.data("readonly") === true)
                                        e.preventDefault();
                                });
                                var text = data.controlDef.options[data.controlDef.optionsText];
                                if (text) {
                                    checkBoxText = text;
                                }
                                else {
                                    checkBoxText = $wrapper.text();
                                    $wrapper.text('');
                                }
                                var $checkBoxLabel = $("<label class='ntsCheckBox'></label>");
                                var $checkBox = $('<input type="checkbox">').on("change", function () {
                                    setChecked($(this).is(":checked"));
                                }).appendTo($checkBoxLabel);
                                var $box = $("<span class='box'></span>").appendTo($checkBoxLabel);
                                if (checkBoxText && checkBoxText.length > 0)
                                    var label = $("<span class='label'></span>").html(checkBoxText).appendTo($checkBoxLabel);
                                $checkBoxLabel.appendTo($wrapper);
                                var checked = initValue !== undefined ? initValue : true;
                                $wrapper.data("readonly", this.readOnly);
                                var $checkBox = $wrapper.find("input[type='checkbox']");
                                if (checked === true)
                                    $checkBox.attr("checked", "checked");
                                else
                                    $checkBox.removeAttr("checked");
                                if (data.enable === true)
                                    $checkBox.removeAttr("disabled");
                                else
                                    $checkBox.attr("disabled", "disabled");
                                return $wrapper;
                            };
                            CheckBox.prototype.disable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", false);
                                $wrapper.find("input[type='checkbox']").attr("disabled", "disabled");
                            };
                            CheckBox.prototype.enable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", true);
                                $wrapper.find("input[type='checkbox']").removeAttr("disabled");
                            };
                            return CheckBox;
                        }(NtsControlBase));
                        var SwitchButtons = /** @class */ (function (_super) {
                            __extends(SwitchButtons, _super);
                            function SwitchButtons() {
                                return _super !== null && _super.apply(this, arguments) || this;
                            }
                            SwitchButtons.prototype.containerClass = function () {
                                return "nts-switch-container";
                            };
                            SwitchButtons.prototype.draw = function (data) {
                                var selectedCssClass = 'selected';
                                var options = data.controlDef.options;
                                var optionsValue = data.controlDef.optionsValue;
                                var optionsText = data.controlDef.optionsText;
                                var selectedValue = data.initValue;
                                var container = $("<div/>").addClass(this.containerClass()).data("enable", data.enable);
                                container.on(events.Handler.KEY_UP, function (evt) {
                                    var $buttons = container.find("button");
                                    var index;
                                    $buttons.each(function (i, elm) {
                                        if (elm === document.activeElement) {
                                            index = i;
                                            return false;
                                        }
                                    });
                                    if (!uk.util.isNullOrUndefined(index)) {
                                        var arrowNav = false;
                                        if (utils.isArrowLeft(evt)) {
                                            index = index === 0 ? ($buttons.length - 1) : --index;
                                            arrowNav = true;
                                        }
                                        if (utils.isArrowRight(evt)) {
                                            index = index === $buttons.length - 1 ? 0 : ++index;
                                            arrowNav = true;
                                        }
                                        var $targetButton = $buttons.eq(index);
                                        $targetButton.focus();
                                        if (arrowNav) {
                                            var selectedValue = $targetButton.data('swbtn');
                                            $('button', container).removeClass(selectedCssClass);
                                            $targetButton.addClass(selectedCssClass);
                                            data.update(selectedValue);
                                        }
                                    }
                                });
                                var distinction = data.controlDef.distinction;
                                var switchOptions;
                                if (distinction && (switchOptions = distinction[data.rowId])) {
                                    switchOptions = options.filter(function (o) {
                                        return switchOptions.indexOf(o.value) > -1;
                                    });
                                }
                                else {
                                    switchOptions = options;
                                }
                                _.forEach(switchOptions, function (opt) {
                                    var value = opt[optionsValue];
                                    var text = opt[optionsText];
                                    var btn = $('<button>').text(text).css("height", "26px")
                                        .addClass('nts-switch-button')
                                        .attr('data-swbtn', value)
                                        .attr('tabindex', -1)
                                        .on('click', function () {
                                        var selectedValue = $(this).data('swbtn');
                                        $('button', container).removeClass(selectedCssClass);
                                        $(this).addClass(selectedCssClass);
                                        data.update(selectedValue);
                                    });
                                    if (value === selectedValue) {
                                        btn.addClass(selectedCssClass);
                                    }
                                    container.append(btn);
                                });
                                (data.enable === true) ? $('button', container).prop("disabled", false)
                                    : $('button', container).prop("disabled", true);
                                return container;
                            };
                            SwitchButtons.prototype.enable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", true);
                                $('button', $wrapper).prop("disabled", false);
                            };
                            SwitchButtons.prototype.disable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", false);
                                $('button', $wrapper).prop("disabled", true);
                            };
                            return SwitchButtons;
                        }(NtsControlBase));
                        var ComboBox = /** @class */ (function (_super) {
                            __extends(ComboBox, _super);
                            function ComboBox() {
                                return _super !== null && _super.apply(this, arguments) || this;
                            }
                            ComboBox.prototype.containerClass = function () {
                                return "nts-combo-container";
                            };
                            ComboBox.prototype.draw = function (data) {
                                var self = this;
                                // Default values.
                                var distanceColumns = data.controlDef.spaceSize === "small" ? '  ' : '     ';
                                // Character used fill to the columns.
                                var fillCharacter = ' ';
                                var maxWidthCharacter = 15;
                                var container = $("<div/>").addClass(this.containerClass()).data("enable", data.enable);
                                var columns = data.controlDef.columns;
                                // Set attribute for multi column.
                                var itemTemplate = undefined;
                                var haveColumn = columns && columns.length > 0;
                                if (haveColumn) {
                                    itemTemplate = '<div class="nts-combo-item">';
                                    _.forEach(columns, function (item, i) {
                                        // Set item template.
                                        itemTemplate += '<div class="nts-column nts-combo-column-' + i + '">${' + item.prop + '}</div>';
                                    });
                                    itemTemplate += '</div>';
                                }
                                // Display full code name
                                if (data.controlDef.displayMode === "codeName") {
                                    data.controlDef.options = data.controlDef.options.map(function (option) {
                                        var newOptionText = '';
                                        if (haveColumn) {
                                            _.forEach(columns, function (item, i) {
                                                var prop = option[item.prop];
                                                var length = item.length;
                                                if (i === columns.length - 1) {
                                                    newOptionText += prop;
                                                }
                                                else {
                                                    newOptionText += uk.text.padRight(prop, fillCharacter, length) + distanceColumns;
                                                }
                                            });
                                        }
                                        else {
                                            newOptionText = option[data.controlDef.optionsText];
                                        }
                                        option['nts-combo-label'] = newOptionText;
                                        return option;
                                    });
                                }
                                var comboMode = data.controlDef.editable ? 'editable' : 'dropdown';
                                container.igCombo({
                                    dataSource: data.controlDef.options,
                                    valueKey: data.controlDef.optionsValue,
                                    textKey: data.controlDef.displayMode === 'codeName'
                                        ? 'nts-combo-label' : data.controlDef.optionsText,
                                    mode: comboMode,
                                    disabled: !data.enable,
                                    placeHolder: '',
                                    enableClearButton: false,
                                    initialSelectedItems: [
                                        { value: data.initValue }
                                    ],
                                    itemTemplate: itemTemplate,
                                    //                        selectionChanging: function(evt: any, ui: any) {
                                    //                            var __self = self;
                                    //                            let $gridControl = $(evt.target).closest("div[class*=nts-grid-control]");
                                    //                            if (util.isNullOrUndefined($gridControl)) return;
                                    //                            let cls = $gridControl.attr("class");
                                    //                            let classNameParts = cls.split("-");
                                    //                            let rowId = classNameParts.pop();
                                    //                            let columnKey = classNameParts.pop();
                                    //                            let targetCell: any = __self.$containedGrid.igGrid("cellById", rowId, columnKey);
                                    //                            let $comboContainer = $(targetCell).find("." + __self.containerClass());
                                    //                            // Clear error if any
                                    //                            let comboInput = $($comboContainer.find("input")[1]);
                                    //                            comboInput.ntsError("clear");
                                    //                            nts.uk.ui.errors.removeByElement(comboInput);
                                    //                            comboInput.parent().removeClass("error");
                                    //                        },
                                    selectionChanged: function (evt, ui) {
                                        var _self = self;
                                        if (ui.items.length > 0) {
                                            var selectedValue_1 = ui.items[0].data[data.controlDef.optionsValue];
                                            data.update(selectedValue_1);
                                            setTimeout(function () {
                                                var __self = _self;
                                                var $gridControl = $(evt.target).closest("div[class*=nts-grid-control]");
                                                if (uk.util.isNullOrUndefined($gridControl))
                                                    return;
                                                var cls = $gridControl.attr("class");
                                                var classNameParts = cls.split("-");
                                                var rowId = classNameParts.pop();
                                                var columnKey = classNameParts.pop();
                                                var targetCell = internal.getCellById(__self.$containedGrid, rowId, columnKey);
                                                if (!targetCell)
                                                    return;
                                                var $comboContainer = targetCell.find("." + __self.containerClass());
                                                // Save selected item
                                                $comboContainer.data(internal.COMBO_SELECTED, selectedValue_1);
                                                if (data.bounce) {
                                                    var bCell = internal.getCellById(__self.$containedGrid, rowId, data.bounce);
                                                    var cell = { id: utils.parseIntIfNumber(rowId, __self.$containedGrid, utils.getColumnsMap(__self.$containedGrid)),
                                                        columnKey: data.bounce, element: bCell ? bCell[0] : bCell };
                                                    if (errors.any(cell)) {
                                                        errors.clear(__self.$containedGrid, cell);
                                                    }
                                                    updating.updateCell(__self.$containedGrid, rowId, data.bounce, selectedValue_1);
                                                }
                                            }, 0);
                                        }
                                    },
                                    rendered: function () {
                                        var tabIndex = !uk.util.isNullOrUndefined(data.tabIndex) ? data.tabIndex : -1;
                                        container.igCombo("option", "tabIndex", tabIndex);
                                    }
                                });
                                // Save init value
                                container.data(internal.COMBO_SELECTED, data.initValue);
                                // Set width for multi columns.
                                if (haveColumn) {
                                    var totalWidth = 0;
                                    var $dropDownOptions = container.igCombo("dropDown");
                                    _.forEach(columns, function (item, i) {
                                        var charLength = item.length;
                                        var width = charLength * maxWidthCharacter + 10;
                                        var $comboCol = $dropDownOptions.find('.nts-combo-column-' + i);
                                        $comboCol.width(width);
                                        if (i !== columns.length - 1) {
                                            $comboCol.css("float", "left");
                                        }
                                        totalWidth += width + 10;
                                    });
                                    $dropDownOptions.find(".nts-combo-item").css({ minWidth: totalWidth });
                                    container.css({ minWidth: totalWidth });
                                }
                                if (!uk.util.isNullOrUndefined(data.controlDef.width)) {
                                    container.igCombo("option", "width", data.controlDef.width);
                                }
                                container.data("columns", columns);
                                container.data("comboMode", comboMode);
                                return container;
                            };
                            ComboBox.prototype.enable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass());
                                $wrapper.data("enable", true);
                                $wrapper.igCombo("option", "disabled", false);
                            };
                            ComboBox.prototype.disable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass());
                                $wrapper.data("enable", false);
                                $wrapper.igCombo("option", "disabled", true);
                            };
                            return ComboBox;
                        }(NtsControlBase));
                        var Button = /** @class */ (function (_super) {
                            __extends(Button, _super);
                            function Button() {
                                return _super !== null && _super.apply(this, arguments) || this;
                            }
                            Button.prototype.containerClass = function () {
                                return "nts-button-container";
                            };
                            Button.prototype.draw = function (data) {
                                var $container = $("<div/>").addClass(this.containerClass());
                                var $button = $("<button/>").addClass("ntsButton").css("height", "25px").appendTo($container)
                                    .text(data.controlDef.text || data.initValue).attr("tabindex", -1)
                                    .data("enable", data.enable).on("click", $.proxy(data.controlDef.click, null, data.rowObj));
                                $button.prop("disabled", !data.enable);
                                return $container;
                            };
                            Button.prototype.enable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", true);
                                $wrapper.find(".ntsButton").prop("disabled", false);
                            };
                            Button.prototype.disable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", false);
                                $wrapper.find(".ntsButton").prop("disabled", true);
                            };
                            return Button;
                        }(NtsControlBase));
                        var DeleteButton = /** @class */ (function (_super) {
                            __extends(DeleteButton, _super);
                            function DeleteButton() {
                                return _super !== null && _super.apply(this, arguments) || this;
                            }
                            DeleteButton.prototype.draw = function (data) {
                                var btnContainer = _super.prototype.draw.call(this, data);
                                var btn = btnContainer.find("button");
                                btn.off("click", data.controlDef.click);
                                btn.on("click", data.deleteRow);
                                return btn;
                            };
                            return DeleteButton;
                        }(Button));
                        var TextEditor = /** @class */ (function (_super) {
                            __extends(TextEditor, _super);
                            function TextEditor() {
                                return _super !== null && _super.apply(this, arguments) || this;
                            }
                            TextEditor.prototype.containerClass = function () {
                                return "nts-editor-container";
                            };
                            TextEditor.prototype.draw = function (data) {
                                var self = this;
                                var constraint = data.controlDef.constraint;
                                var $container = $("<div/>").addClass(this.containerClass());
                                var $input = $("<input/>").addClass("nts-editor nts-input").css({ padding: "2px", width: "96%" })
                                    .attr("tabindex", -1).val(data.initValue);
                                if (constraint.valueType === "Time")
                                    $input.css("text-align", "right");
                                var $editor = $("<span/>").addClass("nts-editor-wrapper ntsControl").css("width", "100%").append($input).appendTo($container);
                                var cell;
                                //                    self.validate(data.controlDef, data.initValue, data).success(t => {
                                //                        $input.val(t);
                                //                        $input.data(internal.TXT_RAW, data.initValue);
                                //                    }).terminate();
                                $input.val(data.initValue);
                                $input.data(internal.TXT_RAW, data.initValue);
                                var valueToDs = function (valueType, before, after) {
                                    switch (valueType) {
                                        case "Integer":
                                        case "HalfInt":
                                        case "String":
                                            return before;
                                        case "Time":
                                            return after;
                                        default:
                                            return after;
                                    }
                                };
                                $input.on(events.Handler.KEY_DOWN, function (evt) {
                                    // TODO: Add check if error not occurred on this cell,
                                    // depends on which border to set red.
                                    if (utils.isEnterKey(evt) || utils.isTabKey(evt)) {
                                        var value_2 = $input.val();
                                        self.validate(data.controlDef, value_2, data).success(function (t) {
                                            cell = self.cellBelongTo($input);
                                            errors.clear(self.$containedGrid, cell);
                                            var val = valueToDs(constraint.valueType, value_2, t);
                                            $input.data(internal.TXT_RAW, val);
                                            data.update(val);
                                            _(internal._datePickerBoard).keys()
                                                .forEach(function (k) {
                                                utils.closeDD(internal._datePickerBoard[k]);
                                            });
                                        }).fail(function (errId, isRawMsg) {
                                            cell = self.cellBelongTo($input);
                                            errors.set(self.$containedGrid, cell, isRawMsg ? errId : uk.resource.getMessage(errId));
                                            data.update(value_2);
                                            //                                if (data.controlDef.format === "y") {
                                            //                                    $(internal._datePickerBoard[data.controlDef.format]).trigger("set", [ moment(), 0, 1 ]);
                                            //                                }
                                            _(internal._datePickerBoard).keys()
                                                .forEach(function (k) {
                                                utils.closeDD(internal._datePickerBoard[k]);
                                            });
                                        }).terminate();
                                    }
                                    else if (evt.ctrlKey && utils.isPasteKey(evt)) {
                                        evt.stopPropagation();
                                    }
                                });
                                $input.on(events.Handler.KEY_UP, function (evt) {
                                    if (self.containerClass().contains(ntsControls.DATE_PICKER.toLowerCase()))
                                        return;
                                    self.validate(data.controlDef, $input.val(), data).success(function (t) {
                                        cell = self.cellBelongTo($input);
                                        errors.clear(self.$containedGrid, cell);
                                    }).fail(function (errId, isRawMsg) {
                                        cell = self.cellBelongTo($input);
                                        errors.set(self.$containedGrid, cell, isRawMsg ? errId : nts.uk.resource.getMessage(errId));
                                    }).terminate();
                                });
                                $input.on(events.Handler.BLUR, function (evt) {
                                    self.validate(data.controlDef, $input.val(), data).success(function (t) {
                                        var value = $input.val();
                                        cell = self.cellBelongTo($input);
                                        errors.clear(self.$containedGrid, cell);
                                        var val = valueToDs(constraint.valueType, value, t);
                                        data.update(val);
                                        $input.data(internal.TXT_RAW, val);
                                        $input.val(t);
                                    }).fail(function (errId, isRawMsg) {
                                        cell = self.cellBelongTo($input);
                                        errors.set(self.$containedGrid, cell, isRawMsg ? errId : nts.uk.resource.getMessage(errId));
                                        data.update($input.val());
                                    }).terminate();
                                });
                                $input.on(events.Handler.MOUSE_MOVE, function (evt) {
                                    evt.stopPropagation();
                                });
                                $input.on(events.Handler.CLICK, function (evt) {
                                    var rawValue = $input.data(internal.TXT_RAW);
                                    if (!errors.any({ element: $input.closest("td")[0] })
                                        && !uk.util.isNullOrUndefined(rawValue))
                                        $input.val(rawValue);
                                    if (data.controlDef.controlType === ntsControls.DATE_PICKER) {
                                        var board = internal._datePickerBoard[data.controlDef.format];
                                        $.data(board, internal.JQUERY_INPUT_PICKER_ATTACH, $input);
                                        var formats = utils.dateFormat(data.controlDef.format);
                                        var mDate = moment(rawValue, formats[0], true), mDisplayDate = mDate.isValid() ? mDate : moment();
                                        var $daysPick = board.querySelector("div[data-view='days picker']"), $monthsPick = board.querySelector("div[data-view='months picker']"), $yearsPick = board.querySelector("div[data-view='years picker']"), $board = $(board);
                                        if ($daysPick) {
                                            $daysPick.classList.remove(ntsControls.PICKER_HIDE_CLASS);
                                            $monthsPick.classList.add(ntsControls.PICKER_HIDE_CLASS);
                                            $yearsPick.classList.add(ntsControls.PICKER_HIDE_CLASS);
                                            $board.trigger("set", [mDisplayDate]);
                                        }
                                        else if ($monthsPick) {
                                            $monthsPick.classList.remove(ntsControls.PICKER_HIDE_CLASS);
                                            $yearsPick.classList.add(ntsControls.PICKER_HIDE_CLASS);
                                            $board.trigger("set", [mDisplayDate, 0, 1]);
                                        }
                                        else {
                                            $board.trigger("set", [mDisplayDate, 0, 2]);
                                        }
                                        $board.position({
                                            of: $input,
                                            my: "left top",
                                            at: "left bottom",
                                            collision: "flip flip"
                                        }).css("z-index", 11000);
                                        _(internal._datePickerBoard).keys()
                                            .filter(function (k) { return k !== data.controlDef.format; })
                                            .forEach(function (k) {
                                            utils.closeDD(internal._datePickerBoard[k]);
                                        });
                                    }
                                });
                                return $container;
                            };
                            TextEditor.prototype.validate = function (controlDef, value, data) {
                                var self = this, constraint = controlDef.constraint;
                                if (constraint.required && (_.isEmpty(value) || _.isNull(value)))
                                    return validation.Result.invalid("MsgB_1");
                                switch (constraint.valueType) {
                                    case "Integer":
                                        var valid = uk.ntsNumber.isNumber(value, false);
                                        if (!valid)
                                            return validation.Result.invalid("MsgB_8");
                                        var formatted = value;
                                        if (constraint.format === "Number_Separated") {
                                            formatted = uk.ntsNumber.formatNumber(value, { formatId: constraint.format });
                                        }
                                        return validation.Result.OK(formatted);
                                    case "Time":
                                        return validation.parseTime(value, constraint.format);
                                    case "HalfInt":
                                        if (uk.ntsNumber.isHalfInt(value)) {
                                            return validation.Result.OK(value);
                                        }
                                        return validation.Result.invalid("MsgB_14");
                                    case "String":
                                        return validation.Result.OK(value);
                                }
                            };
                            TextEditor.prototype.enable = function ($container) {
                                var self = this;
                                var $wrapper = $container.find("." + self.containerClass());
                                $wrapper.find("input").prop("disabled", false);
                            };
                            TextEditor.prototype.disable = function ($container) {
                                var self = this;
                                var $wrapper = $container.find("." + self.containerClass());
                                $wrapper.find("input").prop("disabled", true);
                            };
                            return TextEditor;
                        }(NtsControlBase));
                        var DatePicker = /** @class */ (function (_super) {
                            __extends(DatePicker, _super);
                            function DatePicker() {
                                return _super !== null && _super.apply(this, arguments) || this;
                            }
                            DatePicker.prototype.containerClass = function () {
                                return "nts-datepicker-container";
                            };
                            DatePicker.prototype.draw = function (data) {
                                var self = this;
                                self.drawBoardIfNeeded(data);
                                return _super.prototype.draw.call(this, data);
                            };
                            DatePicker.prototype.validate = function (controlDef, value, data) {
                                var self = this, constraint = controlDef.constraint;
                                if (constraint.required && (_.isEmpty(value) || _.isNull(value)))
                                    return validation.Result.invalid("MsgB_1");
                                if (controlDef.controlType === ntsControls.DATE_PICKER) {
                                    var validators = self.$containedGrid.data(validation.VALIDATORS);
                                    if (_.isNil(validators))
                                        return;
                                    var fieldValidator = validators[data.columnKey];
                                    if (_.isNil(fieldValidator))
                                        return;
                                    var result = fieldValidator.probe(value);
                                    if (result.isValid) {
                                        return validation.Result.OK(result.parsedValue);
                                    }
                                    return validation.Result.invalid(result.errorMessage, true);
                                }
                            };
                            DatePicker.prototype.drawBoardIfNeeded = function (data) {
                                var self = this, format = _.toLower(data.controlDef.format), formats = utils.dateFormat(format);
                                var board = internal._datePickerBoard[format];
                                if (!_.has(internal._datePickerUpdate, data.rowId)) {
                                    internal._datePickerUpdate[data.rowId] = {};
                                }
                                internal._datePickerUpdate[data.rowId][data.columnKey] = data.update;
                                if (board) {
                                    if (!data.initValue || data.initValue === "")
                                        return "";
                                    var momentObj = moment(data.initValue, formats, true);
                                    return momentObj.isValid() ? momentObj.format(formats[0]) : data.initValue;
                                }
                                var _prtDiv = document.createElement("div");
                                internal._datePickerBoard[format] = _prtDiv.cloneNode();
                                internal._datePickerBoard[format].classList.add("mdatepicker-container");
                                internal._datePickerBoard[format].classList.add("mdatepicker-dropdown");
                                document.body.appendChild(internal._datePickerBoard[format]);
                                var $yearsPick = _prtDiv.cloneNode(), $monthsPick = _prtDiv.cloneNode(), $daysPick = _prtDiv.cloneNode();
                                $yearsPick.classList.add("datepicker-panel");
                                $yearsPick.setAttribute("data-view", "years picker");
                                var ul = document.createElement("ul"), li = document.createElement("li"), $yearsNav = ul.cloneNode(), $years = ul.cloneNode();
                                $yearsPick.appendChild($yearsNav);
                                var $yearsPrev = li.cloneNode(), $yearsCurrent = li.cloneNode(), $yearsNext = li.cloneNode(), $monthsNav, $months, $yearPrev, $yearCurrent, $yearNext;
                                $yearsPrev.setAttribute("data-view", "years prev");
                                $yearsPrev.innerHTML = "‹";
                                $($yearsPrev).on(events.Handler.MOUSE_DOWN, function (evt) {
                                    var mDate = $.data(internal._datePickerBoard[format], "date");
                                    mDate.subtract(10, "y");
                                    $(internal._datePickerBoard[format]).trigger("set", [mDate, 1, 2]);
                                    evt.stopPropagation();
                                });
                                $yearsNav.appendChild($yearsPrev);
                                $yearsCurrent.setAttribute("data-view", "years current");
                                $yearsCurrent.classList.add("disabled");
                                $yearsNav.appendChild($yearsCurrent);
                                $yearsNext.setAttribute("data-view", "years next");
                                $yearsNext.innerHTML = "›";
                                $($yearsNext).on(events.Handler.MOUSE_DOWN, function (evt) {
                                    var mDate = $.data(internal._datePickerBoard[format], "date");
                                    mDate.add(10, "y");
                                    $(internal._datePickerBoard[format]).trigger("set", [mDate, 1, 2]);
                                    evt.stopPropagation();
                                });
                                $yearsNav.appendChild($yearsNext);
                                $years.setAttribute("data-view", "years");
                                $yearsPick.appendChild($years);
                                var _loop_11 = function (i) {
                                    var $year = li.cloneNode();
                                    $year.setAttribute("data-view", "year");
                                    $($year).on(events.Handler.MOUSE_DOWN, function (evt) {
                                        var value = String($.data($year, "value")), $input = $.data(internal._datePickerBoard[format], internal.JQUERY_INPUT_PICKER_ATTACH);
                                        evt.stopPropagation();
                                        if (format === "y") {
                                            $input.val(value);
                                            $input.data(internal.TXT_RAW, value);
                                            var cell_3 = self.cellBelongTo($input);
                                            errors.clear(self.$containedGrid, cell_3);
                                            self.validate(data.controlDef, value, data).success(function (t) {
                                                var updateFn = (internal._datePickerUpdate[cell_3.id] || {})[cell_3.columnKey];
                                                if (_.isFunction(updateFn)) {
                                                    updateFn(value);
                                                    utils.closeDD(internal._datePickerBoard[format]);
                                                }
                                            }).fail(function (errId, isRawMsg) {
                                                errors.set(self.$containedGrid, cell_3, isRawMsg ? errId : nts.uk.resource.getMessage(errId));
                                                var updateFn = (internal._datePickerUpdate[cell_3.id] || {})[cell_3.columnKey];
                                                if (_.isFunction(updateFn)) {
                                                    updateFn(value);
                                                    utils.closeDD(internal._datePickerBoard[format]);
                                                }
                                            }).terminate();
                                            return;
                                        }
                                        var mDate = $.data(internal._datePickerBoard[format], "date");
                                        mDate.year(value);
                                        var val = mDate.format(formats[0]);
                                        $input.val(val);
                                        $yearsPick.classList.add(ntsControls.PICKER_HIDE_CLASS);
                                        $monthsPick.classList.remove(ntsControls.PICKER_HIDE_CLASS);
                                        var cell = self.cellBelongTo($input);
                                        errors.clear(self.$containedGrid, cell);
                                        self.validate(data.controlDef, val, data).success(function (t) {
                                            var updateFn = (internal._datePickerUpdate[cell.id] || {})[cell.columnKey];
                                            if (_.isFunction(updateFn)) {
                                                updateFn(val);
                                            }
                                        }).fail(function (errId, isRawMsg) {
                                            errors.set(self.$containedGrid, cell, isRawMsg ? errId : nts.uk.resource.getMessage(errId));
                                            var updateFn = (internal._datePickerUpdate[cell.id] || {})[cell.columnKey];
                                            if (_.isFunction(updateFn)) {
                                                updateFn(val);
                                            }
                                        }).terminate();
                                        $(internal._datePickerBoard[format]).trigger("set", [mDate, 0, 1]);
                                    });
                                    $years.appendChild($year);
                                    if (i == 0 || i == 11) {
                                        $year.classList.add(ntsControls.MUTED_CLASS);
                                    }
                                };
                                for (var i = 0; i < 12; i++) {
                                    _loop_11(i);
                                }
                                if (format !== "y") {
                                    $yearsPick.classList.add(ntsControls.PICKER_HIDE_CLASS);
                                }
                                internal._datePickerBoard[format].appendChild($yearsPick);
                                if (format === "ym" || format === "ymd") {
                                    $monthsPick.classList.add(ntsControls.PICKER_PANEL_CLASS);
                                    $monthsPick.setAttribute("data-view", "months picker");
                                    $monthsNav = ul.cloneNode();
                                    $months = ul.cloneNode();
                                    $monthsPick.appendChild($monthsNav);
                                    $monthsPick.appendChild($months);
                                    $yearPrev = li.cloneNode();
                                    $yearCurrent = li.cloneNode();
                                    $yearNext = li.cloneNode();
                                    $yearPrev.setAttribute("data-view", "year prev");
                                    $yearPrev.innerHTML = "‹";
                                    $($yearPrev).on(events.Handler.MOUSE_DOWN, function (evt) {
                                        var mDate = $.data(internal._datePickerBoard[format], "date");
                                        mDate.subtract(1, "y");
                                        $(internal._datePickerBoard[format]).trigger("set", [mDate, 1, 1]);
                                        evt.stopPropagation();
                                    });
                                    $monthsNav.appendChild($yearPrev);
                                    $yearCurrent.setAttribute("data-view", "year current");
                                    $($yearCurrent).on(events.Handler.MOUSE_DOWN, function (evt) {
                                        $monthsPick.classList.add(ntsControls.PICKER_HIDE_CLASS);
                                        $yearsPick.classList.remove(ntsControls.PICKER_HIDE_CLASS);
                                        var mDate = $.data(internal._datePickerBoard[format], "date");
                                        $(internal._datePickerBoard[format]).trigger("set", [mDate, 1, 2]);
                                        evt.stopPropagation();
                                    });
                                    $monthsNav.appendChild($yearCurrent);
                                    $yearNext.setAttribute("data-view", "year next");
                                    $yearNext.innerHTML = "›";
                                    $($yearNext).on(events.Handler.MOUSE_DOWN, function (evt) {
                                        var mDate = $.data(internal._datePickerBoard[format], "date");
                                        mDate.add(1, "y");
                                        $(internal._datePickerBoard[format]).trigger("set", [mDate, 1, 1]);
                                        evt.stopPropagation();
                                    });
                                    $monthsNav.appendChild($yearNext);
                                    $months.setAttribute("data-view", "months");
                                    var _loop_12 = function (i) {
                                        var $month = li.cloneNode();
                                        $month.setAttribute("data-view", "month");
                                        $month.innerHTML = i + "月";
                                        $($month).on(events.Handler.MOUSE_DOWN, function (evt) {
                                            var value = $.data($month, "value"), $input = $.data(internal._datePickerBoard[format], internal.JQUERY_INPUT_PICKER_ATTACH);
                                            evt.stopPropagation();
                                            var mDate = $.data(internal._datePickerBoard[format], "date");
                                            mDate.month(value - 1);
                                            if (format === "ym") {
                                                var val_3 = mDate.format(formats[0]);
                                                $input.val(val_3);
                                                $input.data(internal.TXT_RAW, val_3);
                                                var cell_4 = self.cellBelongTo($input);
                                                // Validate
                                                errors.clear(self.$containedGrid, cell_4);
                                                self.validate(data.controlDef, val_3, data).success(function (t) {
                                                    var updateFn = (internal._datePickerUpdate[cell_4.id] || {})[cell_4.columnKey];
                                                    if (_.isFunction(updateFn)) {
                                                        updateFn(val_3);
                                                        utils.closeDD(internal._datePickerBoard[format]);
                                                    }
                                                }).fail(function (errId, isRawMsg) {
                                                    errors.set(self.$containedGrid, cell_4, isRawMsg ? errId : nts.uk.resource.getMessage(errId));
                                                    var updateFn = (internal._datePickerUpdate[cell_4.id] || {})[cell_4.columnKey];
                                                    if (_.isFunction(updateFn)) {
                                                        updateFn(val_3);
                                                        utils.closeDD(internal._datePickerBoard[format]);
                                                    }
                                                }).terminate();
                                                return;
                                            }
                                            var val = mDate.format(formats[0]);
                                            $input.val(val);
                                            var cell = self.cellBelongTo($input);
                                            // Validate
                                            errors.clear(self.$containedGrid, cell);
                                            self.validate(data.controlDef, val, data).success(function (t) {
                                                var updateFn = (internal._datePickerUpdate[cell.id] || {})[cell.columnKey];
                                                if (_.isFunction(updateFn)) {
                                                    updateFn(val);
                                                }
                                            }).fail(function (errId, isRawMsg) {
                                                errors.set(self.$containedGrid, cell, isRawMsg ? errId : nts.uk.resource.getMessage(errId));
                                                var updateFn = (internal._datePickerUpdate[cell.id] || {})[cell.columnKey];
                                                if (_.isFunction(updateFn)) {
                                                    updateFn(val);
                                                }
                                            }).terminate();
                                            $monthsPick.classList.add(ntsControls.PICKER_HIDE_CLASS);
                                            $daysPick.classList.remove(ntsControls.PICKER_HIDE_CLASS);
                                            $(internal._datePickerBoard[format]).trigger("set", [mDate, 0]);
                                        });
                                        $.data($month, "value", i);
                                        $months.appendChild($month);
                                    };
                                    for (var i = 1; i < 13; i++) {
                                        _loop_12(i);
                                    }
                                    if (format === "ymd") {
                                        $monthsPick.classList.add(ntsControls.PICKER_HIDE_CLASS);
                                    }
                                    internal._datePickerBoard[format].appendChild($monthsPick);
                                }
                                if (format === "ymd") {
                                    $daysPick.classList.add(ntsControls.PICKER_PANEL_CLASS);
                                    $daysPick.setAttribute("data-view", "days picker");
                                    internal._datePickerBoard[format].appendChild($daysPick);
                                    var $daysNav = ul.cloneNode(), $week_2 = ul.cloneNode(), $days = ul.cloneNode();
                                    $week_2.setAttribute("data-view", "week");
                                    $days.setAttribute("data-view", "days");
                                    $daysPick.appendChild($daysNav);
                                    $daysPick.appendChild($week_2);
                                    $daysPick.appendChild($days);
                                    var $monthPrev = li.cloneNode(), $monthCurrent = li.cloneNode(), $monthNext = li.cloneNode();
                                    $monthPrev.setAttribute("data-view", "month prev");
                                    $monthPrev.innerHTML = "‹";
                                    $($monthPrev).on(events.Handler.MOUSE_DOWN, function (evt) {
                                        var mDate = $.data(internal._datePickerBoard[format], "date");
                                        if (mDate) {
                                            $(internal._datePickerBoard[format]).trigger("set", [mDate.subtract(1, "M"), 1]);
                                            evt.stopPropagation();
                                        }
                                    });
                                    $monthCurrent.setAttribute("data-view", "month current");
                                    $($monthCurrent).on(events.Handler.MOUSE_DOWN, function (evt) {
                                        $daysPick.classList.add(ntsControls.PICKER_HIDE_CLASS);
                                        $monthsPick.classList.remove(ntsControls.PICKER_HIDE_CLASS);
                                        var mDate = $.data(internal._datePickerBoard[format], "date");
                                        $(internal._datePickerBoard[format]).trigger("set", [mDate, 1, 1]);
                                        evt.stopPropagation();
                                    });
                                    $monthNext.setAttribute("data-view", "month next");
                                    $monthNext.innerHTML = "›";
                                    $($monthNext).on(events.Handler.MOUSE_DOWN, function (evt) {
                                        var mDate = $.data(internal._datePickerBoard[format], "date");
                                        if (mDate) {
                                            $(internal._datePickerBoard[format]).trigger("set", [mDate.add(1, "M"), 1]);
                                            evt.stopPropagation();
                                        }
                                    });
                                    $daysNav.appendChild($monthPrev);
                                    $daysNav.appendChild($monthCurrent);
                                    $daysNav.appendChild($monthNext);
                                    _.forEach(ntsControls.WEEK_DAYS, function (d) {
                                        var $day = li.cloneNode();
                                        $day.innerHTML = d;
                                        $week_2.appendChild($day);
                                    });
                                    var _loop_13 = function (i) {
                                        var $day = li.cloneNode();
                                        $days.appendChild($day);
                                        $($day).on(events.Handler.MOUSE_DOWN, function (evt) {
                                            var value = $.data($day, "value"), $input = $.data(internal._datePickerBoard[format], internal.JQUERY_INPUT_PICKER_ATTACH), mDate = $.data(internal._datePickerBoard[format], "date"), view = $day.getAttribute("data-view");
                                            evt.stopPropagation();
                                            if (_.includes(view, "prev")) {
                                                mDate.subtract(1, "M");
                                                mDate.date(value);
                                                var val_4 = mDate.format(formats[0]);
                                                $input.val(val_4);
                                                var cell_5 = self.cellBelongTo($input);
                                                errors.clear(self.$containedGrid, cell_5);
                                                self.validate(data.controlDef, val_4, data).success(function (t) {
                                                    var updateFn = (internal._datePickerUpdate[cell_5.id] || {})[cell_5.columnKey];
                                                    if (_.isFunction(updateFn)) {
                                                        updateFn(val_4);
                                                    }
                                                }).fail(function (errId, isRawMsg) {
                                                    errors.set(self.$containedGrid, cell_5, isRawMsg ? errId : nts.uk.resource.getMessage(errId));
                                                    var updateFn = (internal._datePickerUpdate[cell_5.id] || {})[cell_5.columnKey];
                                                    if (_.isFunction(updateFn)) {
                                                        updateFn(val_4);
                                                    }
                                                }).terminate();
                                                $(internal._datePickerBoard[format]).trigger("set", [mDate]);
                                            }
                                            else if (_.includes(view, "next")) {
                                                mDate.add(1, "M");
                                                mDate.date(value);
                                                var val_5 = mDate.format(formats[0]);
                                                $input.val(val_5);
                                                var cell_6 = self.cellBelongTo($input);
                                                errors.clear(self.$containedGrid, cell_6);
                                                self.validate(data.controlDef, val_5, data).success(function (t) {
                                                    var updateFn = (internal._datePickerUpdate[cell_6.id] || {})[cell_6.columnKey];
                                                    if (_.isFunction(updateFn)) {
                                                        updateFn(val_5);
                                                    }
                                                }).fail(function (errId, isRawMsg) {
                                                    errors.set(self.$containedGrid, cell_6, isRawMsg ? errId : nts.uk.resource.getMessage(errId));
                                                    var updateFn = (internal._datePickerUpdate[cell_6.id] || {})[cell_6.columnKey];
                                                    if (_.isFunction(updateFn)) {
                                                        updateFn(val_5);
                                                    }
                                                }).terminate();
                                                $(internal._datePickerBoard[format]).trigger("set", [mDate]);
                                            }
                                            else {
                                                mDate.date(value);
                                                var val_6 = mDate.format(formats[0]);
                                                $input.val(val_6);
                                                $input.data(internal.TXT_RAW, val_6);
                                                var cell_7 = self.cellBelongTo($input);
                                                errors.clear(self.$containedGrid, cell_7);
                                                self.validate(data.controlDef, val_6, data).success(function (t) {
                                                    var updateFn = (internal._datePickerUpdate[cell_7.id] || {})[cell_7.columnKey];
                                                    if (_.isFunction(updateFn)) {
                                                        updateFn(val_6);
                                                        utils.closeDD(internal._datePickerBoard[format]);
                                                    }
                                                }).fail(function (errId, isRawMsg) {
                                                    errors.set(self.$containedGrid, cell_7, isRawMsg ? errId : nts.uk.resource.getMessage(errId));
                                                    var updateFn = (internal._datePickerUpdate[cell_7.id] || {})[cell_7.columnKey];
                                                    if (_.isFunction(updateFn)) {
                                                        updateFn(val_6);
                                                        utils.closeDD(internal._datePickerBoard[format]);
                                                    }
                                                }).terminate();
                                            }
                                        });
                                    };
                                    for (var i = 0; i < 42; i++) {
                                        _loop_13(i);
                                    }
                                }
                                utils.closeDD(internal._datePickerBoard[format]);
                                $(internal._datePickerBoard[format]).on("set", function (evt, mDisplayDate, onlyDisplay, board) {
                                    if (!onlyDisplay)
                                        $.data(internal._datePickerBoard[format], "dateSet", mDisplayDate.clone());
                                    if (board > 1) {
                                        var mDateSet_2 = $.data(internal._datePickerBoard[format], "dateSet"), begin_2 = mDisplayDate.year() - 5, end_2;
                                        _.forEach($years.querySelectorAll("li"), function (li, i) {
                                            end_2 = begin_2 + i;
                                            li.innerHTML = end_2;
                                            $.data(li, "value", end_2);
                                            if (mDateSet_2.year() === end_2) {
                                                li.classList.add(ntsControls.PICKED_CLASS);
                                                li.setAttribute("data-view", "year picked");
                                            }
                                            else
                                                li.classList.remove(ntsControls.PICKED_CLASS);
                                        });
                                        $yearsCurrent.innerHTML = begin_2 + "年 - " + end_2 + "年";
                                    }
                                    else if (board) {
                                        var mDateSet = $.data(internal._datePickerBoard[format], "dateSet");
                                        $yearCurrent.innerHTML = mDisplayDate.format(ntsControls.Y);
                                        if (!mDateSet)
                                            return;
                                        _.forEach($months.querySelectorAll("li"), function (li) {
                                            if (li.classList.contains(ntsControls.PICKED_CLASS)) {
                                                li.classList.remove(ntsControls.PICKED_CLASS);
                                                li.setAttribute("data-view", "month");
                                            }
                                        });
                                        if (mDateSet.year() === mDisplayDate.year()) {
                                            var li_2 = $months.querySelector("li:nth-of-type(" + (mDateSet.month() + 1) + ")");
                                            if (li_2) {
                                                li_2.classList.add(ntsControls.PICKED_CLASS);
                                                li_2.setAttribute("data-view", "month picked");
                                            }
                                        }
                                    }
                                    else {
                                        var days_2 = utils.daysBoard(mDisplayDate);
                                        var $dayItems = $days.querySelectorAll("li"), raise_2 = 0;
                                        _.forEach($dayItems, function ($d, i) {
                                            if (days_2[i] === 1)
                                                raise_2++;
                                            $d.innerHTML = days_2[i];
                                            $.data($d, "value", days_2[i]);
                                            if (!raise_2) {
                                                $d.classList.remove(ntsControls.PICKED_CLASS);
                                                $d.classList.add(ntsControls.MUTED_CLASS);
                                                $d.setAttribute("data-view", "day prev");
                                            }
                                            else if (raise_2 > 1) {
                                                $d.classList.remove(ntsControls.PICKED_CLASS);
                                                $d.classList.add(ntsControls.MUTED_CLASS);
                                                $d.setAttribute("data-view", "day next");
                                            }
                                            else if (days_2[i] === mDisplayDate.date()) {
                                                $d.classList.remove(ntsControls.MUTED_CLASS);
                                                if (!onlyDisplay || $.data(internal._datePickerBoard[format], "dateSet").month() === mDisplayDate.month()) {
                                                    $d.classList.add(ntsControls.PICKED_CLASS);
                                                }
                                                $d.setAttribute("data-view", "day picked");
                                            }
                                            else {
                                                $d.classList.remove(ntsControls.MUTED_CLASS);
                                                $d.classList.remove(ntsControls.PICKED_CLASS);
                                                $d.setAttribute("data-view", "day");
                                            }
                                        });
                                        $monthCurrent.innerHTML = mDisplayDate.format(ntsControls.YM);
                                    }
                                    $.data(internal._datePickerBoard[format], "date", mDisplayDate);
                                });
                                if (data.initValue && data.initValue !== "") {
                                    var momentObj = moment(data.initValue, formats, true);
                                    return momentObj.isValid() ? momentObj.format(formats[0]) : data.initValue;
                                }
                                return "";
                            };
                            return DatePicker;
                        }(TextEditor));
                        var Label = /** @class */ (function (_super) {
                            __extends(Label, _super);
                            function Label(action) {
                                var _this = _super.call(this) || this;
                                _this.action = action;
                                return _this;
                            }
                            Label.prototype.containerClass = function () {
                                return "nts-label-container";
                            };
                            Label.prototype.draw = function (data) {
                                var self = this;
                                var $container = $("<div/>").addClass(this.containerClass());
                                var $label = $("<label/>").addClass("ntsLabel").css({ padding: "3px 0px", display: "inline-block", width: "100%" }).text(data.text).appendTo($container);
                                if (self.action && _.isFunction(self.action)) {
                                    $container.on(events.Handler.CLICK, function (evt) {
                                        self.action();
                                    });
                                    $label.css({ cursor: "pointer" });
                                }
                                return $container;
                            };
                            Label.prototype.enable = function ($container) {
                                return;
                            };
                            Label.prototype.disable = function ($container) {
                                return;
                            };
                            return Label;
                        }(NtsControlBase));
                        var LinkLabel = /** @class */ (function (_super) {
                            __extends(LinkLabel, _super);
                            function LinkLabel() {
                                return _super !== null && _super.apply(this, arguments) || this;
                            }
                            LinkLabel.prototype.containerClass = function () {
                                return "nts-link-container";
                            };
                            LinkLabel.prototype.draw = function (data) {
                                return $('<div/>').addClass(this.containerClass()).append($("<a/>")
                                    .addClass("link-button").css({ backgroundColor: "inherit", color: "#0066CC" })
                                    .text(data.initValue).on("click", $.proxy(data.controlDef.click, null, data.rowId, data.columnKey)))
                                    .data("click", data.controlDef.click);
                            };
                            LinkLabel.prototype.enable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", true);
                                $wrapper.find("a").css("color", "#0066CC").on("click", $wrapper.data("click"));
                            };
                            LinkLabel.prototype.disable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", false);
                                $wrapper.find("a").css("color", "#333").off("click");
                            };
                            return LinkLabel;
                        }(NtsControlBase));
                        var FlexImage = /** @class */ (function (_super) {
                            __extends(FlexImage, _super);
                            function FlexImage() {
                                return _super !== null && _super.apply(this, arguments) || this;
                            }
                            FlexImage.prototype.containerClass = function () {
                                return "nts-fleximage-container";
                            };
                            FlexImage.prototype.draw = function (data) {
                                var $container = $("<div/>").addClass(this.containerClass());
                                if (uk.util.isNullOrUndefined(data.initValue) || _.isEmpty(data.initValue))
                                    return $container;
                                var $image = $("<span/>").addClass(data.controlDef.source);
                                if (data.controlDef.click && _.isFunction(data.controlDef.click)) {
                                    $container.on(events.Handler.CLICK, $.proxy(data.controlDef.click, null, data.columnKey, data.rowId))
                                        .css({ cursor: "pointer" }).data(events.Handler.CLICK, data.controlDef.click);
                                }
                                return $container.append($image);
                            };
                            FlexImage.prototype.enable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", true);
                                $wrapper.on(events.Handler.CLICK, $wrapper.data(events.Handler.CLICK));
                            };
                            FlexImage.prototype.disable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", false);
                                $wrapper.off(events.Handler.CLICK);
                            };
                            return FlexImage;
                        }(NtsControlBase));
                        var Image = /** @class */ (function (_super) {
                            __extends(Image, _super);
                            function Image() {
                                return _super !== null && _super.apply(this, arguments) || this;
                            }
                            Image.prototype.containerClass = function () {
                                return "nts-image-container";
                            };
                            Image.prototype.draw = function (data) {
                                return $("<div/>").addClass(this.containerClass()).append($("<span/>").addClass(data.controlDef.source));
                            };
                            Image.prototype.enable = function ($container) {
                            };
                            Image.prototype.disable = function ($container) {
                            };
                            return Image;
                        }(NtsControlBase));
                        var comboBox;
                        (function (comboBox) {
                            function getCopiedValue(cell, copiedText) {
                                var copiedValue;
                                var $comboBox = utils.comboBoxOfCell(cell);
                                if ($comboBox.length > 0) {
                                    var items = $comboBox.igCombo("items");
                                    var textKey_1 = $comboBox.igCombo("option", "textKey");
                                    var valueKey_1 = $comboBox.igCombo("option", "valueKey");
                                    _.forEach(items, function (item) {
                                        if (item.data[textKey_1] === copiedText.trim()) {
                                            copiedValue = item.data[valueKey_1];
                                            return false;
                                        }
                                    });
                                }
                                return copiedValue;
                            }
                            comboBox.getCopiedValue = getCopiedValue;
                        })(comboBox = ntsControls.comboBox || (ntsControls.comboBox = {}));
                    })(ntsControls = ntsGrid.ntsControls || (ntsGrid.ntsControls = {}));
                    var specialColumn;
                    (function (specialColumn_1) {
                        specialColumn_1.CODE = "code";
                        specialColumn_1.COMBO_CODE = "comboCode";
                        function ifTrue(columnSpecialTypes, column, bounceCombos, flatCols) {
                            if (uk.util.isNullOrUndefined(column.ntsType))
                                return;
                            if (column.ntsType === specialColumn_1.CODE) {
                                columnSpecialTypes[column.key] = { type: column.ntsType,
                                    onChange: column.onChange };
                            }
                            else if (column.ntsType === specialColumn_1.COMBO_CODE) {
                                columnSpecialTypes[column.key] = { type: column.ntsType,
                                    onChange: identity };
                                var index = _.findIndex(flatCols, function (o) {
                                    return o.key === column.key;
                                });
                                var b_1;
                                if (index + 1 < flatCols.length && (b_1 = flatCols[index + 1]) !== undefined) {
                                    bounceCombos[b_1.key] = column.key;
                                }
                            }
                        }
                        specialColumn_1.ifTrue = ifTrue;
                        /**
                         * Try column
                         */
                        function tryDo($grid, cell, pastedText, visibleColumnsMap) {
                            var columnTypes = $grid.data(internal.SPECIAL_COL_TYPES);
                            var specialColumn;
                            var columnKey = cell.columnKey;
                            for (var key in columnTypes) {
                                if (key === columnKey) {
                                    specialColumn = columnTypes[key];
                                    break;
                                }
                            }
                            if (uk.util.isNullOrUndefined(specialColumn))
                                return;
                            visibleColumnsMap = !uk.util.isNullOrUndefined(visibleColumnsMap) ? visibleColumnsMap : utils.getVisibleColumnsMap($grid);
                            var isFixedColumn = utils.isFixedColumn(columnKey, visibleColumnsMap);
                            var nextColumn = utils.nextColumnByKey(visibleColumnsMap, columnKey, isFixedColumn);
                            if (uk.util.isNullOrUndefined(nextColumn) || nextColumn.index === 0)
                                return;
                            var origDs = $grid.data(internal.ORIG_DS);
                            var setting = $grid.data(internal.SETTINGS);
                            var idx = setting.descriptor.keyIdxes[cell.id];
                            var prevData;
                            if (origDs && !uk.util.isNullOrUndefined(idx) && (prevData = origDs[idx])) {
                                prevData = prevData[columnKey];
                            }
                            specialColumn.onChange(columnKey, cell.id, pastedText, prevData).done(function (res) {
                                var updatedRow = {};
                                var $gridRow = utils.rowAt(cell);
                                if (specialColumn.type === specialColumn_1.COMBO_CODE) {
                                    var $nextCell = $grid.igGrid("cellById", $gridRow.data("id"), nextColumn.options.key);
                                    var $comboContainer = $nextCell.find("." + ntsControls.COMBO_CLASS);
                                    var ds = $comboContainer.igCombo("option", "dataSource");
                                    var vKey_1 = $comboContainer.igCombo("option", "valueKey");
                                    if (uk.util.isNullOrUndefined(ds))
                                        return;
                                    var valueExists_1;
                                    _.forEach(ds._data, function (item) {
                                        if (item[vKey_1].toString() === String(res.toString().trim())) {
                                            valueExists_1 = true;
                                            return false;
                                        }
                                    });
                                    if (!valueExists_1) {
                                        _.defer(function () {
                                            updatedRow[columnKey] = "";
                                            updating.updateRow($grid, $gridRow.data("id"), updatedRow, undefined, true);
                                        });
                                        return;
                                    }
                                }
                                if (nextColumn.options.dataType === "number") {
                                    updatedRow[nextColumn.options.key] = parseInt(res.toString().trim());
                                }
                                else {
                                    updatedRow[nextColumn.options.key] = String(res.toString().trim());
                                }
                                updating.updateRow($grid, $gridRow.data("id"), updatedRow, undefined, true);
                            }).fail(function (res) {
                            });
                            return true;
                        }
                        specialColumn_1.tryDo = tryDo;
                        function identity(key, id, value) {
                            var dfd = $.Deferred();
                            if (_.isNil(value) || value === "") {
                                dfd.resolve("-1");
                            }
                            else {
                                dfd.resolve(value);
                            }
                            return dfd.promise();
                        }
                    })(specialColumn || (specialColumn = {}));
                    var copyPaste;
                    (function (copyPaste) {
                        var CopyMode;
                        (function (CopyMode) {
                            CopyMode[CopyMode["SINGLE"] = 0] = "SINGLE";
                            CopyMode[CopyMode["MULTIPLE"] = 1] = "MULTIPLE";
                        })(CopyMode || (CopyMode = {}));
                        var PasteMode;
                        (function (PasteMode) {
                            PasteMode[PasteMode["NEW"] = 0] = "NEW";
                            PasteMode[PasteMode["UPDATE"] = 1] = "UPDATE";
                        })(PasteMode || (PasteMode = {}));
                        var Processor = /** @class */ (function () {
                            function Processor(options) {
                                this.pasteInMode = PasteMode.UPDATE;
                                this.options = options;
                            }
                            Processor.addFeatures = function (options) {
                                selection.addFeature(options);
                                return new Processor(options);
                            };
                            /**
                             * $grid to handle copy paste
                             * $target to bind events to
                             */
                            Processor.prototype.chainEvents = function ($grid, $target) {
                                var self = this;
                                self.$grid = $grid;
                                var target = !uk.util.isNullOrUndefined($target) ? $target : $grid;
                                events.Handler.pull(target).focusInWith(self).ctrlCxpWith(self);
                            };
                            /**
                             * Copy
                             */
                            Processor.prototype.copyHandler = function (cut) {
                                var selectedCells = selection.getSelectedCells(this.$grid);
                                var copiedData;
                                var checker = cut ? utils.isCuttableControls : utils.isCopiableControls;
                                nts.uk.ui.block.grayout();
                                if (selectedCells.length === 1) {
                                    this.copyMode = CopyMode.SINGLE;
                                    if (!checker(this.$grid, selectedCells[0].columnKey)) {
                                        nts.uk.ui.block.clear();
                                        return;
                                    }
                                    if (utils.isComboBox(this.$grid, selectedCells[0].columnKey)) {
                                        var $comboBox = utils.comboBoxOfCell(selectedCells[0]);
                                        if ($comboBox.length > 0) {
                                            copiedData = $comboBox.igCombo("text");
                                        }
                                    }
                                    else {
                                        var $cell = selectedCells[0].element;
                                        var origVal = $cell.data(internal.CELL_ORIG_VAL);
                                        copiedData = !uk.util.isNullOrUndefined(origVal) ? origVal : $cell.text();
                                    }
                                }
                                else {
                                    this.copyMode = CopyMode.MULTIPLE;
                                    copiedData = this.converseStructure(selectedCells, cut);
                                }
                                $("#copyHelper").val(copiedData).select();
                                document.execCommand("copy");
                                nts.uk.ui.block.clear();
                                return selectedCells;
                            };
                            /**
                             * Converse structure
                             */
                            Processor.prototype.converseStructure = function (cells, cut) {
                                var self = this;
                                var maxRow = 0;
                                var minRow = 0;
                                var maxColumn = 0;
                                var minColumn = 0;
                                var structure = [];
                                var structData = "";
                                var $tdCell, origVal;
                                var checker = cut ? utils.isCuttableControls : utils.isCopiableControls;
                                _.forEach(cells, function (cell, index) {
                                    var rowIndex = cell.rowIndex;
                                    var columnIndex = utils.getDisplayColumnIndex(self.$grid, cell);
                                    if (index === 0) {
                                        minRow = maxRow = rowIndex;
                                        minColumn = maxColumn = columnIndex;
                                    }
                                    if (rowIndex < minRow)
                                        minRow = rowIndex;
                                    if (rowIndex > maxRow)
                                        maxRow = rowIndex;
                                    if (columnIndex < minColumn)
                                        minColumn = columnIndex;
                                    if (columnIndex > maxColumn)
                                        maxColumn = columnIndex;
                                    if (uk.util.isNullOrUndefined(structure[rowIndex])) {
                                        structure[rowIndex] = {};
                                    }
                                    if (!checker(self.$grid, cell.columnKey))
                                        return;
                                    if (utils.isComboBox(self.$grid, cell.columnKey)) {
                                        var $comboBox = utils.comboBoxOfCell(cell);
                                        if ($comboBox.length > 0) {
                                            structure[rowIndex][columnIndex] = $comboBox.igCombo("text");
                                        }
                                    }
                                    else {
                                        $tdCell = cell.element;
                                        origVal = $tdCell.data(internal.CELL_ORIG_VAL);
                                        structure[rowIndex][columnIndex] = !uk.util.isNullOrUndefined(origVal) ? origVal : $tdCell.text();
                                    }
                                });
                                for (var i = minRow; i <= maxRow; i++) {
                                    for (var j = minColumn; j <= maxColumn; j++) {
                                        if (uk.util.isNullOrUndefined(structure[i]) || uk.util.isNullOrUndefined(structure[i][j])) {
                                            structData += "null";
                                        }
                                        else {
                                            structData += structure[i][j];
                                        }
                                        if (j === maxColumn)
                                            structData += "\n";
                                        else
                                            structData += "\t";
                                    }
                                }
                                return structData;
                            };
                            /**
                             * Cut
                             */
                            Processor.prototype.cutHandler = function () {
                                var self = this;
                                var selectedCells = this.copyHandler(true);
                                var cellsGroup = _.groupBy(selectedCells, "rowIndex");
                                _.forEach(Object.keys(cellsGroup), function (rowIdx) {
                                    var $row = utils.rowAt(cellsGroup[rowIdx][0]);
                                    var updatedRowData = {};
                                    _.forEach(cellsGroup[rowIdx], function (cell) {
                                        if (!utils.isCuttableControls(self.$grid, cell.columnKey))
                                            return;
                                        updatedRowData[cell.columnKey] = "";
                                    });
                                    updating.updateRow(self.$grid, $row.data("id"), updatedRowData);
                                });
                            };
                            /**
                             * Paste
                             */
                            Processor.prototype.pasteHandler = function (evt) {
                                nts.uk.ui.block.grayout();
                                if (this.copyMode === CopyMode.SINGLE) {
                                    this.pasteSingleCellHandler(evt);
                                }
                                else {
                                    this.pasteRangeHandler(evt);
                                }
                                nts.uk.ui.block.clear();
                            };
                            /**
                             * Paste single cell
                             */
                            Processor.prototype.pasteSingleCellHandler = function (evt) {
                                var self = this;
                                var cbData = this.getClipboardContent(evt);
                                var selectedCells = selection.getSelectedCells(this.$grid);
                                var visibleColumnsMap = utils.getVisibleColumnsMap(self.$grid);
                                _.forEach(selectedCells, function (cell, index) {
                                    if (!utils.isPastableControls(self.$grid, cell.columnKey)
                                        || utils.isDisabled($(cell.element)))
                                        return;
                                    if (utils.isEditMode(self.$grid)) {
                                        var editor = self.$grid.igGridUpdating("editorForCell", cell.element);
                                        if (cell.element.has(editor).length > 0) {
                                            var inputs_1 = editor.find("input");
                                            inputs_1[0].value = cbData;
                                            inputs_1[1].value = cbData;
                                            setTimeout(function () {
                                                inputs_1[0].focus();
                                            }, 0);
                                            return;
                                        }
                                    }
                                    var rowIndex = cell.rowIndex;
                                    var columnIndex = cell.index;
                                    var $gridRow = utils.rowAt(cell);
                                    var updatedRow = {};
                                    var columnsGroup = utils.columnsGroupOfCell(cell, visibleColumnsMap);
                                    var columnKey = columnsGroup[columnIndex].key;
                                    // When pasted cell is combox
                                    if (utils.isComboBox(self.$grid, cell.columnKey)) {
                                        var copiedValue = ntsControls.comboBox.getCopiedValue(cell, cbData);
                                        if (!uk.util.isNullOrUndefined(copiedValue)) {
                                            updatedRow[columnKey] = columnsGroup[columnIndex].dataType === "number"
                                                ? parseInt(copiedValue) : copiedValue;
                                        }
                                        else {
                                            // TODO: Handle if texts in item list not map pasted text.
                                            var $combo = cell.element.find(".nts-combo-container");
                                            var $comboInput = $($combo.find("input")[1]);
                                            $comboInput.ntsError("set", "Pasted text not valid");
                                            $combo.igCombo("text", "");
                                            return;
                                        }
                                    }
                                    else {
                                        setTimeout(function () {
                                            specialColumn.tryDo(self.$grid, cell, cbData, visibleColumnsMap);
                                        }, 1);
                                        if (columnsGroup[columnIndex].dataType === "number") {
                                            updatedRow[columnKey] = parseInt(cbData);
                                        }
                                        else {
                                            updatedRow[columnKey] = cbData;
                                        }
                                    }
                                    updating.updateRow(self.$grid, $gridRow.data("id"), updatedRow);
                                });
                            };
                            /**
                             * Paste range
                             */
                            Processor.prototype.pasteRangeHandler = function (evt) {
                                var cbData = this.getClipboardContent(evt);
                                if (utils.isEditMode(this.$grid)) {
                                    cbData = this.processInEditMode(cbData);
                                    this.updateInEditMode(cbData);
                                }
                                else {
                                    cbData = this.process(cbData);
                                    this.pasteInMode === PasteMode.UPDATE ? this.updateWith(cbData) : this.addNew(cbData);
                                }
                            };
                            /**
                             * Get clipboard content
                             */
                            Processor.prototype.getClipboardContent = function (evt) {
                                if (window.clipboardData) {
                                    window.event.returnValue = false;
                                    return window.clipboardData.getData("text");
                                }
                                else {
                                    return evt.originalEvent.clipboardData.getData("text/plain");
                                }
                            };
                            /**
                             * Process in edit mode
                             */
                            Processor.prototype.processInEditMode = function (data) {
                                if (uk.util.isNullOrUndefined(data))
                                    return;
                                return data.split("\n")[0];
                            };
                            /**
                             * Update in edit mode
                             */
                            Processor.prototype.updateInEditMode = function (data) {
                                var selectedCell = selection.getSelectedCell(this.$grid);
                                var rowIndex = selectedCell.rowIndex;
                                var columnIndex = selectedCell.index;
                                var visibleColumnsMap = utils.getVisibleColumnsMap(this.$grid);
                                var updateRow = {};
                                var columnsGroup = utils.columnsGroupOfCell(selectedCell, visibleColumnsMap);
                                var columnKey = columnsGroup[columnIndex].key;
                                updateRow[columnKey] = data;
                                var $gridRow = utils.rowAt(selectedCell);
                                updating.updateRow(this.$grid, $gridRow.data("id"), updateRow);
                            };
                            /**
                             * Process
                             */
                            Processor.prototype.process = function (data) {
                                var dataRows = _.map(data.split("\n"), function (row) {
                                    return row.split("\t");
                                });
                                var rowsCount = dataRows.length;
                                if ((dataRows[rowsCount - 1].length === 1 && dataRows[rowsCount - 1][0] === "")
                                    || dataRows.length === 1 && dataRows[0].length === 1
                                        && (dataRows[0][0] === "" || dataRows[0][0] === "\r")) {
                                    dataRows.pop();
                                }
                                return dataRows;
                            };
                            /**
                             * Update
                             */
                            Processor.prototype.updateWith = function (data) {
                                var self = this;
                                if (!utils.selectable(this.$grid) || !utils.updatable(this.$grid))
                                    return;
                                var selectedCell = selection.getSelectedCell(this.$grid);
                                if (selectedCell === undefined)
                                    return;
                                selectedCell.element.focus();
                                var visibleColumnsMap = utils.getVisibleColumnsMap(self.$grid);
                                var visibleColumns = utils.visibleColumnsFromMap(visibleColumnsMap);
                                var columnIndex = selectedCell.index;
                                var rowIndex = selectedCell.rowIndex;
                                //                    if (!this.pasteable(columnIndex + data[0].length - visibleColumns.length)) return;
                                var targetCol = _.find(visibleColumns, function (column) {
                                    return column.key === selectedCell.columnKey;
                                });
                                if (uk.util.isNullOrUndefined(targetCol))
                                    return;
                                _.forEach(data, function (row, idx) {
                                    var $gridRow;
                                    if (idx === 0)
                                        $gridRow = utils.rowAt(selectedCell);
                                    else
                                        $gridRow = utils.nextNRow(selectedCell, idx);
                                    if (uk.util.isNullOrUndefined($gridRow))
                                        return;
                                    var rowData = {};
                                    var targetIndex = columnIndex;
                                    var targetCell = selectedCell;
                                    var targetColumn = targetCol;
                                    // Errors
                                    var comboErrors = [];
                                    var _loop_14 = function () {
                                        var nextColumn = void 0;
                                        var columnKey = targetColumn.key;
                                        var cellElement = self.$grid.igGrid("cellById", $gridRow.data("id"), columnKey);
                                        if ((!uk.util.isNullOrUndefined(row[i]) && row[i].trim() === "null")
                                            || !utils.isPastableControls(self.$grid, columnKey)
                                            || utils.isDisabled(cellElement)) {
                                            // Go to next column
                                            nextColumn = utils.nextColumn(visibleColumnsMap, targetIndex, targetColumn.fixed);
                                            targetColumn = nextColumn.options;
                                            targetIndex = nextColumn.index;
                                            return "continue";
                                        }
                                        var columnsGroup = utils.columnsGroupOfColumn(targetColumn, visibleColumnsMap);
                                        if (targetIndex > columnsGroup.length - 1)
                                            return "break";
                                        if (utils.isComboBox(self.$grid, columnKey)) {
                                            var cellContent = row[i].trim();
                                            var copiedValue = ntsControls.comboBox.getCopiedValue({ element: cellElement[0] }, cellContent);
                                            if (!uk.util.isNullOrUndefined(copiedValue)) {
                                                rowData[columnKey] = targetColumn.dataType === "number" ? parseInt(copiedValue) : copiedValue;
                                            }
                                            else {
                                                // TODO: Handle if copied text not match any item in combobox list
                                                comboErrors.push({ cell: cellElement, content: cellContent });
                                                // Go to next column
                                                nextColumn = utils.nextColumn(visibleColumnsMap, targetIndex, targetColumn.fixed);
                                                targetColumn = nextColumn.options;
                                                targetIndex = nextColumn.index;
                                                return "continue";
                                            }
                                        }
                                        else {
                                            var cell_8 = {};
                                            cell_8.columnKey = columnKey;
                                            cell_8.element = cellElement;
                                            cell_8.id = $gridRow.data("id");
                                            cell_8.index = targetIndex;
                                            cell_8.row = $gridRow;
                                            cell_8.rowIndex = $gridRow.data("rowIdx");
                                            (function (i) {
                                                setTimeout(function () {
                                                    specialColumn.tryDo(self.$grid, cell_8, row[i].trim(), visibleColumnsMap);
                                                }, 1);
                                            })(i);
                                            if (targetColumn.dataType === "number") {
                                                rowData[columnKey] = parseInt(row[i]);
                                            }
                                            else {
                                                rowData[columnKey] = row[i];
                                            }
                                        }
                                        // Go to next column
                                        nextColumn = utils.nextColumn(visibleColumnsMap, targetIndex, targetColumn.fixed);
                                        targetColumn = nextColumn.options;
                                        targetIndex = nextColumn.index;
                                    };
                                    for (var i = 0; i < row.length; i++) {
                                        var state_1 = _loop_14();
                                        if (state_1 === "break")
                                            break;
                                    }
                                    updating.updateRow(self.$grid, $gridRow.data("id"), rowData);
                                    _.forEach(comboErrors, function (combo) {
                                        setTimeout(function () {
                                            var $container = combo.cell.find(".nts-combo-container");
                                            var $comboInput = $($container.find("input")[1]);
                                            $comboInput.ntsError("set", "Pasted text not valid");
                                            $container.igCombo("text", combo.content);
                                        }, 0);
                                    });
                                });
                            };
                            Processor.prototype.addNew = function (data) {
                                var self = this;
                                //                    var visibleColumns = this.getVisibleColumns();
                                var visibleColumns = null;
                                if (!this.pasteable(data[0].length - visibleColumns.length))
                                    return;
                                _.forEach(data, function (row, idx) {
                                    var rowData = {};
                                    for (var i = 0; i < visibleColumns.length; i++) {
                                        var columnKey = visibleColumns[i].key;
                                        if (visibleColumns[i].dataType === "number") {
                                            rowData[columnKey] = parseInt(row[i]);
                                        }
                                        else {
                                            rowData[columnKey] = row[i];
                                        }
                                    }
                                    self.$grid.igGridUpdating("addRow", rowData);
                                });
                            };
                            Processor.prototype.pasteable = function (excessColumns) {
                                if (excessColumns > 0) {
                                    nts.uk.ui.dialog.alert("Copied table structure doesn't match.");
                                    return false;
                                }
                                return true;
                            };
                            return Processor;
                        }());
                        copyPaste.Processor = Processor;
                        function ifOn($grid, options) {
                            if (options.ntsFeatures === undefined)
                                return;
                            _.forEach(options.ntsFeatures, function (f) {
                                if (f.name === feature.COPY_PASTE) {
                                    Processor.addFeatures(options).chainEvents($grid);
                                    return false;
                                }
                            });
                        }
                        copyPaste.ifOn = ifOn;
                    })(copyPaste || (copyPaste = {}));
                    var events;
                    (function (events) {
                        var Handler = /** @class */ (function () {
                            function Handler($grid, options) {
                                this.$grid = $grid;
                                this.options = options;
                                this.preventEditInError = !uk.util.isNullOrUndefined(options) ? options.preventEditInError : undefined;
                            }
                            Handler.pull = function ($grid, options) {
                                return new Handler($grid, options);
                            };
                            Handler.prototype.turnOn = function ($mainGrid) {
                                if (feature.isEnable(this.options.ntsFeatures, feature.CELL_EDIT)) {
                                    this.filter($mainGrid).onCellUpdate().onCellUpdateKeyUp();
                                }
                                if (!uk.util.isNullOrUndefined(this.options.enter)
                                    && (utils.selectable(this.$grid) || utils.selectable($mainGrid))) {
                                    this.onDirectEnter();
                                }
                                if (utils.selectable(this.$grid) || utils.selectable($mainGrid)) {
                                    this.onSpacePress();
                                }
                                if (feature.isEnable(this.options.features, feature.RESIZING)) {
                                    this.onColumnResizing();
                                }
                            };
                            /**
                             * Handle enter direction.
                             */
                            Handler.prototype.onDirectEnter = function () {
                                // Enter direction
                                var direction = new selection.Direction();
                                if (!direction.to)
                                    direction.to = this.options.enter;
                                this.$grid.on(Handler.KEY_DOWN, $.proxy(direction.bind, direction));
                                this.$grid.data(internal.ENTER_DIRECT, direction);
                                return this;
                            };
                            /**
                             * Handle cell edit.
                             */
                            Handler.prototype.onCellUpdate = function () {
                                var self = this;
                                this.$grid.on(Handler.KEY_DOWN, function (evt) {
                                    if (evt.ctrlKey)
                                        return;
                                    var selectedCell = selection.getSelectedCell(self.$grid);
                                    updating.triggerCellUpdate(evt, selectedCell);
                                });
                                return this;
                            };
                            /**
                             * Handle validation.
                             */
                            Handler.prototype.onCellUpdateKeyUp = function () {
                                var self = this;
                                this.$grid.on(Handler.KEY_UP, function (evt) {
                                    if (evt.ctrlKey)
                                        return;
                                    var selectedCell = selection.getSelectedCell(self.$grid);
                                    updating.onEditCell(evt, selectedCell);
                                });
                                return this;
                            };
                            /**
                             * Handle press space key on combobox.
                             */
                            Handler.prototype.onSpacePress = function () {
                                var self = this;
                                self.$grid.on(Handler.KEY_DOWN, function (evt) {
                                    if (!utils.isSpaceKey(evt))
                                        return;
                                    var selectedCell = selection.getSelectedCell(self.$grid);
                                    if (uk.util.isNullOrUndefined(selectedCell))
                                        return;
                                    var checkbox = $(selectedCell.element).find(".nts-checkbox-container");
                                    if (checkbox.length > 0) {
                                        checkbox.find("input[type='checkbox']").click();
                                    }
                                });
                                return this;
                            };
                            /**
                             * Support copy paste.
                             */
                            Handler.prototype.focusInWith = function (processor) {
                                this.$grid.on(Handler.FOCUS_IN, function (evt) {
                                    if ($("#pasteHelper").length > 0 && $("#copyHelper").length > 0)
                                        return;
                                    var pasteArea = $("<textarea id='pasteHelper'/>").css({ "opacity": 0, "overflow": "hidden" })
                                        .on("paste", $.proxy(processor.pasteHandler, processor));
                                    var copyArea = $("<textarea id='copyHelper'/>").css({ "opacity": 0, "overflow": "hidden" });
                                    $("<div/>").css({ "position": "fixed", "top": -10000, "left": -10000 })
                                        .appendTo($(document.body)).append(pasteArea).append(copyArea);
                                });
                                return this;
                            };
                            /**
                             * Copy, cut, paste events.
                             */
                            Handler.prototype.ctrlCxpWith = function (processor) {
                                this.$grid.on(Handler.KEY_DOWN, function (evt) {
                                    if (evt.ctrlKey && utils.isPasteKey(evt)) {
                                        $("#pasteHelper").focus();
                                    }
                                    else if (evt.ctrlKey && utils.isCopyKey(evt)) {
                                        processor.copyHandler();
                                    }
                                    else if (evt.ctrlKey && utils.isCutKey(evt)) {
                                        //                            processor.cutHandler();
                                    }
                                });
                                return this;
                            };
                            /**
                             * Prevent forwarding events in particular cases.
                             */
                            Handler.prototype.filter = function ($target) {
                                var self = this;
                                var $mainGrid = !uk.util.isNullOrUndefined($target) ? $target : self.$grid;
                                self.$grid.on(Handler.KEY_DOWN, function (evt) {
                                    if (utils.isAlphaNumeric(evt) || utils.isMinusSymbol(evt) || utils.isDeleteKey(evt)) {
                                        var cell = selection.getSelectedCell($mainGrid);
                                        if (cell === undefined || updating.containsNtsControl($(evt.target)))
                                            evt.stopImmediatePropagation();
                                        return;
                                    }
                                    if (utils.isTabKey(evt) && utils.isErrorStatus($mainGrid)) {
                                        evt.preventDefault();
                                        evt.stopImmediatePropagation();
                                    }
                                });
                                if (this.preventEditInError) {
                                    self.$grid[0].addEventListener(Handler.MOUSE_DOWN, function (evt) {
                                        if (utils.isNotErrorCell($mainGrid, evt)) {
                                            evt.preventDefault();
                                            evt.stopImmediatePropagation();
                                        }
                                    }, true);
                                    self.$grid[0].addEventListener(Handler.CLICK, function (evt) {
                                        if (utils.isNotErrorCell($mainGrid, evt)) {
                                            evt.preventDefault();
                                            evt.stopImmediatePropagation();
                                        }
                                    }, true);
                                }
                                return this;
                            };
                            Handler.prototype.onColumnResizing = function () {
                                var self = this;
                                // Not fired on fixed table but main grid (table)
                                self.$grid.on(Handler.COLUMN_RESIZING, function (evt, args) {
                                    columnSize.save(self.$grid, args.columnKey, args.desiredWidth);
                                });
                                return this;
                            };
                            Handler.KEY_DOWN = "keydown";
                            Handler.KEY_UP = "keyup";
                            Handler.FOCUS_IN = "focusin";
                            Handler.BLUR = "blur";
                            Handler.CLICK = "click";
                            Handler.MOUSE_DOWN = "mousedown";
                            Handler.MOUSE_MOVE = "mousemove";
                            Handler.SCROLL = "scroll";
                            Handler.PASTE = "paste";
                            Handler.GRID_EDIT_CELL_STARTED = "iggridupdatingeditcellstarted";
                            Handler.COLUMN_RESIZING = "iggridresizingcolumnresizing";
                            Handler.RECORDS = "iggridvirtualrecordsrender";
                            Handler.CELL_CLICK = "iggridcellclick";
                            Handler.PAGE_INDEX_CHANGE = "iggridpagingpageindexchanging";
                            Handler.PAGE_SIZE_CHANGE = "iggridpagingpagesizechanging";
                            Handler.CONTROL_CHANGE = "ntsgridcontrolvaluechanged";
                            return Handler;
                        }());
                        events.Handler = Handler;
                        /**
                         * Post render process
                         */
                        function afterRendered(options, cbSelectionColumns) {
                            options.rendered = function (evt, ui) {
                                var $grid = $(evt.target);
                                events.Handler.pull($grid, options).turnOn();
                                var cbSelect = $grid.data(internal.CB_SELECTED);
                                if (cbSelect) {
                                    _.merge(cbSelect, cbSelectionColumns);
                                }
                                else {
                                    $grid.data(internal.CB_SELECTED, cbSelectionColumns);
                                }
                                // Bind events for fixed table part
                                var $fixedTbl = fixedColumns.getFixedTable($grid);
                                if ($fixedTbl.length > 0) {
                                    if (feature.isEnable(options.ntsFeatures, feature.COPY_PASTE))
                                        new copyPaste.Processor().chainEvents($grid, $fixedTbl);
                                    events.Handler.pull($fixedTbl, options).turnOn($grid);
                                }
                                // Sheet scroll
                                var sheetConfig = $grid.data(internal.SHEETS);
                                sheet.onScroll($grid);
                                if (!uk.util.isNullOrUndefined(sheetConfig) && !uk.util.isNullOrUndefined(sheetConfig.currentPosition)) {
                                    //                        let displayPos = sheetConfig.displayScrollTop;
                                    $grid.igGrid("virtualScrollTo", sheetConfig.currentPosition);
                                    //                        utils.getScrollContainer($grid).scrollTop(parseInt(sheetConfig.currentPosition));
                                    //                        _.defer(function() {
                                    //                            utils.getDisplayContainer($grid).scrollTop(displayPos);
                                    //                        });
                                }
                                // Set selected cell if any
                                var selectedCell = $grid.data(internal.SELECTED_CELL);
                                if (!uk.util.isNullOrUndefined(selectedCell)) {
                                    var fixedColumns_3 = utils.getVisibleFixedColumns($grid);
                                    if (_.find(fixedColumns_3, function (col) {
                                        return col.key === selectedCell.columnKey;
                                    }) !== undefined) {
                                        setTimeout(function () {
                                            selection.selectCell($grid, selectedCell.rowIndex, selectedCell.index, true);
                                        }, 1);
                                    }
                                }
                                // Mark errors
                                errors.mark($grid);
                                color.styleHeaders($grid, options);
                                if (options.autoFitWindow) {
                                    // Resize grid
                                    settings.setGridSize($grid);
                                }
                                // Load columns size
                                columnSize.load($grid);
                                utils.setChildrenTabIndex($grid, -1);
                            };
                        }
                        events.afterRendered = afterRendered;
                        /**
                         * Cell click
                         */
                        function onCellClick($grid) {
                            $grid.on(Handler.CELL_CLICK, function (evt, ui) {
                                if (!utils.isEditMode($grid) && errors.any({ element: ui.cellElement })) {
                                    _.defer(function () {
                                        var $editor = $(ui.cellElement).find(errors.EDITOR_SELECTOR);
                                        if ($editor.length === 0)
                                            return;
                                        $editor.css(errors.ERROR_STL);
                                    });
                                }
                            });
                        }
                        events.onCellClick = onCellClick;
                    })(events || (events = {}));
                    var validation;
                    (function (validation) {
                        validation.VALIDATORS = "ntsValidators";
                        var H_M_MAX = 60;
                        var ColumnFieldValidator = /** @class */ (function () {
                            function ColumnFieldValidator(name, primitiveValue, options) {
                                this.name = name;
                                this.primitiveValue = primitiveValue;
                                this.options = options;
                            }
                            ColumnFieldValidator.prototype.probe = function (value) {
                                var valueType = this.primitiveValue ? ui.validation.getConstraint(this.primitiveValue).valueType
                                    : this.options.cDisplayType;
                                switch (valueType) {
                                    case "String":
                                        return new nts.uk.ui.validation.StringValidator(this.name, this.primitiveValue, this.options)
                                            .validate(value, this.options);
                                    case "Integer":
                                    case "Decimal":
                                    case "HalfInt":
                                        return new NumberValidator(this.name, valueType, this.primitiveValue, this.options)
                                            .validate(value);
                                    case "Currency":
                                        var opts = new ui.option.CurrencyEditorOption();
                                        opts.grouplength = !_.isNil(this.options.groupLength) ? this.options.groupLength : 3;
                                        opts.decimallength = !_.isNil(this.options.decimalLength) ? this.options.decimalLength : 2;
                                        opts.currencyformat = this.options.currencyFormat ? this.options.currencyFormat : "JPY";
                                        opts.required = this.options.required;
                                        opts.min = this.options.min;
                                        opts.max = this.options.max;
                                        opts.integer = this.options.integer;
                                        return new NumberValidator(this.name, valueType, this.primitiveValue, opts)
                                            .validate(value);
                                    case "Time":
                                        this.options.mode = "time";
                                        return new nts.uk.ui.validation.TimeValidator(this.name, this.primitiveValue, this.options)
                                            .validate(value);
                                    case "Clock":
                                        // Don't merge with time type.
                                        this.options.mode = "time";
                                        return new nts.uk.ui.validation.TimeValidator(this.name, this.primitiveValue, this.options)
                                            .validate(value);
                                    case "TimeWithDay":
                                        this.options.timeWithDay = true;
                                        var result = new ui.validation.TimeWithDayValidator(this.name, this.primitiveValue, this.options)
                                            .validate(value);
                                        if (result.isValid) {
                                            var formatter = new uk.text.TimeWithDayFormatter(this.options);
                                            result.parsedValue = formatter.format(result.parsedValue);
                                        }
                                        return result;
                                    case "Date":
                                        return new DateValidator(this.name, this.primitiveValue, this.options).validate(value);
                                }
                            };
                            return ColumnFieldValidator;
                        }());
                        validation.ColumnFieldValidator = ColumnFieldValidator;
                        validation.MIN_DATE = moment.utc("1900/01/01", "YYYY/MM/DD", true);
                        validation.MAX_DATE = moment.utc("9999/12/31", "YYYY/MM/DD", true);
                        var DateValidator = /** @class */ (function () {
                            function DateValidator(name, primitiveValueName, option) {
                                this.name = name;
                                this.constraint = ui.validation.getConstraint(primitiveValueName);
                                if (_.isNil(this.constraint)) {
                                    this.constraint = {};
                                    this.constraint.min = option && !_.isNil(option.min) ? option.min : validation.MIN_DATE;
                                    this.constraint.max = option && !_.isNil(option.max) ? option.max : validation.MAX_DATE;
                                }
                                else {
                                    if (this.constraint.min === "" || _.isNil(this.constraint.min)) {
                                        this.constraint.min = validation.MIN_DATE;
                                    }
                                    if (this.constraint.max === "" || _.isNil(this.constraint.max)) {
                                        this.constraint.max = validation.MAX_DATE;
                                    }
                                }
                                this.msgId = "FND_E_DATE_" + _.toUpper(option.pickerType);
                                this.formats = utils.dateFormat(_.toLower(option.pickerType));
                                this.required = (option && option.required) || this.constraint.required;
                            }
                            DateValidator.prototype.validate = function (date) {
                                var self = this, result = new ui.validation.ValidationResult();
                                if (_.isNil(date) || date === "" || (date instanceof moment && date._i === "")) {
                                    if (this.required) {
                                        result.fail(nts.uk.resource.getMessage('FND_E_REQ_INPUT', [self.name]), 'FND_E_REQ_INPUT');
                                    }
                                    else
                                        result.success("");
                                    return result;
                                }
                                var mDate = moment.utc(date, self.formats, true);
                                if (!mDate.isValid() || mDate.isBefore(self.constraint.min) || mDate.isAfter(self.constraint.max)) {
                                    var min = self.constraint.min, max = self.constraint.max;
                                    if (!(self.constraint.min instanceof moment))
                                        min = moment(min, self.formats, true);
                                    if (!(self.constraint.max instanceof moment))
                                        max = moment(max, self.formats, true);
                                    result.fail(nts.uk.resource.getMessage(self.msgId, [self.name, min.format(self.formats[0]), max.format(self.formats[0])]), self.msgId);
                                }
                                else {
                                    result.success(mDate.format(self.formats[0]));
                                }
                                return result;
                            };
                            return DateValidator;
                        }());
                        var NumberValidator = /** @class */ (function () {
                            function NumberValidator(name, displayType, primitiveValue, options) {
                                this.name = name;
                                this.displayType = displayType;
                                this.primitiveValue = primitiveValue;
                                this.options = options;
                            }
                            NumberValidator.prototype.validate = function (text) {
                                var self = this;
                                if (self.primitiveValue) {
                                    return new nts.uk.ui.validation.NumberValidator(self.name, self.primitiveValue, self.options).validate(text);
                                }
                                if (self.displayType === "Currency") {
                                    text = uk.text.replaceAll(text, self.options.groupseperator, "");
                                }
                                var result = new ui.validation.ValidationResult();
                                if ((uk.util.isNullOrUndefined(text) || text.length === 0)) {
                                    if (self.options && self.options.required) {
                                        result.fail(nts.uk.resource.getMessage('MsgB_1', [self.name]), 'MsgB_1');
                                        return result;
                                    }
                                    if (!self.options || (self.options && !self.options.required)) {
                                        result.success(text);
                                        return result;
                                    }
                                }
                                var message = {};
                                var isValid;
                                if (self.displayType === "HalfInt") {
                                    isValid = uk.ntsNumber.isHalfInt(text, message);
                                }
                                else if (self.displayType === "Integer") {
                                    isValid = uk.ntsNumber.isNumber(text, false, self.options, message);
                                }
                                else if (self.displayType === "Decimal" || self.displayType === "Currency") {
                                    isValid = uk.ntsNumber.isNumber(text, true, self.options, message);
                                    if (self.options.integer && _.indexOf(text, ".") > -1)
                                        isValid = false;
                                }
                                var min = 0, max = 999999999;
                                var value = parseFloat(text);
                                if (!uk.util.isNullOrUndefined(self.options.min)) {
                                    min = self.options.min;
                                    if (value < min)
                                        isValid = false;
                                }
                                if (!uk.util.isNullOrUndefined(self.options.max)) {
                                    max = self.options.max;
                                    if (value > max)
                                        isValid = false;
                                }
                                if (!isValid) {
                                    result.fail(uk.resource.getMessage(message.id, [self.name, min, max]), message.id);
                                    return result;
                                }
                                var formatter = new uk.text.NumberFormatter({ option: self.options });
                                var formatted = formatter.format(text);
                                result.success(self.displayType === "Currency" ? formatted : value + "");
                                return result;
                            };
                            return NumberValidator;
                        }());
                        var Result = /** @class */ (function () {
                            function Result(isValid, formatted, messageId, isRawMessage) {
                                this.onSuccess = $.noop;
                                this.onFail = $.noop;
                                this.isValid = isValid;
                                this.formatted = formatted;
                                this.errorMessageId = messageId;
                                this.isRawMessage = isRawMessage;
                            }
                            Result.OK = function (formatted) {
                                return new Result(true, formatted);
                            };
                            Result.invalid = function (msgId, isRawMessage) {
                                return new Result(false, null, msgId, isRawMessage);
                            };
                            Result.prototype.success = function (cnt) {
                                this.onSuccess = cnt;
                                return this;
                            };
                            Result.prototype.fail = function (cnt) {
                                this.onFail = cnt;
                                return this;
                            };
                            Result.prototype.terminate = function () {
                                var self = this;
                                if (self.isValid && self.onSuccess && _.isFunction(self.onSuccess)) {
                                    self.onSuccess(self.formatted);
                                }
                                else if (!self.isValid && self.onFail && _.isFunction(self.onFail)) {
                                    self.onFail(self.errorMessageId, self.isRawMessage);
                                }
                            };
                            return Result;
                        }());
                        validation.Result = Result;
                        function getValidators(columnsDef) {
                            var validators = {};
                            _.forEach(columnsDef, function (def) {
                                if (def.constraint === undefined)
                                    return;
                                validators[def.key] = new ColumnFieldValidator(def.headerText, def.constraint.primitiveValue, def.constraint);
                            });
                            return validators;
                        }
                        function scanValidators($grid, columnsDef) {
                            var columns = utils.analyzeColumns(columnsDef);
                            $grid.data(validation.VALIDATORS, getValidators(columns));
                            return columns;
                        }
                        validation.scanValidators = scanValidators;
                        function parseTime(value, format) {
                            if (uk.ntsNumber.isNumber(value, false)) {
                                if (value <= H_M_MAX)
                                    return Result.OK(value);
                                var hh = Math.floor(value / 100);
                                var mm = value % 100;
                                if (mm >= H_M_MAX)
                                    return Result.invalid("NEED_MSG_INVALID_TIME_FORMAT");
                                return Result.OK(hh + ":" + mm.toLocaleString("en-US", { minimumIntegerDigits: 2, useGrouping: false }));
                            }
                            var formatRes = uk.time.applyFormat(format, value, undefined);
                            if (!formatRes)
                                return Result.invalid("NEED_MSG_INVALID_TIME_FORMAT");
                            return Result.OK(formatRes);
                        }
                        validation.parseTime = parseTime;
                        function getValueType($grid, columnKey) {
                            var validators = $grid.data(validation.VALIDATORS);
                            if (!validators || !validators[columnKey])
                                return;
                            var column = validators[columnKey];
                            return column.primitiveValue ? ui.validation.getConstraint(column.primitiveValue).valueType
                                : column.options.cDisplayType;
                        }
                        validation.getValueType = getValueType;
                        function getGroupSeparator($grid, columnKey) {
                            var validators = $grid.data(validation.VALIDATORS);
                            if (!validators || !validators[columnKey])
                                return;
                            return validators[columnKey].options.groupseperator;
                        }
                        validation.getGroupSeparator = getGroupSeparator;
                    })(validation || (validation = {}));
                    var errors;
                    (function (errors) {
                        errors.HAS_ERROR = "hasError";
                        errors.ERROR_STL = { "border-color": "#ff6666" };
                        errors.NO_ERROR_STL = { "border-color": "" };
                        errors.EDITOR_SELECTOR = "div.ui-igedit-container";
                        var GridCellError = /** @class */ (function () {
                            function GridCellError(grid, rowId, columnKey, message) {
                                this.grid = grid;
                                this.rowId = rowId;
                                this.columnKey = columnKey;
                                this.message = message;
                                this.setColumnName();
                            }
                            GridCellError.prototype.setColumnName = function () {
                                var _this = this;
                                var allCols = utils.getColumns(this.grid);
                                if (!allCols)
                                    return;
                                var col = allCols.filter(function (c) { return c.key === _this.columnKey; });
                                if (col.length > 0) {
                                    this.columnName = col[0].headerText;
                                }
                            };
                            GridCellError.prototype.equals = function (err) {
                                if (!this.grid.is(err.grid))
                                    return false;
                                if (this.rowId !== err.rowId)
                                    return false;
                                if (this.columnKey !== err.columnKey)
                                    return false;
                                return true;
                            };
                            return GridCellError;
                        }());
                        errors.GridCellError = GridCellError;
                        function addCellError($grid, error) {
                            var gridErrors = $grid.data(internal.ERRORS);
                            if (!gridErrors) {
                                $grid.data(internal.ERRORS, [error]);
                                return;
                            }
                            if (gridErrors.some(function (e) {
                                return e.equals(error);
                            }))
                                return;
                            gridErrors.push(error);
                        }
                        function removeCellError($grid, rowId, key) {
                            var gridErrors = $grid.data(internal.ERRORS);
                            if (!gridErrors)
                                return;
                            _.remove(gridErrors, function (e) {
                                return $grid.is(e.grid) && rowId === e.rowId && key === e.columnKey;
                            });
                        }
                        function mark($grid) {
                            var errorsLog = $grid.data(internal.ERRORS_LOG);
                            if (uk.util.isNullOrUndefined(errorsLog))
                                return;
                            var sheets = $grid.data(internal.SHEETS);
                            var sheetErrors = errorsLog[sheets.currentSheet];
                            if (uk.util.isNullOrUndefined(sheetErrors))
                                return;
                            _.forEach(sheetErrors, function (cell) {
                                var $cell = $grid.igGrid("cellById", cell.id, cell.columnKey);
                                decorate($cell);
                            });
                        }
                        errors.mark = mark;
                        function decorate($cell) {
                            $cell.addClass(errors.HAS_ERROR);
                            $cell.css(errors.ERROR_STL);
                            var $editor = $cell.find(errors.EDITOR_SELECTOR);
                            if ($editor.length > 0)
                                $editor.css(errors.ERROR_STL);
                        }
                        function set($grid, cell, message) {
                            if (!cell || !cell.element || any(cell))
                                return;
                            var $cell = $(cell.element);
                            decorate($cell);
                            var errorDetails = createErrorInfos($grid, cell, message);
                            var setting = $grid.data(internal.SETTINGS);
                            if (setting.errorsOnPage) {
                                ui.errors.addCell(errorDetails);
                            }
                            addCellError($grid, errorDetails);
                            addErrorInSheet($grid, cell);
                        }
                        errors.set = set;
                        function createErrorInfos($grid, cell, message) {
                            var record = $grid.igGrid("findRecordByKey", cell.id);
                            var setting = $grid.data(internal.SETTINGS);
                            var error = new GridCellError($grid, cell.id, cell.columnKey, message);
                            // Error column headers
                            var headers;
                            if (setting.errorsOnPage) {
                                var columns = ko.toJS(ui.errors.errorsViewModel().option().headers());
                                if (columns) {
                                    headers = columns.filter(function (c) { return c.visible; }).map(function (c) { return c.name; });
                                }
                            }
                            else {
                                headers = setting.errorColumns;
                            }
                            _.forEach(headers, function (header) {
                                if (uk.util.isNullOrUndefined(record[header])
                                    || !uk.util.isNullOrUndefined(error[header]))
                                    return;
                                error[header] = record[header];
                            });
                            return error;
                        }
                        function clear($grid, cell) {
                            if (!cell || !cell.element || !any(cell))
                                return;
                            var $cell = $(cell.element);
                            $cell.removeClass(errors.HAS_ERROR);
                            $cell.css(errors.NO_ERROR_STL);
                            var $editor = $cell.find(errors.EDITOR_SELECTOR);
                            if ($editor.length > 0)
                                $editor.css(errors.NO_ERROR_STL);
                            var setting = $grid.data(internal.SETTINGS);
                            if (setting.errorsOnPage) {
                                ui.errors.removeCell($grid, cell.id, cell.columnKey);
                            }
                            removeCellError($grid, cell.id, cell.columnKey);
                            removeErrorFromSheet($grid, cell);
                        }
                        errors.clear = clear;
                        function any(cell) {
                            return cell.element && $(cell.element).hasClass(errors.HAS_ERROR);
                        }
                        errors.any = any;
                        function addErrorInSheet($grid, cell) {
                            var errorsLog = $grid.data(internal.ERRORS_LOG) || {};
                            var sheets = $grid.data(internal.SHEETS);
                            if (uk.util.isNullOrUndefined(errorsLog[sheets.currentSheet])) {
                                errorsLog[sheets.currentSheet] = [];
                            }
                            errorsLog[sheets.currentSheet].push(cell);
                            $grid.data(internal.ERRORS_LOG, errorsLog);
                        }
                        function removeErrorFromSheet($grid, cell) {
                            var errorsLog = $grid.data(internal.ERRORS_LOG);
                            if (uk.util.isNullOrUndefined(errorsLog))
                                return;
                            var sheets = $grid.data(internal.SHEETS);
                            var sheetErrors = errorsLog[sheets.currentSheet];
                            if (uk.util.isNullOrUndefined(sheetErrors)) {
                                removeErrorBasedOtherSheet(sheets, errorsLog, cell);
                                return;
                            }
                            var cellErrorIdx;
                            _.forEach(sheetErrors, function (errorCell, i) {
                                if (cellEquals(errorCell, cell)) {
                                    cellErrorIdx = i;
                                    return false;
                                }
                            });
                            if (!uk.util.isNullOrUndefined(cellErrorIdx)) {
                                errorsLog[sheets.currentSheet].splice(cellErrorIdx, 1);
                            }
                            else {
                                removeErrorBasedOtherSheet(sheets, errorsLog, cell);
                            }
                        }
                        function removeErrorBasedOtherSheet(sheets, errorsLog, cell) {
                            var sheetsIn = sheets.columnsInSheetImme[cell.columnKey];
                            if (sheetsIn && sheetsIn.size > 1) {
                                _.forEach(Array.from(sheetsIn), function (s, i) {
                                    if (s !== sheets.currentSheet) {
                                        var oErrs = errorsLog[s];
                                        if (oErrs) {
                                            _.remove(oErrs, function (e) { return cellEquals(e, cell); });
                                        }
                                    }
                                });
                            }
                        }
                        function markIfError($grid, cell) {
                            var errorsLog = $grid.data(internal.ERRORS_LOG);
                            if (uk.util.isNullOrUndefined(errorsLog))
                                return;
                            var sheets = $grid.data(internal.SHEETS);
                            var sheetErrors = errorsLog[sheets.currentSheet];
                            if (uk.util.isNullOrUndefined(sheetErrors)) {
                                markBasedOtherSheet(sheets, errorsLog, cell);
                                return;
                            }
                            var marked = false;
                            _.forEach(sheetErrors, function (c) {
                                if (cellEquals(c, cell)) {
                                    decorate($(cell.element));
                                    marked = true;
                                    return false;
                                }
                            });
                            if (!marked) {
                                markBasedOtherSheet(sheets, errorsLog, cell);
                            }
                        }
                        errors.markIfError = markIfError;
                        function markBasedOtherSheet(sheets, errorsLog, cell) {
                            var sheetsIn = sheets.columnsInSheetImme[cell.columnKey];
                            if (sheetsIn && sheetsIn.size > 1) {
                                _.forEach(Array.from(sheetsIn), function (s, i) {
                                    if (s !== sheets.currentSheet) {
                                        var marked_1 = false;
                                        _.forEach(errorsLog[s], function (c) {
                                            if (cellEquals(c, cell)) {
                                                decorate($(cell.element));
                                                marked_1 = true;
                                                return false;
                                            }
                                        });
                                        if (marked_1)
                                            return false;
                                    }
                                });
                            }
                        }
                        function cellEquals(one, other) {
                            if (one.columnKey !== other.columnKey)
                                return false;
                            if (one.id !== other.id)
                                return false;
                            //                if (one.rowIndex !== other.rowIndex) return false;
                            return true;
                        }
                    })(errors || (errors = {}));
                    var color;
                    (function (color) {
                        color.Error = "ntsgrid-error";
                        color.Alarm = "ntsgrid-alarm";
                        color.ManualEditTarget = "ntsgrid-manual-edit-target";
                        color.ManualEditOther = "ntsgrid-manual-edit-other";
                        color.Reflect = "ntsgrid-reflect";
                        color.Calculation = "ntsgrid-calc";
                        color.Disable = "ntsgrid-disable";
                        var CellFormatter = /** @class */ (function () {
                            function CellFormatter($grid, features, ntsFeatures, flatCols) {
                                this.$grid = $grid;
                                // Cell
                                this.cellStateFeatureDef = feature.find(ntsFeatures, feature.CELL_STATE);
                                this.setStatesTable(ntsFeatures);
                                // Row
                                this.rowDisableFeatureDef = feature.find(ntsFeatures, feature.ROW_STATE);
                                if (!uk.util.isNullOrUndefined(this.rowDisableFeatureDef)
                                    && !uk.util.isNullOrUndefined(this.rowDisableFeatureDef.rows)) {
                                    this.disableRows = _.groupBy(this.rowDisableFeatureDef.rows, "rowId");
                                    this.addDisableRows(features, ntsFeatures, flatCols);
                                }
                                // Text color
                                this.textColorFeatureDef = feature.find(ntsFeatures, feature.TEXT_COLOR);
                                this.setTextColorsTableMap(ntsFeatures);
                                // Text style
                                this.textStyleFeatureDef = feature.find(ntsFeatures, feature.TEXT_STYLE);
                                this.setTextStylesTableMap();
                            }
                            /**
                             * Add disable rows.
                             */
                            CellFormatter.prototype.addDisableRows = function (features, ntsFeatures, flatCols) {
                                var self = this;
                                var sheetMng = self.$grid.data(internal.SHEETS);
                                var columns;
                                if (sheetMng) {
                                    columns = sheetMng.sheetColumns[sheetMng.currentSheet];
                                }
                                else {
                                    var sheetFt_1 = feature.find(ntsFeatures, feature.SHEET);
                                    if (sheetFt_1) {
                                        var sheetDf_1 = sheetFt_1.sheets.filter(function (s) {
                                            return s.name === sheetFt_1.initialDisplay;
                                        })[0];
                                        if (!sheetDf_1)
                                            return;
                                        self.rowDisableFeatureDef.rows.forEach(function (i) {
                                            sheetDf_1.columns.forEach(function (c) {
                                                self.addDisableState(i.rowId, c);
                                            });
                                        });
                                        var columnFixingFt_1 = feature.find(features, feature.COLUMN_FIX);
                                        if (columnFixingFt_1) {
                                            self.rowDisableFeatureDef.rows.forEach(function (i) {
                                                columnFixingFt_1.columnSettings.forEach(function (c) {
                                                    self.addDisableState(i.rowId, c.columnKey);
                                                });
                                            });
                                        }
                                        return;
                                    }
                                    else {
                                        columns = flatCols;
                                    }
                                }
                                if (columns) {
                                    var setCellDisable_1 = function (cols) {
                                        cols.forEach(function (c) {
                                            if (c.group) {
                                                setCellDisable_1(c.group);
                                                return;
                                            }
                                            self.rowDisableFeatureDef.rows.forEach(function (i) {
                                                self.addDisableState(i.rowId, c.key);
                                            });
                                        });
                                    };
                                    setCellDisable_1(columns);
                                }
                            };
                            /**
                             * Set states table
                             */
                            CellFormatter.prototype.setStatesTable = function (features) {
                                var _this = this;
                                var self = this;
                                if (uk.util.isNullOrUndefined(this.cellStateFeatureDef))
                                    return;
                                var rowIdName = this.cellStateFeatureDef.rowId;
                                var columnKeyName = this.cellStateFeatureDef.columnKey;
                                var stateName = this.cellStateFeatureDef.state;
                                this.statesTable = this.cellStateFeatureDef.states;
                                this.rowStates = _.groupBy(this.statesTable, rowIdName);
                                _.forEach(this.rowStates, function (value, key) {
                                    _this.rowStates[key] = _.groupBy(_this.rowStates[key], function (item) {
                                        if (item[stateName].indexOf(color.Disable) > -1) {
                                            self.addDisableState(item[rowIdName], item[columnKeyName]);
                                        }
                                        return item[columnKeyName];
                                    });
                                });
                            };
                            /**
                             * Set text colors
                             */
                            CellFormatter.prototype.setTextColorsTableMap = function (features) {
                                var _this = this;
                                if (uk.util.isNullOrUndefined(this.textColorFeatureDef))
                                    return;
                                var rowIdName = this.textColorFeatureDef.rowId;
                                var columnKeyName = this.textColorFeatureDef.columnKey;
                                var colorName = this.textColorFeatureDef.color;
                                var colorsTable = this.textColorFeatureDef.colorsTable;
                                this.textColorsTable = _.groupBy(colorsTable, rowIdName);
                                _.forEach(this.textColorsTable, function (value, key) {
                                    _this.textColorsTable[key] = _.groupBy(_this.textColorsTable[key], function (item) {
                                        return item[columnKeyName];
                                    });
                                });
                            };
                            /**
                             * Set text styles.
                             */
                            CellFormatter.prototype.setTextStylesTableMap = function () {
                                var _this = this;
                                if (uk.util.isNullOrUndefined(this.textStyleFeatureDef))
                                    return;
                                var rowIdName = this.textStyleFeatureDef.rowId;
                                var columnKeyName = this.textStyleFeatureDef.columnKey;
                                var styleName = this.textStyleFeatureDef.style;
                                var stylesTable = this.textStyleFeatureDef.styles;
                                this.textStylesTable = _.groupBy(stylesTable, rowIdName);
                                _.forEach(this.textStylesTable, function (value, key) {
                                    _this.textStylesTable[key] = _.groupBy(_this.textStylesTable[key], columnKeyName);
                                });
                            };
                            /**
                             * Format textbox.
                             */
                            CellFormatter.prototype.format = function (column, notTb) {
                                var self = this;
                                if (uk.util.isNullOrUndefined(this.cellStateFeatureDef)
                                    || column.formatter !== undefined)
                                    return column;
                                var rowIdName = this.cellStateFeatureDef.rowId;
                                var columnKeyName = this.cellStateFeatureDef.columnKey;
                                var stateName = this.cellStateFeatureDef.state;
                                var statesTable = this.cellStateFeatureDef.states;
                                column.formatter = function (value, rowObj) {
                                    if (uk.util.isNullOrUndefined(rowObj))
                                        return value;
                                    var origValue = value;
                                    if (!notTb && column.constraint) {
                                        var constraint = column.constraint;
                                        var valueType = constraint.primitiveValue ? ui.validation.getConstraint(constraint.primitiveValue).valueType
                                            : constraint.cDisplayType;
                                        if (!uk.util.isNullOrUndefined(value) && !_.isEmpty(value)) {
                                            if (valueType === "TimeWithDay") {
                                                var minutes = uk.time.minutesBased.clock.dayattr.parseString(value).asMinutes;
                                                var timeOpts = { timeWithDay: true };
                                                var formatter = new uk.text.TimeWithDayFormatter(timeOpts);
                                                if (!uk.util.isNullOrUndefined(minutes)) {
                                                    try {
                                                        value = formatter.format(minutes);
                                                    }
                                                    catch (e) { }
                                                }
                                            }
                                            else if (valueType === "Clock") {
                                                var minutes = uk.time.minutesBased.clock.dayattr.parseString(value).asMinutes;
                                                var timeOpts = { timeWithDay: false };
                                                var formatter = new uk.text.TimeWithDayFormatter(timeOpts);
                                                if (!uk.util.isNullOrUndefined(minutes)) {
                                                    try {
                                                        value = formatter.format(minutes);
                                                    }
                                                    catch (e) { }
                                                }
                                            }
                                            else if (valueType === "Currency") {
                                                var currencyOpts = new ui.option.CurrencyEditorOption();
                                                currencyOpts.grouplength = !_.isNil(constraint.groupLength) ? constraint.groupLength : 3;
                                                currencyOpts.decimallength = !_.isNil(constraint.decimalLength) ? constraint.decimalLength : 2;
                                                currencyOpts.currencyformat = constraint.currencyFormat ? constraint.currencyFormat : "JPY";
                                                var groupSeparator = constraint.groupSeparator || ",";
                                                var rawValue = uk.text.replaceAll(value, groupSeparator, "");
                                                var formatter = new uk.text.NumberFormatter({ option: currencyOpts });
                                                var numVal = Number(rawValue);
                                                if (!isNaN(numVal))
                                                    value = formatter.format(numVal);
                                                else
                                                    value = rawValue;
                                            }
                                        }
                                    }
                                    var _self = self;
                                    setTimeout(function () {
                                        var $gridCell = internal.getCellById(self.$grid, rowObj[self.$grid.igGrid("option", "primaryKey")], column.key);
                                        if (!$gridCell)
                                            return;
                                        $gridCell.data(internal.CELL_ORIG_VAL, origValue);
                                        var $tr = $gridCell.closest("tr");
                                        var cell = {
                                            columnKey: column.key,
                                            element: $gridCell[0],
                                            rowIndex: $tr.data("rowIdx"),
                                            id: $tr.data("id")
                                        };
                                        // If cell has error, mark it
                                        errors.markIfError(self.$grid, cell);
                                        color.markIfEdit(self.$grid, cell);
                                        //                            let aColumn = _.find(_self.colorFeatureDef, function(col: any) {
                                        //                                return col.key === column.key;
                                        //                            });
                                        //
                                        //                            if (util.isNullOrUndefined(aColumn)) return;
                                        //                            let cellColor = aColumn.map(aColumn.parse(value));
                                        //                            $gridCell.css("background-color", cellColor);
                                        // Disable row
                                        if (!uk.util.isNullOrUndefined(self.disableRows)) {
                                            var disableRow = self.disableRows[cell.id];
                                            if (!uk.util.isNullOrUndefined(disableRow) && disableRow.length > 0 && disableRow[0].disable) {
                                                $gridCell.addClass(color.Disable);
                                                //                                    self.addDisableState(cell.id, cell.columnKey);
                                            }
                                        }
                                        // Set cell states
                                        if (!uk.util.isNullOrUndefined(self.rowStates) && !uk.util.isNullOrUndefined(rowIdName)
                                            && !uk.util.isNullOrUndefined(columnKeyName) && !uk.util.isNullOrUndefined(stateName)
                                            && !uk.util.isNullOrUndefined(self.rowStates[cell.id])) {
                                            var cellState = self.rowStates[cell.id][column.key];
                                            if (uk.util.isNullOrUndefined(cellState) || cellState.length === 0)
                                                return;
                                            _.forEach(cellState[0][stateName], function (stt) {
                                                $gridCell.addClass(stt);
                                                //                                    if (stt === color.Disable) self.addDisableState(cell.id, cell.columnKey);
                                            });
                                        }
                                    }, 0);
                                    return value;
                                };
                                return column;
                            };
                            /**
                             * Add disable state.
                             */
                            CellFormatter.prototype.addDisableState = function (id, key) {
                                var self = this;
                                var cbSelect = self.$grid.data(internal.CB_SELECTED);
                                if (!cbSelect) {
                                    cbSelect = {};
                                    self.$grid.data(internal.CB_SELECTED, cbSelect);
                                }
                                var cbColConf = cbSelect[key];
                                if (!cbColConf) {
                                    var ds = new Set();
                                    ds.add(id);
                                    cbSelect[key] = { disableRows: ds };
                                    return;
                                }
                                if (!cbColConf.disableRows) {
                                    cbColConf.disableRows = new Set();
                                }
                                cbColConf.disableRows.add(id);
                            };
                            /**
                             * Style common controls.
                             */
                            CellFormatter.prototype.style = function ($grid, cell) {
                                var self = this;
                                if (uk.util.isNullOrUndefined(this.cellStateFeatureDef))
                                    return;
                                var rowIdName = this.cellStateFeatureDef.rowId;
                                var columnKeyName = this.cellStateFeatureDef.columnKey;
                                var stateName = this.cellStateFeatureDef.state;
                                var statesTable = this.cellStateFeatureDef.states;
                                // Disable row
                                var controlType = utils.getControlType($grid, cell.columnKey);
                                if (!uk.util.isNullOrUndefined(this.disableRows)) {
                                    var disableRow = this.disableRows[cell.id];
                                    if (!uk.util.isNullOrUndefined(disableRow) && disableRow.length > 0 && disableRow[0].disable) {
                                        cell.$element.addClass(color.Disable);
                                        utils.disableNtsControl($grid, cell, controlType);
                                        //                            self.addDisableState(cell.id, cell.columnKey);
                                    }
                                }
                                // Set cell states
                                if (!uk.util.isNullOrUndefined(self.rowStates) && !uk.util.isNullOrUndefined(rowIdName)
                                    && !uk.util.isNullOrUndefined(columnKeyName) && !uk.util.isNullOrUndefined(stateName)
                                    && !uk.util.isNullOrUndefined(self.rowStates[cell.id])) {
                                    var cellState = self.rowStates[cell.id][cell.columnKey];
                                    if (uk.util.isNullOrUndefined(cellState) || cellState.length === 0)
                                        return;
                                    _.forEach(cellState[0][stateName], function (stt) {
                                        if (stt === color.Disable && !cell.$element.hasClass(color.Disable)) {
                                            utils.disableNtsControl($grid, cell, controlType);
                                            //                                self.addDisableState(cell.id, cell.columnKey);
                                        }
                                        cell.$element.addClass(stt);
                                    });
                                }
                            };
                            /**
                             * Set text color
                             */
                            CellFormatter.prototype.setTextColor = function ($grid, cell) {
                                if (uk.util.isNullOrUndefined(this.textColorFeatureDef))
                                    return;
                                var rowIdName = this.textColorFeatureDef.rowId;
                                var columnKeyName = this.textColorFeatureDef.columnKey;
                                var colorName = this.textColorFeatureDef.color;
                                var colorsTable = this.textColorFeatureDef.colorsTable;
                                if (!uk.util.isNullOrUndefined(colorsTable) && !uk.util.isNullOrUndefined(rowIdName)
                                    && !uk.util.isNullOrUndefined(columnKeyName) && !uk.util.isNullOrUndefined(colorName)
                                    && !uk.util.isNullOrUndefined(this.textColorsTable[cell.id])) {
                                    var textColor = this.textColorsTable[cell.id][cell.columnKey];
                                    if (uk.util.isNullOrUndefined(textColor) || textColor.length === 0)
                                        return;
                                    var txtColor = textColor[0][colorName];
                                    if (txtColor.indexOf("#") === 0) {
                                        cell.$element.css("color", txtColor);
                                        return;
                                    }
                                    cell.$element.addClass(txtColor);
                                }
                            };
                            /**
                             * Set text style.
                             */
                            CellFormatter.prototype.setTextStyle = function ($grid, cell) {
                                if (uk.util.isNullOrUndefined(this.textStyleFeatureDef))
                                    return;
                                var rowIdName = this.textStyleFeatureDef.rowId;
                                var columnKeyName = this.textStyleFeatureDef.columnKey;
                                var styleName = this.textStyleFeatureDef.style;
                                var stylesTable = this.textStyleFeatureDef.styles;
                                if (!uk.util.isNullOrUndefined(stylesTable) && !uk.util.isNullOrUndefined(rowIdName)
                                    && !uk.util.isNullOrUndefined(columnKeyName) && !uk.util.isNullOrUndefined(styleName)
                                    && !uk.util.isNullOrUndefined(this.textStylesTable[cell.id])) {
                                    var textStyle = this.textStylesTable[cell.id][cell.columnKey];
                                    if (uk.util.isNullOrUndefined(textStyle) || textStyle.length === 0)
                                        return;
                                    var txtStyle = textStyle[0][styleName];
                                    cell.$element.addClass(txtStyle);
                                }
                            };
                            return CellFormatter;
                        }());
                        color.CellFormatter = CellFormatter;
                        /**
                         * Style headers
                         */
                        function styleHeaders($grid, options) {
                            var headerStyles = feature.find(options.ntsFeatures, feature.HEADER_STYLES);
                            if (uk.util.isNullOrUndefined(headerStyles))
                                return;
                            setHeadersColor($grid, headerStyles.columns);
                        }
                        color.styleHeaders = styleHeaders;
                        /**
                         * Set header color
                         */
                        function setHeadersColor($grid, columns) {
                            var headersTable = $grid.igGrid("headersTable");
                            var fixedHeadersTable = $grid.igGrid("fixedHeadersTable");
                            fixedHeadersTable.find("th").each(function () {
                                var $self = $(this);
                                var columnId = $self.attr("id");
                                if (uk.util.isNullOrUndefined(columnId)) {
                                    var owns = $self.attr("aria-owns");
                                    if (!owns)
                                        return;
                                    var key_1 = owns.split(" ")[0].split("_")[1];
                                    setBackground($self, key_1, columns);
                                    return;
                                }
                                var key = columnId.split("_")[1];
                                setBackground($self, key, columns);
                            });
                            headersTable.find("th").each(function () {
                                var $self = $(this);
                                var columnId = $self.attr("id");
                                if (uk.util.isNullOrUndefined(columnId)) {
                                    var owns = $self.attr("aria-owns");
                                    if (!owns)
                                        return;
                                    var key_2 = owns.split(" ")[0].split("_")[1];
                                    setBackground($self, key_2, columns);
                                    return;
                                }
                                var key = columnId.split("_")[1];
                                setBackground($self, key, columns);
                            });
                        }
                        /**
                         * Set background.
                         */
                        function setBackground($cell, key, columns) {
                            var targetColumn;
                            _.forEach(columns, function (col) {
                                if (col.key === key) {
                                    targetColumn = col;
                                    return false;
                                }
                            });
                            if (!uk.util.isNullOrUndefined(targetColumn)) {
                                if (targetColumn.color.indexOf("#") === 0) {
                                    $cell.css("background-color", targetColumn.color);
                                    return;
                                }
                                $cell.addClass(targetColumn.color);
                            }
                        }
                        /**
                         * Remember disable
                         */
                        function rememberDisabled($grid, cell) {
                            var settings = $grid.data(internal.SETTINGS);
                            if (!settings)
                                return;
                            var disables = settings.disables;
                            if (!disables)
                                return;
                            var controlType = utils.getControlType($grid, cell.columnKey);
                            var row = disables[cell.id];
                            if (!row)
                                return;
                            row.forEach(function (c, i) {
                                if (c === cell.columnKey) {
                                    utils.disableNtsControl($grid, cell, controlType);
                                    cell.$element.addClass(color.Disable);
                                    return false;
                                }
                            });
                        }
                        color.rememberDisabled = rememberDisabled;
                        /**
                         * Push disable
                         */
                        function pushDisable($grid, cell) {
                            var settings = $grid.data(internal.SETTINGS);
                            if (!settings)
                                return;
                            var disables = settings.disables;
                            if (!disables) {
                                settings.disables = {};
                            }
                            if (!settings.disables[cell.id] || settings.disables[cell.id].size === 0) {
                                var dset = new Set();
                                dset.add(cell.columnKey);
                                settings.disables[cell.id] = dset;
                                return;
                            }
                            settings.disables[cell.id].add(cell.columnKey);
                        }
                        color.pushDisable = pushDisable;
                        /**
                         * Pop disable
                         */
                        function popDisable($grid, cell) {
                            var settings = $grid.data(internal.SETTINGS);
                            if (!settings)
                                return;
                            var disables = settings.disables;
                            if (!disables || !disables[cell.id] || disables[cell.id].size === 0)
                                return;
                            disables[cell.id].delete(cell.columnKey);
                        }
                        color.popDisable = popDisable;
                        /**
                         * Mark if edit.
                         */
                        function markIfEdit($grid, cell) {
                            var targetEdits = $grid.data(internal.TARGET_EDITS);
                            var cols;
                            if (!targetEdits || !(cols = targetEdits[cell.id])) {
                                markIfOtherEdit($grid, cell);
                                return;
                            }
                            if (cols.some(function (c) {
                                return c === cell.columnKey;
                            })) {
                                cell.element.classList.add(color.ManualEditTarget);
                            }
                            else
                                markIfOtherEdit($grid, cell);
                        }
                        color.markIfEdit = markIfEdit;
                        /**
                         * Mark if other edit.
                         */
                        function markIfOtherEdit($grid, cell) {
                            var otherEdits = $grid.data(internal.OTHER_EDITS);
                            var cols;
                            if (!otherEdits || !(cols = otherEdits[cell.id]))
                                return;
                            if (cols.some(function (c) {
                                return c === cell.columnKey;
                            })) {
                                cell.element.classList.add(color.ManualEditOther);
                            }
                        }
                    })(color = ntsGrid.color || (ntsGrid.color = {}));
                    var fixedColumns;
                    (function (fixedColumns) {
                        /**
                         * Get fixed table
                         */
                        function getFixedTable($grid) {
                            return $("#" + $grid.attr("id") + "_fixed");
                        }
                        fixedColumns.getFixedTable = getFixedTable;
                        /**
                         * Get real grid
                         */
                        function realGridOf($grid) {
                            if (utils.isIgGrid($grid))
                                return $grid;
                            var gridId = $grid.attr("id");
                            if (uk.util.isNullOrUndefined(gridId))
                                return;
                            var endIdx = gridId.indexOf("_fixed");
                            if (endIdx !== -1) {
                                var referGrid = $("#" + gridId.substring(0, endIdx));
                                if (!uk.util.isNullOrUndefined(referGrid) && utils.fixable(referGrid))
                                    return referGrid;
                            }
                        }
                        fixedColumns.realGridOf = realGridOf;
                    })(fixedColumns || (fixedColumns = {}));
                    var sheet;
                    (function (sheet_1) {
                        var normalStyles = { backgroundColor: '', color: '' };
                        var selectedStyles = { backgroundColor: '#00B050', color: '#fff' };
                        var Configurator = /** @class */ (function () {
                            function Configurator(currentSheet, sheets) {
                                this.currentSheet = currentSheet;
                                this.sheets = sheets;
                                this.columnsInSheetImme = {};
                                this.columnsInSheet = {};
                            }
                            /**
                             * Load
                             */
                            Configurator.load = function ($grid, sheetFeature) {
                                var sheetConfig = $grid.data(internal.SHEETS);
                                if (uk.util.isNullOrUndefined(sheetConfig)) {
                                    var config = new Configurator(sheetFeature.initialDisplay, sheetFeature.sheets);
                                    $grid.data(internal.SHEETS, config);
                                }
                            };
                            return Configurator;
                        }());
                        sheet_1.Configurator = Configurator;
                        function onScroll($grid) {
                            var $scrollContainer = $("#" + $grid.attr("id") + "_scrollContainer");
                            var $displayContainer = $("#" + $grid.attr("id") + "_displayContainer");
                            if ($scrollContainer.length === 0 || $displayContainer.length === 0)
                                return;
                            var scrollListener = function (evt) {
                                var sheetConfig = $grid.data(internal.SHEETS);
                                if (uk.util.isNullOrUndefined(sheetConfig))
                                    return;
                                sheetConfig.currentPosition = $scrollContainer.scrollTop() + "px";
                                sheetConfig.displayScrollTop = $displayContainer.scrollTop();
                                sheetConfig.blockId = $grid.find("tbody tr:first").data("id");
                            };
                            $scrollContainer.on(events.Handler.SCROLL, scrollListener);
                        }
                        sheet_1.onScroll = onScroll;
                        /**
                         * Unused
                         */
                        function setup($grid, options) {
                            var sheetFeature = feature.find(options.ntsFeatures, feature.SHEET);
                            if (uk.util.isNullOrUndefined(sheetFeature))
                                return;
                            var hidingFeature = { name: 'Hiding' };
                            if (feature.isEnable(options.features, feature.HIDING)) {
                                feature.replaceBy(options, feature.HIDING, hidingFeature);
                            }
                            else {
                                options.features.push(hidingFeature);
                            }
                            Configurator.load($grid, sheetFeature);
                            configButtons($grid, sheetFeature.sheets);
                        }
                        sheet_1.setup = setup;
                        /**
                         * Unused
                         */
                        function configButtons($grid, sheets) {
                            var gridWrapper = $("<div class='nts-grid-wrapper'/>");
                            $grid.wrap($("<div class='nts-grid-container'/>").css("visibility", "hidden").wrap(gridWrapper));
                            var gridContainer = $grid.closest(".nts-grid-container");
                            var sheetButtonsWrapper = $("<div class='nts-grid-sheet-buttons'/>").appendTo(gridContainer);
                            var sheetMng = $grid.data(internal.SHEETS);
                            _.forEach(sheets, function (sheet) {
                                var btn = $("<button/>").addClass(sheet.name).text(sheet.text).appendTo(sheetButtonsWrapper);
                                if (sheetMng.currentSheet === sheet.name)
                                    btn.css(selectedStyles);
                                btn.on("click", function (evt) {
                                    if (!utils.hidable($grid) || utils.isErrorStatus($grid))
                                        return;
                                    updateCurrentSheet($grid, sheet.name);
                                    utils.showColumns($grid, sheet.columns);
                                    hideOthers($grid);
                                    // Styles
                                    sheetButtonsWrapper.find("button").css(normalStyles);
                                    $(this).css(selectedStyles);
                                });
                            });
                        }
                        function hideOthers($grid) {
                            var sheetMng = $grid.data(internal.SHEETS);
                            if (uk.util.isNullOrUndefined(sheetMng))
                                return;
                            var displayColumns;
                            _.forEach(sheetMng.sheets, function (sheet) {
                                if (sheet.name !== sheetMng.currentSheet) {
                                    utils.hideColumns($grid, sheet.columns);
                                }
                                else {
                                    displayColumns = sheet.columns;
                                }
                            });
                            // Resize displaying columns
                            setTimeout(function () {
                                _.forEach(displayColumns, function (column) {
                                    columnSize.loadOne($grid, column);
                                });
                            }, 0);
                        }
                        sheet_1.hideOthers = hideOthers;
                        /**
                         * Update current sheet
                         */
                        function updateCurrentSheet($grid, name) {
                            var sheetMng = $grid.data(internal.SHEETS);
                            if (uk.util.isNullOrUndefined(sheetMng))
                                return;
                            sheetMng.currentSheet = name;
                            $grid.data(internal.SHEETS, sheetMng);
                        }
                        var load;
                        (function (load) {
                            /**
                             * Setup
                             */
                            function setup($grid, options) {
                                var sheetFeature = feature.find(options.ntsFeatures, feature.SHEET);
                                if (uk.util.isNullOrUndefined(sheetFeature)) {
                                    var idxes_3 = {};
                                    utils.analyzeColumns(options.columns)
                                        .filter(function (c) { return c.hidden !== true; })
                                        .forEach(function (c, i) {
                                        idxes_3[c.key] = i;
                                    });
                                    var setting = $grid.data(internal.SETTINGS);
                                    if (!setting.descriptor) {
                                        setting.descriptor = new settings.Descriptor();
                                    }
                                    setting.descriptor.colIdxes = idxes_3;
                                    if (uk.util.isNullOrUndefined($grid.data(internal.GRID_OPTIONS))) {
                                        $grid.data(internal.GRID_OPTIONS, _.cloneDeep(options));
                                    }
                                    return;
                                }
                                Configurator.load($grid, sheetFeature);
                                configButtons($grid, sheetFeature.sheets);
                                if (!uk.util.isNullOrUndefined($grid.data(internal.GRID_OPTIONS)))
                                    return;
                                $grid.data(internal.GRID_OPTIONS, _.cloneDeep(options));
                                // Initial sheet
                                var sheetMng = $grid.data(internal.SHEETS);
                                var sheet = _.filter(sheetMng.sheets, function (sheet) {
                                    return sheet.name === sheetMng.currentSheet;
                                });
                                var columns;
                                if (!sheetMng.sheetColumns) {
                                    sheetMng.sheetColumns = {};
                                }
                                columns = sheetMng.sheetColumns[sheet[0].name];
                                if (!columns) {
                                    columns = getSheetColumns(options.columns, sheet[0], options.features, sheetMng);
                                    sheetMng.sheetColumns[sheet[0].name] = columns.all;
                                    var idxes_4 = {};
                                    utils.analyzeColumns(columns.unfixed)
                                        .filter(function (c) { return c.hidden !== true; })
                                        .forEach(function (c, i) {
                                        idxes_4[c.key] = i;
                                    });
                                    var setting = $grid.data(internal.SETTINGS);
                                    if (!setting.descriptor) {
                                        setting.descriptor = new settings.Descriptor();
                                        setting.descriptor.fixedColumns = columns.fixed;
                                    }
                                    setting.descriptor.colIdxes = idxes_4;
                                    options.columns = columns.all;
                                }
                                else
                                    options.columns = columns;
                            }
                            load.setup = setup;
                            /**
                             * Config buttons
                             */
                            function configButtons($grid, sheets) {
                                if ($grid.closest(".nts-grid-container").length > 0)
                                    return;
                                $grid.closest(".nts-grid-wrapper").wrap($("<div class='nts-grid-container'/>"));
                                var gridContainer = $grid.closest(".nts-grid-container");
                                var sheetButtonsWrapper = $("<div class='nts-grid-sheet-buttons'/>").appendTo(gridContainer);
                                var sheetMng = $grid.data(internal.SHEETS);
                                _.forEach(sheets, function (sheet) {
                                    var btn = $("<button/>").addClass(sheet.name).text(sheet.text).appendTo(sheetButtonsWrapper);
                                    if (sheetMng.currentSheet === sheet.name)
                                        btn.css(selectedStyles);
                                    btn.on("click", function (evt) {
                                        if (utils.isErrorStatus($grid))
                                            return;
                                        updateCurrentSheet($grid, sheet.name);
                                        var options = $grid.data(internal.GRID_OPTIONS);
                                        var columns, clonedColumns;
                                        if (!sheetMng.sheetColumns) {
                                            sheetMng.sheetColumns = {};
                                        }
                                        var settings = $grid.data(internal.SETTINGS);
                                        columns = sheetMng.sheetColumns[sheet.name];
                                        if (!columns) {
                                            columns = getSheetColumns(options.columns, sheet, options.features, sheetMng);
                                            sheetMng.sheetColumns[sheet.name] = columns.all;
                                            var idxes_5 = {};
                                            utils.analyzeColumns(columns.unfixed)
                                                .filter(function (c) { return c.hidden !== true; })
                                                .forEach(function (c, i) {
                                                idxes_5[c.key] = i;
                                            });
                                            settings.descriptor.colIdxes = idxes_5;
                                            clonedColumns = columns.all;
                                        }
                                        else {
                                            var idxes_6 = {};
                                            var fixedColumns_4 = settings.descriptor.fixedColumns;
                                            if (fixedColumns_4) {
                                                var unfixed = columns.slice(fixedColumns_4.length);
                                                utils.analyzeColumns(unfixed)
                                                    .filter(function (c) { return c.hidden !== true; })
                                                    .forEach(function (c, i) {
                                                    idxes_6[c.key] = i;
                                                });
                                                settings.descriptor.colIdxes = idxes_6;
                                            }
                                            clonedColumns = columns;
                                        }
                                        var clonedOpts = _.cloneDeep(options);
                                        clonedOpts.columns = clonedColumns;
                                        clonedOpts.dataSource = $grid.igGrid("option", "dataSource");
                                        $grid.igGrid("destroy");
                                        $grid.off();
                                        var pagingFt = feature.find(clonedOpts.features, feature.PAGING);
                                        if (pagingFt && settings) {
                                            if (!uk.util.isNullOrUndefined(settings.pageIndex)) {
                                                pagingFt.currentPageIndex = settings.pageIndex;
                                            }
                                            if (!uk.util.isNullOrUndefined(settings.pageSize)) {
                                                pagingFt.pageSize = settings.pageSize;
                                            }
                                            feature.replaceBy(clonedOpts, feature.PAGING, pagingFt);
                                        }
                                        $grid.ntsGrid(clonedOpts);
                                        // Styles
                                        sheetButtonsWrapper.find("button").css(normalStyles);
                                        $(this).css(selectedStyles);
                                    });
                                });
                            }
                            /**
                             * Get sheet columns
                             */
                            function getSheetColumns(allColumns, displaySheet, features, sheetMng) {
                                var fixedColumns = [];
                                var columns = [];
                                _.forEach(allColumns, function (column) {
                                    var index;
                                    if (column.group !== undefined && _.find(displaySheet.columns, function (col, i) {
                                        if (col === column.group[0].key) {
                                            index = i;
                                            return true;
                                        }
                                    }) !== undefined) {
                                        columns[index] = column;
                                        column.group.forEach(function (sc) {
                                            if (!sheetMng.columnsInSheetImme[sc.key]) {
                                                var mSet = new Set();
                                                mSet.add(displaySheet.name);
                                                sheetMng.columnsInSheetImme[sc.key] = mSet;
                                            }
                                            else {
                                                sheetMng.columnsInSheetImme[sc.key].add(displaySheet.name);
                                            }
                                        });
                                        return;
                                    }
                                    var belongToSheet = _.find(displaySheet.columns, function (col, i) {
                                        if (col === column.key) {
                                            index = i;
                                            return true;
                                        }
                                    }) !== undefined;
                                    if (belongToSheet) {
                                        columns[index] = column;
                                        if (!sheetMng.columnsInSheetImme[column.key]) {
                                            var mSet = new Set();
                                            mSet.add(displaySheet.name);
                                            sheetMng.columnsInSheetImme[column.key] = mSet;
                                        }
                                        else {
                                            sheetMng.columnsInSheetImme[column.key].add(displaySheet.name);
                                        }
                                        return;
                                    }
                                    var columnFixFeature = feature.find(features, feature.COLUMN_FIX);
                                    if (!uk.util.isNullOrUndefined(columnFixFeature)) {
                                        var isFixed = _.find(columnFixFeature.columnSettings, function (s) {
                                            return s.columnKey === column.key;
                                        }) !== undefined;
                                        if (isFixed) {
                                            fixedColumns.push(column);
                                            return;
                                        }
                                    }
                                });
                                _.remove(columns, function (c) { return uk.util.isNullOrUndefined(c); });
                                return { fixed: fixedColumns,
                                    unfixed: columns,
                                    all: _.concat(fixedColumns, columns) };
                            }
                        })(load = sheet_1.load || (sheet_1.load = {}));
                    })(sheet || (sheet = {}));
                    var onDemand;
                    (function (onDemand) {
                        var Loader = /** @class */ (function () {
                            function Loader(allKeysPath, pageRecordsPath) {
                                this.allKeysPath = allKeysPath;
                                this.pageRecordsPath = pageRecordsPath;
                            }
                            return Loader;
                        }());
                        onDemand.Loader = Loader;
                        function hidePageSizeDD($grid, options) {
                            if (options && !feature.find(options.ntsFeatures, feature.DEMAND_LOAD))
                                return;
                            var $gridContainer = $($grid.igGrid("container"));
                            if ($gridContainer.length > 0) {
                                $gridContainer.find("div[class*='ui-iggrid-pagesizedropdowncontainer']").hide();
                            }
                        }
                        onDemand.hidePageSizeDD = hidePageSizeDD;
                        /**
                         * Load keys
                         */
                        function loadKeys($grid, path) {
                            var dfd = $.Deferred();
                            uk.request.ajax(path).done(function (keys) {
                                var loader = $grid.data(internal.LOADER);
                                if (!loader.keys || loader.keys.length === 0)
                                    loader.keys = keys;
                                dfd.resolve(loader.keys);
                            }).fail(function () {
                                dfd.reject();
                            });
                            return dfd.promise();
                        }
                        onDemand.loadKeys = loadKeys;
                        /**
                         * Load data
                         */
                        function loadLazy($grid, path, keys, startIndex, endIndex, dataSource, primaryKey) {
                            var dfd = $.Deferred();
                            uk.request.ajax(path, keys).done(function (data) {
                                var origDs = $grid.data(internal.ORIG_DS);
                                if (!origDs) {
                                    $grid.data(internal.ORIG_DS, []);
                                    origDs = $grid.data(internal.ORIG_DS);
                                }
                                var add = true;
                                if (origDs.length >= endIndex) {
                                    add = false;
                                }
                                _.forEach(data, function (rData, index) {
                                    for (var i = startIndex; i < endIndex; i++) {
                                        if (dataSource[i] && dataSource[i][primaryKey] === rData[primaryKey]) {
                                            rData = _.merge(rData, dataSource[i]);
                                            rData.loaded = true;
                                            dataSource.splice(i, 1, rData);
                                            if (add)
                                                origDs[i] = _.cloneDeep(rData);
                                        }
                                    }
                                });
                                dfd.resolve(dataSource);
                            }).fail(function () {
                                ;
                                dfd.reject();
                            });
                            return dfd.promise();
                        }
                        onDemand.loadLazy = loadLazy;
                        /**
                         * Initialize
                         */
                        function initial($grid, options) {
                            if (!options)
                                return false;
                            var pagingFt = feature.find(options.features, feature.PAGING);
                            if (!pagingFt)
                                return false;
                            bindPageChange($grid);
                            var setting = $grid.data(internal.SETTINGS);
                            if (uk.util.isNullOrUndefined(setting.pageSize)) {
                                setting.pageSize = pagingFt.pageSize;
                            }
                            var demandLoadFt = feature.find(options.ntsFeatures, feature.DEMAND_LOAD);
                            if (!demandLoadFt)
                                return false;
                            var pageSize = pagingFt.pageSize;
                            var loader = $grid.data(internal.LOADER);
                            if (!loader) {
                                $grid.data(internal.LOADER, new Loader(demandLoadFt.allKeysPath, demandLoadFt.pageRecordsPath));
                            }
                            else if (loader.keys) { // Switch sheet
                                pageSize = setting.pageSize;
                                return false;
                            }
                            var bindKeys = function (keys) {
                                var primaryKey = options.primaryKey;
                                var ds = keys.map(function (key, index) {
                                    var obj = {};
                                    obj[primaryKey] = key;
                                    obj["loaded"] = false;
                                    return obj;
                                });
                                var firstRecordIndex = (pagingFt.currentPageIndex || 0) * pageSize;
                                var lastRecordIndex = firstRecordIndex + pageSize;
                                var firstPageItems = keys.slice(firstRecordIndex, lastRecordIndex);
                                loadLazy($grid, demandLoadFt.pageRecordsPath, firstPageItems, firstRecordIndex, lastRecordIndex, ds, primaryKey).done(function (data) {
                                    options.dataSource = options.dataSourceAdapter ? options.dataSourceAdapter(data) : data;
                                    $grid.igGrid(options);
                                });
                            };
                            if (options.recordKeys && options.recordKeys.constructor === Array) {
                                loader = $grid.data(internal.LOADER);
                                loader.keys = options.recordKeys;
                                bindKeys(options.recordKeys);
                                return true;
                            }
                            loadKeys($grid, demandLoadFt.allKeysPath).done(function (keys) {
                                bindKeys(keys);
                            }).fail(function () {
                            });
                            return true;
                        }
                        onDemand.initial = initial;
                        /**
                         * Bind page change
                         */
                        function bindPageChange($grid) {
                            $grid.on(events.Handler.PAGE_INDEX_CHANGE, function (evt, ui) {
                                var newPageIndex = ui.newPageIndex;
                                var pageSize = ui.owner.pageSize();
                                var startIndex = newPageIndex * pageSize;
                                var endIndex = startIndex + pageSize;
                                var settings = $grid.data(internal.SETTINGS);
                                settings.pageChanged = true;
                                settings.pageIndex = ui.newPageIndex;
                                var loader = $grid.data(internal.LOADER);
                                if (!loader || !loader.keys)
                                    return;
                                var dataSource = $grid.igGrid("option", "dataSource");
                                var primaryKey = $grid.igGrid("option", "primaryKey");
                                var newKeys = loader.keys.slice(startIndex, endIndex);
                                for (var i = endIndex - 1; i >= startIndex; i--) {
                                    if (dataSource[i] && dataSource[i].loaded) {
                                        newKeys.splice(i - startIndex, 1);
                                    }
                                }
                                if (newKeys.length === 0)
                                    return;
                                loadLazy($grid, loader.pageRecordsPath, newKeys, startIndex, endIndex, dataSource, primaryKey).done(function (data) {
                                    var ds = settings.dataSourceAdapter ? settings.dataSourceAdapter(data) : data;
                                    $grid.igGrid("option", "dataSource", ds);
                                    ui.owner.pageIndex(ui.newPageIndex);
                                });
                                return false;
                            });
                            $grid.on(events.Handler.PAGE_SIZE_CHANGE, function (evt, ui) {
                                var setting = $grid.data(internal.SETTINGS);
                                setting.pageSize = ui.newPageSize;
                                setting.pageIndex = 0;
                                if ($grid.igGridPaging("option", "currentPageIndex") > 0) {
                                    $grid.igGridPaging("pageSize", setting.pageSize);
                                }
                                var loader = $grid.data(internal.LOADER);
                                if (!loader)
                                    return;
                                var currentPageIndex = 0;
                                var startIndex = currentPageIndex * ui.newPageSize;
                                var endIndex = startIndex + ui.newPageSize;
                                var newKeys = loader.keys.slice(startIndex, endIndex);
                                var dataSource = $grid.igGrid("option", "dataSource");
                                var primaryKey = $grid.igGrid("option", "primaryKey");
                                for (var i = endIndex - 1; i >= startIndex; i--) {
                                    if (dataSource[i] && dataSource[i].loaded) {
                                        newKeys.splice(i - startIndex, 1);
                                    }
                                }
                                if (newKeys.length === 0)
                                    return;
                                loadLazy($grid, loader.pageRecordsPath, newKeys, startIndex, endIndex, dataSource, primaryKey).done(function (data) {
                                    var ds = setting.dataSourceAdapter ? setting.dataSourceAdapter(data) : data;
                                    $grid.igGrid("option", "dataSource", ds);
                                    ui.owner.pageSize(ui.newPageSize);
                                });
                                return false;
                            });
                        }
                    })(onDemand || (onDemand = {}));
                    var settings;
                    (function (settings) {
                        settings.USER_M = "M";
                        settings.USER_O = "O";
                        var Descriptor = /** @class */ (function () {
                            function Descriptor(startRow, rowCount, elements, keyIdxes) {
                                this.startRow = startRow;
                                this.rowCount = rowCount;
                                this.elements = elements;
                                this.keyIdxes = keyIdxes;
                            }
                            Descriptor.prototype.update = function (startRow, rowCount, elements) {
                                this.startRow = startRow;
                                this.rowCount = rowCount;
                                this.elements = elements;
                            };
                            Descriptor.prototype.isFixedColumn = function (column) {
                                var index;
                                _.forEach(this.fixedColumns, function (c, i) {
                                    if (c.key === column) {
                                        index = i;
                                        return false;
                                    }
                                });
                                return index;
                            };
                            return Descriptor;
                        }());
                        settings.Descriptor = Descriptor;
                        /**
                         * Build settings
                         */
                        function build($grid, options) {
                            var data = {};
                            var rebuild;
                            data.preventEditInError = options.preventEditInError;
                            data.dataSourceAdapter = options.dataSourceAdapter;
                            data.errorColumns = options.errorColumns;
                            data.errorsOnPage = options.showErrorsOnPage;
                            if (!$grid.data(internal.SETTINGS)) {
                                $grid.data(internal.SETTINGS, data);
                            }
                            else {
                                rebuild = true;
                            }
                            $grid.on(events.Handler.RECORDS, function (evt, arg) {
                                if (uk.util.isNullOrUndefined(arg.owner._startRowIndex)) {
                                    arg.owner._startRowIndex = 0;
                                }
                                var setting = $grid.data(internal.SETTINGS);
                                var owner = arg.owner;
                                var pageIndex = 0, pageSize = 0;
                                if (!uk.util.isNullOrUndefined(setting.pageIndex)) {
                                    pageIndex = setting.pageIndex;
                                }
                                if (!uk.util.isNullOrUndefined(setting.pageSize)) {
                                    pageSize = setting.pageSize;
                                }
                                var startRow = owner._startRowIndex + pageIndex * pageSize;
                                if (setting.pageChanged) {
                                    startRow = pageIndex * pageSize;
                                    setTimeout(function () {
                                        setting.pageChanged = false;
                                    }, 0);
                                }
                                if (!setting.descriptor) {
                                    var pk_1 = owner.dataSource.settings.primaryKey;
                                    var keyIdxes_1 = {};
                                    owner.dataSource._origDs.forEach(function (d, i) {
                                        keyIdxes_1[d[pk_1]] = i;
                                    });
                                    var descriptor = new Descriptor(startRow, owner._virtualRowCount, owner._virtualDom, keyIdxes_1);
                                    setting.descriptor = descriptor;
                                    setting.descriptor.fixedColumns = owner._fixedColumns;
                                    setting.descriptor.fixedTable = owner._fixedTable;
                                    setting.descriptor.headerCells = owner._headerCells;
                                    setting.descriptor.headerParent = owner._headerParent;
                                    return;
                                }
                                setting.descriptor.update(startRow, owner._virtualRowCount, owner._virtualDom);
                                if (!setting.descriptor.keyIdxes || $grid.data("ntsRowDeleting")) {
                                    var pk_2 = owner.dataSource.settings.primaryKey;
                                    var keyIdxes_2 = {};
                                    if (owner.dataSource._origDs) {
                                        owner.dataSource._origDs.forEach(function (d, i) {
                                            keyIdxes_2[d[pk_2]] = i;
                                        });
                                    }
                                    setting.descriptor.keyIdxes = keyIdxes_2;
                                    setting.descriptor.fixedTable = owner._fixedTable;
                                    setting.descriptor.headerCells = owner._headerCells;
                                    setting.descriptor.headerParent = owner._headerParent;
                                    $grid.data("ntsRowDeleting", false);
                                }
                                if (rebuild) {
                                    setting.descriptor.fixedTable = owner._fixedTable;
                                    setting.descriptor.headerCells = owner._headerCells;
                                    setting.descriptor.headerParent = owner._headerParent;
                                }
                                if (owner.dataSource._filter && owner.dataSource._filteredData
                                    && _.size(owner.dataSource._filteredData) <= _.size(owner.dataSource._origDs)) {
                                    var pk_3 = owner.dataSource.settings.primaryKey;
                                    var keyIdxes_3 = {};
                                    owner.dataSource._filteredData.forEach(function (d, i) {
                                        keyIdxes_3[d[pk_3]] = i;
                                    });
                                    setting.descriptor.keyIdxes = keyIdxes_3;
                                }
                            });
                        }
                        settings.build = build;
                        /**
                         * Set grid size
                         */
                        function setGridSize($grid) {
                            var height = window.innerHeight;
                            var width = window.innerWidth;
                            $grid.igGrid("option", "width", width - 240);
                            $grid.igGrid("option", "height", height - 90);
                        }
                        settings.setGridSize = setGridSize;
                    })(settings || (settings = {}));
                    var internal;
                    (function (internal) {
                        internal.ORIG_DS = "ntsOrigDs";
                        internal.CONTROL_TYPES = "ntsControlTypesGroup";
                        internal.COMBO_SELECTED = "ntsComboSelection";
                        internal.CB_SELECTED = "ntsCheckboxSelection";
                        internal.UPDATED_CELLS = "ntsUpdatedCells";
                        internal.TARGET_EDITS = "ntsTargetEdits";
                        internal.OTHER_EDITS = "ntsOtherEdits";
                        internal.CELL_FORMATTER = "ntsCellFormatter";
                        // All datepicker boards (ymd, ym, y)
                        internal.DATE_PICKER_BOARDS = "ntsDatePickerBoards";
                        // Full columns options
                        internal.GRID_OPTIONS = "ntsGridOptions";
                        internal.SELECTED_CELL = "ntsSelectedCell";
                        internal.SHEETS = "ntsGridSheets";
                        internal.SPECIAL_COL_TYPES = "ntsSpecialColumnTypes";
                        internal.ENTER_DIRECT = "enter";
                        internal.SETTINGS = "ntsSettings";
                        internal.ERRORS = "ntsErrors";
                        internal.ERRORS_LOG = "ntsErrorsLog";
                        internal.LOADER = "ntsLoader";
                        internal.TXT_RAW = "rawText";
                        internal.CELL_ORIG_VAL = "_origValue";
                        internal.JQUERY_INPUT_PICKER_ATTACH = "ntsInputPickerAttach";
                        internal._datePickerBoard = {};
                        internal._datePickerUpdate = {};
                        /**
                         * Get cell by id.
                         */
                        function getCellById($grid, rowId, key) {
                            var settings = $grid.data(internal.SETTINGS);
                            if (!settings || !settings.descriptor)
                                return;
                            var descriptor = settings.descriptor;
                            if (!descriptor.keyIdxes || !descriptor.colIdxes)
                                return;
                            var idx = descriptor.keyIdxes[rowId];
                            var colIdx = descriptor.colIdxes[key];
                            if (uk.util.isNullOrUndefined(colIdx)) {
                                var colIdx_1 = descriptor.isFixedColumn(key);
                                if (!uk.util.isNullOrUndefined(colIdx_1)) {
                                    return (descriptor.fixedTable || fixedColumns.getFixedTable($grid)).find("tr:eq(" + (idx - descriptor.startRow) + ") td:eq(" + colIdx_1 + ")");
                                }
                            }
                            if (_.size(descriptor.elements) > 0 && !uk.util.isNullOrUndefined(idx)
                                && idx >= descriptor.startRow && idx <= descriptor.rowCount + descriptor.startRow - 1 && !uk.util.isNullOrUndefined(colIdx)) {
                                if (_.size(descriptor.elements[0]) === _.size(descriptor.fixedColumns) + _(descriptor.colIdxes).keys().size()) {
                                    return $(descriptor.elements[idx - descriptor.startRow][colIdx + _.size(descriptor.fixedColumns)]);
                                }
                                return $(descriptor.elements[idx - descriptor.startRow][colIdx]);
                            }
                            return $grid.igGrid("cellById", rowId, key);
                        }
                        internal.getCellById = getCellById;
                    })(internal || (internal = {}));
                    var utils;
                    (function (utils) {
                        function isArrowKey(evt) {
                            return evt.keyCode >= 37 && evt.keyCode <= 40;
                        }
                        utils.isArrowKey = isArrowKey;
                        function isArrowLeft(evt) {
                            return evt.keyCode === 37;
                        }
                        utils.isArrowLeft = isArrowLeft;
                        function isArrowRight(evt) {
                            return evt.keyCode === 39;
                        }
                        utils.isArrowRight = isArrowRight;
                        function isAlphaNumeric(evt) {
                            return (evt.keyCode >= 48 && evt.keyCode <= 90)
                                || (evt.keyCode >= 96 && evt.keyCode <= 105);
                        }
                        utils.isAlphaNumeric = isAlphaNumeric;
                        function isMinusSymbol(evt) {
                            return evt.keyCode === 189 || evt.keyCode === 109;
                        }
                        utils.isMinusSymbol = isMinusSymbol;
                        function isTabKey(evt) {
                            return evt.keyCode === 9;
                        }
                        utils.isTabKey = isTabKey;
                        function isEnterKey(evt) {
                            return evt.keyCode === 13;
                        }
                        utils.isEnterKey = isEnterKey;
                        function isSpaceKey(evt) {
                            return evt.keyCode === 32;
                        }
                        utils.isSpaceKey = isSpaceKey;
                        function isDeleteKey(evt) {
                            return evt.keyCode === 46;
                        }
                        utils.isDeleteKey = isDeleteKey;
                        function isPasteKey(evt) {
                            return evt.keyCode === 86;
                        }
                        utils.isPasteKey = isPasteKey;
                        function isCopyKey(evt) {
                            return evt.keyCode === 67;
                        }
                        utils.isCopyKey = isCopyKey;
                        function isCutKey(evt) {
                            return evt.keyCode === 88;
                        }
                        utils.isCutKey = isCutKey;
                        /**
                         * Is error
                         */
                        function isErrorStatus($grid) {
                            var cell = selection.getSelectedCell($grid);
                            return isEditMode($grid) && errors.any(cell);
                        }
                        utils.isErrorStatus = isErrorStatus;
                        /**
                         * Only used in edit mode
                         */
                        function isNotErrorCell($grid, evt) {
                            var cell = selection.getSelectedCell($grid);
                            var $target = $(evt.target);
                            var td = $target;
                            if (!$target.prev().is("td"))
                                td = $target.closest("td");
                            return isEditMode($grid) && td.length > 0 && td[0] !== cell.element[0]
                                && errors.any(cell);
                        }
                        utils.isNotErrorCell = isNotErrorCell;
                        /**
                         * Is edit mode
                         */
                        function isEditMode($grid) {
                            return (updatable($grid) && $grid.igGridUpdating("isEditing"));
                        }
                        utils.isEditMode = isEditMode;
                        function isIgGrid($grid) {
                            return $grid && !uk.util.isNullOrUndefined($grid.data("igGrid"));
                        }
                        utils.isIgGrid = isIgGrid;
                        function selectable($grid) {
                            return $grid && !uk.util.isNullOrUndefined($grid.data("igGridSelection"));
                        }
                        utils.selectable = selectable;
                        function updatable($grid) {
                            return $grid && !uk.util.isNullOrUndefined($grid.data("igGridUpdating"));
                        }
                        utils.updatable = updatable;
                        function fixable($grid) {
                            return $grid && !uk.util.isNullOrUndefined($grid.data("igGridColumnFixing"));
                        }
                        utils.fixable = fixable;
                        function hidable($grid) {
                            return $grid && !uk.util.isNullOrUndefined($grid.data("igGridHiding"));
                        }
                        utils.hidable = hidable;
                        function pageable($grid) {
                            return $grid && !uk.util.isNullOrUndefined($grid.data("igGridPaging"));
                        }
                        utils.pageable = pageable;
                        function disabled($cell) {
                            return $cell.hasClass(color.Disable);
                        }
                        utils.disabled = disabled;
                        /**
                         * Data type of primary key
                         */
                        function dataTypeOfPrimaryKey($grid, columnsMap) {
                            if (uk.util.isNullOrUndefined(columnsMap))
                                return;
                            var columns = columnsMap["undefined"];
                            if (Object.keys(columnsMap).length > 1) {
                                columns = _.concat(columnsMap["true"], columnsMap["undefined"]);
                            }
                            var primaryKey = $grid.igGrid("option", "primaryKey");
                            var keyColumn = _.filter(columns, function (column) {
                                return column.key === primaryKey;
                            });
                            if (!uk.util.isNullOrUndefined(keyColumn) && keyColumn.length > 0)
                                return keyColumn[0].dataType;
                            return;
                        }
                        utils.dataTypeOfPrimaryKey = dataTypeOfPrimaryKey;
                        /**
                         * Parse number
                         */
                        function parseIntIfNumber(value, $grid, columnsMap) {
                            if (dataTypeOfPrimaryKey($grid, columnsMap) === "number") {
                                return parseInt(value);
                            }
                            return value;
                        }
                        utils.parseIntIfNumber = parseIntIfNumber;
                        function isCopiableControls($grid, columnKey) {
                            var columnControlTypes = $grid.data(internal.CONTROL_TYPES);
                            switch (columnControlTypes[columnKey]) {
                                case ntsControls.LINK_LABEL:
                                case ntsControls.TEXTBOX:
                                case ntsControls.LABEL:
                                    return true;
                            }
                            return false;
                        }
                        utils.isCopiableControls = isCopiableControls;
                        function isCuttableControls($grid, columnKey) {
                            var columnControlTypes = $grid.data(internal.CONTROL_TYPES);
                            switch (columnControlTypes[columnKey]) {
                                case ntsControls.TEXTBOX:
                                    return true;
                            }
                            return false;
                        }
                        utils.isCuttableControls = isCuttableControls;
                        function isPastableControls($grid, columnKey) {
                            var columnControlTypes = $grid.data(internal.CONTROL_TYPES);
                            switch (columnControlTypes[columnKey]) {
                                case ntsControls.LABEL:
                                case ntsControls.CHECKBOX:
                                case ntsControls.LINK_LABEL:
                                case ntsControls.COMBOBOX:
                                case ntsControls.FLEX_IMAGE:
                                case ntsControls.IMAGE:
                                    return false;
                            }
                            return true;
                        }
                        utils.isPastableControls = isPastableControls;
                        function isDisabled($cell) {
                            return $cell.hasClass(color.Disable);
                        }
                        utils.isDisabled = isDisabled;
                        function isComboBox($grid, columnKey) {
                            var columnControlTypes = $grid.data(internal.CONTROL_TYPES);
                            if (columnControlTypes[columnKey] === ntsControls.COMBOBOX)
                                return true;
                            return false;
                        }
                        utils.isComboBox = isComboBox;
                        function isNtsControl($grid, columnKey) {
                            var columnControlTypes = $grid.data(internal.CONTROL_TYPES);
                            switch (columnControlTypes[columnKey]) {
                                case ntsControls.LABEL:
                                case ntsControls.CHECKBOX:
                                case ntsControls.SWITCH_BUTTONS:
                                case ntsControls.COMBOBOX:
                                case ntsControls.BUTTON:
                                case ntsControls.DELETE_BUTTON:
                                case ntsControls.FLEX_IMAGE:
                                case ntsControls.IMAGE:
                                case ntsControls.TEXT_EDITOR:
                                case ntsControls.DATE_PICKER:
                                    return true;
                            }
                            return false;
                        }
                        utils.isNtsControl = isNtsControl;
                        /**
                         * Get control type
                         */
                        function getControlType($grid, columnKey) {
                            var columnControlTypes = $grid.data(internal.CONTROL_TYPES);
                            if (uk.util.isNullOrUndefined(columnControlTypes))
                                return;
                            return columnControlTypes[columnKey];
                        }
                        utils.getControlType = getControlType;
                        function comboBoxOfCell(cell) {
                            return $(cell.element).find(".nts-combo-container");
                        }
                        utils.comboBoxOfCell = comboBoxOfCell;
                        function getColumns($grid) {
                            if (isIgGrid($grid)) {
                                return $grid.igGrid("option", "columns");
                            }
                            var referGrid = fixedColumns.realGridOf($grid);
                            if (!uk.util.isNullOrUndefined(referGrid))
                                return referGrid.igGrid("option", "columns");
                        }
                        utils.getColumns = getColumns;
                        function getColumnsMap($grid) {
                            var columns = getColumns($grid);
                            return _.groupBy(columns, "fixed");
                        }
                        utils.getColumnsMap = getColumnsMap;
                        function getVisibleColumns($grid) {
                            return _.filter(getColumns($grid), function (column) {
                                return column.hidden !== true;
                            });
                        }
                        utils.getVisibleColumns = getVisibleColumns;
                        function getVisibleColumnsMap($grid) {
                            var visibleColumns = getVisibleColumns($grid);
                            return _.groupBy(visibleColumns, "fixed");
                        }
                        utils.getVisibleColumnsMap = getVisibleColumnsMap;
                        function getVisibleFixedColumns($grid) {
                            return _.filter(getColumns($grid), function (column) {
                                return column.hidden !== true && column.fixed === true;
                            });
                        }
                        utils.getVisibleFixedColumns = getVisibleFixedColumns;
                        function isFixedColumn(columnKey, visibleColumnsMap) {
                            return _.find(visibleColumnsMap["true"], function (column) {
                                return column.key === columnKey;
                            }) !== undefined;
                        }
                        utils.isFixedColumn = isFixedColumn;
                        function isFixedColumnCell(cell, visibleColumnsMap) {
                            return _.find(visibleColumnsMap["true"], function (column) {
                                return column.key === cell.columnKey;
                            }) !== undefined;
                        }
                        utils.isFixedColumnCell = isFixedColumnCell;
                        function columnsGroupOfColumn(column, visibleColumnsMap) {
                            return visibleColumnsMap[column.fixed ? "true" : "undefined"];
                        }
                        utils.columnsGroupOfColumn = columnsGroupOfColumn;
                        function columnsGroupOfCell(cell, visibleColumnsMap) {
                            if (isFixedColumnCell(cell, visibleColumnsMap))
                                return visibleColumnsMap["true"];
                            return visibleColumnsMap["undefined"];
                        }
                        utils.columnsGroupOfCell = columnsGroupOfCell;
                        function visibleColumnsFromMap(visibleColumnsMap) {
                            return _.concat(visibleColumnsMap["true"], visibleColumnsMap["undefined"]);
                        }
                        utils.visibleColumnsFromMap = visibleColumnsFromMap;
                        function noOfVisibleColumns(visibleColumnsMap) {
                            return visibleColumnsMap["true"].length + visibleColumnsMap["undefined"].length;
                        }
                        utils.noOfVisibleColumns = noOfVisibleColumns;
                        function getFixedColumns(visibleColumnsMap) {
                            return visibleColumnsMap["true"];
                        }
                        utils.getFixedColumns = getFixedColumns;
                        function getUnfixedColumns(visibleColumnsMap) {
                            return visibleColumnsMap["undefined"];
                        }
                        utils.getUnfixedColumns = getUnfixedColumns;
                        /**
                         * Next column
                         */
                        function nextColumn(visibleColumnsMap, columnIndex, isFixed) {
                            if (uk.util.isNullOrUndefined(visibleColumnsMap))
                                return;
                            var nextCol = {};
                            var mapKeyName = isFixed ? "true" : "undefined";
                            var reverseKeyName = isFixed ? "undefined" : "true";
                            if (columnIndex < visibleColumnsMap[mapKeyName].length - 1) {
                                return {
                                    options: visibleColumnsMap[mapKeyName][columnIndex + 1],
                                    index: columnIndex + 1
                                };
                            }
                            else if (columnIndex === visibleColumnsMap[mapKeyName].length - 1) {
                                return {
                                    options: visibleColumnsMap[reverseKeyName][0],
                                    index: 0
                                };
                            }
                        }
                        utils.nextColumn = nextColumn;
                        /**
                         * Next column by key
                         */
                        function nextColumnByKey(visibleColumnsMap, columnKey, isFixed) {
                            if (uk.util.isNullOrUndefined(visibleColumnsMap))
                                return;
                            var currentColumnIndex;
                            var currentColumn;
                            var fixedColumns = visibleColumnsMap["true"];
                            var unfixedColumns = visibleColumnsMap["undefined"];
                            if (isFixed && fixedColumns.length > 0) {
                                _.forEach(fixedColumns, function (col, index) {
                                    if (col.key === columnKey) {
                                        currentColumnIndex = index;
                                        currentColumn = col;
                                        return false;
                                    }
                                });
                                if (uk.util.isNullOrUndefined(currentColumn) || uk.util.isNullOrUndefined(currentColumnIndex))
                                    return;
                                if (currentColumnIndex === fixedColumns.length - 1) {
                                    return {
                                        options: unfixedColumns[0],
                                        index: 0
                                    };
                                }
                                return {
                                    options: fixedColumns[currentColumnIndex + 1],
                                    index: currentColumnIndex + 1
                                };
                            }
                            if (!isFixed && unfixedColumns.length > 0) {
                                _.forEach(unfixedColumns, function (col, index) {
                                    if (col.key === columnKey) {
                                        currentColumnIndex = index;
                                        currentColumn = col;
                                        return false;
                                    }
                                });
                                if (uk.util.isNullOrUndefined(currentColumn) || uk.util.isNullOrUndefined(currentColumnIndex))
                                    return;
                                if (currentColumnIndex === unfixedColumns.length - 1) {
                                    return {
                                        options: fixedColumns.length > 0 ? fixedColumns[0] : unfixedColumns[0],
                                        index: 0
                                    };
                                }
                                return {
                                    options: unfixedColumns[currentColumnIndex + 1],
                                    index: currentColumnIndex + 1
                                };
                            }
                        }
                        utils.nextColumnByKey = nextColumnByKey;
                        function rowAt(cell) {
                            if (uk.util.isNullOrUndefined(cell))
                                return;
                            return $(cell.element).closest("tr");
                        }
                        utils.rowAt = rowAt;
                        function nextNRow(cell, noOfNext) {
                            return $(cell.element).closest("tr").nextAll("tr:eq(" + (noOfNext - 1) + ")");
                        }
                        utils.nextNRow = nextNRow;
                        function getDisplayColumnIndex($grid, cell) {
                            var columns = $grid.igGrid("option", "columns");
                            for (var i = 0; i < columns.length; i++) {
                                if (columns[i].key === cell.columnKey)
                                    return i;
                            }
                            return -1;
                        }
                        utils.getDisplayColumnIndex = getDisplayColumnIndex;
                        function getDisplayContainer($grid) {
                            return $("#" + $grid.attr("id") + "_displayContainer");
                        }
                        utils.getDisplayContainer = getDisplayContainer;
                        function getScrollContainer($grid) {
                            return $("#" + $grid.attr("id") + "_scrollContainer");
                        }
                        utils.getScrollContainer = getScrollContainer;
                        function startEdit($grid, cell) {
                            var visibleColumns = getVisibleColumns($grid);
                            for (var i = 0; i < visibleColumns.length; i++) {
                                if (visibleColumns[i].key === cell.columnKey) {
                                    $grid.igGridUpdating("startEdit", cell.id, i);
                                    break;
                                }
                            }
                        }
                        utils.startEdit = startEdit;
                        function hideColumns($grid, columns) {
                            $grid.igGridHiding("hideMultiColumns", columns);
                        }
                        utils.hideColumns = hideColumns;
                        function showColumns($grid, columns) {
                            $grid.igGridHiding("showMultiColumns", columns);
                        }
                        utils.showColumns = showColumns;
                        function disableNtsControl($grid, cell, controlType) {
                            var control = ntsControls.getControl(controlType);
                            if (uk.util.isNullOrUndefined(control))
                                return;
                            control.disable(cell.$element);
                            if (!cell.$element.hasClass(color.Disable))
                                cell.$element.addClass(color.Disable);
                            color.pushDisable($grid, { id: cell.id, columnKey: cell.columnKey });
                        }
                        utils.disableNtsControl = disableNtsControl;
                        function analyzeColumns(columns) {
                            var flatCols = [];
                            flatColumns(columns, flatCols);
                            return flatCols;
                        }
                        utils.analyzeColumns = analyzeColumns;
                        function flatColumns(columns, flatCols) {
                            _.forEach(columns, function (column) {
                                if (uk.util.isNullOrUndefined(column.group)) {
                                    flatCols.push(column);
                                    return;
                                }
                                flatColumns(column.group, flatCols);
                            });
                        }
                        function dateFormat(format) {
                            var formats;
                            if (format === "y") {
                                formats = ["YYYY"];
                            }
                            else if (format === "ym") {
                                formats = ["YYYY/MM", "YYYYMM"];
                            }
                            else {
                                formats = ["YYYY/MM/DD", "YYYY/M/D", "YYYYMMDD"];
                            }
                            return formats;
                        }
                        utils.dateFormat = dateFormat;
                        function daysBoard(date) {
                            var days = [];
                            if (date.date() > 1) {
                                date = moment({ y: date.year(), M: date.month(), d: 1 });
                            }
                            var weekday = date.isoWeekday(), monthdays = date.daysInMonth(), prevDays, last = monthdays + weekday;
                            if (date.month() === 0) {
                                prevDays = moment({ y: date.year() - 1, M: 11, d: 1 }).daysInMonth();
                            }
                            else
                                prevDays = moment({ y: date.year(), M: date.month() - 1, d: 1 }).daysInMonth();
                            for (var i = weekday - 1; i >= 0; i--) {
                                days[i] = prevDays - weekday + 1 + i;
                            }
                            for (var i = weekday; i < last; i++) {
                                days[i] = i - weekday + 1;
                            }
                            for (var i = last; i < 42; i++) {
                                days[i] = i - last + 1;
                            }
                            return days;
                        }
                        utils.daysBoard = daysBoard;
                        function closeDD($dd) {
                            $dd.style.top = "-99999px";
                            $dd.style.left = "-99999px";
                        }
                        utils.closeDD = closeDD;
                        function setChildrenTabIndex($grid, index) {
                            var container = $grid.igGrid("container");
                            $(container).attr("tabindex", 0);
                            $(container).find("tr, th, td").attr("tabindex", index);
                        }
                        utils.setChildrenTabIndex = setChildrenTabIndex;
                        function outsideGrid($grid, target) {
                            return !$grid.is(target) && $grid.has(target).length === 0;
                        }
                        utils.outsideGrid = outsideGrid;
                    })(utils || (utils = {}));
                })(ntsGrid = jqueryExtentions.ntsGrid || (jqueryExtentions.ntsGrid = {}));
            })(jqueryExtentions = ui_24.jqueryExtentions || (ui_24.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsPopup;
                (function (ntsPopup) {
                    var DATA_INSTANCE_NAME = 'nts-popup-panel';
                    ;
                    $.fn.ntsPopup = handler;
                    function handler(action, option) {
                        var $control = $(this);
                        if (typeof action !== 'string') {
                            handler.call(this, "init", action);
                        }
                        switch (action) {
                            case 'init':
                                init($control, option);
                                break;
                            case 'show':
                                show($control);
                                break;
                            case 'hide':
                                hide($control);
                                break;
                            case 'destroy':
                                destroy($control);
                                break;
                            case 'toggle':
                                toggle($control);
                                break;
                        }
                    }
                    function init(control, option) {
                        control.addClass("popup-panel").css("z-index", 100).show();
                        // Default Setting
                        var defaultoption = {
                            trigger: "",
                            position: {
                                my: 'left top',
                                at: 'left bottom',
                                of: control.siblings('.show-popup')
                            },
                            showOnStart: false,
                            dismissible: true
                        };
                        var setting = $.extend({}, defaultoption, option);
                        control.data("option", setting);
                        // Trigger Element
                        $(setting.trigger).on("click.popup", function (e) {
                            show(control);
                        });
                        // Dismissible
                        if (setting.dismissible) {
                            $(window).on("mousedown.popup", function (e) {
                                if (!$(e.target).is(control) // Target isn't Popup
                                    && control.has(e.target).length === 0 // Target isn't Popup's children
                                    && !$(e.target).is(setting.trigger)) { // Target isn't Trigger element
                                    hide(control);
                                }
                            });
                        }
                        // Show on Start
                        if (setting.showOnStart)
                            show(control);
                        else
                            hide(control);
                        return control;
                    }
                    function show(control) {
                        control.css({
                            visibility: 'visible',
                        });
                        control.position(control.data("option").position);
                        return control;
                    }
                    function hide(control) {
                        control.css({
                            visibility: 'hidden',
                            top: "-9999px",
                            left: "-9999px"
                        });
                        return control;
                    }
                    function destroy(control) {
                        hide(control);
                        $(control.data("option").trigger).off("click.popup");
                        $(window).off("click.popup");
                        return control;
                    }
                    function toggle(control) {
                        var isDisplaying = control.css("visibility");
                        if (isDisplaying === 'hidden') {
                            show(control);
                        }
                        else {
                            hide(control);
                        }
                        return control;
                    }
                    var NtsPopupPanel = /** @class */ (function () {
                        function NtsPopupPanel($panel, option) {
                            var parent = $panel.parent();
                            this.$panel = $panel
                                .data(DATA_INSTANCE_NAME, this)
                                .addClass('popup-panel')
                                .appendTo(parent);
                            this.$panel.css("z-index", 100);
                        }
                        return NtsPopupPanel;
                    }());
                })(ntsPopup = jqueryExtentions.ntsPopup || (jqueryExtentions.ntsPopup = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_25) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsSearchBox;
                (function (ntsSearchBox) {
                    $.fn.setupSearchScroll = function (controlType, virtualization) {
                        var $control = this;
                        if (controlType.toLowerCase() == 'iggrid')
                            return setupIgGridScroll($control, virtualization);
                        if (controlType.toLowerCase() == 'igtreegrid')
                            return setupTreeGridScroll($control, virtualization);
                        if (controlType.toLowerCase() == 'igtree')
                            return setupIgTreeScroll($control);
                        return this;
                    };
                    function setupIgGridScroll($control, virtualization) {
                        var $grid = $control;
                        if (virtualization) {
                            $grid.on("selectChange", function () {
                                var row = null;
                                if ($grid.igGridSelection('option', 'multipleSelection')) {
                                    var chk = $grid.closest('.ui-iggrid').find(".ui-iggrid-rowselector-header").find("span[data-role='checkbox']");
                                    if (chk.attr("data-chk") == "on") {
                                        return;
                                    }
                                }
                                var selectedRows = $grid.igGrid("selectedRows");
                                var keyProperty = $grid.igGrid("option", "primaryKey");
                                var sourceKeys = _.map($grid.igGrid("option", "dataSource"), function (o) { return o[keyProperty]; });
                                var selectedKeys = _.map(selectedRows, function (o) { return o["id"]; });
                                if (_.isEqual(_.sortBy(_.uniq(sourceKeys)), _.sortBy(_.uniq(selectedKeys)))) {
                                    return;
                                }
                                if (selectedRows) {
                                    row = selectedRows[0];
                                }
                                else {
                                    row = $grid.igGrid("selectedRow");
                                }
                                if (row) {
                                    ui.ig.grid.virtual.expose(row, $grid);
                                }
                            });
                        }
                        else {
                            $grid.on("selectChange", function () {
                                var row = null;
                                if ($grid.igGridSelection('option', 'multipleSelection')) {
                                    var chk = $grid.closest('.ui-iggrid').find(".ui-iggrid-rowselector-header").find("span[data-role='checkbox']");
                                    if (chk.attr("data-chk") == "on") {
                                        return;
                                    }
                                }
                                var selectedRows = $grid.igGrid("selectedRows");
                                var keyProperty = $grid.igGrid("option", "primaryKey");
                                var sourceKeys = _.map($grid.igGrid("option", "dataSource"), function (o) { return o[keyProperty]; });
                                var selectedKeys = _.map(selectedRows, function (o) { return o["id"]; });
                                if (_.isEqual(_.sortBy(_.uniq(sourceKeys)), _.sortBy(_.uniq(selectedKeys)))) {
                                    return;
                                }
                                if (selectedRows) {
                                    row = selectedRows[0];
                                }
                                else {
                                    row = $grid.igGrid("selectedRow");
                                }
                                if (row) {
                                    ui.ig.grid.expose(row, $grid);
                                }
                            });
                        }
                        return $grid;
                    }
                    function exporeTo($grid, exposeFunction) {
                        var row = null;
                        if ($grid.igGridSelection('option', 'multipleSelection')) {
                            var chk = $grid.closest('.ui-iggrid').find(".ui-iggrid-rowselector-header").find("span[data-role='checkbox']");
                            if (chk.attr("data-chk") === "off") {
                                return;
                            }
                        }
                        var selectedRows = $grid.igGrid("selectedRows");
                        var keyProperty = $grid.igGrid("option", "primaryKey");
                        var sourceKeys = _.map($grid.igGrid("option", "dataSource"), function (o) { return o[keyProperty]; });
                        var selectedKeys = _.map(selectedRows, function (o) { return o["id"]; });
                        if (_.isEqual(_.sortBy(_.uniq(sourceKeys)), _.sortBy(_.uniq(selectedKeys)))) {
                            return;
                        }
                        if (selectedRows) {
                            row = selectedRows[0];
                        }
                        else {
                            row = $grid.igGrid("selectedRow");
                        }
                        if (row) {
                            exposeFunction(row);
                        }
                    }
                    function getSelectRowIndex($grid, selectedValue) {
                        var dataSource = $grid.igGrid("option", "dataSource");
                        var primaryKey = $grid.igGrid("option", "primaryKey");
                        return _.findIndex(dataSource, function (s) { return s[primaryKey].toString() === selectedValue.toString(); });
                    }
                    function setupTreeGridScroll($control, virtualization) {
                        var $treegrid = $control;
                        var id = $treegrid.attr('id');
                        $treegrid.on("selectChange", function () {
                            var row = null;
                            var selectedRows = $treegrid.igTreeGridSelection("selectedRows");
                            if (selectedRows) {
                                row = selectedRows[0];
                            }
                            else {
                                row = $treegrid.igTreeGridSelection("selectedRow");
                            }
                            if (row) {
                                ui.ig.tree.grid.expandTo(row.id, $treegrid);
                            }
                        });
                        return $treegrid;
                    }
                    function setupIgTreeScroll($control) {
                        var id = $control.attr('id');
                        $control.on("selectChange", function () {
                            //                var selectedRows = $control.ntsTreeDrag("getSelected");
                            //                if ($.isArray(selectedRows)) {
                            //                    selectedRows = selectedRows[0];
                            //                }
                            //                if (!nts.uk.util.isNullOrUndefined(selectedRows)) {
                            //                    $control.igTree("expandToNode", selectedRows.element);
                            //                    setTimeout(() =>{ $control[0].scrollTop = $control.ntsTreeDrag("getPosition", $(selectedRows.element)); }, 100);
                            //                }
                        });
                        return $control;
                    }
                    $.fn.ntsSearchBox = function (options) {
                        var self = this;
                        var $container = $(self);
                        if (typeof options === "string") {
                            return delegateMethod($container, options, arguments[1]);
                        }
                        var minusWidth = 0;
                        var fields = options.fields;
                        var placeHolder = (options.placeHolder !== undefined) ? options.placeHolder : ui_25.toBeResource.searchByCodeName;
                        var searchMode = (options.searchMode !== undefined) ? options.searchMode : "highlight";
                        var defaultSearchText = (searchMode === 'highlight') ? ui_25.toBeResource.search : ui_25.toBeResource.filter;
                        var searchText = (options.searchText !== undefined) ? options.searchText : defaultSearchText;
                        var label = (options.label !== undefined) ? options.label : "";
                        var enable = options.enable;
                        var dataSource = options.items;
                        var childField = null;
                        if (options.childField) {
                            childField = options.childField;
                        }
                        var targetMode = options.mode;
                        if (targetMode === "listbox") {
                            targetMode = "igGrid";
                        }
                        var tabIndex = nts.uk.util.isNullOrEmpty($container.attr("tabindex")) ? "0" : $container.attr("tabindex");
                        $container.addClass("nts-searchbbox-wrapper").removeAttr("tabindex");
                        $container.append("<div class='input-wrapper'><span class='nts-editor-wrapped ntsControl'><input class='ntsSearchBox nts-editor ntsSearchBox_Component' type='text' /></span></div>");
                        $container.append("<div class='input-wrapper'><button class='search-btn caret-bottom ntsSearchBox_Component'>" + searchText + "</button></div>");
                        if (!nts.uk.util.isNullOrEmpty(label)) {
                            var $formLabel = $("<div>", { text: label });
                            $formLabel.prependTo($container);
                            ko.bindingHandlers["ntsFormLabel"].init($formLabel[0], function () {
                                return {};
                            });
                            minusWidth += $formLabel.outerWidth(true);
                        }
                        var $button = $container.find("button.search-btn");
                        var $input = $container.find("input.ntsSearchBox");
                        minusWidth += $button.outerWidth(true);
                        if (searchMode === "filter") {
                            $container.append("<button class='clear-btn ntsSearchBox_Component'>" + nts.uk.ui.toBeResource.clear + "</button>");
                            var $clearButton = $container.find("button.clear-btn");
                            minusWidth += $clearButton.outerWidth(true);
                            $clearButton.click(function (evt, ui) {
                                var component = $("#" + options.comId);
                                if (component.hasClass("listbox-wrapper")) {
                                    component = $("#" + options.comId).find(".ntsListBox");
                                }
                                var srh = $container.data("searchObject");
                                $input.val("");
                                component.igGrid("option", "dataSource", srh.seachBox.getDataSource());
                                component.igGrid("dataBind");
                                $container.data("searchKey", null);
                                component.attr("filtered", "false");
                                _.defer(function () {
                                    component.trigger("selectChange");
                                });
                            });
                        }
                        $input.attr("placeholder", placeHolder);
                        $input.attr("data-name", nts.uk.ui.toBeResource.searchBox);
                        $input.outerWidth($container.outerWidth(true) - minusWidth);
                        var primaryKey = options.targetKey;
                        var searchObject = new ui_25.koExtentions.SearchPub(primaryKey, searchMode, dataSource, fields, childField);
                        $container.data("searchObject", searchObject);
                        var search = function (searchKey) {
                            if (targetMode) {
                                var selectedItems = void 0, isMulti = void 0;
                                var component_2 = $("#" + options.comId);
                                if (targetMode == 'igGrid') {
                                    if (component_2.hasClass("listbox-wrapper")) {
                                        component_2 = $("#" + options.comId).find(".ntsListBox");
                                    }
                                    selectedItems = component_2.ntsGridList("getSelected");
                                    isMulti = component_2.igGridSelection('option', 'multipleSelection');
                                }
                                else if (targetMode == 'igTree') {
                                    selectedItems = component_2.ntsTreeView("getSelected");
                                    isMulti = component_2.igTreeGridSelection('option', 'multipleSelection');
                                }
                                else if (targetMode == 'igTreeDrag') {
                                    selectedItems = component_2.ntsTreeDrag("getSelected");
                                    isMulti = component_2.ntsTreeDrag('option', 'isMulti');
                                }
                                var srh = $container.data("searchObject");
                                var result = srh.search(searchKey, selectedItems);
                                if (nts.uk.util.isNullOrEmpty(result.options)) {
                                    var mes = '';
                                    if (searchMode === "highlight") {
                                        mes = nts.uk.resource.getMessage("MsgB_25");
                                    }
                                    else {
                                        mes = nts.uk.ui.toBeResource.targetNotFound;
                                    }
                                    nts.uk.ui.dialog.alert(mes).then(function () {
                                        $input.focus();
                                        $input.select();
                                    });
                                    return false;
                                }
                                var selectedProperties = _.map(result.selectItems, primaryKey);
                                if (targetMode === 'igGrid') {
                                    component_2.ntsGridList("setSelected", selectedProperties);
                                    if (searchMode === "filter") {
                                        $container.data("filteredSrouce", result.options);
                                        component_2.attr("filtered", "true");
                                        //selected(selectedValue);
                                        //selected.valueHasMutated();
                                        //                            let source = _.filter(srh.getDataSource(), function (item: any){
                                        //                                             return _.find(result.options, function (itemFilterd: any){
                                        //                                            return itemFilterd[primaryKey] === item[primaryKey];
                                        //                                                }) !== undefined || _.find(srh.getDataSource(), function (oldItem: any){
                                        //                                             return oldItem[primaryKey] === item[primaryKey];
                                        //                                            }) === undefined;
                                        //                            });
                                        //                            component.igGrid("option", "dataSource", _.cloneDeep(source));
                                        component_2.igGrid("option", "dataSource", _.cloneDeep(result.options));
                                        component_2.igGrid("dataBind");
                                        //                            if(nts.uk.util.isNullOrEmpty(selectedProperties)){
                                        component_2.trigger("selectionchanged");
                                        //                            }
                                    }
                                    else {
                                        component_2.trigger("selectionchanged");
                                    }
                                }
                                else if (targetMode == 'igTree') {
                                    component_2.ntsTreeView("setSelected", selectedProperties);
                                    component_2.trigger("selectionchanged");
                                    //selected(selectedValue);
                                }
                                else if (targetMode == 'igTreeDrag') {
                                    component_2.ntsTreeDrag("setSelected", selectedProperties);
                                }
                                _.defer(function () {
                                    component_2.trigger("selectChange");
                                });
                                $container.data("searchKey", searchKey);
                            }
                            return true;
                        };
                        var nextSearch = function () {
                            var searchKey = $input.val();
                            if (nts.uk.util.isNullOrEmpty(searchKey)) {
                                nts.uk.ui.dialog.alert(nts.uk.resource.getMessage("MsgB_24")).then(function () {
                                    $input.focus();
                                    //                        $input.select();
                                });
                                return false;
                            }
                            return search(searchKey);
                        };
                        $input.keydown(function (event) {
                            if (event.which == 13) {
                                event.preventDefault();
                                var result_3 = nextSearch();
                                _.defer(function () {
                                    if (result_3) {
                                        $input.focus();
                                    }
                                });
                            }
                        });
                        $button.click(function () {
                            nextSearch();
                        });
                        $container.find(".ntsSearchBox_Component").attr("tabindex", tabIndex);
                        if (enable === false) {
                            $container.find(".ntsSearchBox_Component").attr('disabled', 'disabled');
                        }
                    };
                    function delegateMethod($searchBox, action, param) {
                        switch (action) {
                            case "setDataSource":
                                setDataSource($searchBox, param);
                                break;
                            case "setEnable":
                                setEnable($searchBox, param);
                                break;
                        }
                    }
                    function setDataSource($searchBox, dataSource) {
                        var srhX = $searchBox.data("searchObject");
                        srhX.setDataSource(dataSource);
                    }
                    function setEnable($searchBox, enable) {
                        if (enable === false) {
                            $searchBox.find(".ntsSearchBox_Component").attr('disabled', 'disabled');
                        }
                        else {
                            $searchBox.find(".ntsSearchBox_Component").removeAttr('disabled');
                        }
                    }
                })(ntsSearchBox || (ntsSearchBox = {}));
            })(jqueryExtentions = ui_25.jqueryExtentions || (ui_25.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_26) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var errorMementos = {};
                var currentTabIndex = undefined;
                var ntsSideBar;
                (function (ntsSideBar) {
                    ;
                    var defaultOption = {
                        active: 0,
                        beforeActivate: function (event, info) { },
                        activate: function (event, info) { },
                    };
                    $.fn.ntsSideBar = function (action, option) {
                        var $control = $(this);
                        if (nts.uk.util.isNullOrUndefined(action) || action === "init") {
                            return init($control, option);
                        }
                        else if (action === "active") {
                            return active($control, option);
                        }
                        else if (action === "reactive") {
                            return reactive($control);
                        }
                        else if (action === "enable") {
                            return enable($control, option);
                        }
                        else if (action === "disable") {
                            return disable($control, option);
                        }
                        else if (action === "show") {
                            return show($control, option);
                        }
                        else if (action === "hide") {
                            return hide($control, option);
                        }
                        else if (action === "getCurrent") {
                            return getCurrent($control);
                        }
                        else {
                            return $control;
                        }
                        ;
                    };
                    function init(control, option) {
                        $("html").addClass("sidebar-html");
                        control.find(".sidebar-content > div[role=tabpanel]").addClass("disappear");
                        var settings = $.extend({}, defaultOption, option);
                        control.off("click.sideBarClick", "#sidebar-area .navigator a");
                        control.on("click.sideBarClick", "#sidebar-area .navigator a", function (event) {
                            event.preventDefault();
                            var info = {
                                oldIndex: getCurrent(control),
                                newIndex: $(this).closest("li").index(),
                                oldTab: control.find("#sidebar-area .navigator a.active").closest("li"),
                                newTab: $(this).closest("li")
                            };
                            if ($(this).attr("disabled") !== "true" && $(this).attr("disabled") !== "disabled") {
                                settings.beforeActivate.call(this, event, info);
                                if ($(this).attr("href") !== undefined)
                                    active(control, $(this).closest("li").index());
                                settings.activate.call(this, event, info);
                            }
                        });
                        return active(control, settings.active, true);
                    }
                    function reactive(control) {
                        return active(control, control.data("active"), false);
                    }
                    function active(control, index, isInit) {
                        if (isInit === void 0) { isInit = false; }
                        control.data("active", index);
                        control.find("#sidebar-area .navigator a").removeClass("active");
                        control.find("#sidebar-area .navigator a").eq(index).addClass("active");
                        control.find(".sidebar-content > div[role=tabpanel]").addClass("disappear");
                        var $displayPanel = $(control.find("#sidebar-area .navigator a").eq(index).attr("href"));
                        if ($displayPanel.length > 0) {
                            if (!isInit) {
                                // keep error in old tab
                                if (currentTabIndex !== undefined) {
                                    errorMementos[currentTabIndex] = ui.errors.errorsViewModel().stashMemento();
                                }
                                // restore error in new tab
                                if (errorMementos[index] !== undefined) {
                                    ui.errors.errorsViewModel().restoreFrom(errorMementos[index]);
                                }
                            }
                            currentTabIndex = index;
                            $displayPanel.removeClass("disappear");
                            setErrorPosition($displayPanel);
                        }
                        return control;
                    }
                    function setErrorPosition($displayPanel) {
                        setTimeout(function () {
                            if ($displayPanel.find(".sidebar-content-header").length > 0) {
                                $('#func-notifier-errors').addClass("show-immediately");
                                $('#func-notifier-errors').position({ my: 'left+145 top+44', at: 'left top', of: $displayPanel.find(".sidebar-content-header") });
                                $('#func-notifier-errors').removeClass("show-immediately");
                            }
                            else {
                                setErrorPosition($(".sidebar-content"));
                            }
                        }, 10);
                    }
                    function enable(control, index) {
                        control.find("#sidebar-area .navigator a").eq(index).removeAttr("disabled");
                        return control;
                    }
                    function disable(control, index) {
                        control.find("#sidebar-area .navigator a").eq(index).attr("disabled", "disabled");
                        return control;
                    }
                    function show(control, index) {
                        control.find("#sidebar-area .navigator a").eq(index).show();
                        return control;
                    }
                    function hide(control, index) {
                        var current = getCurrent(control);
                        if (current === index) {
                            active(control, 0);
                        }
                        control.find("#sidebar-area .navigator a").eq(index).hide();
                        return control;
                    }
                    function getCurrent(control) {
                        return control.find("#sidebar-area .navigator a.active").closest("li").index();
                    }
                })(ntsSideBar || (ntsSideBar = {}));
            })(jqueryExtentions = ui_26.jqueryExtentions || (ui_26.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_27) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsTreeGrid;
                (function (ntsTreeGrid) {
                    $.fn.ntsTreeGrid = function (options) {
                        var ROW_HEIGHT = 24;
                        var HEADER_HEIGHT = 24;
                        var self = this;
                        var $treegrid = $(self);
                        if (typeof options === "string") {
                            return delegateMethod($treegrid, options, arguments[1]);
                        }
                        var dataSource = options.dataSource;
                        var optionsValue = options.primaryKey !== undefined ? options.primaryKey : options.optionsValue;
                        var optionsText = options.primaryText !== undefined ? options.primaryText : options.optionsText;
                        var optionsChild = options.childDataKey !== undefined ? options.childDataKey : options.optionsChild;
                        var extColumns = options.columns !== undefined ? options.columns : options.extColumns;
                        var initialExpandDepth = options.initialExpandDepth;
                        var selectedValues = options.selectedValues;
                        var singleValue = options.value;
                        var rows = options.rows;
                        var virtualization = !uk.util.isNullOrUndefined(options.virtualization) ? options.virtualization : false;
                        var virtualizationMode = !uk.util.isNullOrUndefined(options.virtualizationMode) ? options.virtualizationMode : "";
                        var multiple = !_.isNil(options.multiple) ? options.multiple : false;
                        var isFilter = ko.unwrap(!uk.util.isNullOrUndefined(options.filter) ? options.filter : false);
                        // Default.
                        var showCheckBox = options.showCheckBox !== undefined ? options.showCheckBox : true;
                        var enable = options.enable !== undefined ? options.enable : true;
                        var height = options.height !== undefined ? options.height : 0;
                        var width = options.width !== undefined ? options.width : 0;
                        var displayColumns;
                        if (extColumns !== undefined && extColumns !== null) {
                            displayColumns = extColumns;
                        }
                        else {
                            displayColumns = [
                                { headerText: ui_27.toBeResource.code, key: optionsValue, dataType: "string", hidden: true },
                                { headerText: ui_27.toBeResource.codeAndName, key: optionsText, dataType: "string" }
                            ];
                        }
                        var tabIndex = nts.uk.util.isNullOrEmpty($treegrid.attr("tabindex")) ? "0" : $treegrid.attr("tabindex");
                        $treegrid.attr("tabindex", "-1");
                        var features = [];
                        features.push({
                            name: "Selection",
                            multipleSelection: multiple,
                            activation: true,
                            rowSelectionChanged: function (evt, ui) {
                                //                    let selectedRows: Array<any> = ui.selectedRows;
                                //                    if (options.multiple) {
                                //                        selectRows($treegrid, _.map(selectedRows, function(row) {
                                //                            return row.id;
                                //                        }));
                                //                    } else {
                                //                        selectRows($treegrid, selectedRows.length <= 0 ? undefined : ui.row.id);
                                //                    }
                            }, rowSelectionChanging: function (evt, ui) {
                                var disabledRows = $treegrid.data("rowDisabled");
                                if (!_.isEmpty(disabledRows)) {
                                    _.remove(ui.selectedRows, function (r) {
                                        return disabledRows.includes(r.id);
                                    });
                                }
                            }
                        });
                        features.push({
                            name: "RowSelectors",
                            enableCheckBoxes: showCheckBox,
                            rowSelectorColumnWidth: showCheckBox ? 25 : 0,
                            enableRowNumbering: false,
                            checkBoxMode: "biState"
                        });
                        features.push({ name: "Resizing" });
                        if (!nts.uk.util.isNullOrEmpty(rows)) {
                            height = rows * ROW_HEIGHT + HEADER_HEIGHT;
                            if (window.navigator.userAgent.indexOf("MSIE") > -1 || window.navigator.userAgent.match(/trident/i)
                                || window.navigator.userAgent.indexOf("Edge") > -1) {
                                height += rows * 0.4;
                            }
                            var colSettings_4 = [];
                            _.forEach(displayColumns, function (c) {
                                if (c["hidden"] === undefined || c["hidden"] === false) {
                                    colSettings_4.push({ columnKey: c["key"], allowTooltips: true });
                                    if (nts.uk.util.isNullOrEmpty(c["columnCssClass"])) {
                                        c["columnCssClass"] = "text-limited";
                                    }
                                    else {
                                        c["columnCssClass"] += " text-limited";
                                    }
                                }
                            });
                            features.push({
                                name: "Tooltips",
                                columnSettings: colSettings_4,
                                visibility: "overflow",
                                showDelay: 200,
                                hideDelay: 200
                            });
                            $treegrid.addClass("row-limited");
                        }
                        if (isFilter) {
                            features.push({ name: "Filtering", filterDelay: 100, filterDropDownAnimationDuration: 100,
                                dataFiltered: function (evt, ui) {
                                    var disabled = $treegrid.data("rowDisabled");
                                    if (!_.isEmpty(disabled)) {
                                        $treegrid.ntsTreeView("disableRows", disabled);
                                    }
                                }, dataFiltering: function (evt, ui) {
                                    var disabled = $treegrid.data("rowDisabled"), treeId = $treegrid.attr("id"), currentCol = _.find(ui.owner.grid.options.columns, function (c) { return c.key === ui.columnKey; }), shouldRemove = $treegrid.data("customExpression");
                                    _.remove(ui.newExpressions, function (ex) { return _.isNil(ex.expr); });
                                    if (!_.isEmpty(shouldRemove)) {
                                        _.remove(ui.newExpressions, function (ex) { return !_.isNil(_.find(shouldRemove, function (sr) { return _.isEqual(sr, ex); })); });
                                        $treegrid.data("customExpression", []);
                                    }
                                    if (!_.isNil(currentCol) && currentCol.formatType === "checkbox" && !_.isNil(currentCol.filterOpts)) {
                                        var currentExp = _.find(ui.newExpressions, function (exp) { return exp.fieldName === ui.columnKey; });
                                        if (!_.isNil(currentExp)) {
                                            var isFilterTrue = currentExp.expr.toLowerCase() === "check";
                                            ui.owner._currentTarget.closest(".ui-iggrid-filtercell").find(".ui-iggrid-filtereditor")
                                                .val(isFilterTrue ? currentCol.filterOpts.trueOpt : currentCol.filterOpts.falseOpt);
                                        }
                                    }
                                    if (!_.isEmpty(disabled) && !_.isEmpty(ui.newExpressions)) {
                                        var shouldRemove_2 = [];
                                        _.forEach(disabled, function (rId) {
                                            var newExp = { fieldName: optionsValue, cond: "doesNotEqual", expr: rId };
                                            ui.newExpressions.push(newExp);
                                            shouldRemove_2.push(newExp);
                                        });
                                        $treegrid.data("customExpression", shouldRemove_2);
                                    }
                                    _.forEach(ui.newExpressions, function (ex) {
                                        $treegrid.data("filterIdx_" + ex.fieldName, 0);
                                    });
                                }, dropDownOpening: function (evt, ui) {
                                    var colName = ui.dropDown.attr("aria-describedby"), currentCol = _.find(ui.owner.grid.options.columns, function (c) { return c.key === colName; });
                                    if (!_.isNil(currentCol) && currentCol.formatType === "checkbox") {
                                        var filterOpts = ui.dropDown.find(".ui-iggrid-filterddlistitemicons"), trueOpt = _.find(filterOpts, function (f) { return !_.isNil($(f).data("cond")) && $(f).data("cond").toString().toLowerCase().contains("check"); }), falseOpt = _.find(filterOpts, function (f) { return !_.isNil($(f).data("cond")) && $(f).data("cond").toString().toLowerCase().contains("noncheck"); }), norTrueOpt = _.find(filterOpts, function (f) { return !_.isNil($(f).data("cond")) && $(f).data("cond").toString().toLowerCase() === "true"; }), norFalseOpt = _.find(filterOpts, function (f) { return !_.isNil($(f).data("cond")) && $(f).data("cond").toString().toLowerCase() === ("false"); });
                                        $(norTrueOpt).remove();
                                        $(norFalseOpt).remove();
                                        if (!_.isNil(currentCol.filterOpts)) {
                                            $(trueOpt).find(".ui-iggrid-filterddlistitemcontainer").html(currentCol.filterOpts.trueOpt); //nts.uk.resource.getText("Enum_UseAtr_Use"));
                                            $(falseOpt).find(".ui-iggrid-filterddlistitemcontainer").html(currentCol.filterOpts.falseOpt); //nts.uk.resource.getText("Enum_UseAtr_NotUse"));
                                        }
                                    }
                                }, dropDownClosed: function (evt, ui) {
                                    ui.owner._currentTarget.closest(".ui-iggrid-filtercell").find(".ui-iggrid-filterbutton").removeClass("ui-state-active ui-iggrid-filterbuttonactive");
                                }, filterSummaryAlwaysVisible: false });
                        }
                        $treegrid.data("expand", new ui_27.koExtentions.ExpandNodeHolder());
                        $treegrid.data("autoExpanding", false);
                        var colSet = _.map(displayColumns, function (col) {
                            return { columnKey: col.key, readOnly: true };
                        });
                        features.push({ name: "Updating", editMode: "cell", enableAddChild: false,
                            enableAddRow: false, enableDeleteRow: false, columnSettings: colSet });
                        var cols = $treegrid.ntsTreeView("formatColumns", displayColumns, features);
                        // Init ig grid.
                        $treegrid.igTreeGrid({
                            width: width,
                            height: height,
                            indentation: "12px",
                            dataSource: _.cloneDeep(dataSource),
                            primaryKey: optionsValue,
                            columns: cols,
                            autoCommit: true,
                            childDataKey: optionsChild,
                            initialExpandDepth: nts.uk.util.isNullOrUndefined(initialExpandDepth) ? 10 : initialExpandDepth,
                            tabIndex: -1,
                            features: features,
                            //                autoCommit: true,
                            virtualization: virtualization,
                            virtualizationMode: virtualizationMode,
                            rowExpanded: function (evt, ui) {
                                if (!$treegrid.data("autoExpanding")) {
                                    var holder = $treegrid.data("expand");
                                    holder.addNode(ui["dataRecord"][optionsValue]);
                                    $treegrid.data("expand", holder);
                                }
                                var disabledRows = $treegrid.data("rowDisabled");
                                if (!_.isEmpty(disabledRows)) {
                                    $treegrid.ntsTreeView("disableRows", disabledRows);
                                }
                            }, rowCollapsed: function (evt, ui) {
                                if (!$treegrid.data("autoExpanding")) {
                                    var holder = $treegrid.data("expand");
                                    holder.removeNodeAndChilds(ui["dataRecord"], optionsValue, optionsChild);
                                    $treegrid.data("expand", holder);
                                }
                            }, rowsRendered: function (evt, ui) {
                                $treegrid.data("autoExpanding", true);
                                //                    let holder: koExtentions.ExpandNodeHolder = $treegrid.data("expand");
                                //                    _.forEach(holder.nodes, function(node: any){
                                //                        $treegrid.igTreeGrid("expandRow", node);
                                //                    });
                                if (virtualization) {
                                    var disabledRows = $treegrid.data("rowDisabled");
                                    if (!_.isEmpty(disabledRows)) {
                                        $treegrid.ntsTreeView("disableRows", disabledRows);
                                    }
                                }
                                $treegrid.data("autoExpanding", false);
                            }
                        });
                        var treeGridId = $treegrid.attr('id');
                        $treegrid.closest('.ui-igtreegrid').addClass('nts-treegridview').attr("tabindex", tabIndex);
                        $treegrid.on('selectionchanged', function () {
                            //                if (options.multiple) {
                            //                    let selected: Array<any> = $treegrid.ntsTreeView('getSelected');
                            //                    if (!nts.uk.util.isNullOrEmpty(selected)) {
                            //                        selectRows($treegrid, _.map(selected, s => s.id));
                            //                    } else {
                            //                        selectRows($treegrid);
                            //                    }
                            //                } else {
                            //                    let selected = $treegrid.ntsTreeView('getSelected');
                            //                    if (!nts.uk.util.isNullOrEmpty(selected)) {
                            //                        selectRows($treegrid, selected.id);
                            //                    } else {
                            //                        selectRows($treegrid);
                            //                    }
                            //                }
                        });
                        $treegrid.bind('cellChanging', function () {
                            $treegrid.data("notUpdate", true);
                            var optionX = data.dataSource !== undefined ? data.dataSource : data.options;
                            if (_.isFunction(optionX)) {
                                optionX($treegrid.igTreeGrid("option", "dataSource"));
                            }
                        });
                        $treegrid.setupSearchScroll("igTreeGrid");
                        if (showCheckBox != true) {
                            $treegrid.closest(".nts-treegridview").addClass("no-selector");
                            $treegrid.closest(".nts-treegridview").find("col[data-skip='true']").addClass("no-width");
                        }
                    };
                    function selectRows($treegrid, selectedValue) {
                        var dataSource = $treegrid.igTreeGrid('option', 'dataSource');
                        var multiple = !_.isNil(selectedValue) && selectedValue.constructor === Array;
                        var disabledRows = $treegrid.data("rowDisabled");
                        if (!_.isEmpty(disabledRows)) {
                            if (multiple) {
                                _.remove(selectedValue, function (r) {
                                    return disabledRows.includes(r);
                                });
                            }
                            else {
                                if (!_.isNil(selectedValue) && disabledRows.includes(selectedValue)) {
                                    selectedValue = null;
                                }
                            }
                        }
                        if (nts.uk.util.isNullOrUndefined(selectedValue)) {
                            $treegrid.igTreeGridSelection("clearSelection");
                        }
                        else {
                            var uiSR = $treegrid.ntsTreeView('getSelected');
                            if (multiple) {
                                var olds = _.map(uiSR, function (row) {
                                    return row.id;
                                });
                                if (_.isEqual(selectedValue.sort(), olds.sort())) {
                                    return;
                                }
                                $treegrid.igTreeGridSelection("clearSelection");
                                selectedValue.forEach(function (val) {
                                    $treegrid.igTreeGridSelection("selectRowById", val);
                                });
                            }
                            else {
                                if (!_.isNil(uiSR) && uiSR.id === selectedValue) {
                                    return;
                                }
                                $treegrid.igTreeGridSelection("clearSelection");
                                $treegrid.igTreeGridSelection("selectRowById", selectedValue);
                                ui.ig.tree.grid.expandTo(selectedValue, $treegrid);
                            }
                        }
                    }
                    function delegateMethod($grid, action, param) {
                        switch (action) {
                            case "getDataSource":
                                return $grid.igTreeGrid("option", "dataSource");
                            case "setDataSource":
                                return setDataSource($grid, param);
                            case "getSelected":
                                return $grid.ntsTreeView("getSelected");
                            case "setSelected":
                                return selectRows($grid, param);
                        }
                    }
                    function setDataSource($grid, sources) {
                        if (_.isNil(sources))
                            return;
                        $grid.igTreeGrid("option", "dataSource", sources);
                    }
                })(ntsTreeGrid || (ntsTreeGrid = {}));
            })(jqueryExtentions = ui_27.jqueryExtentions || (ui_27.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsTreeView;
                (function (ntsTreeView) {
                    var OUTSIDE_AUTO_SCROLL_SPEED = {
                        RATIO: 0.2,
                        MAX: 30
                    };
                    $.fn.ntsTreeView = function (action, param, param2) {
                        var $tree = $(this);
                        switch (action) {
                            case 'getSelected':
                                return getSelected($tree);
                            case 'setSelected':
                                return setSelected($tree, param);
                            case 'deselectAll':
                                return deselectAll($tree);
                            case 'virtualScrollTo':
                                return virtualScroll($tree, param);
                            case 'formatColumns':
                                return formatColumns($tree, param, param2);
                            case 'disableRows':
                                return disableRows($tree, param);
                            case 'enableRows':
                                return enableRows($tree, param);
                        }
                    };
                    function disableRows($tree, rowIds) {
                        if (_.isNil(rowIds)) {
                            return;
                        }
                        var disabled = $tree.data("rowDisabled"), columnSets = $tree.igTreeGrid("option", "columns");
                        if (_.isNil(disabled)) {
                            disabled = [];
                        }
                        if (!_.isArray(rowIds)) {
                            rowIds = [rowIds];
                        }
                        columnSets = _.filter(columnSets, function (col) { return !_.isNil(col.formatType); });
                        _.forEach(rowIds, function (r) {
                            _.forEach(columnSets, function (col) {
                                if (_.lowerCase(col.formatType) === "checkbox") {
                                    var cellContainer = $tree.igTreeGrid("cellById", r, col.key);
                                    if (_.isEmpty(cellContainer))
                                        return;
                                    var control = jqueryExtentions.ntsGrid.ntsControls.getControl(jqueryExtentions.ntsGrid.ntsControls.CHECKBOX);
                                    var $cellContainer = $(cellContainer);
                                    control.disable($cellContainer);
                                }
                            });
                            var row = $tree.igTreeGrid("rowById", r);
                            if (_.isEmpty(row) || row.hasClass("row-disabled"))
                                return;
                            row.addClass("row-disabled");
                        });
                        $tree.data("rowDisabled", _.union(disabled, rowIds));
                    }
                    function enableRows($tree, rowIds) {
                        if (_.isNil(rowIds)) {
                            return;
                        }
                        var disabled = $tree.data("rowDisabled"), columnSets = $tree.igTreeGrid("option", "columns");
                        if (_.isNil(disabled)) {
                            return;
                        }
                        if (!_.isArray(rowIds)) {
                            rowIds = [rowIds];
                        }
                        columnSets = _.filter(columnSets, function (col) { return !_.isNil(col.formatType); });
                        _.forEach(rowIds, function (r) {
                            _.forEach(columnSets, function (col) {
                                if (_.lowerCase(col.formatType) === "checkbox") {
                                    var cellContainer = $tree.igTreeGrid("cellById", r, col.key);
                                    if (_.isEmpty(cellContainer))
                                        return;
                                    var control = jqueryExtentions.ntsGrid.ntsControls.getControl(jqueryExtentions.ntsGrid.ntsControls.CHECKBOX);
                                    var $cellContainer = $(cellContainer);
                                    control.enable($cellContainer);
                                }
                            });
                            var row = $tree.igTreeGrid("rowById", r);
                            if (_.isEmpty(row))
                                return;
                            row.removeClass("row-disabled");
                        });
                        $tree.data("rowDisabled", _.difference(disabled, rowIds));
                    }
                    function formatColumns($tree, columns, features) {
                        $tree.data("CB_SELECTED", {});
                        $tree.data("UNIQ", _.isNil($tree.attr("id")) ? nts.uk.util.randomId() : $tree.attr("id"));
                        var helper = {
                            updateX: function (data, val, key, childKey, primaryKey) {
                                if (!_.isEmpty(data)) {
                                    _.forEach(data, function (child) {
                                        var rId = child[primaryKey], controlCls = "nts-grid-control-" + $tree.data("UNIQ") + "-" + key + "-" + rId, $wrapper = $tree.find("." + controlCls), checkbox = $wrapper.find("input[type='checkbox']");
                                        if (checkbox.length > 0) {
                                            if (checkbox.is(":checked") !== val) {
                                                $wrapper.data("changeByParent", true);
                                                checkbox.click();
                                            }
                                        }
                                        else {
                                            $tree.data("igTreeGrid").dataSource.setCellValue(rId, key, val, true);
                                            $tree.data("igTreeGridUpdating")._notifyCellUpdated(rId);
                                            helper.updateX(child[childKey], val, key, childKey, primaryKey);
                                        }
                                    });
                                }
                            }, checkChildSiblings: function (source, key, childKey, primaryKey) {
                                var isAllCheck = _.isNil(_.find(source[childKey], function (c) {
                                    var controlCls = "nts-grid-control-" + $tree.data("UNIQ") + "-" + key + "-" + c[primaryKey], checkbox = $tree.find("." + controlCls).find("input[type='checkbox']");
                                    return !checkbox.is(":checked");
                                }));
                                var controlCls = "nts-grid-control-" + $tree.data("UNIQ") + "-" + key + "-" + source[primaryKey], $wrapper = $tree.find("." + controlCls), $checkbox = $wrapper.find("input[type='checkbox']");
                                if (isAllCheck !== $checkbox.is(":checked")) {
                                    $wrapper.data("changeByChild", true);
                                    $checkbox.click();
                                }
                                return isAllCheck;
                            }, checkSiblings: function (rowId, source, key, childKey, primaryKey) {
                                //let source = $tree.igTreeGrid("option", "dataSource");
                                for (var i = 0; i < source.length; i++) {
                                    if (!_.isEmpty(source[i][childKey])) {
                                        var isParentOf = _.find(source[i][childKey], function (c) { return c[primaryKey] === rowId; });
                                        if (isParentOf) {
                                            var isAllCheck = helper.checkChildSiblings(source[i], key, childKey, primaryKey);
                                            return { process: true, value: isAllCheck };
                                        }
                                        else {
                                            var checkRel = helper.checkSiblings(rowId, source[i][childKey], key, childKey, primaryKey);
                                            if (checkRel.process) {
                                                var isAllCheck = helper.checkChildSiblings(source[i], key, childKey, primaryKey);
                                                return { process: true, value: isAllCheck };
                                            }
                                        }
                                    }
                                }
                                return { process: false, value: false };
                            }, getTrueRowData: function (rowId, primaryKey, childKey) {
                                var dataSource = $tree.data("igTreeGrid").dataSource._origDs, flatSource = helper.flatChild(dataSource, childKey);
                                return _.find(flatSource, function (s) { return s[primaryKey] === rowId; });
                            }, flatChild: function (dataSource, childKey) {
                                var result = [];
                                if (_.isEmpty(dataSource)) {
                                    return result;
                                }
                                _.forEach(dataSource, function (s) {
                                    result = _.concat(result, s, helper.flatChild(s[childKey], childKey));
                                });
                                return result;
                            }
                        };
                        var newColumns = _.map(columns, function (colO) {
                            var col = _.cloneDeep(colO);
                            if (_.lowerCase(col.formatType) === "checkbox") {
                                var oldFormatter = col.formatte, isParentCompute_1 = _.isNil(col.parentCompute) || !col.parentCompute ? false : true;
                                col.formatter = function (value, rowObj) {
                                    if (_.isNil(rowObj))
                                        return "";
                                    var primaryKey = $tree.data("igTreeGrid").options.primaryKey, childKey = $tree.data("igTreeGrid").options.childDataKey, rowId = rowObj[primaryKey], trueRowValue = helper.getTrueRowData(rowId, primaryKey, childKey);
                                    if (_.isNil(trueRowValue) || _.isNil(trueRowValue[col.key]))
                                        return "";
                                    var rowsDisables = $tree.data("rowDisabled"), isRowEnable = _.isNil(rowsDisables) ? true : _.isNil(_.find(rowsDisables, function (r) { return r === rowId; })), controlCls = "nts-grid-control-" + $tree.data("UNIQ") + "-" + col.key + "-" + rowId, $wrapper = $("<div/>").addClass(controlCls).css({ "text-align": 'center', "height": "30px" }), $container = $("<div/>").append($wrapper), $_self = $tree, data = {
                                        rowId: rowId,
                                        columnKey: col.key,
                                        update: function (val) {
                                            if (!_.isNil($tree.data("igTreeGrid"))) {
                                                var $wrapper_1 = $tree.find("." + controlCls);
                                                if ($wrapper_1.data("changeByChild")) {
                                                    $wrapper_1.data("changeByChild", false);
                                                    return;
                                                }
                                                $tree.data("igTreeGrid").dataSource.setCellValue(rowId, col.key, val, true);
                                                $tree.data("igTreeGridUpdating")._notifyCellUpdated(rowId);
                                                if (isParentCompute_1) {
                                                    helper.updateX(rowObj[childKey], val, col.key, childKey, primaryKey);
                                                    if ($wrapper_1.data("changeByParent")) {
                                                        $wrapper_1.data("changeByParent", false);
                                                        return;
                                                    }
                                                    helper.checkSiblings(rowId, $tree.igTreeGrid("option", "dataSource"), col.key, childKey, primaryKey);
                                                }
                                                $tree.trigger("cellChanging");
                                                $tree.trigger("checkboxChanging", { value: val, rowId: rowId, column: col.key, rowData: rowObj, element: $wrapper_1 });
                                            }
                                        }, deleteRow: function () {
                                            if ($tree.data("igTreeGrid") !== null) {
                                                $tree.data("igTreeGridUpdating").deleteRow(rowId);
                                            }
                                        }, initValue: value,
                                        rowObj: rowObj,
                                        showHeaderCheckbox: col.showHeaderCheckbox,
                                        enable: isRowEnable,
                                        controlDef: { controlType: "CheckBox", enable: isRowEnable,
                                            name: "Checkbox", options: { value: 1, text: "" },
                                            optionsText: "text", optionsValue: "value" }
                                    };
                                    var ntsControl = jqueryExtentions.ntsGrid.ntsControls.getControl(jqueryExtentions.ntsGrid.ntsControls.CHECKBOX);
                                    setTimeout(function () {
                                        var $self = $_self;
                                        var $treeCell = $self.igTreeGrid("cellById", data.rowId, data.columnKey);
                                        var gridCellChild;
                                        if (!$treeCell || (gridCellChild = $treeCell.children()).length === 0)
                                            return;
                                        if (gridCellChild[0].children.length === 0) {
                                            var $control = ntsControl.draw(data);
                                            var gridControl = $treeCell[0].querySelector("." + controlCls);
                                            if (!gridControl)
                                                return;
                                            gridControl.appendChild($control[0]);
                                            /**$control.on("change", function() {
                                            });*/
                                            ntsControl.$containedGrid = $self;
                                        }
                                    }, 0);
                                    return $container.html();
                                };
                            }
                            return col;
                        });
                        var filterFeature = _.find(features, function (f) { return f.name === "Filtering"; });
                        if (!_.isNil(filterFeature)) {
                            var filterFunc_1 = function (value, expression, dataType, ignoreCase, preciseDateFormat, colKey) {
                                var flatData = $tree.data("igTreeGrid").dataSource._flatData, currentIdx = $tree.data("filterIdx"), prevCol = $tree.data("previousCol"), primaryKey = $tree.data("igTreeGrid").options.primaryKey, childKey = $tree.data("igTreeGrid").options.childDataKey;
                                if (currentIdx === 0) {
                                    $tree.data("previousCol", colKey);
                                }
                                if (!_.isNil(prevCol) && prevCol !== colKey) {
                                    currentIdx--;
                                }
                                var trueRowValue = helper.getTrueRowData(flatData[currentIdx][primaryKey], primaryKey, childKey);
                                currentIdx++;
                                $tree.data("filterIdx", currentIdx);
                                if (!_.isNil(trueRowValue)) {
                                    if (expression === "check") {
                                        return trueRowValue[colKey] == true;
                                    }
                                    else {
                                        return trueRowValue[colKey] == false;
                                    }
                                }
                                return false;
                            };
                            var customFilter = _.map(_.filter(newColumns, function (c) { return c.formatType === "checkbox"; }), function (c) {
                                return {
                                    columnKey: c.key,
                                    customConditions: {
                                        check: {
                                            labelText: "true",
                                            expressionText: "check",
                                            requireExpr: false,
                                            filterFunc: function (value, expression, dataType, ignoreCase, preciseDateFormat, colKey) {
                                                return filterFunc_1(value, expression, dataType, ignoreCase, preciseDateFormat, colKey);
                                            }
                                        },
                                        nonCheck: {
                                            labelText: "false",
                                            expressionText: "non_check",
                                            requireExpr: false,
                                            filterFunc: function (value, expression, dataType, ignoreCase, preciseDateFormat, colKey) {
                                                return filterFunc_1(value, expression, dataType, ignoreCase, preciseDateFormat, colKey);
                                            }
                                        }
                                    },
                                    conditionList: []
                                };
                            });
                            filterFeature.columnSettings = customFilter;
                        }
                        return newColumns;
                    }
                    function getSelected($tree) {
                        if ($tree.igTreeGridSelection('option', 'multipleSelection')) {
                            var selectedRows = $tree.igTreeGridSelection('selectedRows');
                            if (selectedRows)
                                return _.map(selectedRows, convertSelected);
                            return [];
                        }
                        else {
                            var selectedRow = $tree.igTreeGridSelection('selectedRow');
                            if (selectedRow)
                                return convertSelected(selectedRow);
                            return undefined;
                        }
                    }
                    function convertSelected(selectedRow) {
                        return {
                            id: selectedRow.id,
                            index: selectedRow.index
                        };
                    }
                    function setSelected($tree, selectedId) {
                        deselectAll($tree);
                        var disabledRows = $tree.data("rowDisabled");
                        if ($tree.igTreeGridSelection('option', 'multipleSelection')) {
                            if (!_.isEmpty(disabledRows)) {
                                _.remove(selectedId, function (r) {
                                    return disabledRows.includes(r);
                                });
                            }
                            selectedId.forEach(function (id) {
                                $tree.igTreeGridSelection('selectRowById', id);
                                virtualScroll($tree, id);
                            });
                        }
                        else {
                            if (selectedId.constructor === Array) {
                                selectedId = selectedId[0];
                            }
                            if (!(!_.isEmpty(disabledRows) && !_.isNil(selectedId) && disabledRows.includes(selectedId))) {
                                $tree.igTreeGridSelection('selectRowById', selectedId);
                                virtualScroll($tree, selectedId);
                            }
                            else {
                                selectedId = null;
                            }
                        }
                        $tree.trigger("ntstreeselectionchanged", [selectedId]);
                    }
                    function virtualScroll($tree, id) {
                        var virtualization = $tree.igTreeGrid("option", "virtualization");
                        if (virtualization) {
                            var pk = $tree.igTreeGrid("option", "primaryKey");
                            var childKey = $tree.igTreeGrid("option", "childDataKey");
                            var ds = $tree.igTreeGrid("option", "dataSource");
                            var res = findIndex(ds, id, pk, childKey, 0);
                            if (res.found) {
                                $tree.igTreeGrid("virtualScrollTo", res.index);
                            }
                        }
                    }
                    function findIndex(dataSource, id, pk, childKey, cIndex) {
                        var found = false;
                        _.forEach(dataSource, function (d) {
                            if (d[pk] !== id && d[childKey]) {
                                cIndex++;
                                var res = findIndex(d[childKey], id, pk, childKey, cIndex);
                                if (res.found) {
                                    found = true;
                                    cIndex = res.index;
                                    return false;
                                }
                                cIndex = res.index;
                            }
                            else if (d[pk] === id) {
                                found = true;
                                return false;
                            }
                        });
                        return { index: cIndex, found: found };
                    }
                    function deselectAll($grid) {
                        $grid.igTreeGridSelection('clearSelection');
                    }
                })(ntsTreeView || (ntsTreeView = {}));
                var ntsTreeDrag;
                (function (ntsTreeDrag) {
                    $.fn.ntsTreeDrag = function (action, param, param2) {
                        var $tree = $(this);
                        switch (action) {
                            case 'getSelected':
                                return getSelected($tree);
                            case 'getSelectedID':
                                return getSelectedID($tree);
                            case 'setSelected':
                                return setSelected($tree, param);
                            case 'deselectAll':
                                return deselectAll($tree);
                            case 'isMulti':
                                return isMultiple($tree);
                            case 'getParent':
                                return getParent($tree, param);
                            case 'getPrevious':
                                return getPrevious($tree, param);
                            case 'moveNext':
                                return moveNext($tree, param, param2);
                            case 'moveInto':
                                return moveInto($tree, param, param2);
                            case 'moveUp':
                                return moveUp($tree, param);
                            case 'moveDown':
                                return moveDown($tree, param);
                            case 'getPosition':
                                return getPosition($tree, param);
                        }
                    };
                    function isMultiple($tree) {
                        var isMulti = $tree.igTree("option", "checkboxMode") !== "off";
                        return isMulti;
                    }
                    function getPosition($tree, $node) {
                        var offset = 0, siblings = $node.prevAll(), parent = $node;
                        //                    var offset = $node[0].offsetTop, parent = $node[0].offsetParent;
                        while (true) {
                            siblings.each(function (idx, el) {
                                offset += $(el).height();
                            });
                            parent = $tree.igTree("parentNode", parent);
                            if (_.isNil(parent)) {
                                return offset;
                            }
                            siblings = parent.prevAll();
                        }
                        return 0;
                    }
                    function getSelected($tree) {
                        var isMulti = isMultiple($tree);
                        if (isMulti) {
                            var values = $tree.igTree("checkedNodes");
                            _.forEach(values, function (e) {
                                return e["id"] = e.data[e.binding.valueKey];
                            });
                            return values;
                        }
                        else {
                            var value = $tree.igTree("selectedNode");
                            if (_.isNil(value) || _.isNil(value.binding) || _.isNil(value.data)) {
                                return null;
                            }
                            value["id"] = value.data[value.binding.valueKey];
                            return value;
                        }
                    }
                    function getSelectedID($tree) {
                        var isMulti = isMultiple($tree);
                        if (isMulti) {
                            var values = $tree.igTree("checkedNodes");
                            return _.map(values, function (e) {
                                return e.data[e.binding.valueKey];
                            });
                        }
                        else {
                            var value = $tree.igTree("selectedNode");
                            if (_.isNil(value) || _.isNil(value.binding) || _.isNil(value.data)) {
                                return null;
                            }
                            return value.data[value.binding.valueKey];
                        }
                    }
                    function getParent($tree, target) {
                        target = getTarget($tree, target);
                        if (_.isNil(target)) {
                            return null;
                        }
                        var parent = $tree.igTree("parentNode", $(target.element));
                        if (_.isNil(parent)) {
                            return null;
                        }
                        return $tree.igTree("nodeFromElement", parent);
                    }
                    function getTarget($tree, target) {
                        if (!_.isObjectLike(target)) {
                            return $tree.igTree("nodeFromElement", $tree.igTree("nodesByValue", target));
                        }
                    }
                    function getPrevious($tree, target) {
                        target = getTarget($tree, target);
                        if (_.isNil(target)) {
                            return null;
                        }
                        var binding = target.binding;
                        var parent = $tree.igTree("parentNode", $(target.element));
                        if (_.isNil(parent)) {
                            var source = $tree.igTree("option", "dataSource").__ds, parentIndex_1 = _.findIndex(source, function (v) { return v[binding.valueKey] === target.data[binding.valueKey]; });
                            if (parentIndex_1 <= 0) {
                                return null;
                            }
                            var previous_1 = $tree.igTree("nodesByValue", source[parentIndex_1 - 1][binding.valueKey]);
                            return $tree.igTree("nodeFromElement", previous_1);
                        }
                        var parentData = $tree.igTree("nodeFromElement", parent).data;
                        var parentIndex = _.findIndex(parentData[binding.childDataProperty], function (v) { return v[binding.valueKey] === target.data[binding.valueKey]; });
                        if (parentIndex <= 0) {
                            return null;
                        }
                        var previous = $tree.igTree("nodesByValue", parentData[binding.childDataProperty][parentIndex - 1][binding.valueKey]);
                        return $tree.igTree("nodeFromElement", previous);
                    }
                    function moveDown($tree, target) {
                        target = getTarget($tree, target);
                        if (_.isNil(target)) {
                            return false;
                        }
                        var binding = target.binding, source = $tree.igTree("option", "dataSource").__ds, parent = $tree.igTree("parentNode", $(target.element));
                        if (_.isNil(parent)) {
                            var firstIdx = _.findIndex(source, function (v) { return v[binding.valueKey] === target.data[binding.valueKey]; });
                            if (firstIdx < 0) {
                                return false;
                            }
                            var currentIndex = _.findIndex(source, function (v) { return v[binding.valueKey] === target.data[binding.valueKey]; });
                            if (currentIndex < 0 || currentIndex >= source.length - 1) {
                                return false;
                            }
                            source.splice(currentIndex, 1);
                            source.splice(currentIndex + 1, 0, target.data);
                        }
                        else {
                            var parentClonedData = _.cloneDeep($tree.igTree("nodeFromElement", parent).data);
                            var currentIndex = _.findIndex(parentClonedData[binding.childDataProperty], function (v) { return v[binding.valueKey] === target.data[binding.valueKey]; });
                            if (currentIndex < 0 || currentIndex >= parentClonedData[binding.childDataProperty].length - 1) {
                                return false;
                            }
                            parentClonedData[binding.childDataProperty].splice(currentIndex, 1);
                            parentClonedData[binding.childDataProperty].splice(currentIndex + 1, 0, target.data);
                            source = resetSource(source, parentClonedData, binding);
                        }
                        $tree.igTree("option", "dataSource", source);
                        $tree.igTree("dataBind");
                        $tree.trigger("sourcechanging");
                    }
                    function moveUp($tree, target) {
                        target = getTarget($tree, target);
                        if (_.isNil(target)) {
                            return false;
                        }
                        var binding = target.binding, source = $tree.igTree("option", "dataSource").__ds, parent = $tree.igTree("parentNode", $(target.element));
                        if (_.isNil(parent)) {
                            var firstIdx = _.findIndex(source, function (v) { return v[binding.valueKey] === target.data[binding.valueKey]; });
                            if (firstIdx < 0) {
                                return false;
                            }
                            var currentIndex = _.findIndex(source, function (v) { return v[binding.valueKey] === target.data[binding.valueKey]; });
                            if (currentIndex <= 0) {
                                return false;
                            }
                            source.splice(currentIndex, 1);
                            source.splice(currentIndex - 1, 0, target.data);
                        }
                        else {
                            var parentClonedData = _.cloneDeep($tree.igTree("nodeFromElement", parent).data);
                            var currentIndex = _.findIndex(parentClonedData[binding.childDataProperty], function (v) { return v[binding.valueKey] === target.data[binding.valueKey]; });
                            if (currentIndex <= 0) {
                                return false;
                            }
                            parentClonedData[binding.childDataProperty].splice(currentIndex, 1);
                            parentClonedData[binding.childDataProperty].splice(currentIndex - 1, 0, target.data);
                            source = resetSource(source, parentClonedData, binding);
                        }
                        $tree.igTree("option", "dataSource", source);
                        $tree.igTree("dataBind");
                        $tree.trigger("sourcechanging");
                    }
                    function moveInto($tree, nextParent, target) {
                        target = getTarget($tree, target);
                        nextParent = getTarget($tree, nextParent);
                        if (_.isNil(target) || _.isNil(nextParent)) {
                            return false;
                        }
                        var binding = target.binding, source = $tree.igTree("option", "dataSource").__ds, parent = $tree.igTree("parentNode", $(target.element));
                        if (_.isNil(parent)) {
                            var firstIdx = _.findIndex(source, function (v) { return v[binding.valueKey] === target.data[binding.valueKey]; });
                            if (firstIdx < 0) {
                                return false;
                            }
                            _.remove(source, function (v) { return v[binding.valueKey] === target.data[binding.valueKey]; });
                        }
                        else {
                            var parentClonedData = _.cloneDeep($tree.igTree("nodeFromElement", parent).data);
                            _.remove(parentClonedData[binding.childDataProperty], function (v) { return v[binding.valueKey] === target.data[binding.valueKey]; });
                            source = resetSource(source, parentClonedData, binding);
                        }
                        nextParent.data[binding.childDataProperty].push(target.data);
                        source = resetSource(source, nextParent.data, binding);
                        $tree.igTree("option", "dataSource", source);
                        $tree.igTree("dataBind");
                        $tree.trigger("sourcechanging");
                    }
                    function moveNext($tree, nextTo, target) {
                        target = getTarget($tree, target);
                        nextTo = getTarget($tree, nextTo);
                        if (_.isNil(target) || _.isNil(nextTo)) {
                            return false;
                        }
                        var binding = target.binding, source = $tree.igTree("option", "dataSource").__ds, parent = $tree.igTree("parentNode", $(target.element)), parentOfPrevious = $tree.igTree("parentNode", $(nextTo.element));
                        if (_.isNil(parent)) {
                            return false;
                        }
                        var parentClonedData = _.cloneDeep($tree.igTree("nodeFromElement", parent).data);
                        _.remove(parentClonedData[binding.childDataProperty], function (v) { return v[binding.valueKey] === target.data[binding.valueKey]; });
                        source = resetSource(source, parentClonedData, binding);
                        if (_.isNil(parentOfPrevious)) {
                            var parentIndex = _.findIndex(source, function (v) { return v[binding.valueKey] === nextTo.data[binding.valueKey]; });
                            source.splice(parentIndex + 1, 0, target.data);
                        }
                        else {
                            var parentPreviousData = _.cloneDeep($tree.igTree("nodeFromElement", parentOfPrevious).data);
                            var parentIndex = _.findIndex(parentPreviousData[binding.childDataProperty], function (v) { return v[binding.valueKey] === nextTo.data[binding.valueKey]; });
                            parentPreviousData[binding.childDataProperty].splice(parentIndex + 1, 0, target.data);
                            source = resetSource(source, parentPreviousData, binding);
                        }
                        $tree.igTree("option", "dataSource", source);
                        $tree.igTree("dataBind");
                        $tree.trigger("sourcechanging");
                    }
                    function resetSource(source, target, binding) {
                        for (var i = 0; i < source.length; i++) {
                            if (source[i][binding.valueKey] === target[binding.valueKey]) {
                                source[i] = target;
                            }
                            else {
                                if (!_.isEmpty(source[i][binding.childDataProperty])) {
                                    var sourceX = resetSource(source[i][binding.childDataProperty], target, binding);
                                    source[i][binding.childDataProperty] = sourceX;
                                }
                            }
                        }
                        return source;
                    }
                    function setSelected($tree, selectedId) {
                        var oldSelect = $tree.ntsTreeDrag("getSelectedID");
                        if (_.isEqual(_.flatMapDeep([oldSelect]), (_.flatMapDeep([selectedId])))) {
                            return;
                        }
                        deselectAll($tree);
                        var isMulti = isMultiple($tree);
                        if (isMulti) {
                            if (!$.isArray(selectedId)) {
                                selectedId = [selectedId];
                            }
                            selectedId.forEach(function (id) {
                                var $node = $tree.igTree("nodesByValue", id);
                                $tree.igTree("select", $node);
                            });
                        }
                        else {
                            var $node = $tree.igTree("nodesByValue", selectedId);
                            $tree.igTree("select", $node);
                        }
                    }
                    function deselectAll($tree) {
                        _.forEach($tree.igTree("checkedNodes"), function (node) {
                            $tree.igTree("toggleCheckstate", node.element);
                        });
                    }
                })(ntsTreeDrag || (ntsTreeDrag = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsUserGuide;
                (function (ntsUserGuide) {
                    $.fn.ntsUserGuide = function (action) {
                        var $controls = $(this);
                        if (nts.uk.util.isNullOrUndefined(action) || action === "init") {
                            return init($controls);
                        }
                        else if (action === "destroy") {
                            return destroy($controls);
                        }
                        else if (action === "show") {
                            return show($controls);
                        }
                        else if (action === "hide") {
                            return hide($controls);
                        }
                        else if (action === "toggle") {
                            return toggle($controls);
                        }
                        else if (action === "isShow") {
                            return isShow($controls);
                        }
                        else {
                            return $controls;
                        }
                        ;
                    };
                    function init(controls) {
                        controls.each(function () {
                            // UserGuide container
                            var $control = $(this);
                            $control.remove();
                            if (!$control.hasClass("ntsUserGuide"))
                                $control.addClass("ntsUserGuide");
                            $($control).appendTo($("body")).show();
                            var target = $control.data('target');
                            var direction = $control.data('direction');
                            // Userguide Information Box
                            $control.children().each(function () {
                                var $box = $(this);
                                var boxDirection = $box.data("direction");
                                $box.addClass("userguide-box caret-" + getReveseDirection(boxDirection) + " caret-overlay");
                            });
                            // Userguide Overlay
                            var $overlay = $("<div class='userguide-overlay'></div>")
                                .addClass("overlay-" + direction)
                                .appendTo($control);
                            $control.hide();
                        });
                        // Hiding when click outside
                        $("html").on("mouseup keypress", { controls: controls }, hideBinding);
                        return controls;
                    }
                    function destroy(controls) {
                        controls.each(function () {
                            $(this).remove();
                        });
                        // Unbind Hiding when click outside
                        $("html").off("mouseup keypress", hideBinding);
                        return controls;
                    }
                    function hideBinding(e) {
                        e.data.controls.each(function () {
                            $(this).hide();
                        });
                        return e.data.controls;
                    }
                    function show(controls) {
                        controls.each(function () {
                            var $control = $(this);
                            $control.show();
                            var target = $control.data('target');
                            var direction = $control.data('direction');
                            $control.find(".userguide-overlay").each(function (index, elem) {
                                calcOverlayPosition($(elem), target, direction);
                            });
                            $control.children().each(function () {
                                var $box = $(this);
                                var boxTarget = $box.data("target");
                                var boxDirection = $box.data("direction");
                                var boxMargin = ($box.data("margin")) ? $box.data("margin") : "20";
                                calcBoxPosition($box, boxTarget, boxDirection, boxMargin);
                            });
                        });
                        return controls;
                    }
                    function hide(controls) {
                        controls.each(function () {
                            $(this).hide();
                        });
                        return controls;
                    }
                    function toggle(controls) {
                        if (isShow(controls))
                            hide(controls);
                        else
                            show(controls);
                        return controls;
                    }
                    function isShow(controls) {
                        var result = true;
                        controls.each(function () {
                            if (!$(this).is(":visible"))
                                result = false;
                        });
                        return result;
                    }
                    function calcOverlayPosition(overlay, target, direction) {
                        if (direction === "left")
                            return overlay.css("right", "auto")
                                .css("width", $(target).offset().left);
                        else if (direction === "right")
                            return overlay.css("left", $(target).offset().left + $(target).outerWidth());
                        else if (direction === "top")
                            return overlay.css("position", "absolute")
                                .css("bottom", "auto")
                                .css("height", $(target).offset().top);
                        else if (direction === "bottom")
                            return overlay.css("position", "absolute")
                                .css("top", $(target).offset().top + $(target).outerHeight())
                                .css("height", $("body").height() - $(target).offset().top);
                    }
                    function calcBoxPosition(box, target, direction, margin) {
                        var operation = "+";
                        if (direction === "left" || direction === "top")
                            operation = "-";
                        return box.position({
                            my: getReveseDirection(direction) + operation + margin,
                            at: direction,
                            of: target,
                            collision: "none"
                        });
                    }
                    function getReveseDirection(direction) {
                        if (direction === "left")
                            return "right";
                        else if (direction === "right")
                            return "left";
                        else if (direction === "top")
                            return "bottom";
                        else if (direction === "bottom")
                            return "top";
                    }
                })(ntsUserGuide || (ntsUserGuide = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_28) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsWizard;
                (function (ntsWizard) {
                    $.fn.ntsWizard = function (action, index) {
                        var $wizard = $(this);
                        if (action === "begin") {
                            return begin($wizard);
                        }
                        else if (action === "end") {
                            return end($wizard);
                        }
                        else if (action === "goto") {
                            return goto($wizard, index);
                        }
                        else if (action === "prev") {
                            return prev($wizard);
                        }
                        else if (action === "next") {
                            return next($wizard);
                        }
                        else if (action === "getCurrentStep") {
                            return getCurrentStep($wizard);
                        }
                        else {
                            return $wizard;
                        }
                        ;
                    };
                    function begin(wizard) {
                        var dfd = $.Deferred();
                        wizard.data("waitStepShowed", true);
                        wizard.setStep(0);
                        wizard.bind("stepShowed", function (evt, ui) {
                            wizard.unbind("stepShowed");
                            wizard.data("waitStepShowed", false);
                            dfd.resolve();
                        });
                        return dfd.promise();
                    }
                    function end(wizard) {
                        var dfd = $.Deferred();
                        wizard.data("waitStepShowed", true);
                        wizard.setStep(wizard.data("length") - 1);
                        wizard.bind("stepShowed", function (evt, ui) {
                            wizard.unbind("stepShowed");
                            wizard.data("waitStepShowed", false);
                            dfd.resolve();
                        });
                        return dfd.promise();
                    }
                    function goto(wizard, index) {
                        var dfd = $.Deferred();
                        wizard.data("waitStepShowed", true);
                        wizard.setStep(index);
                        wizard.bind("stepShowed", function (evt, ui) {
                            wizard.unbind("stepShowed");
                            wizard.data("waitStepShowed", false);
                            dfd.resolve();
                        });
                        return dfd.promise();
                    }
                    function prev(wizard) {
                        var dfd = $.Deferred();
                        wizard.data("waitStepShowed", true);
                        wizard.steps("previous");
                        wizard.bind("stepShowed", function (evt, ui) {
                            wizard.unbind("stepShowed");
                            wizard.data("waitStepShowed", false);
                            dfd.resolve();
                        });
                        return dfd.promise();
                    }
                    function next(wizard) {
                        var dfd = $.Deferred();
                        wizard.data("waitStepShowed", true);
                        wizard.steps("next");
                        wizard.bind("stepShowed", function (evt, ui) {
                            wizard.unbind("stepShowed");
                            wizard.data("waitStepShowed", false);
                            dfd.resolve();
                        });
                        return dfd.promise();
                    }
                    function getCurrentStep(wizard) {
                        return wizard.steps("getCurrentIndex");
                    }
                })(ntsWizard || (ntsWizard = {}));
            })(jqueryExtentions = ui_28.jqueryExtentions || (ui_28.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_29) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Accordion binding handler
                 */
                var NtsAccordionBindingHandler = /** @class */ (function () {
                    function NtsAccordionBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsAccordionBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var active = (data.active !== undefined) ? (data.active) : ko.observable(false);
                        var realActive = (nts.uk.ntsNumber.isNumber(ko.unwrap(active))) ? Number(ko.unwrap(active)) : ko.unwrap(active);
                        var animate = (data.animate !== undefined) ? ko.unwrap(data.animate) : {};
                        var collapsible = (data.collapsible !== undefined) ? ko.unwrap(data.collapsible) : true;
                        var event = (data.event !== undefined) ? ko.unwrap(data.event) : "click";
                        var header = (data.header !== undefined) ? ko.unwrap(data.header) : "> li > :first-child,> :not(li):even";
                        var heightStyle = (data.heightStyle !== undefined) ? ko.unwrap(data.heightStyle) : "content";
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var activate = (data.activate !== undefined) ? (data.activate) : function (event, ui) { };
                        var create = (data.create !== undefined) ? (data.create) : function (event, ui) { };
                        var container = $(element);
                        container.accordion({
                            active: realActive,
                            animate: animate,
                            collapsible: collapsible,
                            event: event,
                            header: header,
                            heightStyle: heightStyle,
                            disabled: !enable,
                            beforeActivate: function (event, ui) {
                                ui.newPanel.removeClass("disappear");
                                ui.newPanel.stop(false, false);
                            },
                            activate: function (event, ui) {
                                if (ko.isObservable(active))
                                    active(container.accordion("option", "active"));
                                ui.oldPanel.addClass("disappear");
                                ui.newPanel.removeClass("disappear");
                                activate.call(this, event, ui);
                            },
                            create: function (event, ui) {
                                container.find(".nts-accordion-content").addClass("disappear");
                                ui.panel.removeClass("disappear");
                                create.call(this, event, ui);
                            },
                            icons: { "header": "ui-icon-caret-1-s", "activeHeader": "ui-icon-caret-1-n" },
                            classes: {
                                "ui-accordion": "ntsAccordion",
                                "ui-accordion-content": "ui-corner-bottom nts-accordion-content"
                            }
                        });
                    };
                    /**
                     * Update
                     */
                    NtsAccordionBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var active = (data.active !== undefined) ? (data.active) : ko.observable(false);
                        var animate = (data.animate !== undefined) ? ko.unwrap(data.animate) : {};
                        var collapsible = (data.collapsible !== undefined) ? ko.unwrap(data.collapsible) : true;
                        var event = (data.event !== undefined) ? ko.unwrap(data.event) : "click";
                        var heightStyle = (data.heightStyle !== undefined) ? ko.unwrap(data.heightStyle) : "content";
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var container = $(element);
                        var currentOption = container.accordion("option");
                        if (ko.isObservable(active) && currentOption.active !== ko.unwrap(active))
                            container.accordion("option", "active", Number(ko.unwrap(active)));
                        if (currentOption.animate != animate)
                            container.accordion("option", "animate", animate);
                        if (currentOption.collapsible != collapsible)
                            container.accordion("option", "collapsible", collapsible);
                        if (currentOption.event != event)
                            container.accordion("option", "event", event);
                        if (currentOption.heightStyle != heightStyle)
                            container.accordion("option", "heightStyle", heightStyle);
                        if (currentOption.disabled != !enable)
                            container.accordion("option", "disabled", !enable);
                    };
                    return NtsAccordionBindingHandler;
                }());
                ko.bindingHandlers['ntsAccordion'] = new NtsAccordionBindingHandler();
            })(koExtentions = ui_29.koExtentions || (ui_29.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Accordion binding handler
                 */
                var NtsTableButtonBindingHandler = /** @class */ (function () {
                    function NtsTableButtonBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsTableButtonBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var source = ko.unwrap(data.source);
                        var mode = (data.mode !== undefined) ? ko.unwrap(data.mode) : "normal";
                        var row = (data.row !== undefined) ? ko.unwrap(data.row) : 1;
                        var column = (data.column !== undefined) ? ko.unwrap(data.column) : 1;
                        var contextMenu = (data.contextMenu !== undefined) ? ko.unwrap(data.contextMenu) : [];
                        var disableMenuOnDataNotSet = (data.disableMenuOnDataNotSet !== undefined) ? ko.unwrap(data.disableMenuOnDataNotSet) : [];
                        var selectedCell = ko.unwrap(data.selectedCell);
                        var width = (data.width !== undefined) ? ko.unwrap(data.width) : 400;
                        var clickAction = data.click;
                        var selectedCells = ko.unwrap(data.selectedCells);
                        $(element).ntsButtonTable("init", {
                            mode: mode,
                            click: clickAction,
                            row: row,
                            column: column,
                            source: source,
                            width: width,
                            disableMenuOnDataNotSet: disableMenuOnDataNotSet,
                            contextMenu: contextMenu
                        });
                        $(element).bind("cellselectedchanging", function (evt, value) {
                            if (!nts.uk.util.isNullOrUndefined(data.selectedCell)) {
                                $(element).data("o-selected", _.cloneDeep(value));
                                data.selectedCell(value);
                            }
                        });
                        $(element).bind("sourcechanging", function (evt, value) {
                            if (!nts.uk.util.isNullOrUndefined(data.source)) {
                                data.source(value.source);
                            }
                        });
                    };
                    /**
                     * Update
                     */
                    NtsTableButtonBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var source = ko.unwrap(data.source);
                        var row = (data.row !== undefined) ? ko.unwrap(data.row) : 1;
                        var column = (data.column !== undefined) ? ko.unwrap(data.column) : 1;
                        var selectedCell = ko.unwrap(data.selectedCell);
                        var container = $(element);
                        var oldSource = container.ntsButtonTable("dataSource");
                        if (!_.isEqual(oldSource, source)) {
                            container.ntsButtonTable("dataSource", source);
                        }
                        container.ntsButtonTable("row", row);
                        container.ntsButtonTable("column", column);
                        // insert on develop "&& !_.isEqual(container.data("o-selected"), selectedCell)"
                        if (!nts.uk.util.isNullOrUndefined(selectedCell) && !nts.uk.util.isNullOrUndefined(selectedCell.column)
                            && !nts.uk.util.isNullOrUndefined(selectedCell.row) && !_.isEqual(container.data("o-selected"), selectedCell)) {
                            container.ntsButtonTable("setSelectedCell", selectedCell.row, selectedCell.column);
                        }
                        container.data("o-selected", _.cloneDeep(selectedCell));
                    };
                    return NtsTableButtonBindingHandler;
                }());
                ko.bindingHandlers['ntsTableButton'] = new NtsTableButtonBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                var originalClick = ko.bindingHandlers.click;
                // override click binding with timeClick (default: 500)
                var SafeClickBindingHandler = /** @class */ (function () {
                    function SafeClickBindingHandler() {
                        this.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var lastPreventTime = new Date().getTime(), originalFunction = valueAccessor(), newValueAccesssor = function () {
                                return function () {
                                    var currentPreventTime = new Date().getTime(), time = currentPreventTime - lastPreventTime, timeClick = ko.toJS(allBindingsAccessor().timeClick), _timeClick = _.isNumber(timeClick) ? timeClick : 500;
                                    if (time > _timeClick) {
                                        //pass through the arguments
                                        originalFunction.apply(viewModel, arguments);
                                    }
                                    lastPreventTime = new Date().getTime();
                                };
                            };
                            // call originalClick init
                            originalClick.init(element, newValueAccesssor, allBindingsAccessor, viewModel, bindingContext);
                        };
                    }
                    return SafeClickBindingHandler;
                }());
                ko.bindingHandlers['click'] = new SafeClickBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_30) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Dialog binding handler
                 */
                var NtsColorPickerBindingHandler = /** @class */ (function () {
                    function NtsColorPickerBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsColorPickerBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var $container = $(element);
                        var width = ko.unwrap(data.width);
                        var color = ko.unwrap(data.value);
                        var dataName = data.name === undefined ? "" : nts.uk.resource.getControlName(ko.unwrap(data.name));
                        var enable = data.enable === undefined ? true : ko.unwrap(data.enable);
                        var required = data.required === undefined ? false : ko.unwrap(data.required);
                        var tag = $container.prop("tagName").toLowerCase();
                        var id = $container.attr("id");
                        var $picker;
                        if (tag === "input") {
                            $picker = $container;
                            $picker.wrap("<div class='ntsControl ntsColorPicker_Container'/>");
                            $picker.addClass("ntsColorPicker");
                            $container = $picker.parent();
                        }
                        else if (tag === 'div') {
                            $container.addClass("ntsControl ntsColorPicker_Container");
                            $container.append("<input class='ntsColorPicker'/>");
                            $picker = $container.find(".ntsColorPicker");
                        }
                        else {
                            $container.wrap("<div class='ntsControl ntsColorPicker_Container'/>");
                            $container.removeAttr("id");
                            $container.hide();
                            $container = $container.parent();
                            $container.append("<input class='ntsColorPicker'/>");
                            $picker = $container.find(".ntsColorPicker");
                        }
                        $container.css("min-height", 32).attr("id", id);
                        $picker.data("required", required).removeAttr("id");
                        if (nts.uk.util.isNullOrEmpty($container.attr("tabindex"))) {
                            $container.attr("tabindex", "0");
                        }
                        $picker.addClass("ntsColorPicker").attr("data-name", dataName);
                        $picker.spectrum({
                            preferredFormat: "name",
                            showPaletteOnly: true,
                            togglePaletteOnly: true,
                            togglePaletteMoreText: ui_30.toBeResource.otherColors,
                            togglePaletteLessText: ui_30.toBeResource.hide,
                            color: color,
                            disabled: !enable,
                            showInput: true,
                            showSelectionPalette: true,
                            showInitial: true,
                            chooseText: ui_30.toBeResource.decide,
                            cancelText: ui_30.toBeResource.cancel,
                            allowEmpty: true,
                            showAlpha: false,
                            palette: [
                                ["#000", "#444", "#666", "#999", "#ccc", "#eee", "#f3f3f3", "#fff"],
                                ["#f00", "#f90", "#ff0", "#0f0", "#0ff", "#00f", "#90f", "#f0f"],
                                ["#f4cccc", "#fce5cd", "#fff2cc", "#d9ead3", "#d0e0e3", "#cfe2f3", "#d9d2e9", "#ead1dc"],
                                ["#ea9999", "#f9cb9c", "#ffe599", "#b6d7a8", "#a2c4c9", "#9fc5e8", "#b4a7d6", "#d5a6bd"],
                                ["#e06666", "#f6b26b", "#ffd966", "#93c47d", "#76a5af", "#6fa8dc", "#8e7cc3", "#c27ba0"],
                                ["#c00", "#e69138", "#f1c232", "#6aa84f", "#45818e", "#3d85c6", "#674ea7", "#a64d79"],
                                ["#900", "#b45f06", "#bf9000", "#38761d", "#134f5c", "#0b5394", "#351c75", "#741b47"],
                                ["#600", "#783f04", "#7f6000", "#274e13", "#0c343d", "#073763", "#20124d", "#4c1130"]
                            ],
                            change: function (color) {
                                var required = $picker.data("required");
                                $picker.ntsError('clear');
                                if (!nts.uk.util.isNullOrUndefined(color) && !nts.uk.util.isNullOrUndefined(data.value)) {
                                    data.value(color.toHexString()); // #ff0000
                                }
                                else if (nts.uk.util.isNullOrUndefined(color)) {
                                    if (required === true) {
                                        $picker.ntsError('set', nts.uk.resource.getMessage('MsgB_1', [dataName]), 'MsgB_1');
                                    }
                                    else {
                                        data.value(null);
                                    }
                                    //                        _.defer(() => {
                                    //                        });
                                }
                            }
                        });
                        var validateRequired = function ($p) {
                            $p.ntsError('clear');
                            var value = $p.spectrum("get");
                            if (nts.uk.util.isNullOrUndefined(value)) {
                                $p.ntsError('set', nts.uk.resource.getMessage('MsgB_1', [dataName]), 'MsgB_1');
                            }
                        };
                        $container.keydown(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (code.toString() === "9") {
                                if (required === true) {
                                    validateRequired($picker);
                                }
                                $picker.spectrum("hide");
                            }
                        });
                        $container.on('validate', (function (e) {
                            if (required === true) {
                                validateRequired($picker);
                            }
                        }));
                        $picker.spectrum("container").find(".sp-clear").click(function (e) {
                            $picker.spectrum("set", null);
                            if (required === true) {
                                validateRequired($picker);
                            }
                            else if (!nts.uk.util.isNullOrUndefined(data.value)) {
                                data.value(null);
                            }
                        });
                        if (!nts.uk.util.isNullOrUndefined(width) && nts.uk.ntsNumber.isNumber(width)) {
                            $container.width(width);
                            $container.find(".sp-replacer").width(width - 10);
                            $container.find(".sp-preview").width(width - 30);
                        }
                    };
                    /**
                     * Update
                     */
                    NtsColorPickerBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var tag = $(element).prop("tagName").toLowerCase();
                        var $picker;
                        if (tag === "input") {
                            $picker = $(element);
                        }
                        else if (tag === 'div') {
                            $picker = $(element).find(".ntsColorPicker");
                        }
                        else {
                            $picker = $(element).parent().find(".ntsColorPicker");
                            $(element).hide();
                        }
                        var colorCode = ko.unwrap(data.value);
                        var enable = data.enable === undefined ? true : ko.unwrap(data.enable);
                        var required = data.required === undefined ? false : ko.unwrap(data.required);
                        $picker.data("required", required);
                        $picker.spectrum("set", colorCode);
                        if (enable !== false) {
                            $picker.spectrum("enable");
                        }
                        else {
                            $picker.spectrum("disable");
                        }
                    };
                    return NtsColorPickerBindingHandler;
                }());
                ko.bindingHandlers['ntsColorPicker'] = new NtsColorPickerBindingHandler();
            })(koExtentions = ui_30.koExtentions || (ui_30.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_31) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Dialog binding handler
                 */
                var NtsDateRangePickerBindingHandler = /** @class */ (function () {
                    function NtsDateRangePickerBindingHandler() {
                    }
                    /**
                     * Init. sssss
                     */
                    NtsDateRangePickerBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor(), $container = $(element), construct = new DateRangeHelper($container), value = ko.unwrap(data.value);
                        construct.bindInit(data, allBindingsAccessor, viewModel, bindingContext);
                        $container.data("construct", construct);
                        return { 'controlsDescendantBindings': true };
                    };
                    /**
                     * Update
                     */
                    NtsDateRangePickerBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor(), $container = $(element), enable = data.enable === undefined ? true : ko.unwrap(data.enable), required = ko.unwrap(data.required), construct = $container.data("construct"), value = ko.unwrap(data.value);
                        if (!nts.uk.util.isNullOrUndefined(value)) {
                            construct.startValue(nts.uk.util.isNullOrUndefined(value.startDate) ? "" : value.startDate);
                            construct.endValue(nts.uk.util.isNullOrUndefined(value.endDate) ? "" : value.endDate);
                        }
                        ko.bindingHandlers["ntsDatePicker"].update(construct.$start[0], function () {
                            return construct.createStartBinding(data);
                        }, allBindingsAccessor, viewModel, bindingContext);
                        ko.bindingHandlers["ntsDatePicker"].update(construct.$end[0], function () {
                            return construct.createEndBinding(data);
                        }, allBindingsAccessor, viewModel, bindingContext);
                        if (enable === false) {
                            $container.find(".ntsDateRange_Component").removeAttr("tabindex");
                        }
                        else {
                            $container.find(".ntsDateRange_Component").attr("tabindex", $container.data("tabindex"));
                        }
                        $container.find(".ntsDateRangeButton").prop("disabled", !enable);
                        var $datePickerArea = $container.find(".ntsDateRange_Container");
                        $datePickerArea.data("required", required);
                    };
                    return NtsDateRangePickerBindingHandler;
                }());
                ko.bindingHandlers['ntsDateRangePicker'] = new NtsDateRangePickerBindingHandler();
                var DateRangeHelper = /** @class */ (function () {
                    function DateRangeHelper($element) {
                        this.$container = $element;
                    }
                    DateRangeHelper.prototype.bindInit = function (parentBinding, allBindingsAccessor, viewModel, bindingContext) {
                        var self = this;
                        self.value = parentBinding.value;
                        self.startValue = ko.observable(nts.uk.util.isNullOrUndefined(self.value().startDate) ? "" : self.value().startDate);
                        self.endValue = ko.observable(nts.uk.util.isNullOrUndefined(self.value().endDate) ? "" : self.value().endDate);
                        self.startValue.subscribe(function (v) {
                            var oldValue = self.value();
                            oldValue.startDate = v;
                            self.validateProcess(v, oldValue);
                            self.value(oldValue);
                        });
                        self.endValue.subscribe(function (v) {
                            var oldValue = self.value();
                            oldValue.endDate = v;
                            self.validateProcess(v, oldValue);
                            self.value(oldValue);
                        });
                        self.bindControl(parentBinding, allBindingsAccessor, viewModel, bindingContext);
                    };
                    DateRangeHelper.prototype.bindControl = function (data, allBindingsAccessor, viewModel, bindingContext) {
                        var self = this, dateType = ko.unwrap(data.type), maxRange = ko.unwrap(data.maxRange), rangeName = ko.unwrap(data.name), startName = ko.unwrap(data.startName), endName = ko.unwrap(data.endName), showNextPrevious = data.showNextPrevious === undefined ? false : ko.unwrap(data.showNextPrevious), jumpUnit = data.jumpUnit === undefined ? "month" : ko.unwrap(data.jumpUnit), id = nts.uk.util.randomId(), required = ko.unwrap(data.required), tabIndex = nts.uk.util.isNullOrEmpty(self.$container.attr("tabindex")) ? "0" : self.$container.attr("tabindex");
                        self.maxRange = maxRange;
                        self.$container.data("tabindex", tabIndex);
                        self.$container.removeAttr("tabindex");
                        self.$container.append("<div class='ntsDateRange_Container' id='" + id + "' />");
                        self.$datePickerArea = self.$container.find(".ntsDateRange_Container");
                        self.$datePickerArea.append("<div class='ntsDateRangeComponent ntsControl ntsDateRange'>" +
                            "<div class='ntsDateRangeComponent ntsStartDate ntsControl nts-datepicker-wrapper'/><div class='ntsDateRangeComponent ntsRangeLabel'><label>～</label></div>" +
                            "<div class='ntsDateRangeComponent ntsEndDate ntsControl nts-datepicker-wrapper' /></div>");
                        self.$datePickerArea.data("required", required);
                        if (dateType === 'year') {
                            self.dateFormat = 'YYYY';
                        }
                        else if (dateType === 'yearmonth') {
                            self.dateFormat = 'YYYY/MM';
                        }
                        else {
                            self.dateFormat = 'YYYY/MM/DD';
                        }
                        var ISOFormat = uk.text.getISOFormat(self.dateFormat);
                        ISOFormat = ISOFormat.replace(/d/g, "").trim();
                        if (showNextPrevious === true) {
                            self.bindJump(jumpUnit);
                        }
                        var $startDateArea = self.$datePickerArea.find(".ntsStartDate");
                        var $endDateArea = self.$datePickerArea.find(".ntsEndDate");
                        $startDateArea.append("<div id='" + id + "-startInput'  class='ntsDatepicker nts-input ntsStartDatePicker ntsDateRangeComponent ntsDateRange_Component' />");
                        $endDateArea.append("<div id='" + id + "-endInput' class='ntsDatepicker nts-input ntsEndDatePicker ntsDateRangeComponent ntsDateRange_Component' />");
                        self.$start = $startDateArea.find(".ntsStartDatePicker");
                        self.$end = $endDateArea.find(".ntsEndDatePicker");
                        var $input = self.$container.find(".nts-input");
                        // Init Datepicker
                        //            $input.datepicker({
                        //                language: 'ja-JP',
                        //                format: ISOFormat,
                        //                autoHide: true,
                        //                weekStart: 0
                        //            });
                        self.rangeName = nts.uk.util.isNullOrUndefined(rangeName) ? "期間入力フォーム" : nts.uk.resource.getControlName(rangeName);
                        self.startName = nts.uk.util.isNullOrUndefined(startName) ? self.rangeName + "開始" : nts.uk.resource.getControlName(startName);
                        self.endName = nts.uk.util.isNullOrUndefined(endName) ? self.rangeName + "終了" : nts.uk.resource.getControlName(endName);
                        self.getMessage = nts.uk.resource.getMessage;
                        ko.bindingHandlers["ntsDatePicker"].init(self.$start[0], function () {
                            return self.createStartBinding(data);
                        }, allBindingsAccessor, viewModel, bindingContext);
                        ko.bindingHandlers["ntsDatePicker"].init(self.$end[0], function () {
                            return self.createEndBinding(data);
                        }, allBindingsAccessor, viewModel, bindingContext);
                        self.$ntsDateRange = self.$container.find(".ntsRangeLabel");
                        $input.on('validate', (function (e) {
                            var $target = $(e.target);
                            var newText = $target.val();
                            var oldValue = self.value();
                            //                $target.ntsError('clear');
                            //                self.$ntsDateRange.ntsError("clear");
                            if (!$target.ntsError('hasError')) {
                                self.$ntsDateRange.ntsError("clear");
                                self.validateProcess(newText, oldValue);
                            }
                        }));
                        self.$container.find(".ntsDateRange_Component").attr("tabindex", tabIndex);
                    };
                    DateRangeHelper.prototype.bindJump = function (jumpUnit) {
                        var self = this;
                        self.$datePickerArea.append("<div class= 'ntsDateRangeComponent ntsDateNextButton_Container ntsRangeButton_Container'>" +
                            "<button class = 'ntsDateNextButton ntsButton ntsDateRangeButton ntsDateRange_Component auto-height'/></div>");
                        self.$datePickerArea.prepend("<div class='ntsDateRangeComponent ntsDatePreviousButton_Container ntsRangeButton_Container'>" +
                            "<button class = 'ntsDatePrevButton ntsButton ntsDateRangeButton ntsDateRange_Component auto-height'/></div>");
                        var $nextButton = self.$container.find(".ntsDateNextButton").text("▶").css("margin-left", "3px");
                        var $prevButton = self.$container.find(".ntsDatePrevButton").text("◀").css("margin-right", "3px");
                        $nextButton.click(function (evt, ui) {
                            self.jump(true, jumpUnit);
                        });
                        $prevButton.click(function (evt, ui) {
                            self.jump(false, jumpUnit);
                        });
                    };
                    DateRangeHelper.prototype.jump = function (isNext, jumpUnit) {
                        var self = this, $startDate = self.$container.find(".ntsStartDatePicker"), $endDate = self.$container.find(".ntsEndDatePicker"), oldValue = self.value(), currentStart = $startDate.val(), currentEnd = $endDate.val();
                        if (!nts.uk.util.isNullOrEmpty(currentStart)) {
                            var startDate = moment(currentStart, self.dateFormat);
                            if (startDate.isValid()) {
                                if (jumpUnit === "year") {
                                    startDate.year(startDate.year() + (isNext ? 1 : -1));
                                }
                                else {
                                    var isEndOfMonth = startDate.daysInMonth() === startDate.date();
                                    startDate.month(startDate.month() + (isNext ? 1 : -1));
                                    if (isEndOfMonth) {
                                        startDate.endOf("month");
                                    }
                                }
                                oldValue.startDate = startDate.format(self.dateFormat);
                            }
                        }
                        if (!nts.uk.util.isNullOrEmpty(currentEnd)) {
                            var endDate = moment(currentEnd, self.dateFormat);
                            if (endDate.isValid()) {
                                if (jumpUnit === "year") {
                                    endDate.year(endDate.year() + (isNext ? 1 : -1));
                                }
                                else {
                                    var isEndOfMonth = endDate.daysInMonth() === endDate.date();
                                    endDate.month(endDate.month() + (isNext ? 1 : -1));
                                    if (isEndOfMonth) {
                                        endDate.endOf("month");
                                    }
                                }
                                oldValue.endDate = endDate.format(self.dateFormat);
                            }
                        }
                        self.value(oldValue);
                    };
                    DateRangeHelper.prototype.validateProcess = function (newText, oldValue) {
                        var self = this;
                        if (self.$start.find("input").ntsError("hasError") || self.$end.find("input").ntsError("hasError")) {
                            return;
                        }
                        self.$ntsDateRange.ntsError("clear");
                        var startDate = moment(oldValue.startDate, self.dateFormat);
                        var endDate = moment(oldValue.endDate, self.dateFormat);
                        if (endDate.isBefore(startDate)) {
                            self.$ntsDateRange.ntsError('set', self.getMessage("MsgB_21", [self.rangeName]), "MsgB_21");
                        }
                        else if (self.isFullDateFormat() && self.maxRange === "oneMonth") {
                            var maxDate = startDate.add(31, "days");
                            if (endDate.isSameOrAfter(maxDate)) {
                                self.$ntsDateRange.ntsError('set', self.getMessage("MsgB_22", [self.rangeName]), "MsgB_22");
                            }
                        }
                        else if (self.maxRange === "oneYear") {
                            var maxDate = _.cloneDeep(startDate);
                            if (self.isFullDateFormat()) {
                                var currentDate = startDate.date();
                                var isEndMonth = currentDate === startDate.endOf("months").date();
                                var isStartMonth = currentDate === 1;
                                maxDate = maxDate.date(1).add(1, 'year');
                                if (isStartMonth) {
                                    maxDate = maxDate.month(maxDate.month() - 1).endOf("months");
                                }
                                else if (isEndMonth) {
                                    maxDate = maxDate.endOf("months").add(-1, "days");
                                }
                                else {
                                    maxDate = maxDate.date(currentDate - 1);
                                }
                            }
                            else if (self.isYearMonthFormat()) {
                                maxDate = maxDate.add(1, 'year').add(-1, "months");
                            }
                            else {
                                maxDate = maxDate.add(1, 'year');
                            }
                            if (endDate.isAfter(maxDate)) {
                                self.$ntsDateRange.ntsError('set', self.getMessage("MsgB_23", [self.rangeName]), "MsgB_23");
                            }
                        }
                    };
                    DateRangeHelper.prototype.isFullDateFormat = function () {
                        return this.dateFormat === 'YYYY/MM/DD';
                    };
                    DateRangeHelper.prototype.isYearMonthFormat = function () {
                        return this.dateFormat === 'YYYY/MM';
                    };
                    DateRangeHelper.prototype.createStartBinding = function (parentBinding, name, format) {
                        var self = this;
                        return { required: parentBinding.required,
                            name: self.startName,
                            value: self.startValue,
                            dateFormat: self.dateFormat,
                            valueFormat: self.dateFormat,
                            'type': parentBinding.type,
                            enable: parentBinding.enable,
                            disabled: parentBinding.disabled,
                            pickOnly: parentBinding.pickOnly
                        };
                    };
                    DateRangeHelper.prototype.createEndBinding = function (parentBinding, name) {
                        var self = this;
                        return { required: parentBinding.required,
                            name: self.endName,
                            value: self.endValue,
                            dateFormat: self.dateFormat,
                            valueFormat: self.dateFormat,
                            'type': parentBinding.type,
                            enable: parentBinding.enable,
                            disabled: parentBinding.disabled,
                            pickOnly: parentBinding.pickOnly
                        };
                    };
                    return DateRangeHelper;
                }());
            })(koExtentions = ui_31.koExtentions || (ui_31.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Dialog binding handler
                 */
                var NtsDateTimePairEditorBindingHandler = /** @class */ (function () {
                    function NtsDateTimePairEditorBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsDateTimePairEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor(), $element = $(element);
                        var editable = nts.uk.util.isNullOrUndefined(data.editable) ? false : ko.unwrap(data.editable);
                        var construct = new EditorConstructSite($element);
                        construct.build(data, allBindingsAccessor, viewModel, bindingContext);
                        $element.data("construct", construct);
                        return { 'controlsDescendantBindings': true };
                    };
                    /**
                     * Update
                     */
                    NtsDateTimePairEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor(), $element = $(element), timeData = $element.data('timeData'), dateData = $element.data('dateData'), construct = $element.data("construct");
                        ko.bindingHandlers["ntsDatePicker"].update(construct.$date[0], function () {
                            return construct.createDateData(data);
                        }, allBindingsAccessor, viewModel, bindingContext);
                        ko.bindingHandlers["ntsTimeEditor"].update(construct.$time[0], function () {
                            return construct.createTimeData(data);
                        }, allBindingsAccessor, viewModel, bindingContext);
                    };
                    return NtsDateTimePairEditorBindingHandler;
                }());
                var EditorConstructSite = /** @class */ (function () {
                    function EditorConstructSite($root) {
                        this.dateFormat = "YYYY/MM/DD";
                        this.timeFormat = "H:mm:ss";
                        this.timeMode = "time";
                        this.timeSignal = ":";
                        this.dateSignal = "/";
                        this.$root = $root;
                    }
                    EditorConstructSite.prototype.build = function (allBindData, allBindingsAccessor, viewModel, bindingContext) {
                        var self = this;
                        self.initVal(allBindData);
                        var $container = $("<div>", { "class": "datetime-editor datetimepair-container ntsControl control-container" }), $dateContainer = $("<div>", { "class": "date-container component-container" }), $timeContainer = $("<div>", { "class": "time-container component-container" });
                        self.$date = $("<div>", { "class": "date-picker datetimepair-component" });
                        self.$time = $("<input>", { "class": "time-editor datetimepair-component" });
                        $dateContainer.append(self.$date);
                        $timeContainer.append(self.$time);
                        $container.append($dateContainer);
                        $container.append($timeContainer);
                        self.$root.append($container);
                        ko.bindingHandlers["ntsDatePicker"].init(self.$date[0], function () {
                            return self.createDateData(allBindData);
                        }, allBindingsAccessor, viewModel, bindingContext);
                        ko.bindingHandlers["ntsTimeEditor"].init(self.$time[0], function () {
                            return self.createTimeData(allBindData);
                        }, allBindingsAccessor, viewModel, bindingContext);
                    };
                    EditorConstructSite.prototype.initVal = function (allBindData) {
                        var self = this;
                        self.timeValueBind = ko.observable();
                        self.dateValueBind = ko.observable();
                        self.timeValue = ko.computed({
                            read: function () {
                                var value = allBindData.value();
                                if (nts.uk.util.isNullOrEmpty(value) || !self.isExistTime(value)) {
                                    self.timeValueBind("");
                                    return "";
                                }
                                var format = self.getFormat(value);
                                if (nts.uk.util.isNullOrEmpty(format)) {
                                    self.timeValueBind("");
                                    return "";
                                }
                                if (format.indexOf("Y") < 0) {
                                    var v = value.split(" ");
                                    value = _.size(v) == 2 ? v[1] : v[0];
                                }
                                var timeVal = nts.uk.time.secondsBased.duration.parseString(moment(value, format).format(self.timeFormat)).toValue();
                                self.timeValueBind(timeVal);
                                return timeVal;
                            }, write: function (val) {
                                var dateVal = self.dateValueBind();
                                var timeVal = nts.uk.time.secondsBased.duration.create(val)
                                    .formatById(nts.uk.time.secondsBased.duration.DurationFormatId);
                                allBindData.value(dateVal + " " + timeVal);
                            },
                            owner: this
                        });
                        self.dateValue = ko.computed({
                            read: function () {
                                var value = allBindData.value();
                                if (nts.uk.util.isNullOrEmpty(value) || !self.isExistDate(value)) {
                                    self.dateValueBind("");
                                    return "";
                                }
                                var format = self.getFormat(value);
                                if (nts.uk.util.isNullOrEmpty(format)) {
                                    self.timeValueBind("");
                                    return "";
                                }
                                var val = moment(value, format).format(self.dateFormat);
                                self.dateValueBind(val);
                                return val;
                            }, write: function (val) {
                                var tv = self.timeValueBind();
                                var timeVal = nts.uk.time.secondsBased.duration.create(tv)
                                    .formatById(nts.uk.time.secondsBased.duration.DurationFormatId);
                                if (_.isNil(val)) {
                                    val = "";
                                }
                                allBindData.value(val + " " + timeVal);
                            },
                            owner: this
                        });
                        self.timeValueBind.subscribe(function (v) {
                            self.timeValue(v);
                        });
                        self.dateValueBind.subscribe(function (v) {
                            self.dateValue(v);
                        });
                    };
                    EditorConstructSite.prototype.getFormat = function (val) {
                        var self = this;
                        var format = "";
                        if (self.isExistDate(val)) {
                            format += self.dateFormat + " ";
                        }
                        if (self.isExistTime(val)) {
                            format += self.timeFormat;
                        }
                        return format;
                    };
                    EditorConstructSite.prototype.isExistDate = function (val) {
                        var self = this;
                        return val.toString().indexOf(self.dateSignal) > 0;
                    };
                    EditorConstructSite.prototype.isExistTime = function (val) {
                        var self = this;
                        return val.toString().indexOf(self.timeSignal) > 0;
                    };
                    EditorConstructSite.prototype.createDateData = function (allBindData) {
                        var self = this;
                        return { required: allBindData.required,
                            name: allBindData.name,
                            value: self.dateValueBind,
                            dateFormat: self.dateFormat,
                            valueFormat: self.dateFormat,
                            enable: allBindData.enable,
                            disabled: allBindData.disabled,
                            startDate: allBindData.startDate,
                            endDate: allBindData.endDate };
                    };
                    EditorConstructSite.prototype.createTimeData = function (allBindData) {
                        var self = this;
                        return { required: allBindData.required,
                            name: allBindData.name,
                            value: self.timeValueBind,
                            inputFormat: self.timeFormat,
                            mode: self.timeMode,
                            enable: allBindData.enable,
                            disabled: allBindData.disabled,
                            option: { width: "70" },
                            constraint: 'TimeClockWithSeconds' };
                    };
                    return EditorConstructSite;
                }());
                ko.bindingHandlers['ntsDateTimePairEditor'] = new NtsDateTimePairEditorBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Dialog binding handler
                 */
                var NtsDateTimePairRangeEditorBindingHandler = /** @class */ (function () {
                    function NtsDateTimePairRangeEditorBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsDateTimePairRangeEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor(), $element = $(element);
                        var editable = nts.uk.util.isNullOrUndefined(data.editable) ? false : ko.unwrap(data.editable);
                        var construct = new EditorConstructSite($element);
                        construct.build(data, allBindingsAccessor, viewModel, bindingContext);
                        $element.data("construct", construct);
                        return { 'controlsDescendantBindings': true };
                    };
                    /**
                     * Update
                     */
                    NtsDateTimePairRangeEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor(), $element = $(element), construct = $element.data("construct");
                        ko.bindingHandlers["ntsDateTimePairEditor"].update(construct.$start[0], function () {
                            return construct.createStartData(data);
                        }, allBindingsAccessor, viewModel, bindingContext);
                        ko.bindingHandlers["ntsDateTimePairEditor"].update(construct.$end[0], function () {
                            return construct.createEndData(data);
                        }, allBindingsAccessor, viewModel, bindingContext);
                    };
                    return NtsDateTimePairRangeEditorBindingHandler;
                }());
                var EditorConstructSite = /** @class */ (function () {
                    function EditorConstructSite($root) {
                        this.format = "YYYY/MM/DD H:mm:ss";
                        this.$root = $root;
                    }
                    EditorConstructSite.prototype.validate = function (start, end) {
                        var self = this;
                        self.$root.find(".control-container").ntsError('clearKibanError');
                        var mStart = moment(start, self.format);
                        var mEnd = moment(end, self.format);
                        if (!mEnd.isValid() || !mStart.isValid()) {
                            return false;
                        }
                        if (mEnd.isBefore(mStart)) {
                            self.$root.find(".datetimepairrange-container")
                                .ntsError('set', nts.uk.resource.getMessage('MsgB_21', [self.name]), 'MsgB_21', false);
                            return false;
                        }
                        if (self.maxRange > 0) {
                            var maxEnd = mStart.add(self.maxRange, self.rangeUnit);
                            if (maxEnd.isBefore(mEnd)) {
                                self.$root.find(".datetimepairrange-container")
                                    .ntsError('set', "Max range is " + self.maxRange + " " + self.rangeUnit, 'Not defined code', false);
                                return false;
                            }
                        }
                        return true;
                    };
                    EditorConstructSite.prototype.initVal = function (allBindData) {
                        var self = this;
                        self.rangeUnit = _.isNil(allBindData.rangeUnit) ? "years" : ko.unwrap(allBindData.rangeUnit);
                        self.maxRange = _.isNil(allBindData.maxRange) ? 0 : ko.unwrap(allBindData.maxRange);
                        self.name = _.isNil(allBindData.name) ? "Input" : ko.unwrap(allBindData.name);
                        self.startName = _.isNil(allBindData.startName) ? "Start Date" : ko.unwrap(allBindData.startName);
                        self.endName = _.isNil(allBindData.endName) ? "End Date" : ko.unwrap(allBindData.endName);
                        self.startValueBind = ko.observable();
                        self.endValueBind = ko.observable();
                        self.startValue = ko.computed({
                            read: function () {
                                var value = allBindData.value().start();
                                self.startValueBind(value);
                                return value;
                            }, write: function (val) {
                                var endVal = self.endValueBind();
                                allBindData.value().start(val);
                                self.validate(val, endVal);
                                //                        allBindData.value.valueHasMutated();
                            },
                            owner: this
                        });
                        self.endValue = ko.computed({
                            read: function () {
                                var value = allBindData.value().end();
                                self.endValueBind(value);
                                return value;
                            }, write: function (val) {
                                var startVal = self.startValueBind();
                                self.validate(startVal, val);
                                allBindData.value().end(val);
                                //                        allBindData.value.valueHasMutated();
                            },
                            owner: this
                        });
                        self.startValueBind.subscribe(function (v) {
                            self.startValue(v);
                        });
                        self.endValueBind.subscribe(function (v) {
                            self.endValue(v);
                        });
                    };
                    EditorConstructSite.prototype.build = function (allBindData, allBindingsAccessor, viewModel, bindingContext) {
                        var self = this;
                        self.initVal(allBindData);
                        var $container = $("<div>", { "class": "datetimerange-editor datetimepairrange-container ntsControl control-container" });
                        this.$start = $("<div>", { "class": "start-datetime-editor datetimepairrange-component ntsControl" }),
                            $seperator = $("<div>", { "class": "seperator datetimepairrange-component" }),
                            this.$end = $("<div>", { "class": "end-datetime-editor datetimepairrange-component ntsControl" });
                        $container.append(this.$start);
                        $container.append($seperator);
                        $container.append(this.$end);
                        self.$root.addClass("ntsControl");
                        self.$root.append($container);
                        $seperator.append($("<span>", { "class": "seperator-span", text: "~" }));
                        ko.bindingHandlers["ntsDateTimePairEditor"].init(this.$start[0], function () {
                            return self.createStartData(allBindData);
                        }, allBindingsAccessor, viewModel, bindingContext);
                        ko.bindingHandlers["ntsDateTimePairEditor"].init(this.$end[0], function () {
                            return self.createEndData(allBindData);
                        }, allBindingsAccessor, viewModel, bindingContext);
                    };
                    EditorConstructSite.prototype.createStartData = function (allBindData) {
                        var self = this;
                        return { required: allBindData.required,
                            name: allBindData.startName,
                            value: self.startValueBind,
                            enable: allBindData.enable,
                            disabled: allBindData.disabled,
                            startDate: allBindData.startDate,
                            endDate: allBindData.endDate };
                    };
                    EditorConstructSite.prototype.createEndData = function (allBindData) {
                        var self = this;
                        return { required: allBindData.required,
                            name: allBindData.endName,
                            value: self.endValueBind,
                            enable: allBindData.enable,
                            disabled: allBindData.disabled,
                            startDate: allBindData.startDate,
                            endDate: allBindData.endDate };
                    };
                    return EditorConstructSite;
                }());
                ko.bindingHandlers['ntsDateTimePairRangeEditor'] = new NtsDateTimePairRangeEditorBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                var CONTROL_NAME = "control-name";
                var REQUIRED = "required";
                var FILES_CACHE_FOR_CANCEL = "files-cache-for-cancel";
                var IS_RESTORED_BY_CANCEL = "restored-by-cancel";
                var IS_REMOVE_BY_VM = "remove-by-vm";
                var IS_USER_SELECTED = "user-selected";
                var SELECTED_FILE_NAME = "selected-file-name";
                var STEREOTYPE = "stereotype";
                var IMMEDIATE_UPLOAD = "immediate-upload";
                /**
                 * CheckBox binding handler
                 */
                var NtsFileUploadBindingHandler = /** @class */ (function () {
                    /**
                     * Constructor..
                     */
                    function NtsFileUploadBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsFileUploadBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var fileName = data.filename;
                        var onchange = (data.onchange !== undefined) ? data.onchange : $.noop;
                        var onfilenameclick = (data.onfilenameclick !== undefined) ? data.onfilenameclick : $.noop;
                        var uploadFinished = (data.uploadFinished !== undefined) ? data.uploadFinished : $.noop;
                        var maxSize = data.maxSize;
                        // Container
                        var $container = $(element);
                        var $fileuploadContainer = $("<div class='nts-fileupload-container cf'></div>");
                        var $fileBrowserButton = $("<button class='browser-button' tabindex='1'></button>");
                        var $fileNameWrap = $("<span class='nts-editor-wrapped ntsControl'/>");
                        var $fileNameInput = $("<input class='nts-editor nts-input' readonly='readonly' tabindex='-1'/>");
                        var $fileNameLabel = $("<span class='filenamelabel hyperlink'></span> ");
                        var $fileInput = $("<input type='file' class='fileinput'/>");
                        $fileuploadContainer.append($fileBrowserButton);
                        $fileNameWrap.append($fileNameInput);
                        $fileuploadContainer.append($fileNameWrap);
                        $fileuploadContainer.append($fileNameLabel);
                        $fileuploadContainer.append($fileInput);
                        $fileuploadContainer.appendTo($container);
                        $fileBrowserButton.click(function () {
                            $fileInput.click();
                        });
                        $fileInput.change(function () {
                            if ($container.data(IS_RESTORED_BY_CANCEL) === true) {
                                $container.data(IS_RESTORED_BY_CANCEL, false);
                                return;
                            }
                            $container.ntsError("clear");
                            var selectedFilePath = $(this).val();
                            if (nts.uk.util.isNullOrEmpty(selectedFilePath)) {
                                if ($container.data(IS_REMOVE_BY_VM) === true) {
                                    // canceled on selecting file dialog
                                    $container.data(IS_REMOVE_BY_VM, false);
                                    return;
                                }
                                if (!nts.uk.util.isNullOrUndefined($container.data(FILES_CACHE_FOR_CANCEL))) {
                                    $container.data(IS_RESTORED_BY_CANCEL, true);
                                    this.files = ($container.data(FILES_CACHE_FOR_CANCEL));
                                }
                                return;
                            }
                            // check file's size if maxSize is defined
                            if (maxSize && this.files[0].size > (maxSize * 1048576)) {
                                nts.uk.ui.dialog.alertError({ messageId: 'Msg_70', messageParams: [maxSize] });
                                $container.ntsFileUpload("clear");
                                return;
                            }
                            $container.data(IS_USER_SELECTED, true);
                            $container.data(FILES_CACHE_FOR_CANCEL, this.files);
                            var selectedFileName = selectedFilePath.substring(selectedFilePath.lastIndexOf("\\") + 1, selectedFilePath.length);
                            $container.data(SELECTED_FILE_NAME, selectedFileName);
                            fileName(selectedFileName);
                            onchange(selectedFileName);
                            if ($container.data(IMMEDIATE_UPLOAD)) {
                                nts.uk.ui.block.grayout();
                                $fileInput.ntsFileUpload({ stereoType: $container.data(STEREOTYPE) })
                                    .done(function (data) {
                                    uploadFinished.call(bindingContext.$data, data[0]);
                                })
                                    .fail(function (data) {
                                    nts.uk.ui.dialog.alertError(data);
                                })
                                    .always(function () {
                                    nts.uk.ui.block.clear();
                                });
                            }
                        });
                        $fileNameLabel.click(function () {
                            onfilenameclick($(this).text());
                        });
                        $container.bind("validate", function () {
                            if ($container.data(REQUIRED) && uk.util.isNullOrEmpty(ko.unwrap(data.filename))) {
                                var controlName = $container.data(CONTROL_NAME);
                                $container.ntsError("set", uk.resource.getMessage("MsgB_2", [controlName]), "MsgB_2");
                            }
                            else {
                                $container.ntsError("clear");
                            }
                        });
                        $container
                            .data(ui.DATA_SET_ERROR_STYLE, function () {
                            $container.addClass("error");
                        })
                            .data(ui.DATA_CLEAR_ERROR_STYLE, function () {
                            $container.removeClass("error");
                        });
                    };
                    /**
                     * Update
                     */
                    NtsFileUploadBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var fileName = ko.unwrap(data.filename);
                        var accept = (data.accept !== undefined) ? ko.unwrap(data.accept) : "";
                        var asLink = (data.aslink !== undefined) ? ko.unwrap(data.aslink) : false;
                        var text = (data.text !== undefined) ? nts.uk.resource.getText(ko.unwrap(data.text)) : ui.toBeResource.refer;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var $container = $(element)
                            .data(CONTROL_NAME, ko.unwrap(data.name))
                            .data(REQUIRED, ko.unwrap(data.required) === true)
                            .data(STEREOTYPE, ko.unwrap(data.stereoType))
                            .data(IMMEDIATE_UPLOAD, ko.unwrap(data.immediateUpload) === true);
                        $container.find("input[type='file']").attr("accept", accept.toString());
                        var $fileNameWrap = $container.find(".nts-editor-wrapped");
                        var $fileNameInput = $container.find(".nts-input");
                        var $fileNameLabel = $container.find(".filenamelabel");
                        // when change just only filename, file in input must be cleared
                        if ($container.data(SELECTED_FILE_NAME) !== fileName) {
                            if ($container.data(IS_USER_SELECTED) !== true && !nts.uk.util.isNullOrUndefined($container.data(IS_USER_SELECTED))) {
                                $container.data(IS_REMOVE_BY_VM, true);
                            }
                            else {
                                $container.data(IS_REMOVE_BY_VM, false);
                            }
                            $container.data(SELECTED_FILE_NAME, "");
                            $container.find("input[type='file']").val(null);
                        }
                        $fileNameInput.val(fileName);
                        $fileNameLabel.text(fileName);
                        if (asLink == true) {
                            $fileNameLabel.removeClass("hidden");
                            $fileNameWrap.addClass("hidden");
                        }
                        else {
                            $fileNameLabel.addClass("hidden");
                            $fileNameWrap.removeClass("hidden");
                        }
                        var $fileBrowserButton = $container.find(".browser-button");
                        $fileBrowserButton.text(text);
                        $fileBrowserButton.prop("disabled", !enable);
                        $fileNameInput.prop("disabled", !enable);
                        $container.data(IS_USER_SELECTED, false);
                    };
                    return NtsFileUploadBindingHandler;
                }());
                ko.bindingHandlers['ntsFileUpload'] = new NtsFileUploadBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_32) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * CheckBox binding handler
                 */
                var NtsFunctionPanelBindingHandler = /** @class */ (function () {
                    /**
                     * Constructor.
                     */
                    function NtsFunctionPanelBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsFunctionPanelBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var width = (data.width !== undefined) ? ko.unwrap(data.width) : 100;
                        var headerText = (data.headerText !== undefined) ? ko.unwrap(data.headerText) : "";
                        var items = (data.dataSource !== undefined) ? ko.unwrap(data.dataSource) : [];
                        // Container
                        var container = $(element);
                        if (nts.uk.util.isNullOrEmpty(container.attr("id"))) {
                            container.attr("id", nts.uk.util.randomId());
                        }
                        container.width(width);
                        container.addClass("ntsControl ntsFunctionPanel").on("click", function (e) {
                            if (container.data("readonly") === true)
                                e.preventDefault();
                        });
                        container.append("<div class='function-header' /><div class='function-items'/>");
                        var header = container.find('.function-header');
                        header.append("<div class='function-icon'/><div class='function-link'><a class='header-link function-item'>" + headerText + "</a></div>");
                        var itemAreas = container.find('.function-items');
                        header.find(".function-item").click(function (evt, ui) {
                            var current = $(this);
                            if ($(this).data("dbClick") === false) {
                                itemAreas.find(".function-item-container").hide("fast", function () {
                                    current.data("dbClick", true);
                                });
                            }
                            else {
                                itemAreas.find(".function-item-container").show("fast", "linear", function () {
                                    current.data("dbClick", false);
                                });
                            }
                        });
                        container.mouseleave(function (evt) {
                            var current = header.find(".function-item");
                            itemAreas.find(".function-item-container").hide("fast", function () {
                                current.data("dbClick", true);
                            });
                        });
                    };
                    /**
                     * Update
                     */
                    NtsFunctionPanelBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var readonly = (data.readonly !== undefined) ? ko.unwrap(data.readonly) : true;
                        var width = (data.width !== undefined) ? ko.unwrap(data.width) : 100;
                        var headerText = (data.headerText !== undefined) ? ko.unwrap(data.headerText) : "";
                        var items = (data.dataSource !== undefined) ? ko.unwrap(data.dataSource) : [];
                        // Container
                        var container = $(element);
                        var itemAreas = container.find('.function-items');
                        var headerLink = container.find('.header-link');
                        var containerId = container.attr("id");
                        headerLink.text(headerText);
                        itemAreas.empty();
                        _.forEach(items, function (item, idx) {
                            var div = $("<div class='function-item-container' />");
                            div.attr("data-idx", idx);
                            div.width(width);
                            div.append("<div class='function-icon'/><div class='function-link'/>");
                            var itemLink = $("<a id='" + (containerId + '-' + idx) + "' class='function-item'>" + item["text"] + "</a>");
                            itemLink.click(item["action"]);
                            itemLink.appendTo(div.find(".function-link"));
                            var icon = $("<img class='ft-icon' src='" + item["icon"] + "'/>");
                            icon.appendTo(div.find(".function-icon"));
                            div.appendTo(itemAreas);
                        });
                        container.find(".function-item-container").hide();
                    };
                    return NtsFunctionPanelBindingHandler;
                }());
                ko.bindingHandlers['ntsFunctionPanel'] = new NtsFunctionPanelBindingHandler();
            })(koExtentions = ui_32.koExtentions || (ui_32.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                var $ = window["$"], _ = window["_"], ko = window["ko"], text = window["nts"]["uk"]["text"], util = window["nts"]["uk"]["util"], request = window["nts"]["uk"]["request"], resource = window["nts"]["uk"]["resource"];
                /**
                 * HelpButton binding handler
                 */
                var NtsHelpButtonBindingHandler = /** @class */ (function () {
                    function NtsHelpButtonBindingHandler() {
                    }
                    NtsHelpButtonBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var image = ko.unwrap(data.image);
                        var popUpId = ko.unwrap(data.popUpId);
                        var textId = ko.unwrap(data.textId);
                        var textParams = ko.unwrap(data.textParams);
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var position = ko.unwrap(data.position);
                        var isText = !util.isNullOrUndefined(textId) || !util.isNullOrUndefined(textParams);
                        //Position
                        var myPositions = position.replace(/[^a-zA-Z ]/gmi, "").split(" ");
                        var atPositions = position.split(" ");
                        var operator = 1;
                        var marginDirection = "";
                        var caretDirection = "";
                        var caretPosition = "";
                        if (myPositions[0].search(/(top|left)/i) !== -1) {
                            operator = -1;
                        }
                        if (myPositions[0].search(/(left|right)/i) === -1) {
                            atPositions[0] = atPositions.splice(1, 1, atPositions[0])[0];
                            myPositions[0] = myPositions.splice(1, 1, myPositions[0])[0];
                            caretDirection = myPositions[1] = text.reverseDirection(myPositions[1]);
                            caretPosition = "left";
                            marginDirection = "margin-top";
                        }
                        else {
                            caretDirection = myPositions[0] = text.reverseDirection(myPositions[0]);
                            caretPosition = "top";
                            marginDirection = "margin-left";
                        }
                        // Container
                        $(element).on("click", function () {
                            if ($popup.is(":visible")) {
                                $popup.hide();
                            }
                            else {
                                var CARET_WIDTH = parseFloat($caret.css("font-size")) * 2;
                                $popup.show()
                                    .css(marginDirection, 0)
                                    .position({
                                    my: myPositions[0] + " " + myPositions[1],
                                    at: atPositions[0] + " " + atPositions[1],
                                    of: $(element),
                                    collision: "none"
                                })
                                    .css(marginDirection, CARET_WIDTH * operator);
                                $caret.css(caretPosition, parseFloat($popup.css(caretPosition)) * -1);
                            }
                        }).on("mouseleave", function () {
                            if ($popup.is(":visible")) {
                                $popup.hide();
                            }
                        }).wrap($("<div class='ntsControl ntsHelpButton'></div>"));
                        var $container = $(element).closest(".ntsHelpButton");
                        var $content;
                        if (_.has(data, 'image')) {
                            $content = $("<img>");
                            ko.computed({
                                read: function () {
                                    var _image = ko.toJS(data.image);
                                    $content.attr('src', request.resolvePath(_image));
                                }
                            });
                        }
                        else if (_.has(data, 'popUpId')) {
                            $content = $('#' + popUpId);
                            // add pop-up-container
                        }
                        else {
                            $content = $("<span>", {
                                style: { 'white-space': 'pre-line' }
                            });
                            ko.computed({
                                read: function () {
                                    var _textId = ko.toJS(data.textId), _textParams = ko.toJS(data.textParams);
                                    $content.text(resource.getText(_textId, _textParams));
                                }
                            });
                        }
                        var $caret = $("<span class='caret-helpbutton caret-" + caretDirection + "'></span>");
                        var $popup = $("<div class='nts-help-button-image'></div>")
                            .append($caret)
                            .append($content)
                            .appendTo($container).hide();
                        if (isText) {
                            var CHARACTER_DEFAULT_WIDTH = 7;
                            var DEFAULT_SPACE = 5;
                            var textLengths = _.map($content.text().split(/\r\n/g), function (o) { return nts.uk.text.countHalf(o); });
                            var WIDTH_SHOULD_NEED = CHARACTER_DEFAULT_WIDTH * _.max(textLengths) + DEFAULT_SPACE;
                            $popup.width(WIDTH_SHOULD_NEED > 300 ? 300 : WIDTH_SHOULD_NEED);
                        }
                        // Click outside event
                        $("html").on("click", function (event) {
                            if (!$container.is(event.target) && $container.has(event.target).length === 0) {
                                $container.find(".nts-help-button-image").hide();
                            }
                        });
                    };
                    NtsHelpButtonBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Enable
                        (enable === true) ? $(element).removeAttr("disabled") : $(element).attr("disabled", "disabled");
                    };
                    return NtsHelpButtonBindingHandler;
                }());
                ko.bindingHandlers['ntsHelpButton'] = new NtsHelpButtonBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * HelpButton binding handler
                 */
                var NtsIconBindingHandler = /** @class */ (function () {
                    function NtsIconBindingHandler() {
                    }
                    NtsIconBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var iconNo = ko.unwrap(data.no);
                        var width = ko.unwrap(data.width) || "100%";
                        var height = ko.unwrap(data.height) || "100%";
                        var iconFileName = iconNo + ".png";
                        var iconPath = nts.uk.request.location.siteRoot
                            .mergeRelativePath(nts.uk.request.WEB_APP_NAME["comjs"] + "/")
                            .mergeRelativePath("lib/nittsu/ui/style/stylesheets/images/icons/numbered/")
                            .mergeRelativePath(iconFileName)
                            .serialize();
                        var $icon = $(element), $parent = $icon.closest("td[role='gridcell']");
                        $icon.addClass("img-icon");
                        $icon.css({
                            "background-image": "url(" + iconPath + ")",
                            "background-size": "contain",
                            width: width,
                            height: height
                        });
                        if (!_.isNil($parent)) {
                            $parent.css("white-space", "nowrap");
                        }
                    };
                    NtsIconBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                    };
                    return NtsIconBindingHandler;
                }());
                ko.bindingHandlers['ntsIcon'] = new NtsIconBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_33) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Dialog binding handler
                 */
                var NtsImageEditorBindingHandler = /** @class */ (function () {
                    function NtsImageEditorBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsImageEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var editable = nts.uk.util.isNullOrUndefined(data.editable) ? false : ko.unwrap(data.editable);
                        var zoomble = nts.uk.util.isNullOrUndefined(data.zoomble) ? false : ko.unwrap(data.zoomble);
                        var width = nts.uk.util.isNullOrUndefined(data.width) ? 600 : ko.unwrap(data.width);
                        var freeResize = nts.uk.util.isNullOrUndefined(data.freeResize) ? true : ko.unwrap(data.freeResize);
                        var resizeRatio = nts.uk.util.isNullOrUndefined(data.resizeRatio) ? 1 : ko.unwrap(data.resizeRatio);
                        var height = nts.uk.util.isNullOrUndefined(data.height) ? 600 : ko.unwrap(data.height);
                        var extension = nts.uk.util.isNullOrUndefined(data.accept) ? [] : ko.unwrap(data.accept);
                        var msgIdForUnknownFile = nts.uk.util.isNullOrUndefined(data.msgIdForUnknownFile) ? 'Msg_77' : ko.unwrap(data.msgIdForUnknownFile);
                        var croppable = false;
                        var maxSize = nts.uk.util.isNullOrUndefined(data.maxSize) ? undefined : ko.unwrap(data.maxSize);
                        var helper = new ImageEditorHelper(extension, msgIdForUnknownFile, undefined, maxSize);
                        var $container = $("<div>", { 'class': 'image-editor-container' }), $element = $(element).append($container);
                        var constructSite = new ImageEditorConstructSite($element, helper);
                        var $uploadArea = $("<div>", { "class": "image-upload-container image-editor-area cf" });
                        $container.append($uploadArea);
                        if (editable === true) {
                            croppable = true;
                            var confirm = { checked: ko.observable(true) };
                            $(element).data('checkbox', confirm);
                            var $editContainer = $("<div>", { "class": "edit-action-container image-editor-area" });
                            $container.append($editContainer);
                            constructSite.buildCheckBoxArea(allBindingsAccessor, viewModel, bindingContext);
                        }
                        constructSite.buildActionArea();
                        constructSite.$imageInfomation.width(width - 110);
                        constructSite.buildUploadAction();
                        constructSite.buildImagePreviewArea();
                        constructSite.buildFileChangeHandler();
                        var customOption = {
                            aspectRatio: freeResize ? 0 : resizeRatio,
                            dragMode: croppable ? "crop" : "none",
                            modal: false
                        };
                        constructSite.buildImageLoadedHandler(zoomble, customOption);
                        constructSite.buildSrcChangeHandler();
                        constructSite.buildImageDropEvent();
                        $element.find(".image-holder").width(width - 12).height(height - 12);
                        return { 'controlsDescendantBindings': true };
                    };
                    /**
                     * Update
                     */
                    NtsImageEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor(), $element = $(element), confirm = $(element).data('checkbox'), $checkbox = $element.find('.comfirm-checkbox');
                        if (!nts.uk.util.isNullOrEmpty($checkbox)) {
                            ko.bindingHandlers["ntsCheckBox"].update($checkbox[0], function () {
                                return confirm;
                            }, allBindingsAccessor, viewModel, bindingContext);
                        }
                    };
                    return NtsImageEditorBindingHandler;
                }());
                var ImageEditorConstructSite = /** @class */ (function () {
                    function ImageEditorConstructSite($root, helper) {
                        this.$root = $root;
                        this.helper = helper;
                    }
                    ImageEditorConstructSite.prototype.buildCheckBoxArea = function (allBindingsAccessor, viewModel, bindingContext) {
                        var self = this;
                        var $checkboxHolder = $("<div>", { "class": "checkbox-holder image-editor-component" });
                        var $editContainer = this.$root.find(".edit-action-container");
                        $editContainer.append($checkboxHolder);
                        this.$checkbox = $("<div>", { "class": "comfirm-checkbox style-button", text: ui_33.toBeResource.selectViewArea });
                        var $comment = $("<div>", { "class": "crop-description cf" });
                        $checkboxHolder.append(this.$checkbox);
                        $checkboxHolder.append($comment);
                        var $cropAreaIcon = $("<div>", { "class": "crop-icon inline-container" });
                        var $cropText = $("<div>", { "class": "crop-description-text inline-container" });
                        var $mousePointerIcon = $("<div>", { "class": "mouse-icon inline-container" });
                        var $mouseText = $("<div>", { "class": "mouse-description-text inline-container" });
                        $("<label>", { "class": "info-label", "text": ui_33.toBeResource.showInsideAreaToMain }).appendTo($cropText);
                        $("<label>", { "class": "info-label", "text": ui_33.toBeResource.dragAndDropToChangeArea }).appendTo($mouseText);
                        $comment.append($cropAreaIcon).append($cropText).append($mousePointerIcon).append($mouseText);
                        var checkboxId = nts.uk.util.randomId();
                        ko.bindingHandlers["ntsCheckBox"].init(this.$checkbox[0], function () {
                            return self.$root.data('checkbox');
                        }, allBindingsAccessor, viewModel, bindingContext);
                    };
                    ImageEditorConstructSite.prototype.buildActionArea = function () {
                        var self = this;
                        self.$uploadBtn = $("<button>", { "class": "upload-btn" })
                            .appendTo($("<div>", { "class": "image-editor-component inline-container" }));
                        self.$imageInfomation = $("<div>", { "class": "image-editor-component inline-container" });
                        self.$imageNameLbl = $("<label>", { "class": "image-name-lbl info-label limited-label" })
                            .appendTo(self.$imageInfomation);
                        self.$imageSizeLbl = $("<label>", { "class": "image-info-lbl info-label" })
                            .appendTo(self.$imageInfomation);
                        self.$inputFile = $("<input>", { "class": "fileinput", "type": "file", "accept": self.helper.toStringExtension() })
                            .appendTo($("<div>", { "class": "image-editor-component inline-container nts-fileupload-container" }));
                        var $uploadArea = self.$root.find(".image-upload-container");
                        $uploadArea.append(self.$uploadBtn.parent());
                        $uploadArea.append(self.$imageInfomation);
                        $uploadArea.append(self.$inputFile.parent());
                    };
                    ImageEditorConstructSite.prototype.buildImagePreviewArea = function () {
                        this.$previewArea = $("<div>", { "class": "image-preview-container image-editor-area" });
                        this.$previewArea.appendTo(this.$root.find(".image-editor-container"));
                        var imagePreviewId = nts.uk.util.randomId();
                        var $imageContainer = $("<div>", { "class": "image-container container-no-upload-background" }).appendTo(this.$previewArea);
                        var $imageHolder = $("<div>", { "class": "image-holder image-editor-component image-upload-icon" }).appendTo($imageContainer);
                        this.$imagePreview = $("<img>", { "class": "image-preview", "id": imagePreviewId }).appendTo($imageHolder);
                    };
                    ImageEditorConstructSite.prototype.buildUploadAction = function () {
                        var self = this;
                        self.$uploadBtn.text(ui_33.toBeResource.refer).click(function (evt) {
                            self.$inputFile.click();
                        });
                    };
                    ImageEditorConstructSite.prototype.buildImageDropEvent = function () {
                        var self = this;
                        self.$previewArea.on('drop dragdrop', function (evt, ui) {
                            event.preventDefault();
                            var files = evt.originalEvent["dataTransfer"].files;
                            if (!nts.uk.util.isNullOrEmpty(files)) {
                                var firstImageFile = self.helper.getFirstFile(files);
                                if (self.validateFile(firstImageFile)) {
                                    self.assignImageToView(firstImageFile);
                                }
                                else {
                                    self.changeStatus(ImageStatus.FAIL);
                                }
                            }
                        });
                        this.$previewArea.on('dragenter', function (event) {
                            event.preventDefault();
                        });
                        this.$previewArea.on('dragleave', function (evt, ui) {
                        });
                        this.$previewArea.on('dragover', function (event) {
                            event.preventDefault();
                        });
                    };
                    ImageEditorConstructSite.prototype.buildImageLoadedHandler = function (zoomble, customOption) {
                        var self = this;
                        //self.$root.data("img-status", self.buildImgStatus("not init", 0));
                        self.changeStatus(ImageStatus.NOT_INIT);
                        self.$imagePreview.on('load', function () {
                            var image = new Image();
                            image.src = self.$imagePreview.attr("src");
                            image.onload = function () {
                                self.$imageSizeLbl.text("　(大きさ " + this.height + "x" + this.width + "　　サイズ " + self.helper.getFileSize(self.$root.data("size")) + ")");
                                if (!nts.uk.util.isNullOrUndefined(self.cropper)) {
                                    self.cropper.destroy();
                                }
                                self.$root.data("original-img", image.src);
                                var option = {
                                    viewMode: 1,
                                    guides: false,
                                    autoCrop: false,
                                    highlight: false,
                                    zoomable: zoomble,
                                    crop: function (e) {
                                        //                            console.log(e);
                                    }, cropstart: function (e) {
                                        //                            e.preventDefault();
                                        //                            console.log(e);
                                        //                            return croppable;
                                    }
                                };
                                jQuery.extend(option, customOption);
                                self.cropper = new Cropper(self.$imagePreview[0], option);
                                self.$root.data("cropper", self.cropper);
                                //self.$root.data("img-status", self.buildImgStatus("loaded", 4));
                                self.changeStatus(ImageStatus.LOADED);
                                var evtData = {
                                    size: self.$root.data("size"),
                                    height: this.height,
                                    width: this.width,
                                    name: self.$root.data("file-name"),
                                    fileType: self.$root.data("file-type")
                                };
                                self.$root.trigger("imgloaded", evtData);
                            };
                        }).on("error", function () {
                            //self.$root.data("img-status", self.buildImgStatus("load fail", 3));
                            self.changeStatus(ImageStatus.FAIL);
                        });
                    };
                    ImageEditorConstructSite.prototype.changeStatus = function (status) {
                        var self = this;
                        var dataStatus = self.$root.data("img-status");
                        var imgOnView = false;
                        if (dataStatus) {
                            imgOnView = dataStatus.imgOnView;
                        }
                        if (status == ImageStatus.LOADED) {
                            imgOnView = true;
                        }
                        self.$root.data("img-status", {
                            imgOnView: imgOnView,
                            status: status
                        });
                    };
                    //        buildImgStatus(status: string, statusCode: number, imgOnView: boolean){
                    //            return {
                    //                imgOnView: imgOnView,
                    //                imgStatus: status,
                    //                imgStatusCode: statusCode
                    //            };
                    //        }
                    ImageEditorConstructSite.prototype.buildSrcChangeHandler = function () {
                        var self = this;
                        self.$root.bind("srcchanging", function (evt, query) {
                            //self.$root.data("img-status", self.buildImgStatus("img loading", 2, false));
                            self.changeStatus(ImageStatus.lOADING);
                            var target = self.helper.getUrl(query);
                            var xhr = self.getXRequest();
                            if (xhr === null) {
                                self.destroyImg(query);
                                return;
                            }
                            xhr.open('GET', target);
                            xhr.responseType = 'blob';
                            xhr.onload = function (e) {
                                if (this.status == 200) {
                                    if (xhr.response.type.indexOf("image") >= 0) {
                                        var reader = new FileReader();
                                        reader.readAsDataURL(xhr.response);
                                        reader.onload = function () {
                                            self.helper.getFileNameFromUrl().done(function (fileName) {
                                                var fileType = xhr.response.type.split("/")[1], fileName = self.helper.data.isOutSiteUrl ? (fileName + "." + fileType) : fileName;
                                                self.backupData(null, fileName, fileType, xhr.response.size);
                                                self.$imagePreview.attr("src", reader.result);
                                                self.$imagePreview.closest(".image-holder").removeClass(".image-upload-icon");
                                                self.$imagePreview.closest(".image-container").removeClass(".container-no-upload-background");
                                            });
                                        };
                                    }
                                    else {
                                        self.destroyImg(query);
                                    }
                                }
                                else {
                                    self.destroyImg(query);
                                }
                            };
                            xhr.send();
                        });
                    };
                    ImageEditorConstructSite.prototype.destroyImg = function (query) {
                        var self = this;
                        nts.uk.ui.dialog.alert(ui_33.toBeResource.invalidImageData).then(function () {
                            //self.$root.data("img-status", self.buildImgStatus("load fail", 3));
                            self.changeStatus(ImageStatus.FAIL);
                            self.backupData(null, "", "", 0);
                            self.$imagePreview.attr("src", "");
                            self.$imagePreview.closest(".image-holder").addClass(".image-upload-icon");
                            self.$imagePreview.closest(".image-container").addClass(".container-no-upload-background");
                            self.$imageSizeLbl.text("");
                            if (!nts.uk.util.isNullOrUndefined(self.cropper)) {
                                self.cropper.destroy();
                            }
                            self.$root.data("cropper", self.cropper);
                            query.actionOnClose();
                        });
                    };
                    ImageEditorConstructSite.prototype.getXRequest = function () {
                        return new XMLHttpRequest();
                    };
                    ImageEditorConstructSite.prototype.buildFileChangeHandler = function () {
                        var self = this;
                        self.$inputFile.change(function () {
                            //self.$root.data("img-status", self.buildImgStatus("img loading", 2));
                            self.changeStatus(ImageStatus.lOADING);
                            if (nts.uk.util.isNullOrEmpty(this.files)) {
                                self.changeStatus(ImageStatus.FAIL);
                                return;
                            }
                            var firstImageFile = self.helper.getFirstFile(this.files);
                            if (!self.validateFile(firstImageFile)) {
                                // remove file
                                $(this).val('');
                                self.changeStatus(ImageStatus.FAIL);
                                return;
                            }
                            self.assignImageToView(firstImageFile);
                        });
                    };
                    ImageEditorConstructSite.prototype.validateFile = function (firstImageFile) {
                        var self = this;
                        if (nts.uk.util.isNullOrUndefined(firstImageFile)) {
                            nts.uk.ui.dialog.alertError({ messageId: self.helper.getMsgIdForUnknownFile(),
                                messageParams: [self.helper.toStringExtension()] });
                            return false;
                        }
                        var MAX_SIZE = self.helper.maxSize;
                        // if MAX_SIZE == undefined => do not check size
                        if (!MAX_SIZE) {
                            return true;
                        }
                        if (firstImageFile.size > MAX_SIZE * 1048576) {
                            nts.uk.ui.dialog.alertError({ messageId: 'Msg_70', messageParams: [self.helper.maxSize] });
                            return false;
                        }
                        return true;
                    };
                    ImageEditorConstructSite.prototype.assignImageToView = function (file) {
                        var self = this;
                        if (FileReader && file) {
                            var fr = new FileReader();
                            fr.onload = function () {
                                self.$imagePreview.attr("src", fr.result);
                                self.backupData(file, file.name, file.type.split("/")[1], file.size);
                            };
                            fr.onerror = function () {
                                self.destroyImg({ actionOnClose: $.noop });
                            };
                            fr.readAsDataURL(file);
                        }
                    };
                    ImageEditorConstructSite.prototype.backupData = function (file, name, format, size) {
                        var self = this;
                        self.$root.data("file", file);
                        self.$root.data("file-name", name);
                        self.$root.data("file-type", format);
                        self.$root.data("size", size);
                        self.$imageNameLbl.text(name);
                    };
                    return ImageEditorConstructSite;
                }());
                var ImageEditorHelper = /** @class */ (function () {
                    function ImageEditorHelper(extensions, msgIdForUnknownFile, query, maxSize) {
                        this.IMAGE_EXTENSION = [".png", ".PNG", ".jpg", ".JPG", ".JPEG", ".jpeg"];
                        this.BYTE_SIZE = 1024;
                        this.SIZE_UNITS = ["BYTE", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
                        var self = this;
                        self.data = query;
                        self.msgIdForUnknownFile = msgIdForUnknownFile;
                        if (!nts.uk.util.isNullOrEmpty(extensions)) {
                            self.IMAGE_EXTENSION = [];
                            _.forEach(extensions, function (ex) {
                                self.IMAGE_EXTENSION.push(ex.toLowerCase());
                                self.IMAGE_EXTENSION.push(ex.toUpperCase());
                            });
                        }
                        self.maxSize = maxSize;
                    }
                    ImageEditorHelper.prototype.toStringExtension = function () {
                        return this.IMAGE_EXTENSION.join(", ");
                    };
                    ImageEditorHelper.prototype.getMsgIdForUnknownFile = function () {
                        return this.msgIdForUnknownFile;
                    };
                    ImageEditorHelper.prototype.getFirstFile = function (files) {
                        var IMAGE_EXTENSION = this.IMAGE_EXTENSION;
                        return _.find(files, function (file) {
                            return _.find(IMAGE_EXTENSION, function (ie) {
                                var isType = file.type === ie.replace(".", "");
                                var isType2 = file.name.substr(file.name.lastIndexOf(".")) === ie;
                                return isType || isType2;
                            }) !== undefined;
                        });
                    };
                    ImageEditorHelper.prototype.getFileSize = function (originalSize) {
                        var i = 0, result = originalSize;
                        while (result > 5 * this.BYTE_SIZE) {
                            result = result / this.BYTE_SIZE;
                            i++;
                        }
                        var idx = i < this.SIZE_UNITS.length ? i : this.SIZE_UNITS.length - 1;
                        return uk.ntsNumber.trunc(result) + this.SIZE_UNITS[idx];
                    };
                    ImageEditorHelper.prototype.getUrl = function (query) {
                        if (!nts.uk.util.isNullOrUndefined(query)) {
                            this.data = query;
                        }
                        if (!this.isOutSiteUrl(this.data.url)) {
                            return this.data.url;
                        }
                        else {
                            return "http://cors-anywhere.herokuapp.com/" + this.data.url;
                        }
                    };
                    ImageEditorHelper.prototype.getFileNameFromUrl = function () {
                        var dfd = $.Deferred();
                        var urlElements = this.data.url.split("/"), fileName = urlElements[urlElements.length - 1];
                        if (this.data.isOutSiteUrl) {
                            dfd.resolve(fileName);
                        }
                        else {
                            nts.uk.request.ajax("/shr/infra/file/storage/infor/" + fileName).done(function (res) {
                                dfd.resolve(res.originalName);
                            }).fail(function (error) {
                                dfd.reject(error);
                            });
                        }
                        return dfd.promise();
                    };
                    ImageEditorHelper.prototype.isOutSiteUrl = function (url) {
                        return url.indexOf(nts.uk.request.location.siteRoot.rawUrl) < 0;
                    };
                    return ImageEditorHelper;
                }());
                var ImageStatus;
                (function (ImageStatus) {
                    ImageStatus[ImageStatus["NOT_INIT"] = 0] = "NOT_INIT";
                    ImageStatus[ImageStatus["lOADING"] = 1] = "lOADING";
                    ImageStatus[ImageStatus["FAIL"] = 2] = "FAIL";
                    ImageStatus[ImageStatus["LOADED"] = 3] = "LOADED";
                })(ImageStatus || (ImageStatus = {}));
                ko.bindingHandlers['ntsImageEditor'] = new NtsImageEditorBindingHandler();
            })(koExtentions = ui_33.koExtentions || (ui_33.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Let binding handler
                 */
                var NtsLetBindingHandler = /** @class */ (function () {
                    function NtsLetBindingHandler() {
                        this.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            // Make a modified binding context, with extra properties, and apply it to descendant elements
                            ko.applyBindingsToDescendants(bindingContext.extend(valueAccessor), element);
                            return { controlsDescendantBindings: true };
                        };
                        this.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) { };
                    }
                    return NtsLetBindingHandler;
                }());
                ko.virtualElements.allowedBindings.let = true;
                ko.bindingHandlers['let'] = new NtsLetBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * LinkButton
                 */
                var NtsLinkButtonBindingHandler = /** @class */ (function () {
                    function NtsLinkButtonBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsLinkButtonBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var jump = ko.unwrap(data.jump);
                        var action = data.action;
                        var linkText = $(element).text();
                        var $linkButton = $(element).wrap('<div class="ntsControl"/>')
                            .addClass('link-button')
                            .click(function () {
                            event.preventDefault();
                            if (!nts.uk.util.isNullOrUndefined(action))
                                action.call(viewModel);
                            else if (!nts.uk.util.isNullOrUndefined(jump))
                                nts.uk.request.jump(jump);
                        });
                    };
                    /**
                     * Update
                     */
                    NtsLinkButtonBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    };
                    return NtsLinkButtonBindingHandler;
                }());
                ko.bindingHandlers['ntsLinkButton'] = new NtsLinkButtonBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts_1) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                var _ = window['_'], ko = window['ko'], nts = window['nts'], moment = window['moment'];
                /**
                 * Dialog binding handler
                 */
                var NtsMonthDaysBindingHandler = /** @class */ (function () {
                    function NtsMonthDaysBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsMonthDaysBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor(), childBindingContext = bindingContext.createChildContext(), getComboBinding = function (originalBinding, value, source) {
                            return _.extend(_.clone(originalBinding), {
                                options: ko.observableArray(source),
                                optionsValue: 'value',
                                value: value,
                                optionsText: 'text',
                                width: '60px',
                                enable: data.enable,
                                name: _.size(source) == 13 ? (nts.uk.resource.getControlName(ko.toJS(data.name) || "") + "の月") : (nts.uk.resource.getControlName(ko.toJS(data.name) || "") + "の日"),
                                required: _.size(source) == 13 ? data.required : ko.computed(function () { return !!ko.toJS(data.required) || !!ko.toJS(monthValueAccessor.value); })
                            });
                        }, getMonths = function () { return _.range(0, 13).map(function (m) { return ({ text: m === 0 ? "" : m, value: m === 0 ? "" : m }); }); }, getDaysInMonth = function (month) { return _.range(0, moment(month, "MM").daysInMonth() + 1).map(function (m) { return ({ text: m === 0 ? "" : m, value: m === 0 ? "" : m }); }); }, monthValueAccessor = getComboBinding(data, ko.observable(""), getMonths()), dayOfMonthValueAccessor = getComboBinding(data, ko.observable(""), [{ text: "", value: "" }]);
                        // init binding element
                        element.innerHTML = "\n                <div tabindex='" + (element.getAttribute('tabindex') || 0) + "' class='ntsMonthPicker ntsComboBox ntsMonthDays_Component' id='" + nts.uk.util.randomId() + "' data-bind='ntsComboBox: $month'></div>\n                <div class='ntsMonthLabel ntsLabel ntsMonthDays_Component' id='" + nts.uk.util.randomId() + "'><label data-bind=\"text: '\u6708'\"></label></div>\n                <div tabindex='" + (element.getAttribute('tabindex') || 0) + "' class='ntsDayPicker ntsComboBox ntsMonthDays_Component' id='" + nts.uk.util.randomId() + "' data-bind='ntsComboBox: $dayOfMonth'></div>\n                <div class='ntsDayPicker ntsLabel ntsMonthDays_Component' id='" + nts.uk.util.randomId() + "'><label data-bind=\"text: '\u65E5'\"></label></div>\n                ";
                        // set default attr to element
                        element.removeAttribute('tabindex');
                        if (!element.className) {
                            element.className = 'ntsControl';
                        }
                        else {
                            element.classList.add('ntsControl');
                        }
                        element.classList.add('ntsMonthDays_Container');
                        // month change
                        monthValueAccessor.value.subscribe(function (month) {
                            if (!month) {
                                dayOfMonthValueAccessor.options([{ text: "", value: "" }]);
                                if (dayOfMonthValueAccessor.value()) {
                                    dayOfMonthValueAccessor.value("");
                                }
                                else {
                                    dayOfMonthValueAccessor.value.valueHasMutated();
                                }
                            }
                            else {
                                // change options of combobox days
                                var days = getDaysInMonth(month), curentDay = ko.toJS(dayOfMonthValueAccessor.value), day = _.min([curentDay, days.length - 1]);
                                dayOfMonthValueAccessor.options(days);
                                if (dayOfMonthValueAccessor.value() != day) {
                                    dayOfMonthValueAccessor.value(day);
                                }
                                else {
                                    dayOfMonthValueAccessor.value.valueHasMutated();
                                }
                            }
                        });
                        // data out
                        // day change (bind new value to data.value)
                        dayOfMonthValueAccessor.value.subscribe(function (day) {
                            var month = ko.toJS(monthValueAccessor.value);
                            if (day && month) {
                                data.value(month * 100 + day);
                            }
                        });
                        // data in
                        ko.computed({
                            read: function () {
                                var raw = ko.toJS(data.value), month = Math.floor(Number(raw) / 100), dayOfMonth = Math.floor(Number(raw) % 100), mno = monthValueAccessor.value.notifySubscribers, dno = dayOfMonthValueAccessor.value.notifySubscribers;
                                // prevent notifiSubscribers when change values
                                monthValueAccessor.value.notifySubscribers = function () { };
                                monthValueAccessor.value(month || "");
                                monthValueAccessor.value.notifySubscribers = mno;
                                dayOfMonthValueAccessor.value.notifySubscribers = function () { };
                                dayOfMonthValueAccessor.value(dayOfMonth || "");
                                dayOfMonthValueAccessor.value.notifySubscribers = dno;
                                // notifySubscribers
                                monthValueAccessor.value.valueHasMutated();
                            },
                            disposeWhenNodeIsRemoved: element
                        });
                        // clear data
                        ko.computed({
                            read: function () {
                                var required = ko.toJS(data.required), month = ko.toJS(monthValueAccessor.value), dayOfMonth = ko.toJS(dayOfMonthValueAccessor.value);
                                if (!month && !required) {
                                    data.value(0);
                                }
                            },
                            disposeWhenNodeIsRemoved: element
                        });
                        // attach two accessor to new context
                        ko.utils.extend(childBindingContext, {
                            $month: monthValueAccessor,
                            $dayOfMonth: dayOfMonthValueAccessor
                        });
                        // binding data
                        ko.applyBindingsToDescendants(childBindingContext, element);
                        // validate event
                        ko.utils.registerEventHandler(element, 'validate', function (evt) {
                            if (element == evt.target) {
                                var mpick = element.querySelector('.ntsMonthPicker.ntsComboBox'), dpick = element.querySelector('.ntsDayPicker.ntsComboBox');
                                ko.utils.triggerEvent(mpick, 'validate');
                                ko.utils.triggerEvent(dpick, 'validate');
                            }
                        });
                        return { controlsDescendantBindings: true };
                    };
                    return NtsMonthDaysBindingHandler;
                }());
                ko.bindingHandlers['ntsMonthDays'] = new NtsMonthDaysBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts_1.uk || (nts_1.uk = {}));
})(nts || (nts = {}));
var NtsSortableBindingHandler = /** @class */ (function () {
    function NtsSortableBindingHandler() {
        var _this = this;
        this.ITEMKEY = "ko_sortItem";
        this.INDEXKEY = "ko_sourceIndex";
        this.LISTKEY = "ko_sortList";
        this.PARENTKEY = "ko_parentList";
        this.DRAGKEY = "ko_dragItem";
        this.dataSet = ko.utils.domData.set;
        this.dataGet = ko.utils.domData.get;
        this.version = $.ui && $.ui.version;
        this.hasNestedSortableFix = function () { return _this.version && _this.version.indexOf("1.6.") && _this.version.indexOf("1.7.") && (_this.version.indexOf("1.8.") || _this.version === "1.8.24"); };
        this.addMetaDataAfterRender = function (elements, data) {
            var self = _this;
            ko.utils.arrayForEach(elements, function (element) {
                if (element.nodeType === 1) {
                    self.dataSet(element, self.ITEMKEY, data);
                    self.dataSet(element, self.PARENTKEY, self.dataGet(element.parentNode, self.LISTKEY));
                }
            });
        };
        this.updateIndexFromDestroyedItems = function (index, items) {
            var self = _this, unwrapped = ko.unwrap(items);
            if (unwrapped) {
                for (var i = 0; i < index; i++) {
                    //add one for every destroyed item we find before the targetIndex in the target array
                    if (unwrapped[i] && ko.unwrap(unwrapped[i]._destroy)) {
                        index++;
                    }
                }
            }
            return index;
        };
        this.stripTemplateWhitespace = function (element, name) {
            var self = _this, templateSource, templateElement;
            //process named templates
            if (name) {
                templateElement = document.getElementById(name);
                if (templateElement) {
                    templateSource = new ko.templateSources.domElement(templateElement);
                    templateSource.text($.trim(templateSource.text()));
                }
            }
            else {
                //remove leading/trailing non-elements from anonymous templates
                $(element).contents().each(function () {
                    if (this && this.nodeType !== 1) {
                        element.removeChild(this);
                    }
                });
            }
        };
        this.prepareTemplateOptions = function (valueAccessor, dataName) {
            var self = _this, result = {}, options = ko.unwrap(valueAccessor()) || {}, actualAfterRender;
            //build our options to pass to the template engine
            if (options.data) {
                result[dataName] = options.data;
                result.name = options.template;
            }
            else {
                result[dataName] = valueAccessor();
            }
            ko.utils.arrayForEach(["afterAdd", "afterRender", "as", "beforeRemove", "includeDestroyed", "templateEngine", "templateOptions", "nodes"], function (option) {
                if (options.hasOwnProperty(option)) {
                    result[option] = options[option];
                }
                else if (ko.bindingHandlers['ntsSortable'].hasOwnProperty(option)) {
                    result[option] = ko.bindingHandlers['ntsSortable'][option];
                }
            });
            //use an afterRender function to add meta-data
            if (dataName === "foreach") {
                if (result.afterRender) {
                    //wrap the existing function, if it was passed
                    actualAfterRender = result.afterRender;
                    result.afterRender = function (element, data) {
                        self.addMetaDataAfterRender.call(data, element, data);
                        actualAfterRender.call(data, element, data);
                    };
                }
                else {
                    result.afterRender = self.addMetaDataAfterRender;
                }
            }
            //return options to pass to the template binding
            return result;
        };
        this.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var self = _this, $element = $(element), value = ko.unwrap(valueAccessor()) || {}, templateOptions = self.prepareTemplateOptions(valueAccessor, "foreach"), sortable = {}, startActual, updateActual;
            self.stripTemplateWhitespace(element, templateOptions.name);
            //build a new object that has the global options with overrides from the binding
            $.extend(true, sortable, ko.bindingHandlers['ntsSortable']);
            if (value.options && sortable.options) {
                ko.utils.extend(sortable.options, value.options);
                delete value.options;
            }
            else {
                sortable.options = sortable.options || {};
                ko.utils.extend(sortable.options, {
                    start: function () { },
                    update: function () { }
                });
            }
            ko.utils.extend(sortable, value);
            //if allowDrop is an observable or a function, then execute it in a computed observable
            if (sortable.connectClass && (ko.isObservable(sortable.allowDrop) || typeof sortable.allowDrop == "function")) {
                ko.computed({
                    read: function () {
                        var value = ko.unwrap(sortable.allowDrop), shouldAdd = typeof value == "function" ? value.call(this, templateOptions.foreach) : value;
                        ko.utils.toggleDomNodeCssClass(element, sortable.connectClass, shouldAdd);
                    },
                    disposeWhenNodeIsRemoved: element
                }, _this);
            }
            else {
                ko.utils.toggleDomNodeCssClass(element, sortable.connectClass, sortable.allowDrop);
            }
            //wrap the template binding
            ko.bindingHandlers.template.init(element, function () {
                return templateOptions;
            }, allBindingsAccessor, viewModel, bindingContext);
            //keep a reference to start/update functions that might have been passed in
            startActual = sortable.options.start;
            updateActual = sortable.options.update;
            //ensure draggable table row cells maintain their width while dragging (unless a helper is provided)
            if (!sortable.options.helper) {
                sortable.options.helper = function (e, ui) {
                    if (ui.is("tr")) {
                        ui.children().each(function () {
                            $(this).width($(this).width());
                        });
                    }
                    return ui;
                };
            }
            //initialize sortable binding after template binding has rendered in update function
            var createTimeout = setTimeout(function () {
                var dragItem;
                var originalReceive = sortable.options.receive;
                $element.sortable(ko.utils.extend(sortable.options, {
                    start: function (event, ui) {
                        //track original index
                        var el = ui.item[0];
                        self.dataSet(el, self.INDEXKEY, ko.utils.arrayIndexOf(ui.item.parent().children(), el));
                        //make sure that fields have a chance to update model
                        ui.item.find("input:focus").change();
                        if (startActual) {
                            startActual.apply(this, arguments);
                        }
                    },
                    receive: function (event, ui) {
                        //optionally apply an existing receive handler
                        if (typeof originalReceive === "function") {
                            originalReceive.call(this, event, ui);
                        }
                        dragItem = self.dataGet(ui.item[0], self.DRAGKEY);
                        if (dragItem) {
                            //copy the model item, if a clone option is provided
                            if (dragItem.clone) {
                                dragItem = dragItem.clone();
                            }
                            //configure a handler to potentially manipulate item before drop
                            if (sortable.dragged) {
                                dragItem = sortable.dragged.call(this, dragItem, event, ui) || dragItem;
                            }
                        }
                    },
                    update: function (event, ui) {
                        var sourceParent, targetParent, sourceIndex, targetIndex, arg, el = ui.item[0], parentEl = ui.item.parent()[0], item = self.dataGet(el, self.ITEMKEY) || dragItem;
                        if (!item) {
                            $(el).remove();
                        }
                        dragItem = null;
                        //make sure that moves only run once, as update fires on multiple containers
                        if (item && (this === parentEl) || (!self.hasNestedSortableFix && $.contains(this, parentEl))) {
                            //identify parents
                            sourceParent = self.dataGet(el, self.PARENTKEY);
                            sourceIndex = self.dataGet(el, self.INDEXKEY);
                            targetParent = self.dataGet(el.parentNode, self.LISTKEY);
                            targetIndex = ko.utils.arrayIndexOf(ui.item.parent().children(), el);
                            //take destroyed items into consideration
                            if (!templateOptions.includeDestroyed) {
                                sourceIndex = self.updateIndexFromDestroyedItems(sourceIndex, sourceParent);
                                targetIndex = self.updateIndexFromDestroyedItems(targetIndex, targetParent);
                            }
                            //build up args for the callbacks
                            if (sortable.beforeMove || sortable.afterMove) {
                                arg = {
                                    item: item,
                                    sourceParent: sourceParent,
                                    sourceParentNode: sourceParent && ui.sender || el.parentNode,
                                    sourceIndex: sourceIndex,
                                    targetParent: targetParent,
                                    targetIndex: targetIndex,
                                    cancelDrop: false
                                };
                                //execute the configured callback prior to actually moving items
                                if (sortable.beforeMove) {
                                    sortable.beforeMove.call(this, arg, event, ui);
                                }
                            }
                            //call cancel on the correct list, so KO can take care of DOM manipulation
                            if (sourceParent) {
                                $(sourceParent === targetParent ? this : ui.sender || this).sortable("cancel");
                            }
                            //for a draggable item just remove the element
                            else {
                                $(el).remove();
                            }
                            //if beforeMove told us to cancel, then we are done
                            if (arg && arg.cancelDrop) {
                                return;
                            }
                            //if the strategy option is unset or false, employ the order strategy involving removal and insertion of items
                            if (!sortable.hasOwnProperty("strategyMove") || sortable.strategyMove === false) {
                                //do the actual move
                                if (targetIndex >= 0) {
                                    if (sourceParent) {
                                        sourceParent.splice(sourceIndex, 1);
                                        //if using deferred updates plugin, force updates
                                        if (ko['processAllDeferredBindingUpdates']) {
                                            ko['processAllDeferredBindingUpdates']();
                                        }
                                        //if using deferred updates on knockout 3.4, force updates
                                        if (ko.options && ko.options.deferUpdates) {
                                            ko.tasks.runEarly();
                                        }
                                    }
                                    targetParent.splice(targetIndex, 0, item);
                                }
                                //rendering is handled by manipulating the observableArray; ignore dropped element
                                self.dataSet(el, self.ITEMKEY, null);
                            }
                            else { //employ the strategy of moving items
                                if (targetIndex >= 0) {
                                    if (sourceParent) {
                                        if (sourceParent !== targetParent) {
                                            // moving from one list to another
                                            sourceParent.splice(sourceIndex, 1);
                                            targetParent.splice(targetIndex, 0, item);
                                            //rendering is handled by manipulating the observableArray; ignore dropped element
                                            self.dataSet(el, self.ITEMKEY, null);
                                            ui.item.remove();
                                        }
                                        else {
                                            // moving within same list
                                            var underlyingList = ko.unwrap(sourceParent);
                                            // notify 'beforeChange' subscribers
                                            if (sourceParent.valueWillMutate) {
                                                sourceParent.valueWillMutate();
                                            }
                                            // move from source index ...
                                            underlyingList.splice(sourceIndex, 1);
                                            // ... to target index
                                            underlyingList.splice(targetIndex, 0, item);
                                            // notify subscribers
                                            if (sourceParent.valueHasMutated) {
                                                sourceParent.valueHasMutated();
                                            }
                                        }
                                    }
                                    else {
                                        // drop new element from outside
                                        targetParent.splice(targetIndex, 0, item);
                                        //rendering is handled by manipulating the observableArray; ignore dropped element
                                        self.dataSet(el, self.ITEMKEY, null);
                                        ui.item.remove();
                                    }
                                }
                            }
                            //if using deferred updates plugin, force updates
                            if (ko['processAllDeferredBindingUpdates']) {
                                ko['processAllDeferredBindingUpdates']();
                            }
                            //allow binding to accept a function to execute after moving the item
                            if (sortable.afterMove) {
                                sortable.afterMove.call(this, arg, event, ui);
                            }
                        }
                        if (updateActual) {
                            updateActual.apply(this, arguments);
                        }
                    },
                    connectWith: sortable.connectClass ? '.' + sortable.connectClass : false
                }));
                //handle enabling/disabling sorting
                if (sortable.isEnabled !== undefined) {
                    ko.computed({
                        read: function () {
                            $element.sortable(ko.unwrap(sortable.isEnabled) ? "enable" : "disable");
                        },
                        disposeWhenNodeIsRemoved: element
                    });
                }
            }, 0);
            //handle disposal
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                //only call destroy if sortable has been created
                if ($element.data("ui-sortable") || $element.data("sortable")) {
                    $element.sortable("destroy");
                }
                ko.utils.toggleDomNodeCssClass(element, sortable.connectClass, false);
                //do not create the sortable if the element has been removed from DOM
                clearTimeout(createTimeout);
            });
            return {
                'controlsDescendantBindings': true
            };
        };
        this.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var self = _this, templateOptions = self.prepareTemplateOptions(valueAccessor, "foreach");
            //attach meta-data
            self.dataSet(element, self.LISTKEY, templateOptions.foreach);
            //call template binding's update with correct options
            ko.bindingHandlers['template'].update(element, function () { return templateOptions; }, allBindingsAccessor, viewModel, bindingContext);
        };
    }
    return NtsSortableBindingHandler;
}());
ko.bindingHandlers["ntsSortable"] = new NtsSortableBindingHandler();
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_34) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Tree binding handler
                 */
                var NtsTreeDragAndDropBindingHandler = /** @class */ (function () {
                    /**
                     * Constructor.
                     */
                    function NtsTreeDragAndDropBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsTreeDragAndDropBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var ROW_HEIGHT = 30;
                        var HEADER_HEIGHT = 24;
                        // Get data.
                        var data = valueAccessor();
                        var options = ko.unwrap(data.dataSource !== undefined ? data.dataSource : data.options);
                        var optionsValue = ko.unwrap(data.primaryKey !== undefined ? data.primaryKey : data.optionsValue);
                        var optionsText = ko.unwrap(data.primaryText !== undefined ? data.primaryText : data.optionsText);
                        var optionsChild = ko.unwrap(data.childDataKey !== undefined ? data.childDataKey : data.optionsChild);
                        var multiple = data.multiple != undefined ? ko.unwrap(data.multiple) : false;
                        var selectedValues = ko.unwrap(data.selectedValues);
                        var singleValue = ko.unwrap(data.value);
                        var rows = ko.unwrap(data.rows);
                        var selectOnParent = data.selectOnParent != undefined ? ko.unwrap(data.selectOnParent) : false;
                        var allowOtherTreeNode = data.receiveOtherTreeNode !== undefined ? ko.unwrap(data.receiveOtherTreeNode) : false;
                        var enable = data.enable !== undefined ? ko.unwrap(data.enable) : true;
                        var height = ko.unwrap(data.height !== undefined ? data.height : 0);
                        var width = ko.unwrap(data.width !== undefined ? data.width : 0);
                        var maxDeepLeaf = ko.unwrap(data.maxDeepLeaf !== undefined ? data.maxDeepLeaf : 10);
                        var maxChildInNode = ko.unwrap(data.maxChildInNode !== undefined ? data.maxChildInNode : 999);
                        var customValidate = data.customValidate;
                        if (!nts.uk.util.isNullOrEmpty(rows)) {
                            height = rows * ROW_HEIGHT;
                        }
                        $(element).addClass("ig-tree-background");
                        var $tree = $(element);
                        $tree.data("dataSource", _.cloneDeep(options));
                        //            let template = "{{if ${"+optionsValue+"}.indexOf('1') >= 0}} <img src='http://igniteui.com/images/samples/tree/book.png'>" +
                        //                " {{elseif ${"+optionsValue+"}.indexOf('2') >= 0}}<img src='http://igniteui.com/images/samples/tree/coins.png'>" +
                        //                "{{else}}<img src='http://igniteui.com/images/samples/tree/documents-folder.png'/>{{/if}}${"+optionsValue+"}"
                        // Init ig grid.
                        $tree.igTree({
                            width: width,
                            height: height,
                            dataSource: _.cloneDeep(options),
                            initialExpandDepth: 0,
                            tabIndex: -1,
                            checkboxMode: !multiple ? "off" : selectOnParent ? "triState" : "biState",
                            singleBranchExpand: false,
                            pathSeparator: '_',
                            bindings: {
                                textKey: optionsText,
                                valueKey: optionsValue,
                                childDataProperty: optionsChild
                                //                    ,nodeContentTemplate: template
                            },
                            dragAndDrop: true,
                            dragAndDropSettings: {
                                allowDrop: allowOtherTreeNode,
                                customDropValidation: function (element) {
                                    var dragInfor = $tree.data("dragInfor");
                                    var mousePosition = $tree.data("mousePosition");
                                    // Validates the drop target
                                    var droppableNode = $(this);
                                    if (droppableNode.prop("tagName").toLowerCase() !== "li") {
                                        droppableNode = droppableNode.closest("li");
                                    }
                                    var isOutTarget = mousePosition.top < droppableNode.offset().top
                                        || mousePosition.top > droppableNode.offset().top + droppableNode.height();
                                    var dragParent = $tree.igTree("parentNode", element);
                                    var targetParent = $tree.igTree("parentNode", droppableNode);
                                    var targetNode = $tree.igTree("nodeFromElement", droppableNode);
                                    if (!isOutTarget) {
                                        if (!nts.uk.util.isNullOrEmpty(targetNode.path)) {
                                            var targetDeep = (targetNode.path.match(/_/g) || []).length;
                                            if (targetDeep + 1 >= maxDeepLeaf) {
                                                return false;
                                            }
                                        }
                                        else {
                                            return false;
                                        }
                                        var targetNodeChildren = $tree.igTree("children", droppableNode);
                                        if (targetNodeChildren.length >= maxChildInNode) {
                                            return false;
                                        }
                                    }
                                    else if (targetParent !== null && !targetParent.is(dragParent)) {
                                        targetNode = $tree.igTree("nodeFromElement", targetParent);
                                        if (!nts.uk.util.isNullOrEmpty(targetNode.path)) {
                                            var targetDeep = (targetNode.path.match(/_/g) || []).length;
                                            if (targetDeep + 1 >= maxDeepLeaf) {
                                                return false;
                                            }
                                        }
                                        else {
                                            return false;
                                        }
                                        var targetNodeChildren = $tree.igTree("children", targetParent);
                                        if (targetNodeChildren.length >= maxChildInNode) {
                                            return false;
                                        }
                                    }
                                    var customValidateResult = nts.uk.util.isNullOrUndefined(customValidate) ? true : customValidate();
                                    if (customValidateResult === false) {
                                        return false;
                                    }
                                    return true;
                                }
                            },
                            dragStart: function (evt, ui) {
                                $tree.data("dragInfor", {
                                    helper: ui.helper,
                                    targetNodePath: ui.path,
                                    mousePosition: ui.position
                                });
                            },
                            selectionChanged: function (evt, ui) {
                                if (ko.unwrap(data.multiple)) {
                                    if (ko.isObservable(data.selectedValues)) {
                                        var selectedNodes = $tree.igTree("checkedNodes");
                                        var checkedNodes = _.map(selectedNodes, function (s) {
                                            return s.data[optionsValue];
                                        });
                                        if (ui.selectedNodes.length > 0) {
                                            checkedNodes.push(ui.selectedNodes[0].data[optionsValue]);
                                        }
                                        data.selectedValues(_.uniq(checkedNodes));
                                    }
                                }
                                else {
                                    if (ko.isObservable(data.value)) {
                                        var selectedRows = ui.selectedNodes;
                                        data.value(selectedRows.length <= 0 ? undefined : selectedRows[0].data[optionsValue]);
                                    }
                                }
                            },
                            nodeCheckstateChanged: function (evt, ui) {
                                if (ko.isObservable(data.selectedValues)) {
                                    if (ko.isObservable(data.selectedValues)) {
                                        var selectedNodes = $tree.igTree("checkedNodes");
                                        data.selectedValues(_.map(selectedNodes, function (s) {
                                            return s.data[optionsValue];
                                        }));
                                    }
                                }
                            }
                        });
                        $tree.mousemove(function (event) {
                            var pageCoords = { top: event.pageY, left: event.pageX };
                            $tree.data("mousePosition", pageCoords);
                        });
                        $tree.setupSearchScroll("igTree");
                        $tree.bind("sourcechanging", function (evt) {
                            var source = $tree.igTree("option", "dataSource").__ds;
                            if (_.isNil(data.dataSource)) {
                                data.options(source);
                            }
                            else {
                                data.dataSource(source);
                            }
                        });
                    };
                    /**
                     * Update
                     */
                    NtsTreeDragAndDropBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var options = ko.unwrap(data.dataSource !== undefined ? data.dataSource : data.options);
                        var selectedValues = ko.unwrap(data.selectedValues);
                        var singleValue = ko.unwrap(data.value);
                        var $tree = $(element);
                        var multiple = data.multiple != undefined ? ko.unwrap(data.multiple) : false;
                        // Update datasource.
                        var originalSource = $tree.data("dataSource");
                        if (!_.isEqual(originalSource, options)) {
                            $tree.data("dataSource", _.cloneDeep(options));
                            $tree.igTree("option", "dataSource", _.cloneDeep(options));
                            $tree.igTree("dataBind");
                        }
                        // Clear selection.
                        if (nts.uk.util.isNullOrEmpty(selectedValues) && nts.uk.util.isNullOrUndefined(singleValue)) {
                            $tree.ntsTreeDrag("deselectAll");
                            $tree.find("a").removeClass("ui-state-active");
                        }
                        else {
                            if (multiple) {
                                $tree.find("a").removeClass("ui-state-active");
                                selectedValues.forEach(function (val) {
                                    var $node = $tree.igTree("nodesByValue", val);
                                    if ($node.length > 0) {
                                        $node.find("a:first").addClass("ui-state-active");
                                        var $checkbox = $node.find("span[data-role=checkbox]:first").find(".ui-icon-check");
                                        if ($node.length > 0 && $tree.igTree("checkState", $node) === "off") {
                                            $tree.igTree("toggleCheckstate", $node);
                                        }
                                        $tree.igTree("expandToNode", $node);
                                    }
                                });
                                if (selectedValues.length > 0) {
                                    var lastV = $tree.data("values");
                                    if (!_.isNil(lastV)) {
                                        var newV = _.difference(selectedValues, lastV), scrollTo = newV.length === 0 ? selectedValues[0] : newV[0], $selectingNode = $tree.igTree("nodesByValue", scrollTo);
                                        if ($selectingNode.length > 0) {
                                            setTimeout(function () { $tree[0].scrollTop = $tree.ntsTreeDrag("getPosition", $selectingNode); }, 100);
                                        }
                                    }
                                    $tree.data("values", selectedValues);
                                }
                            }
                            else {
                                $tree.igTree("clearSelection");
                                var $selectingNode = $tree.igTree("nodesByValue", singleValue);
                                if ($selectingNode.length > 0) {
                                    $tree.igTree("select", $selectingNode);
                                    $tree.igTree("expandToNode", $selectingNode);
                                    setTimeout(function () { $tree[0].scrollTop = $tree.ntsTreeDrag("getPosition", $selectingNode); }, 100);
                                }
                            }
                        }
                    };
                    return NtsTreeDragAndDropBindingHandler;
                }());
                ko.bindingHandlers['ntsTreeDragAndDrop'] = new NtsTreeDragAndDropBindingHandler();
            })(koExtentions = ui_34.koExtentions || (ui_34.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var guide;
            (function (guide) {
                var ROW_HEIGHT = 20;
                var resource;
                (function (resource) {
                    resource.linkHide = "操作ガイド　非表示";
                    resource.linkShow = "操作ガイド　表示";
                })(resource || (resource = {}));
                function operateCurrent(path, data, page) {
                    operate.apply(null, _.concat(nts.uk.request.location.currentAppId, arguments));
                }
                guide.operateCurrent = operateCurrent;
                function operate(appId, path, data, tabMapping, page) {
                    nts.uk.request.ajax(appId, path, data).done(function (config) {
                        if (_.isFunction(tabMapping) && _.isArray(config)) {
                            _.forEach(config, function (c) {
                                c.tabId = tabMapping(c.programId, c.screenId);
                            });
                        }
                        var op = new OperationGuide(config);
                        op.setPosition(page);
                    });
                }
                guide.operate = operate;
                var OperationGuide = /** @class */ (function () {
                    function OperationGuide(config) {
                        this.configs = [];
                        if (_.isArray(config)) {
                            this.configs = config;
                            return;
                        }
                        this.configs.push(config);
                    }
                    OperationGuide.prototype.link = function (top, tabConfig) {
                        var self = this;
                        tabConfig.display = true;
                        var $link = $("<a/>").addClass("nts-guide-link").text(resource.linkHide);
                        $link.css("margin-top", top);
                        $link.on("click", function () {
                            var $guideArea;
                            if (!_.isNil(tabConfig.tabId)) {
                                var $tabPanel = $link.closest("div[role=tabpanel]");
                                $guideArea = $tabPanel.find(".nts-guide-area");
                            }
                            else {
                                $guideArea = $(".nts-guide-area");
                            }
                            if (tabConfig.display) {
                                $link.text(resource.linkShow);
                                $guideArea.hide();
                                tabConfig.display = !tabConfig.display;
                                return;
                            }
                            $link.text(resource.linkHide);
                            $guideArea.show();
                            tabConfig.display = !tabConfig.display;
                        });
                        return $link;
                    };
                    OperationGuide.prototype.textArea = function (tabConfig, position) {
                        var self = this;
                        var $area = $("<div/>").addClass("nts-guide-area");
                        if (position === Position.BOTTOM) {
                            $area.addClass("nts-bottom");
                        }
                        $area.height(ROW_HEIGHT * tabConfig.lineCount);
                        var content = tabConfig.content.split('\n').join("<br/>");
                        $area.html(content);
                        return $area;
                    };
                    OperationGuide.prototype.setPosition = function (page) {
                        var self = this;
                        switch (page) {
                            case Page.NORMAL:
                            default:
                                var $functionsArea = $("#functions-area");
                                if ($functionsArea.length == 0) {
                                    $functionsArea = $("#functions-area-bottom");
                                    if ($functionsArea.find(".nts-guide-link").length == 0) {
                                        var top = ($functionsArea.height() - 24) / 2;
                                        $functionsArea.append(self.link(top, self.configs[0]));
                                    }
                                    if (!$functionsArea.prev().is(".nts-guide-area")) {
                                        $functionsArea.before(self.textArea(self.configs[0], Position.BOTTOM));
                                    }
                                    return;
                                }
                                if ($functionsArea.find(".nts-guide-link").length == 0) {
                                    var top = ($functionsArea.height() - 22) / 2;
                                    $functionsArea.append(self.link(top, self.configs[0]));
                                }
                                if (!$functionsArea.next().is(".nts-guide-area")) {
                                    $functionsArea.after(self.textArea(self.configs[0]));
                                }
                                break;
                            case Page.SIDEBAR:
                                _.forEach(self.configs, function (tabConfig) {
                                    var $tab = $("#" + tabConfig.tabId);
                                    var $contentHeader = $tab.find(".sidebar-content-header");
                                    if ($contentHeader.find(".nts-guide-link").length == 0) {
                                        var top = ($contentHeader.height() - 18) / 2;
                                        $contentHeader.append(self.link(top, tabConfig));
                                    }
                                    if (!$contentHeader.next().is(".nts-guide-area")) {
                                        $contentHeader.after(self.textArea(tabConfig));
                                    }
                                });
                                break;
                            case Page.FREE_LAYOUT:
                                break;
                        }
                    };
                    return OperationGuide;
                }());
                var GuideConfig = /** @class */ (function () {
                    function GuideConfig(tabId, isUsed, display, lineCount, content) {
                        this.tabId = tabId;
                        this.isUsed = isUsed;
                        this.display = display;
                        this.lineCount = lineCount;
                        this.content = content;
                    }
                    return GuideConfig;
                }());
                var Page;
                (function (Page) {
                    Page[Page["NORMAL"] = 0] = "NORMAL";
                    Page[Page["SIDEBAR"] = 1] = "SIDEBAR";
                    Page[Page["FREE_LAYOUT"] = 2] = "FREE_LAYOUT";
                })(Page || (Page = {}));
                var Position;
                (function (Position) {
                    Position[Position["TOP"] = 0] = "TOP";
                    Position[Position["BOTTOM"] = 1] = "BOTTOM";
                })(Position || (Position = {}));
            })(guide = ui.guide || (ui.guide = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var sharedvm;
            (function (sharedvm) {
                var KibanTimer = /** @class */ (function () {
                    function KibanTimer(target, timeUnit) {
                        var self = this;
                        self.elapsedSeconds = 0;
                        self.formatted = ko.observable(uk.time.formatSeconds(this.elapsedSeconds, 'hh:mm:ss'));
                        self.targetComponent = target;
                        self.isTimerStart = ko.observable(false);
                        self.oldDated = ko.observable(undefined);
                        self.timeUnit = nts.uk.util.isNullOrUndefined(timeUnit) ? 1000 : timeUnit;
                        document.getElementById(self.targetComponent).innerHTML = self.formatted();
                    }
                    KibanTimer.prototype.run = function (timer) {
                        var x = new Date().getTime() - timer.oldDated().getTime();
                        x = Math.floor(x / 1000);
                        timer.elapsedSeconds = x;
                        document.getElementById(timer.targetComponent).innerHTML
                            = uk.time.formatSeconds(x, 'hh:mm:ss');
                    };
                    KibanTimer.prototype.start = function () {
                        var self = this;
                        if (!self.isTimerStart()) {
                            self.oldDated(new Date());
                            self.isTimerStart(true);
                            self.interval = setInterval(self.run, self.timeUnit, self);
                        }
                    };
                    KibanTimer.prototype.end = function () {
                        var self = this;
                        if (self.isTimerStart()) {
                            self.oldDated(undefined);
                            self.isTimerStart(false);
                            clearInterval(self.interval);
                        }
                    };
                    return KibanTimer;
                }());
                sharedvm.KibanTimer = KibanTimer;
            })(sharedvm = ui.sharedvm || (ui.sharedvm = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="./viewcontext.d.ts" />
var prefix = 'nts.uk.storage', OPENWD = 'OPEN_WINDOWS_DATA', _a = nts.uk, ui = _a.ui, request = _a.request, resource = _a.resource, windows = ui.windows, block = ui.block, dialog = ui.dialog, $storeSession = function (name, params) {
    if (arguments.length === 2) {
        // setter method
        var $value = JSON.stringify({ $value: params }), $saveValue_1 = btoa(_.map($value, function (s) { return s.charCodeAt(0); }).join('-'));
        return $.Deferred().resolve()
            .then(function () {
            nts.uk.localStorage.setItem(prefix + "." + name, $saveValue_1);
        })
            .then(function () { return $storeSession(name); });
    }
    else if (arguments.length === 1) {
        // getter method
        return $.Deferred().resolve()
            .then(function () {
            var $result = nts.uk.localStorage.getItem(prefix + "." + name);
            if ($result.isPresent()) {
                var $string = atob($result.value)
                    .split('-').map(function (s) { return String.fromCharCode(Number(s)); })
                    .join('');
                return JSON.parse($string).$value;
            }
            return windows.getShared(name);
        });
    }
}, $storage = function ($data) {
    if (arguments.length === 1) {
        return $storeSession(OPENWD, $data);
    }
    else if (arguments.length === 0) {
        return $.Deferred().resolve()
            .then(function () { return $storeSession(OPENWD); })
            .then(function (value) {
            nts.uk.localStorage.removeItem(prefix + "." + OPENWD);
            return value;
        });
    }
};
/** Create new ViewModel and automatic binding to __viewContext */
function bean(dialogOption) {
    return function (ctor) {
        __viewContext.ready(function () {
            $storage().then(function ($params) {
                var $viewModel = new ctor($params), $created = $viewModel['created'];
                // hook to created function
                if ($created && _.isFunction($created)) {
                    $created.apply($viewModel, [$params]);
                }
                // hook to mounted function
                $viewModel.$nextTick(function () {
                    var $mounted = $viewModel['mounted'];
                    _.extend($viewModel, { $el: document.querySelector('#master-wrapper') });
                    if ($mounted && _.isFunction($mounted)) {
                        $mounted.apply($viewModel, []);
                    }
                });
                __viewContext.bind($viewModel, dialogOption);
            });
        });
    };
}
function component(options) {
    return function (ctor) {
        return $.Deferred().resolve(options.template.match(/\.html$/))
            .then(function (url) {
            return url ? $.get(options.template) : options.template;
        })
            .then(function (template) {
            if (!ko.components.isRegistered(options.name)) {
                ko.components.register(options.name, {
                    template: template,
                    viewModel: {
                        createViewModel: function ($params, $el) {
                            var $viewModel = new ctor($params), $created = $viewModel['created'];
                            // hook to created function
                            if ($created && _.isFunction($created)) {
                                $created.apply($viewModel, [$params]);
                            }
                            // hook to mounted function
                            $viewModel.$nextTick(function () {
                                var $mounted = $viewModel['mounted'];
                                _.extend($viewModel, { $el: $el.element });
                                if ($mounted && _.isFunction($mounted)) {
                                    $mounted.apply($viewModel, []);
                                }
                            });
                            Object.defineProperty($viewModel, 'dispose', {
                                value: function dispose() {
                                    if (typeof $viewModel.destroyed === 'function') {
                                        $viewModel.destroyed.apply($viewModel, []);
                                    }
                                }
                            });
                            return $viewModel;
                        }
                    }
                });
            }
        });
    };
}
function handler(params) {
    return function (constructor) {
        var _a;
        ko.bindingHandlers[params.bindingName] = new constructor();
        ko.virtualElements.allowedBindings[params.bindingName] = !!params.virtual;
        // block rewrite binding
        if (params.validatable) {
            ko.utils.extend(ko.expressionRewriting.bindingRewriteValidators, (_a = {}, _a[params.bindingName] = false, _a));
        }
    };
}
// create base viewmodel for all implement
function BaseViewModel() { }
function $i18n(text, params) {
    return resource.getText(text, params);
}
function $jump() {
    var args = Array.prototype.slice.apply(arguments), params = args.length === 3 && _.isString(args[0]) && _.isString(args[1]) ? args[2] :
        (args.length == 2 && _.indexOf(args[1], '.xhtml')) > -1 ? null : args[1];
    if (window.top === window.self) {
        $storage(params).then(function () { return request.jump.apply(null, args); });
    }
    else {
        // jump from dialog or frame
        $storage(params).then(function () { return request.jumpFromDialogOrFrame.apply(null, args); });
    }
}
;
BaseViewModel.prototype.$i18n = $i18n;
Object.defineProperties($i18n, {
    text: {
        value: $i18n
    },
    message: {
        value: resource.getMessage
    },
    controlName: {
        value: resource.getControlName
    }
});
BaseViewModel.prototype.$ajax = request.ajax;
BaseViewModel.prototype.$nextTick = ko.tasks.schedule;
BaseViewModel.prototype.$user = __viewContext['user'];
BaseViewModel.prototype.$program = __viewContext['program'];
var $date = {
    diff: 0,
    tick: -1,
    now: function () {
        return Date.now();
    },
    today: function () {
        return $date.now();
    }
};
var getTime = function () {
    request.ajax('/server/time/now').then(function (time) {
        _.extend($date, {
            diff: moment(time, 'YYYY-MM-DDTHH:mm:ss').diff(moment())
        });
    });
};
// get date time now
getTime();
BaseViewModel.prototype.$date = Object.defineProperties($date, {
    now: {
        value: function $now() {
            return moment().add($date.diff, 'ms').toDate();
        }
    },
    today: {
        value: function $today() {
            return moment($date.now()).startOf('day').toDate();
        }
    },
    interval: {
        value: function $interval(interval) {
            // clear default intervale
            clearInterval($date.tick);
            // set new interface
            $date.tick = setInterval(getTime, interval);
        }
    }
});
BaseViewModel.prototype.$dialog = Object.defineProperties({}, {
    info: {
        value: function $info() {
            var dfd = $.Deferred();
            var args = Array.prototype.slice.apply(arguments);
            dialog.info.apply(null, args).then(function () { return dfd.resolve(); });
            return dfd.promise();
        }
    },
    alert: {
        value: function $alert() {
            var dfd = $.Deferred();
            var args = Array.prototype.slice.apply(arguments);
            dialog.alert.apply(null, args).then(function () { return dfd.resolve(); });
            return dfd.promise();
        }
    },
    error: {
        value: function $error() {
            var dfd = $.Deferred();
            var args = Array.prototype.slice.apply(arguments);
            dialog.error.apply(null, args).then(function () { return dfd.resolve(); });
            return dfd.promise();
        }
    },
    confirm: {
        value: function $confirm() {
            var dfd = $.Deferred();
            var args = Array.prototype.slice.apply(arguments);
            var $cf = dialog.confirm.apply(null, args);
            $cf.ifYes(function () {
                dfd.resolve('yes');
            });
            $cf.ifNo(function () {
                dfd.resolve('no');
            });
            $cf.ifCancel(function () {
                dfd.resolve('cancel');
            });
            return dfd.promise();
        }
    }
});
BaseViewModel.prototype.$jump = $jump;
Object.defineProperties($jump, {
    self: {
        value: function $to() {
            $jump.apply(null, __spreadArrays(Array.prototype.slice.apply(arguments, [])));
        }
    },
    blank: {
        value: function $other() {
            var args = Array.prototype.slice.apply(arguments, []), params = args.length === 3 && _.isString(args[0]) && _.isString(args[1]) ? args[2] :
                (args.length == 2 && _.indexOf(args[1], '.xhtml')) > -1 ? null : args[1];
            $storage(params).then(function () { return request.jumpToNewWindow.apply(null, args); });
        }
    }
});
var $size = function (height, width) {
    var wd = nts.uk.ui.windows.getSelf();
    if (wd) {
        wd.setSize(height, width);
    }
};
Object.defineProperties($size, {
    width: {
        value: function (width) {
            var wd = nts.uk.ui.windows.getSelf();
            if (wd) {
                wd.setWidth(width);
            }
        }
    },
    height: {
        value: function (height) {
            var wd = nts.uk.ui.windows.getSelf();
            if (wd) {
                wd.setHeight(height);
            }
        }
    }
});
BaseViewModel.prototype.$window = Object.defineProperties({}, {
    size: {
        value: $size
    },
    close: {
        value: function $close(result) {
            if (window.top !== window) {
                $.Deferred().resolve()
                    .then(function () { return $storage(result); })
                    .then(function () { return windows.close(); });
            }
        }
    },
    modal: {
        value: function $modal(webapp, path, params) {
            var jdf = $.Deferred();
            var nowapp = ['at', 'pr', 'hr', 'com'].indexOf(webapp) === -1;
            if (nowapp) {
                $storage(path).then(function () {
                    windows.sub.modal(webapp)
                        .onClosed(function () {
                        var localShared = windows.container.localShared;
                        _.each(localShared, function (value, key) {
                            windows.setShared(key, value);
                        });
                        $storage().then(function ($data) {
                            jdf.resolve($data);
                        });
                    });
                });
            }
            else {
                $storage(params).then(function () {
                    windows.sub.modal(webapp, path)
                        .onClosed(function () {
                        var localShared = windows.container.localShared;
                        _.each(localShared, function (value, key) {
                            windows.setShared(key, value);
                        });
                        $storage().then(function ($data) {
                            jdf.resolve($data);
                        });
                    });
                });
            }
            return jdf.promise();
        }
    },
    modeless: {
        value: function $modeless(webapp, path, params) {
            var jdf = $.Deferred();
            var nowapp = ['at', 'pr', 'hr', 'com'].indexOf(webapp) === -1;
            if (nowapp) {
                $storage(path).then(function () {
                    windows.sub.modeless(webapp)
                        .onClosed(function () {
                        var localShared = windows.container.localShared;
                        _.each(localShared, function (value, key) {
                            windows.setShared(key, value);
                        });
                        $storage().then(function ($data) {
                            jdf.resolve($data);
                        });
                    });
                });
            }
            else {
                $storage(params).then(function () {
                    windows.sub.modeless(webapp, path)
                        .onClosed(function () {
                        var localShared = windows.container.localShared;
                        _.each(localShared, function (value, key) {
                            windows.setShared(key, value);
                        });
                        $storage().then(function ($data) {
                            jdf.resolve($data);
                        });
                    });
                });
            }
            return jdf.promise();
        }
    },
    storage: {
        value: function $storage(name, params) {
            if (arguments.length == 1) {
                return $storeSession(name);
            }
            else {
                return $.Deferred().resolve()
                    .then(function () {
                    $storeSession(name, params);
                    // for old page
                    windows.setShared(name, params);
                })
                    .then(function () { return $storeSession(name); });
            }
        }
    }
});
// Hàm blockui được wrapper lại để gọi cho thống nhất
BaseViewModel.prototype.$blockui = function $blockui(act) {
    return $.Deferred().resolve()
        .then(function () {
        switch (act) {
            default:
            case 'hide':
            case 'clear':
                block.clear();
                break;
            case 'show':
            case 'invisible':
                block.invisible();
                break;
            case 'grayout':
                block.grayout();
                break;
        }
    });
};
BaseViewModel.prototype.$errors = function $errors() {
    var args = Array.prototype.slice.apply(arguments);
    if (args.length == 1) {
        // if action is clear, call validate clear action
        if (args[0] === 'clear') {
            return $.Deferred().resolve()
                .then(function () { return $('.nts-input').ntsError('clear'); })
                .then(function () { return !$('.nts-input').ntsError('hasError'); });
        }
        else {
            var errors_3 = args[0];
            return $.Deferred().resolve()
                .then(function () {
                _.each(errors_3, function (value, key) { return $(key).ntsError('set', value); });
            })
                .then(function () { return !$(_.keys(errors_3).join(', ')).ntsError('hasError'); });
        }
    }
    else if (args.length === 2) {
        var name_1 = args[0], messageId_1 = args[1];
        if (name_1 === 'clear') {
            if (_.isString(messageId_1)) {
                var $selector_1 = messageId_1;
                return $.Deferred().resolve()
                    .then(function () { return $($selector_1).ntsError('clear'); })
                    .then(function () { return !$($selector_1).ntsError('hasError'); });
            }
            else if (_.isArray(messageId_1)) {
                var $selectors_1 = messageId_1.join(', ');
                return $.Deferred().resolve()
                    .then(function () { return $($selectors_1).ntsError('clear'); })
                    .then(function () { return !$($selectors_1).ntsError('hasError'); });
            }
        }
        else {
            if (_.isString(messageId_1)) {
                return $.Deferred().resolve()
                    .then(function () { return $(name_1).ntsError('set', { messageId: messageId_1 }); })
                    .then(function () { return !$(name_1).ntsError('hasError'); });
            }
            else {
                return $.Deferred().resolve()
                    .then(function () { return $(name_1).ntsError('set', messageId_1); })
                    .then(function () { return !$(name_1).ntsError('hasError'); });
            }
        }
    }
    else if (args.length > 2) {
        if (args[0] === 'clear') {
            var $selectors_2 = args.join(', ').replace(/^clear ,/, '');
            return $.Deferred().resolve()
                .then(function () { return $($selectors_2).ntsError('clear'); })
                .then(function () { return !$($selectors_2).ntsError('hasError'); });
        }
    }
    return $.Deferred().resolve()
        /** Nếu có lỗi thì trả về false, không thì true */
        .then(function () { return !$('.nts-input').ntsError('hasError'); });
    ;
};
// Hàm validate được wrapper lại để có thể thực hiện promisse
var $validate = function $validate(act) {
    var args = Array.prototype.slice.apply(arguments);
    if (args.length === 0) {
        return $.Deferred().resolve()
            /** Gọi xử lý validate của kiban */
            .then(function () { return $('.nts-input').trigger("validate"); })
            /** Nếu có lỗi thì trả về false, không thì true */
            .then(function () { return !$('.nts-input').ntsError('hasError'); });
    }
    else if (args.length === 1) {
        var selectors_1 = '';
        if (_.isString(act)) {
            selectors_1 = act;
        }
        else if (_.isArray(act)) {
            selectors_1 = act.join(', ');
        }
        return $.Deferred().resolve()
            /** Gọi xử lý validate của kiban */
            .then(function () { return $(selectors_1).trigger("validate"); })
            /** Nếu có lỗi thì trả về false, không thì true */
            .then(function () { return !$(selectors_1).ntsError('hasError'); });
    }
    else {
        var selectors_2 = args.join(', ');
        return $.Deferred().resolve()
            /** Gọi xử lý validate của kiban */
            .then(function () { return $(selectors_2).trigger("validate"); })
            /** Nếu có lỗi thì trả về false, không thì true */
            .then(function () { return !$(selectors_2).ntsError('hasError'); });
    }
};
Object.defineProperty($validate, "constraint", {
    value: function $constraint(name, value) {
        if (arguments.length === 0) {
            return $.Deferred().resolve()
                .then(function () { return __viewContext.primitiveValueConstraints; });
        }
        else if (arguments.length === 1) {
            return $.Deferred().resolve()
                .then(function () { return _.get(__viewContext.primitiveValueConstraints, name); });
        }
        else {
            return $.Deferred().resolve()
                .then(function () { return ui.validation.writeConstraint(name, value); });
        }
    }
});
BaseViewModel.prototype.$validate = $validate;
Object.defineProperty(ko, 'ViewModel', { value: BaseViewModel });
var I18nBindingHandler = /** @class */ (function () {
    function I18nBindingHandler() {
    }
    I18nBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor) {
        var msg = ko.unwrap(valueAccessor());
        var params = ko.unwrap(allBindingsAccessor.get('params'));
        $(element).text(nts.uk.resource.getText(msg, params));
    };
    I18nBindingHandler = __decorate([
        handler({
            bindingName: 'i18n',
            validatable: true,
            virtual: false
        })
    ], I18nBindingHandler);
    return I18nBindingHandler;
}());
var IconBindingHandler = /** @class */ (function () {
    function IconBindingHandler() {
    }
    IconBindingHandler.prototype.update = function (el, value) {
        ko.computed(function () {
            var numb = ko.toJS(value());
            var url = "/nts.uk.com.js.web/lib/nittsu/ui/style/stylesheets/images/icons/numbered/" + numb + ".png";
            $.get(url)
                .then(function () {
                $(el).css({
                    'background-image': "url('" + url + "')",
                    'background-repeat': 'no-repeat',
                    'background-position': 'center'
                });
            });
        });
    };
    IconBindingHandler = __decorate([
        handler({
            bindingName: 'icon',
            validatable: true,
            virtual: false
        })
    ], IconBindingHandler);
    return IconBindingHandler;
}());
var DateBindingHandler = /** @class */ (function () {
    function DateBindingHandler() {
    }
    DateBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor) {
        var date = ko.unwrap(valueAccessor());
        var format = ko.unwrap(allBindingsAccessor.get('format')) || 'YYYY/MM/DD';
        $(element).text(moment(date).format(format));
    };
    DateBindingHandler = __decorate([
        handler({
            bindingName: 'date',
            validatable: true,
            virtual: false
        })
    ], DateBindingHandler);
    return DateBindingHandler;
}());
//# sourceMappingURL=nts.uk.com.web.nittsu.bundles.js.map